////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с рабочим календарем.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует структуру настроек отображения планировщика.
//
Функция ПолучитьНастройкиОтображения() Экспорт
	
	НастройкиОтображения = Новый Структура;
	
	// Отображаемая дата
	ОтображаемаяДата = НачалоДня(ТекущаяДата());
	НастройкиОтображения.Вставить(
		"ОтображаемаяДата",
		ОтображаемаяДата);
	
	// Исполнители
	Календари = Новый Массив;
	НастройкиОтображения.Вставить(
		"Календари",
		Календари);
		
	// Выделенные даты
	ВыделенныеДаты = Новый Массив;
	ВыделенныеДаты.Добавить(ОтображаемаяДата);
	НастройкиОтображения.Вставить(
		"ВыделенныеДаты",
		ВыделенныеДаты);
	
	// Использовать напоминания
	НастройкиОтображения.Вставить(
		"ИспользоватьНапоминания",
		ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя"));
	
	// Настройка отображения времени элементов и 
	НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
	НастройкиОтображения.Вставить(
		"НастройкаОтображениеВремениЭлементов",
		НастройкаОтображениеВремениЭлементов);
	
	// Отключено отображение времени
	НастройкиОтображения.Вставить(
		"ОтключеноОтображениеВремени",
		НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать);
	
	// Цвет календаря подпись
	НастройкиОтображения.Вставить("ЦветКалендаряПодпись", ЦветаСтиля.ЦветКалендаряПодпись);
	
	// Цвет календаря фон шапки
	НастройкиОтображения.Вставить("ЦветКалендаряФонШапки", ЦветаСтиля.ЦветКалендаряФонШапки);
	
	// Отображать время с
	НастройкиОтображения.Вставить("ОтображатьВремяС", 0);
	
	// Отображать время по
	НастройкиОтображения.Вставить("ОтображатьВремяПо", 0);
	
	НастройкиРабочегоДня = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
		"Отображение",
		Неопределено
	);
	
	Если НастройкиРабочегоДня <> Неопределено Тогда
		НастройкиОтображения.ОтображатьВремяС = НастройкиРабочегоДня.НачалоРабочегоДня;
		НастройкиОтображения.ОтображатьВремяПо = ?(НастройкиРабочегоДня.ОкончаниеРабочегоДня = 0, 0, 24 - НастройкиРабочегоДня.ОкончаниеРабочегоДня);
	КонецЕсли;
	
	
	// Размер ячейки времени
	НастройкиОтображения.Вставить("РазмерЯчейкиВремени", 10);
	
	// Цвет фона текущего дня.
	НастройкиОтображения.Вставить(
		"ЦветФонаТекущегоДня",
		ЦветаСтиля.ЦветКалендаряФонТекущегоДня);
	
	// Цвет пустого фона.
	НастройкиОтображения.Вставить(
		"ЦветКалендаряДоступноеВремя",
		ЦветаСтиля.ЦветКалендаряДоступноеВремя);
	
	// Цвет текущей записи.
	НастройкиОтображения.Вставить(
		"ЦветКалендаряТекущаяЗапись",
		ЦветаСтиля.ЦветКалендаряТекущаяЗапись);
	
	// Цвет рамки текущей записи.
	НастройкиОтображения.Вставить(
		"ЦветРамкиТекущаяЗапись", ЦветаСтиля.РамкаКалендаряТекущаяЗапись);
	
	// Отобразить текущую запись.
	НастройкиОтображения.Вставить(
		"ОтобразитьТекущуюЗапись",
		Ложь);
	
	// Ссылка текущей записи.
	НастройкиОтображения.Вставить(
		"ТекущаяЗаписьСсылка",
		Справочники.ЗаписиКалендаряСотрудника.ПустаяСсылка());
	
	// Дата начала текущей записи.
	НастройкиОтображения.Вставить(
		"ТекущаяЗаписьДатаНачала",
		Дата(1,1,1));
	
	// Дата окончания текущей записи.
	НастройкиОтображения.Вставить(
		"ТекущаяЗаписьДатаОкончания",
		Дата(1,1,1));
	
	// Номер строки текущей записи.
	НастройкиОтображения.Вставить(
		"НомерСтрокиТекущейЗаписи",
		1);
	
	// Запрет создания.
	НастройкиОтображения.Вставить(
		"ЗапретСоздания",
		Ложь);
	
	// Запрет изменения.
	НастройкиОтображения.Вставить(
		"ЗапретИзменения",
		Ложь);
	
	Возврат НастройкиОтображения;
	
КонецФункции

// Процедура отображает события пользователя в календарь на указанный период
Процедура ОтобразитьКалендарь(Планировщик, НастройкиОтображения) Экспорт
	
	ЗагрузитьДанныеПланировщика(Планировщик, НастройкиОтображения);
	Если НастройкиОтображения.ОтобразитьТекущуюЗапись Тогда
		РаботаСКалендаремКлиентСервер.ОтобразитьТекущуюЗапись(
			Планировщик,
			НастройкиОтображения);
	КонецЕсли;
	
	РаботаСКалендаремКлиентСервер.ПрименитьНастройкиОтображения(Планировщик, НастройкиОтображения);
	
КонецПроцедуры

// Загружает данные планировщика.
//
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
Процедура ЗагрузитьДанныеПланировщика(Планировщик, НастройкиОтображения)
	
	Планировщик.Элементы.Очистить();
	Планировщик.ИнтервалыФона.Очистить();
	Планировщик.НачалоПериодаОтображения = Неопределено;
	Планировщик.КонецПериодаОтображения = Неопределено;
	
	ВыделенныеДаты = РаботаСКалендаремКлиентСервер.ПолучитьВыделенныеДаты(НастройкиОтображения);
	
	// Получение отображаемых данных
	СобытияПоЧасам = СформироватьТаблицуСобытий();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		ОтображаемаяДатаНачала = НачалоДня(ВыделеннаяДата);
		Если ЗначениеЗаполнено(Планировщик.НачалоПериодаОтображения) Тогда
			Планировщик.НачалоПериодаОтображения = Мин(
				Планировщик.НачалоПериодаОтображения,
				ОтображаемаяДатаНачала);
		Иначе
			Планировщик.НачалоПериодаОтображения = ОтображаемаяДатаНачала;
		КонецЕсли;
		
		ОтображаемаяДатаОкончания = КонецДня(ВыделеннаяДата);
		Если ЗначениеЗаполнено(Планировщик.КонецПериодаОтображения) Тогда
			Планировщик.КонецПериодаОтображения = Мин(
				Планировщик.КонецПериодаОтображения,
				ОтображаемаяДатаОкончания);
		Иначе
			Планировщик.КонецПериодаОтображения = ОтображаемаяДатаОкончания;
		КонецЕсли;
		
		СобытияНаДату = ПолучитьТаблицуСобытий(
			ОтображаемаяДатаНачала,
			ОтображаемаяДатаОкончания,
			Пользователи.АвторизованныйПользователь(),
			НастройкиОтображения.Календари
		);
		Для Каждого Событие Из СобытияНаДату Цикл
			НоваяСтрока = СобытияПоЧасам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Событие);
		КонецЦикла;
	КонецЦикла;
	
	// Заполнение элементов планировщика - События
	Для Каждого Событие Из СобытияПоЧасам Цикл
		Элемент = Планировщик.Элементы.Добавить(Событие.ДатаНачала, Событие.ДатаОкончания);
		СтруктураЭлемента = ПолучитьСтруктуруЭлементаПланировщика(
			Событие, НастройкиОтображения.ИспользоватьНапоминания,
			НастройкиОтображения.ОтключеноОтображениеВремени);
		Элемент.Загрузить(СтруктураЭлемента);
	КонецЦикла;
	
КонецПроцедуры

// Формирует пустую таблицу событий.
//
Функция СформироватьТаблицуСобытий()
	
	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("Ссылка");
	ТаблицаСобытий.Колонки.Добавить("Наименование");
	ТаблицаСобытий.Колонки.Добавить("ДатаНачала");
	ТаблицаСобытий.Колонки.Добавить("ДатаОкончания");
	ТаблицаСобытий.Колонки.Добавить("УстановленоНапоминание");
	ТаблицаСобытий.Колонки.Добавить("Календарь");
	ТаблицаСобытий.Колонки.Добавить("Предмет");
	ТаблицаСобытий.Колонки.Добавить("НомерСтрокиПредмета");
	
	Возврат ТаблицаСобытий;
	
КонецФункции

// Формирует таблицу событий
Функция ПолучитьТаблицуСобытий(ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, 
			ТекущийПользователь, Календари)
	
	// Для возможности добавления в дальнейшем ссылок на мероприятия не используется Выгрузить.
	ТаблицаСобытий = СформироватьТаблицуСобытий();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаписиКалендаряСотрудника.Ссылка КАК Ссылка,
		|	ЗаписиКалендаряСотрудника.Наименование КАК Наименование,
		|	ЗаписиКалендаряСотрудника.Начало КАК ДатаНачала,
		|	ЗаписиКалендаряСотрудника.Окончание КАК ДатаОкончания,
		|	НЕ НапоминанияПользователя.Пользователь ЕСТЬ NULL КАК УстановленоНапоминание,
		|	ЗаписиКалендаряСотрудника.Календарь КАК Календарь,
		|	ЗаписиКалендаряСотрудника.Источник КАК Предмет,
		|	ЗаписиКалендаряСотрудника.НомерСтрокиИсточника КАК НомерСтрокиПредмета
		|ИЗ
		|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
		|		ПО ЗаписиКалендаряСотрудника.Ссылка = НапоминанияПользователя.Источник
		|			И (НапоминанияПользователя.Пользователь = &ТекущийПользователь)
		|ГДЕ
		|	ЗаписиКалендаряСотрудника.Окончание > &ДатаНачала
		|	И ЗаписиКалендаряСотрудника.Начало < &ДатаОкончания
		|	И ЗаписиКалендаряСотрудника.Календарь В(&Календари)";
	
	Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала";
	
	Запрос.УстановитьПараметр("ДатаНачала", ОтображаемаяДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ОтображаемаяДатаОкончания);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("Календари", Календари);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаСобытий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	ТаблицаСобытий.Сортировать("ДатаНачала");
	
	Возврат ТаблицаСобытий;
	
КонецФункции

// Формирует структуру элемент планировщика по событию.
//
Функция ПолучитьСтруктуруЭлементаПланировщика(ЗаписьКалендаря,
	ИспользоватьНапоминания = Неопределено, ОтключеноОтображениеВремени = Неопределено) Экспорт
	
	Если ИспользоватьНапоминания = Неопределено Тогда
		ИспользоватьНапоминания = ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя");
	КонецЕсли;
	
	Если ОтключеноОтображениеВремени = Неопределено Тогда
		НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
		ОтключеноОтображениеВремени =
			НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
	КонецЕсли;
	
	Если ТипЗнч(ЗаписьКалендаря) = Тип("СтрокаТаблицыЗначений") Тогда
		УстановленоНапоминание = ЗаписьКалендаря.УстановленоНапоминание;
	ИначеЕсли ТипЗнч(ЗаписьКалендаря) = Тип("СправочникОбъект.ЗаписиКалендаряСотрудника") Тогда
		УстановленоНапоминание = УстановленоНапоминание(ЗаписьКалендаря.Ссылка);
	Иначе
		УстановленоНапоминание = Ложь;
	КонецЕсли;
	
	ЭлементПланировщика = Новый ЭлементПланировщика;
	
	ЭлементПланировщика.Начало = ЗаписьКалендаря.ДатаНачала;
	ЭлементПланировщика.Конец = ЗаписьКалендаря.ДатаОкончания;
	УстановитьЗначениеИзмерения(ЭлементПланировщика, "Календарь", ЗаписьКалендаря.Календарь);
	
	ЭлементПланировщика.Значение =
		РаботаСКалендаремКлиентСервер.СформироватьЭлементЗаписиКалендаря(ЗаписьКалендаря);
	ЭлементПланировщика.ЦветТекста = ЦветаСтиля.ЦветКалендаряПодпись;
	ЭлементПланировщика.ЦветРамки = ЦветаСтиля.РамкаКалендаряТекущаяЗапись;
	
	ЭлементПланировщика.Текст = ЗаписьКалендаря.Наименование;
	Если ИспользоватьНапоминания И ОтключеноОтображениеВремени И УстановленоНапоминание Тогда
		ДатаНачалаСобытияСтрокой = Формат(ЗаписьКалендаря.ДатаНачала, "ДФ=HH:mm");
		ЭлементПланировщика.Текст = ДатаНачалаСобытияСтрокой + " " + ЭлементПланировщика.Текст;
	КонецЕсли;
	
	Возврат ЭлементПланировщика.Выгрузить();
	
КонецФункции

// Возвращает факт того что установлено напоминание.
//
Функция УстановленоНапоминание(ЗаписьКалендаря)
	
	Если ТипЗнч(ЗаписьКалендаря) = Тип("СправочникСсылка.ЗаписиКалендаряСотрудника") Тогда
		МассивЗаписейКалендаря = Новый Массив;
		МассивЗаписейКалендаря.Добавить(ЗаписьКалендаря);
	Иначе
		МассивЗаписейКалендаря = ЗаписьКалендаря;
	КонецЕсли;
	
	УстановленоНапоминание = Ложь;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НЕ НапоминанияПользователя.Пользователь ЕСТЬ NULL КАК УстановленоНапоминание
		|ИЗ
		|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
		|		ПО ЗаписиКалендаряСотрудника.Ссылка = НапоминанияПользователя.Источник
		|			И (НапоминанияПользователя.Пользователь = &ТекущийПользователь)
		|ГДЕ
		|	ЗаписиКалендаряСотрудника.Ссылка В (&МассивЗаписейКалендаря)";
	
	Запрос.УстановитьПараметр("МассивЗаписейКалендаря", МассивЗаписейКалендаря);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.УстановленоНапоминание Тогда
			УстановленоНапоминание = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат УстановленоНапоминание;
	
КонецФункции

// Устанавливает значение измерения элемента планировщика.
//
// Параметры:
//  Элемент - ЭлементПланировщика - Элемент планировщика.
//  Измерение - Любой - Измерение планировщика.
//  ЗначениеИзмерения - Любой - Значение измерения планировщика.
//
Процедура УстановитьЗначениеИзмерения(Элемент, Измерение, ЗначениеИзмерения)
	
	СтруктураЭлемента = Новый Структура("ЗначенияИзмерений");
	
	СоответсвиеИзмерений = Новый Соответствие();
	СоответсвиеИзмерений.Вставить(Измерение, ЗначениеИзмерения);
	СтруктураЭлемента.ЗначенияИзмерений = Новый ФиксированноеСоответствие(СоответсвиеИзмерений);
	
	Элемент.Загрузить(СтруктураЭлемента);
	
КонецПроцедуры

#КонецОбласти

#Область ДляПовторений

// Устанавливает повторение события в соответствии с настройками повторения.
Процедура УстановитьПовторение(ЗаписьКалендаря, НастройкиПовторения) Экспорт
	
	ЗаписьКалендаряОбъект = ЗаписьКалендаря.ПолучитьОбъект();
	Если ТипЗнч(ЗаписьКалендаряОбъект) = Тип("СправочникОбъект.ЗаписиКалендаряСотрудника") Тогда
		Если ЗаписьКалендаряОбъект.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия Тогда
			ВызватьИсключение НСтр("ru = 'Невозможно настроить повторения для исключения повторения.'");
		КонецЕсли;
		Если ЗаписьКалендаряОбъект.ПометкаУдаления Тогда
			ВызватьИсключение НСтр("ru = 'Невозможно настроить повторения для помеченного на удаление события.'");
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("НастройкиПовторения", НастройкиПовторения);
	ЗаписьКалендаряОбъект.Записать();
	
КонецПроцедуры

// Проверяет подходит ли дата под правило повторения
Функция ДатаУдовлетворяетПравилуПовторения(ПроверяемаяДата, СтруктураПравилаПовторения, УчитыватьИсключения = Истина) Экспорт
	
	Если ПроверяемаяДата < СтруктураПравилаПовторения.ДатаНачалаПовторения Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПравилаПовторения.ДатаОкончанияПовторения)
		И ПроверяемаяДата > СтруктураПравилаПовторения.ДатаОкончанияПовторения
		И УчитыватьИсключения Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если (УчитыватьИсключения И ЯвляетсяИсключениемПовторения(ПроверяемаяДата, СтруктураПравилаПовторения))
		ИЛИ НЕ УдовлетворяетПравилуИнтервалаПовторения(ПроверяемаяДата, СтруктураПравилаПовторения)
		ИЛИ НЕ УдовлетворяетПравилуПовторенияПоДням(ПроверяемаяДата, СтруктураПравилаПовторения)
		ИЛИ НЕ УдовлетворяетПравилуПовторенияПоДнямМесяца(ПроверяемаяДата, СтруктураПравилаПовторения)
		ИЛИ НЕ УдовлетворяетПравилуПовторенияПоМесяцам(ПроверяемаяДата, СтруктураПравилаПовторения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет подходит ли дата под правило повторения по интервалам
Функция УдовлетворяетПравилуИнтервалаПовторения(ПроверяемаяДата, СтруктураПравилаПовторения)
	
	Если СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежедневно Тогда
		
		ПроверяемыйИнтервалВремя =
			НачалоДня(ПроверяемаяДата) - НачалоДня(СтруктураПравилаПовторения.ДатаНачалаПовторения);
		НомерПериодаИнтервала = ПроверяемыйИнтервалВремя / 86400; // 86400 - число секунд в сутках
		
	ИначеЕсли СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно Тогда
		
		ПроверяемыйИнтервалВремя =
			НачалоНедели(ПроверяемаяДата) - НачалоНедели(СтруктураПравилаПовторения.ДатаНачалаПовторения);
		НомерПериодаИнтервала = ПроверяемыйИнтервалВремя / 604800; // 604800 - число секунд в неделе
		
	ИначеЕсли СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно Тогда
		
		КоличествоЛетИнтервала =
			Год(ПроверяемаяДата) - Год(СтруктураПравилаПовторения.ДатаНачалаПовторения);
		НомерПериодаИнтервала =
			Месяц(ПроверяемаяДата) - Месяц(СтруктураПравилаПовторения.ДатаНачалаПовторения) + КоличествоЛетИнтервала * 12;
		
	ИначеЕсли СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно Тогда
		
		НомерПериодаИнтервала =
			Год(ПроверяемаяДата) - Год(СтруктураПравилаПовторения.ДатаНачалаПовторения);
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НомерПериодаИнтервала % СтруктураПравилаПовторения.ИнтервалПовторения = 0;
	
КонецФункции

// Проверяет подходит ли дата под правило повторения по дням
Функция УдовлетворяетПравилуПовторенияПоДням(ПроверяемаяДата, СтруктураПравилаПовторения)
	
	Если СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно Тогда
		
		Для Каждого ПовторениеПоДнямСтрока Из СтруктураПравилаПовторения.ПовторениеПоДням Цикл
			
			Если ПовторениеПоДнямСтрока.НомерВхождения <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПовторениеПоДнямСтрока.ДеньНедели = ДеньНедели(ПроверяемаяДата) Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
		
	ИначеЕсли СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно Тогда
		
		Если ЗначениеЗаполнено(СтруктураПравилаПовторения.ПовторениеПоДнямМесяца) Тогда
			Возврат Истина;
		Иначе
			
			Если СтруктураПравилаПовторения.ПовторениеПоДням.Количество() = 0 Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Для Каждого ПовторениеПоДнямСтрока Из СтруктураПравилаПовторения.ПовторениеПоДням Цикл
				
				Если ПовторениеПоДнямСтрока.НомерВхождения = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ПроверяемаяДатаДеньНеделиВМесяце = 
					РаботаСКалендаремКлиентСервер.ПолучитьДеньНеделиВМесяце(ПроверяемаяДата);
				ПроверяемаяДатаДеньНеделиВМесяцеБезУчетаПоследнего = 
					РаботаСКалендаремКлиентСервер.ПолучитьДеньНеделиВМесяце(ПроверяемаяДата, Ложь);
				
				Если (ПовторениеПоДнямСтрока.ДеньНедели = ПроверяемаяДатаДеньНеделиВМесяце.ДеньНедели
						И ПовторениеПоДнямСтрока.НомерВхождения = ПроверяемаяДатаДеньНеделиВМесяце.НомерВхождения)
					ИЛИ (ПовторениеПоДнямСтрока.ДеньНедели = ПроверяемаяДатаДеньНеделиВМесяцеБезУчетаПоследнего.ДеньНедели
						И ПовторениеПоДнямСтрока.НомерВхождения = ПроверяемаяДатаДеньНеделиВМесяцеБезУчетаПоследнего.НомерВхождения) Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет подходит ли дата под правило повторения по дням месяца
Функция УдовлетворяетПравилуПовторенияПоДнямМесяца(ПроверяемаяДата, СтруктураПравилаПовторения)
	
	Если СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно Тогда
		
		Если НЕ ЗначениеЗаполнено(СтруктураПравилаПовторения.ПовторениеПоДнямМесяца) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если СтруктураПравилаПовторения.ПовторениеПоДнямМесяца = День(ПроверяемаяДата) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	ИначеЕсли СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно Тогда
		
		Если СтруктураПравилаПовторения.ПовторениеПоДнямМесяца = День(ПроверяемаяДата) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет подходит ли дата под правило повторения по месяцам
Функция УдовлетворяетПравилуПовторенияПоМесяцам(ПроверяемаяДата, СтруктураПравилаПовторения)
	
	Если СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно Тогда
		
		Если СтруктураПравилаПовторения.ПовторениеПоМесяцам = Месяц(ПроверяемаяДата) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет является ли дата исключением
Функция ЯвляетсяИсключениемПовторения(ПроверяемаяДата, СтруктураПравилаПовторения)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ДатаИсключения", НачалоДня(ПроверяемаяДата));
	НайденныеСтроки = СтруктураПравилаПовторения.ИсключенияПовторения.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() <> 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает структуру правила повторения.
//
Функция ПолучитьСтруктуруПравилаПовторения() Экспорт
	
	СтруктураПравилаПовторения = Новый Структура();
	СтруктураПравилаПовторения.Вставить("ДатаНачалаПовторения");
	СтруктураПравилаПовторения.Вставить("ДатаОкончанияПовторения");
	СтруктураПравилаПовторения.Вставить("ИнтервалПовторения");
	СтруктураПравилаПовторения.Вставить("КоличествоПовторов");
	СтруктураПравилаПовторения.Вставить("ПовторениеПоДнямМесяца");
	СтруктураПравилаПовторения.Вставить("ПовторениеПоМесяцам");
	СтруктураПравилаПовторения.Вставить("ТипЗаписиКалендаря");
	СтруктураПравилаПовторения.Вставить("ЧастотаПовторения");
	СтруктураПравилаПовторения.Вставить("ИсключенияПовторения");
	СтруктураПравилаПовторения.Вставить("ПовторениеПоДням");
	
	Возврат СтруктураПравилаПовторения;
	
КонецФункции

// Создает и заполняет объект повторяющейся записи календаря на основании элемента планировщика.
//
// Параметры:
//  ЗаписьКалендаря - Структура - Структура записи календаря планировщика.
//
// Возвращаемое значение:
//  СправочникОбъект.ЗаписиКалендаряСотрудника - Не записанный в базу объект исключения повторяющегося события.
//
Функция СоздатьИсключениеПовторяющейсяЗаписиКалендаря(ОбрабатываемыйЭлемент) Экспорт
	
	СтруктураОснование = Новый Структура("ПовторяющеесяСобытие, ДатаИсключения");
	СтруктураОснование.ПовторяющеесяСобытие = ОбрабатываемыйЭлемент.ЗаписьКалендаря;
	СтруктураОснование.ДатаИсключения = ОбрабатываемыйЭлемент.Начало;
	
	ЗаписьКалендаряОбъект = Справочники.ЗаписиКалендаряСотрудника.СоздатьЭлемент();
	ЗаписьКалендаряОбъект.Заполнить(СтруктураОснование);
	ЗаписьКалендаряОбъект.Начало = ОбрабатываемыйЭлемент.Начало;
	ЗаписьКалендаряОбъект.Окончание = ОбрабатываемыйЭлемент.Конец;
	ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ПовторяющеесяСобытие", ОбрабатываемыйЭлемент.ЗаписьКалендаря);
	ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ДатаИсключения", ОбрабатываемыйЭлемент.Начало);
	
	Возврат ЗаписьКалендаряОбъект;
	
КонецФункции

#КонецОбласти