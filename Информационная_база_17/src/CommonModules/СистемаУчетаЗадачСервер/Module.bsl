
Процедура ПереопределитьПолучаемуюФормуПрисоединенногоФайлаОбработкаПолученияФормы(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	РаботаСФайлами.ОпределитьФормуПрисоединенногоФайла(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
КонецПроцедуры

Процедура УстановитьПометкуУдаленияПрисоединенныхФайловДокументовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	ПрисоединенныеФайлы.УстановитьПометкуУдаленияПрисоединенныхФайловДокументов(Источник, Отказ, РежимЗаписи, РежимПроведения);
КонецПроцедуры

Процедура ФормаСпискаВыбораПриСозданииНаСервере(Знач Список, Знач ЭлементФормыСписок, Знач Параметры) Экспорт
	
	// Элементы.Список - основной реквизит с динамическим списком
	ЭлементФормыСписок.РежимВыбора = Параметры.РежимВыбора;
	Если Параметры.МножественныйВыбор <> Неопределено Тогда
		ЭлементФормыСписок.МножественныйВыбор = Параметры.МножественныйВыбор;
	КонецЕсли;
	// обход автоматического сохранения пользовательских настроек для разных режимов
	Если Параметры.РежимВыбора И Не ЗначениеЗаполнено(Параметры.КлючПользовательскихНастроек) Тогда
		Параметры.КлючПользовательскихНастроек = "РежимВыбора";
		//Список.АвтоматическоеСохранениеПользовательскихНастроек = Ложь;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьКалендарьИсполнителя(Исполнитель = Неопределено) Экспорт
	
	Пользователь = Неопределено;
	
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		Возврат Исполнитель.ОсновнойКалендарь;
	КонецЕсли;
		
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		Возврат Справочники.КалендариСотрудников.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ПользователиКлиентСервер.АвторизованныйПользователь().ОсновнойКалендарь;
	
КонецФункции

Процедура УстановитьОсновнойКалендарь(Исполнитель = Неопределено, Календарь) Экспорт
	
	Если Исполнитель = Неопределено Тогда
		
		Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
			Возврат;
		КонецЕсли;
		
		Исполнитель = ПользователиКлиентСервер.АвторизованныйПользователь();
		
	КонецЕсли;
	
	ИсполнительОбъект = Исполнитель.ПолучитьОбъект();
	ИсполнительОбъект.ОсновнойКалендарь = Календарь;
	ИсполнительОбъект.Записать();
	
КонецПроцедуры

Функция ИсполнительПоУмолчанию(Задача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачиРаботы.Ссылка.Исполнитель КАК Исполнитель,
	               |	СУММА(ЗадачиРаботы.Трудозатраты) КАК Трудозатраты,
	               |	ЗадачиРаботы.Ссылка.Заказчик КАК Заказчик,
	               |	ЗадачиРаботы.Ссылка.Проект КАК Проект
	               |ПОМЕСТИТЬ втДанные
	               |ИЗ
	               |	Документ.Задачи.Работы КАК ЗадачиРаботы
	               |ГДЕ
	               |	Не ЗадачиРаботы.Ссылка.Исполнитель.Недействителен
	               |	И ЗадачиРаботы.ДатаНачала < &Дата
	               |	И ЗадачиРаботы.ДатаОкончания > ДОБАВИТЬКДАТЕ(&Дата, МЕСЯЦ, -&КоличествоМесяцев)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗадачиРаботы.Ссылка.Исполнитель,
	               |	ЗадачиРаботы.Ссылка.Заказчик,
	               |	ЗадачиРаботы.Ссылка.Проект
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втДанные.Исполнитель КАК Исполнитель,
	               |	СУММА(втДанные.Трудозатраты) КАК Трудозатраты
	               |ИЗ
	               |	втДанные КАК втДанные
	               |ГДЕ
	               |	втДанные.Проект = &Проект
	               |	И втДанные.Заказчик = &Заказчик
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втДанные.Исполнитель
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	втДанные.Исполнитель,
	               |	СУММА(втДанные.Трудозатраты)
	               |ИЗ
	               |	втДанные КАК втДанные
	               |ГДЕ
	               |	втДанные.Заказчик = &Заказчик
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втДанные.Исполнитель
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	втДанные.Исполнитель,
	               |	СУММА(втДанные.Трудозатраты)
	               |ИЗ
	               |	втДанные КАК втДанные
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втДанные.Исполнитель
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Трудозатраты УБЫВ";
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	Запрос.УстановитьПараметр("Заказчик",Задача.Заказчик);
	Запрос.УстановитьПараметр("Проект",Задача.Проект);
	Запрос.УстановитьПараметр("КоличествоМесяцев",СистемаУчетаЗадачПовтИсп.ПолучитьКоличествоМесяцевДляОпределенияОсновногоИсполнителя());
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Исполнитель;
	КонецЕсли;
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
КонецФункции

#Область РаботаСФоновымиЗаданиями

// Запускает выполнение процедуры в фоновом задании.
// По аналогии с ДлительныеОперации.ЗапуститьВыполнениеВФоне() БСП 2.2.5. Добавлен параметр "ОжидатьЗавершения".
// 
// Параметры:
//  ИдентификаторФормы     - УникальныйИдентификатор - идентификатор формы, 
//                           из которой выполняется запуск длительной операции. 
//  ИмяЭкспортнойПроцедуры - Строка - имя экспортной процедуры, 
//                           которую необходимо выполнить в фоне.
//  Параметры              - Структура - все необходимые параметры для 
//                           выполнения процедуры ИмяЭкспортнойПроцедуры.
//  НаименованиеЗадания    - Строка - наименование фонового задания. 
//                           Если не задано, то будет равно ИмяЭкспортнойПроцедуры. 
//  ИспользоватьДополнительноеВременноеХранилище - Булево - признак использования
//                           дополнительного временного хранилища для передачи данных
//                           в родительский сеанс из фонового задания. По умолчанию - Ложь.
//  ОжидатьЗавершения       - Булево - признак ожидания завершения задания за время вызова 
//                           (2 сек. для обычной скорости клиентского соединения, 4 сек. для низкой)
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * АдресХранилища  - Строка     - адрес временного хранилища, в которое будет
//                                    помещен результат работы задания;
//   * АдресХранилищаДополнительный - Строка - адрес дополнительного временного хранилища,
//                                    в которое будет помещен результат работы задания (доступно только если 
//                                    установлен параметр ИспользоватьДополнительноеВременноеХранилище);
//   * ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор запущенного фонового задания;
//   * ЗаданиеВыполнено - Булево - Истина если задание было успешно выполнено за время вызова функции.
// 
Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, 
	Знач Параметры, Знач НаименованиеЗадания = "", ИспользоватьДополнительноеВременноеХранилище = Ложь, ОжидатьЗавершения = Истина) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     Ложь);
	Результат.Вставить("ИдентификаторЗадания", Неопределено);
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		АдресХранилищаДополнительный = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилищаДополнительный);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
		Результат.ЗаданиеВыполнено = Истина;
	Иначе
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
		ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		Задание = ДлительныеОперации.ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(ИмяЭкспортнойПроцедуры,
			ПараметрыВыполнения, ПараметрыЭкспортнойПроцедуры);
		
		Если ОжидатьЗавершения Тогда
			ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
			Попытка
				Задание.ОжидатьЗавершения(ВремяОжидания);
			Исключение
				// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
			КонецПопытки;
		КонецЕсли;
		
		Результат.ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор);
		Результат.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		Результат.Вставить("АдресХранилищаДополнительный", АдресХранилищаДополнительный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЧтениеЗаписьПользовательскихНастроек

// Проверяет и записывает значение одноименной настройки
//
//Параметры:
//	ЗначениеНастройки - Булево
//	ИмяПользователя - Строка - пользователь, для которого считываются настройки (по умолчанию - пусто)
//
Процедура ЗаписатьПриЗапускеОткрыватьРаздел(ЗначениеНастройки, ИмяПользователя = "") Экспорт

	ИмяПользователя= ?(ЗначениеЗаполнено(ИмяПользователя), ИмяПользователя, ИмяПользователя());
	
	Если ТипЗнч(ЗначениеНастройки) <> Тип("Строка")
		ИЛИ Найти("ПОЧТА-,ЗАДАЧИ-,ДОСКА-,КАЛЕНДАРЬ-", ВРег(ЗначениеНастройки)) = 0 Тогда
		ЗначениеНастройки = "";
	КонецЕсли; 
	
	Если ЗначениеНастройки = "" тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ОбщиеНастройкиПользователя",
			"ПриЗапускеОткрыватьРаздел",
			"",
			Неопределено,
			ИмяПользователя,
			Ложь);
		Возврат;
	КонецЕсли;

	ТекущаяНастройка = ПриЗапускеОткрыватьРаздел(ИмяПользователя);
	Если СтрНайти(ТекущаяНастройка,ЗначениеНастройки) = 0 тогда
		//Нужно удалить настройку
		Если Прав(ЗначениеНастройки,1) = "-" Тогда
			ТекущаяНастройка = СтрЗаменить(ТекущаяНастройка,Лев(ЗначениеНастройки,СтрДлина(ЗначениеНастройки)-1),"");
		Иначе
			ТекущаяНастройка = ТекущаяНастройка+ЗначениеНастройки;
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ОбщиеНастройкиПользователя",
			"ПриЗапускеОткрыватьРаздел",
			ТекущаяНастройка,
			Неопределено,
			ИмяПользователя,
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Считывает, проверяет и возвращает значение одноименной настройки
//
//Параметры:
//	ИмяПользователя - Строка - пользователь, для которого считываются настройки (по умолчанию - пусто)
//
//Возвращаемое значение:
//	Строка - "Бюджет", "Операции", "Календарь" или "Накопления"
//
Функция ПриЗапускеОткрыватьРаздел(ИмяПользователя = "") Экспорт

	ИмяПользователя= ?(ЗначениеЗаполнено(ИмяПользователя), ИмяПользователя, ИмяПользователя());
	
	Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбщиеНастройкиПользователя",
		"ПриЗапускеОткрыватьРаздел",
		Неопределено,
		Неопределено,
		ИмяПользователя);
		
	Если Результат = Неопределено Тогда
		Результат = "";
		ЗаписатьПриЗапускеОткрыватьРаздел(Результат, ИмяПользователя);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

#КонецОбласти




