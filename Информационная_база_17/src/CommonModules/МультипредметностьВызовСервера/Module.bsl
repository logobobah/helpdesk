////////////////////////////////////////////////////////////////////////////////
// Подсистема "Мультипредметность"
// Модуль МультипредметностьВызовСервера: сервер, вызов сервера
//
// Содержит процедуры и функции, обрабатываемые на сервере при вызове с клиента.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Ищет ссылку на элемент справочника ИменаПредметов по наименованию.
// Если не находит элемент, то создает его.
// Возвращает ссылку на найденное (созданное) имя предмета.
//
Функция ПолучитьСсылкуНаИмяПредмета(Наименование = Неопределено) Экспорт
	
	Если Наименование = Неопределено Тогда
		Наименование = НСтр("ru='Предмет'");
	ИначеЕсли ПустаяСтрока(Наименование) Тогда
		Возврат Справочники.ИменаПредметов.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИменаПредметов.Ссылка
		|ИЗ
		|	Справочник.ИменаПредметов КАК ИменаПредметов
		|ГДЕ
		|	ИменаПредметов.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		УстановитьПривилегированныйРежим(Истина);
		Элемент = Справочники.ИменаПредметов.СоздатьЭлемент();
		Элемент.Наименование = Наименование;
		Элемент.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		ИмяПредмета = Элемент.Ссылка;
	Иначе
		ИмяПредмета = Результат.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
	Возврат ИмяПредмета;
	
КонецФункции

// Возвращает ссылку на имя предмета по ссылке на предмет
//
Функция ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(Предмет, ИсходныеИменаПредметов = Неопределено) Экспорт
	
	МетаданныеПредмета = Предмет.Метаданные();
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеПредмета.ПолноеИмя());

	Попытка 
		СтрокаИмениПредмета = Менеджер.ПолучитьИмяПредметаПоУмолчанию(Предмет);
	Исключение
		СтрокаИмениПредмета = МетаданныеПредмета.ПредставлениеОбъекта;
		Если ПустаяСтрока(СтрокаИмениПредмета) Тогда
			СтрокаИмениПредмета = МетаданныеПредмета.Имя;
		КонецЕсли;
	КонецПопытки;
	
	Если ИсходныеИменаПредметов <> Неопределено Тогда
		МаксимальноеИмя = "";
		МаксимальныйНомерИмени = 0;
		Для Каждого ТекущееИмяПредмета Из ИсходныеИменаПредметов Цикл
			СтрокаТекущегоИмениПредмета = Строка(ТекущееИмяПредмета);
			Если Найти(СтрокаТекущегоИмениПредмета, СтрокаИмениПредмета) <> 0 Тогда
				Номер = СокрЛП(СтрЗаменить(СтрокаТекущегоИмениПредмета, СтрокаИмениПредмета,""));
				
				Если ПустаяСтрока(Номер) Тогда
					НомерТекущегоИмени = 0;
				Иначе
					Попытка
						НомерТекущегоИмени = Число(Номер);
					Исключение
						// Если оставшаяся часть имени не является числом,
						// то это другое имя предмета - прекращаем текущую итерацию.
						Продолжить;
					КонецПопытки;
				КонецЕсли;
				
				Если НомерТекущегоИмени >= МаксимальныйНомерИмени Тогда
					МаксимальныйНомерИмени = НомерТекущегоИмени;
					МаксимальноеИмя = СтрокаТекущегоИмениПредмета;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		Если Не ПустаяСтрока(МаксимальноеИмя) Тогда
			ЧисловаяЧасть = "0";
			ПозицияСимвола = 0;
			Пока СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧисловаяЧасть) Цикл 
				ЧисловаяЧасть = Прав(МаксимальноеИмя, ПозицияСимвола + 1);
				ПозицияСимвола = ПозицияСимвола + 1;
			КонецЦикла;
			Если ПозицияСимвола > 1 Тогда 
				ЧисловаяЧасть = Прав(МаксимальноеИмя, ПозицияСимвола);
			Иначе
				ЧисловаяЧасть = "0";
			КонецЕсли;
			СтрокаИмениПредмета = СтрокаИмениПредмета + " " + Формат(Число(ЧисловаяЧасть) + ?(Число(ЧисловаяЧасть) = 0, 2, 1), "ЧН=; ЧГ=0");
		КонецЕсли;
	КонецЕсли;
	ИмяПредмета = ПолучитьСсылкуНаИмяПредмета(СтрокаИмениПредмета);

	Возврат ИмяПредмета
	
КонецФункции

// Возвращает список типов предметов процесса в зависимости от установленного ограничения типа в шаблоне
//
Функция ПолучитьОграничениеТиповИмениПредметаШаблона(ШаблонПроцесса, ИмяПредмета) Экспорт
	
	ВыборкаПредметов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШаблонПроцесса, "Предметы");
	Предметы = ВыборкаПредметов.Выгрузить();
	
	СтрокиПредмета = Предметы.НайтиСтроки(Новый Структура("ИмяПредмета",ИмяПредмета));
	
	СписокТипов = Новый СписокЗначений;
	Если СтрокиПредмета.Количество() <> 0 Тогда
		Предмет = СтрокиПредмета[0].Предмет;
		Если ТипЗнч(Предмет) <> Тип("Неопределено") Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(Предмет));
			СписокТипов = РаботаСФайламиВызовСервера.ПолучитьПредставленияТипов(МассивТипов);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокТипов;
	
КонецФункции

// Заполняет данные выбора для автоподбора текста значения имени предмета
//
Процедура ПолучитьДанныеДляАвтоподбораИмениПредмета(ДанныеВыбора, Текст, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИменаПредметов.Ссылка
		|ИЗ
		|	Справочник.ИменаПредметов КАК ИменаПредметов
		|ГДЕ
		|	ИменаПредметов.Наименование ПОДОБНО ""%"" + &Наименование + ""%""";
	Запрос.УстановитьПараметр("Наименование", Текст);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру массивов структур по запросу данных табличных частей объекта
//
Функция ПолучитьЗначенияТабличныхРеквизитовДляКлиента(Ссылка, Реквизиты) Экспорт
	
	СтруктураВозврата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	
	Для Каждого Элемент Из СтруктураВозврата Цикл
		МассивДанных = Новый Массив;
		ТаблицаДанных = Элемент.Значение.Выгрузить();
		Для Каждого Строка Из ТаблицаДанных Цикл
			СтруктураКолонок = Новый Структура;
			Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл
				СтруктураКолонок.Вставить(Колонка.Имя, Строка[Колонка.Имя]);
			КонецЦикла;
			МассивДанных.Добавить(СтруктураКолонок);
		КонецЦикла;
			
		СтруктураВозврата[Элемент.Ключ] = МассивДанных;
	КонецЦикла;

	Возврат СтруктураВозврата;
	
КонецФункции

// Вызывается при обработке оповещения "СозданФайл" в формах задач и
// добавляет предмет в задачу.
//
Процедура ОбработатьДобавлениеПредметаЗадачи(Задача, Предмет, УникальныйИдентификатор) Экспорт
	
		
КонецПроцедуры

// Возвращает соответствие имен предметов предметам шаблона процесса
//
Функция ПолучитьИменаПредметовШаблона(Шаблон) Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ШаблоныИсполнения"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ШаблоныОзнакомления"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ШаблоныПоручения"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ШаблоныРассмотрения"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ШаблоныРегистрации"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ШаблоныСогласования"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ШаблоныУтверждения"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ШаблоныСоставныхБизнесПроцессов"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ШаблоныПриглашения"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов"));
	
	ТипыШаблонов = РаботаСФайламиВызовСервера.ПолучитьПредставленияТипов(МассивТипов);
	ТекстЗапроса = "";
	
	Для Каждого Тип Из ТипыШаблонов Цикл
		
		ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", "
			|ОБЪЕДИНИТЬ ВСЕ")
			+ "
			|ВЫБРАТЬ " + ?(ПустаяСтрока(ТекстЗапроса),"РАЗРЕШЕННЫЕ","") + "
			|	ИмяПредмета КАК ИмяПредмета,
			|	Предмет КАК Предмет
			|ИЗ
			| %Таблица%.Предметы КАК ПредметыШаблона 
			|ГДЕ 
			|	ПредметыШаблона.Ссылка = &ШаблонСсылка";
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%Таблица%", Тип.Значение);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ШаблонСсылка", Шаблон);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Новый Соответствие;
	Иначе
		СоответствиеПредметов = Новый Соответствие;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СоответствиеПредметов.Вставить(Выборка.ИмяПредмета, Выборка.Предмет);
		КонецЦикла;
		Возврат СоответствиеПредметов;
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

