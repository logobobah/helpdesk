
#Область ПрограммныйИнтерфейс

// Формирует представление указанного элемента данных в виде XML в указанной версии формата обмена.
//
// Параметры:
//  ЗаписьXML				 - ЗаписьXML - Объект записи данных в файл;
//  ВерсияСервиса			 - Строка - Используемая версия формата обмена;
//  ПараметрыСинхронизации	 - Структура - Кэш параметров обмена;
//  ЭлементДанных			 - Произвольный - Выгружаемый объект;
//  КакПредмет				 - Булево - Признак принудительной выгрузки объекта.
//
Процедура ПолучитьXMLИзОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, ЭлементДанных,
		КакПредмет = Ложь) Экспорт

	Если ЭлементДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СинхронизироватьПочту     = ПараметрыСинхронизации.СинхронизироватьПочту;
	СинхронизироватьЗадачи    = ПараметрыСинхронизации.СинхронизироватьЗадачи;
	СинхронизироватьКалендарь = ПараметрыСинхронизации.СинхронизироватьКалендарь;
	СинхронизироватьКонтроль  = ПараметрыСинхронизации.СинхронизироватьКонтроль;

	Если ТипЗнч(ЭлементДанных) = Тип("Структура") Тогда

		Объект = ЭлементДанных.Ссылка;
		ПометкаУдаления = ЭлементДанных.ПометкаУдаления;

		Если ПометкаУдаления = Неопределено Тогда
			ПометкаУдаления = Ложь;
		КонецЕсли;

	Иначе

		Объект  = ЭлементДанных;

		Попытка
			ПометкаУдаления = ЭлементДанных.ПометкаУдаления;
		Исключение
			ПометкаУдаления = Ложь;
		КонецПопытки;

	КонецЕсли;

	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЭлементДанных)) Тогда
		ОбъектXML = ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.УникальныйИдентификатор()];
		Если Не ОбъектXML = Неопределено Тогда
			Возврат; // если такой объект уже есть в массиве
		КонецЕсли;
	КонецЕсли;

	ТипЗначенияОбъекта = ТипЗнч(Объект);

	Если ТипЗначенияОбъекта = Тип("УдалениеОбъекта") Тогда

		ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);

		ОбменСМобильнымиСервер.ЗаписатьПодробнуюИнформациюОСобытииОбмена(ПараметрыСинхронизации, 
			ПараметрыСинхронизации.МобильныйКлиент, Объект, 
			НСтр("ru = 'Передано удаление объекта'"));

		Возврат;

	КонецЕсли;

	Если Не ТипЗначенияОбъекта = Тип("ИнформацияОбОшибке") Тогда

		Если Не ОбменСМобильнымиСервер.ОбъектДоступенТекущемуПользователю(
				ПараметрыСинхронизации.МобильныйКлиент, Объект, ПараметрыСинхронизации.ОбщиеПраваНаОбъекты) Тогда

			ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);

			Возврат;

		КонецЕсли;

	КонецЕсли;

	Попытка
		Если ПометкаУдаления Тогда
			ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
			Возврат;
		КонецЕсли;
	Исключение
		// "Объект" может быть не ссылочного типа
	КонецПопытки;

	Если СинхронизироватьПочту И ТипЗначенияОбъекта = Тип("СправочникСсылка.АдресатыПочтовыхСообщений") Тогда

		ПараметрыСинхронизации.Адресаты.Вставить(Объект, Истина);

	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.Пользователи")
		Или ТипЗначенияОбъекта = Тип("СправочникСсылка.ЛичныеАдресаты") Тогда

		Если ТипЗначенияОбъекта = Тип("СправочникСсылка.Пользователи") Тогда
			ВыгрузитьВXMLПользователей(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
		КонецЕсли;

		Если СинхронизироватьПочту Тогда
			ПараметрыСинхронизации.Контакты.Вставить(Объект, Истина);
		КонецЕсли;

	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда

		ВыгрузитьВXMLУчетныеЗаписиЭлектроннойПочты(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);

	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументСсылка.ВходящееПисьмо") Тогда

		Если Не КакПредмет Тогда

			Если Не СинхронизироватьПочту Тогда
				Возврат;
			КонецЕсли;

			ПапкиВСинхронизации = ПараметрыСинхронизации.ПапкиВСинхронизации;
			ПапкаПисьма = РегистрыСведений.ПисьмаВПапках.ПолучитьПапку(Объект);

			Если ПапкиВСинхронизации.Найти(ПапкаПисьма) = Неопределено Тогда
				ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
				Возврат;
			КонецЕсли;

		КонецЕсли;

		ВыгрузитьВXMLВходящееПисьмо(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, КакПредмет);

	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда

		Если Не КакПредмет Тогда

			Если Не СинхронизироватьПочту Тогда
				Возврат;
			КонецЕсли;

			ПапкиВСинхронизации = ПараметрыСинхронизации.ПапкиВСинхронизации;
			ПапкаПисьма         = РегистрыСведений.ПисьмаВПапках.ПолучитьПапку(Объект);

			Если ПапкиВСинхронизации.Найти(ПапкаПисьма) = Неопределено Тогда
				ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
				Возврат;
			КонецЕсли;

		КонецЕсли;

		ВыгрузитьВXMLИсходящееПисьмо(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, КакПредмет);

	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.Файлы") Тогда

		ВыгрузитьВXMLФайлы(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект, КакПредмет);

	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийНаборЗаписей.СведенияОПрочтении") Тогда

		ВыгрузитьВXMLСведенияОПрочтении(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);

	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийНаборЗаписей.ФлагиОбъектов") Тогда

		ВыгрузитьВXMLФлагиОбъектов(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);

	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ПапкиПисем") Тогда

		ВыгрузитьВXMLПапкиПисем(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);

	ИначеЕсли ТипЗначенияОбъекта = 
		Тип("РегистрСведенийНаборЗаписей.ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом") Тогда

		Для Каждого Запись Из Объект Цикл
			ВыгрузитьВXMLНастройкиСинхронизации(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Запись);
		КонецЦикла;

	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ШаблоныТекстов") Тогда

		Если ПометкаУдаления Тогда
			ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
		Иначе
			ВыгрузитьВXMLШаблоныТекстов(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);
		КонецЕсли;

	ИначеЕсли ТипЗначенияОбъекта = Тип("ИнформацияОбОшибке") Тогда

		ВыгрузитьВXMLИнформациюОбОшибке(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);

	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникСсылка.ЗаписиКалендаряСотрудника") Тогда

		ВыгрузитьВXMLЗаписиКалендаряСотрудника(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);

	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ПисьмаВПапках") Тогда

		Если Не СинхронизироватьПочту Тогда
			Возврат;
		КонецЕсли;

		ПапкиВСинхронизации = ПараметрыСинхронизации.ПапкиВСинхронизации;
		
		Для Каждого ЗаписьРегистра Из Объект Цикл

			Если ПапкиВСинхронизации.Найти(ЗаписьРегистра.Папка) = Неопределено Тогда
				ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, ЗаписьРегистра.Письмо);
			Иначе
				ВыгрузитьВXMLПисьмаВПапках(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, ЗаписьРегистра);
			КонецЕсли;

		КонецЦикла;

	//ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийНаборЗаписей.НастройкиОтображенияЗаписейРабочегоКалендаря") Тогда

	//	Для каждого ЭлементДанных Из Объект Цикл

	//		Если Не ЗначениеЗаполнено(ЭлементДанных.Событие) Тогда
	//			Возврат;
	//		КонецЕсли;

	//		Если Не ТипЗнч(ЭлементДанных.Событие) = Тип("СправочникСсылка.ЗаписиКалендаряСотрудника") Тогда
	//			Возврат;
	//		КонецЕсли;

	//		ВыгрузитьВXMLНастройкиОтображенияЗаписейРабочегоКалендаря(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, ЭлементДанных);

	//	КонецЦикла;

	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументСсылка.Задачи") Тогда

		ВыгрузитьВXMLЗадачуИсполнителя(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Объект);

	//ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийНаборЗаписей.ИсторияСобытийЗадач") Тогда

	//	Для каждого Запись Из Объект Цикл
	//		ВыгрузитьВXMLЗадачуИсполнителя(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Запись.Задача);
	//	КонецЦикла;

	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийНаборЗаписей.ПисьмаВеток") Тогда

		Для Каждого Запись Из Объект Цикл
			ВыгрузитьВXMLПисьмаВВетке(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, Запись.Письмо, Запись.ВеткаПереписки);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Выгружает адресатов почтовых сообщений которые еще не выгружены
//
// Параметры:
//  ЗаписьXML				 - ЗаписьXML - Объект записи данных в файл;
//  ВерсияСервиса			 - Строка - Используемая версия формата обмена;
//  ПараметрыСинхронизации	 - Структура - Кэш параметров обмена.
//
Процедура ПолучитьXMLИзАдресатов(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации) Экспорт

	Попытка

		УстановитьПривилегированныйРежим(Истина);
		МассивАдресатовДляПолученияПредставления = Новый Массив();

		Если Не ПараметрыСинхронизации.Контакты.Количество() = 0 Тогда

			МассивКонтактов = Новый Массив();

			Для Каждого КлючЗначение Из ПараметрыСинхронизации.Контакты Цикл

				Если Не ПараметрыСинхронизации.ВыгруженныеОбъекты[КлючЗначение.Ключ] = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				МассивКонтактов.Добавить(КлючЗначение.Ключ);

				ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(КлючЗначение.Ключ, КлючЗначение.Ключ);

			КонецЦикла;

			Если МассивКонтактов.Количество() > 0 Тогда

				ЗапросАдресаты = Новый Запрос();
				ЗапросАдресаты.УстановитьПараметр("Контакты", МассивКонтактов);
				ЗапросАдресаты.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	СведенияОбАдресатах.АдресатСообщения КАК АдресатСообщения,
					|	СведенияОбАдресатах.АдресатСообщения.Код КАК АдресатСообщенияКод
					|ИЗ
					|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
					|ГДЕ
					|	СведенияОбАдресатах.Контакт В(&Контакты)
					|
					|УПОРЯДОЧИТЬ ПО
					|	АдресатСообщенияКод";

				МассивАдресатовДляПолученияПредставления = 
					ЗапросАдресаты.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

				ПараметрыСинхронизации.Контакты.Очистить();

			КонецЕсли;

		КонецЕсли;

		Для Каждого Элемент Из ПараметрыСинхронизации.Адресаты Цикл

			Если ПараметрыСинхронизации.ВыгруженныеОбъекты[Элемент.Ключ] = Неопределено Тогда
				МассивАдресатовДляПолученияПредставления.Добавить(Элемент.Ключ);
			КонецЕсли;

		КонецЦикла;

		Если МассивАдресатовДляПолученияПредставления.Количество() > 0 Тогда

			ПредставленияАдресатов = 
				ВстроеннаяПочтаСервер.ПолучитьСоответствиеСПредставлениямиИКонтактамиМассиваАдресатов(
					МассивАдресатовДляПолученияПредставления);

			Для Каждого СтрокаАдресат Из ПредставленияАдресатов Цикл

				ВыгрузитьВXMLАдресата(ЗаписьXML, ВерсияСервиса, 
					ПараметрыСинхронизации, СтрокаАдресат.Значение);

			КонецЦикла;

			ПараметрыСинхронизации.Адресаты.Очистить();

		КонецЕсли;

		УстановитьПривилегированныйРежим(Ложь);

	Исключение

		Инфо = ИнформацияОбОшибке();

		ОбменСМобильнымиDMXФормированиеXMLСервер.ПолучитьXMLИзОбъекта(ЗаписьXML, 
			ВерсияСервиса, ПараметрыСинхронизации, Инфо);

	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - Записать заголовок элемента данных
//
// Параметры:
//  ИмяТипа		  - Строка - Тип выгружаемого объекта;
//  ВерсияФормата - Строка - Использованная при выгрузке версия формата.
//
Функция ЗаписатьЗаголовокОбъекта(ИмяТипаОбъекта, ВерсияФормата)

	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяТипаОбъекта);
	ЗаписьXML.ЗаписатьАтрибут("Version", ВерсияФормата);

	Возврат ЗаписьXML;

КонецФункции

// Выполняет запись указанного свойства в XML-поток.
//
// Параметры:
//  ЗаписьXML		 - ЗаписьXML - Объект записи данных в файл;
//  ИмяЭлемента		 - Строка - Имя присваеваемое данным в файле;
//  ЗначениеЭлемента - Проивзольный - Записываемое в поток значение данных.
//
Процедура ЗаписатьЭлементОбъектаДанных(ЗаписьXML, ИмяЭлемента, ЗначениеЭлемента)

	Если Не ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
		Возврат;
	КонецЕсли;

	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(ЗначениеЭлемента));
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

// Помещает в поток XML уникальный идентификатор объекта
//
// Параметры:
//  ЗаписьXML		 - ЗаписьXML - Объект записи
//  ИмяЭлемента		 - Строка - Имя записываемого элемента в файле
//  ЗначениеЭлемента - Ссылка - Ссылка на объект
//
Процедура ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, ИмяЭлемента, ЗначениеЭлемента)

	Если Не ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
		Возврат;
	КонецЕсли;

	Попытка
		УИД = ЗначениеЭлемента.УникальныйИдентификатор();
	Исключение

		ВызватьИсключение 
			СтрШаблон(
				"Не удалось получить УИД от объекта (Тип %1, %2)",
				ТипЗнч(ЗначениеЭлемента), 
				Строка(ЗначениеЭлемента));

	КонецПопытки;

	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, ИмяЭлемента, УИД);

КонецПроцедуры

// Формирует сообщение об использовании недопустимой версии формата для указанного объекта.
//
// Параметры:
//  Версия - Строка - Используемая версия формата обмена;
//  Объект - Произвольный - Объект с которым произошла ошибка выгрузки;
//  ПараметрыСинхронизации - Структура - Кэш параметров обмена.
//
Процедура СформироватьСообщениеОНеизвестнойВерсии(Версия, Объект, ПараметрыСинхронизации)

	ОписаниеПроблемы = 
		СтрШаблон(
			НСтр("ru = 'Указана неверная версия формата выгрузки (""%1"") для объекта ""%2""'"),
			Версия, Объект);

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьПредупреждение(
		ОписаниеПроблемы, Ложь, ПараметрыСинхронизации.МобильныйКлиент);

КонецПроцедуры

// Записывает запись протокола о том, что объект выгружен, если это необходимо и обновляет общие счетчики.
//
// Параметры:
//  ПараметрыСинхронизации - Структура - Кэш параметров обмена.
//
Процедура ОбновитьПротоколИСчетчики(ПараметрыСинхронизации)

	ПараметрыСинхронизации.ВыгруженоОбъектов = ПараметрыСинхронизации.ВыгруженоОбъектов + 1;

КонецПроцедуры

// Выгружает XML представление ссылки на объект
//
// Параметры:
//  ЗаписьXML		- ЗаписьXML - Объект записи данных в файл;
//  ИмяЭлемента		- Строка - Имя данных записываемое в файл;
//  ЭлементДанных	- ДокументСсылка.ВходящееПисьмо - Выгружаемый элемент данных.
// 
Процедура ЗаписатьСсылкуНаЭлементДанных(ЗаписьXML, ИмяЭлемента, ЭлементДанных)

	Если Не ЗначениеЗаполнено(ЭлементДанных) Тогда
		Возврат;
	КонецЕсли;

	// Записываем в поток открывающий тэг
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);

	// записываем данные 
	ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Type", 
		ОбменСМобильнымиСерверПовтИсп.ПолучитьПредставлениеТипаПоСсылке(ЭлементДанных));

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ЭлементДанных);

	// Записываем закрывающий тэг
	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

// Получает адресата по первому адресу электронной почты объекта
//
// Параметры:
//  КонтактнаяИнформация - ТаблицаЗначений - 
// 
// Возвращаемое значение:
//  Адресат, Неопределено - Адресат
//
Функция ПолучитьАдресатаИзКонтактнойИнформации(КонтактнаяИнформация)

	Строка = КонтактнаяИнформация.Найти(Истина, "ЭтоПочта");

	Если Строка = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат 
			ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
				Строка.Представление, Строка.АдресЭП);

	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииВыгрузкиДанных

#Область УдалениеОбъекта

// Определяет какую версию объекта нужно использовать для удаления объекта
//
// Параметры:
//  ЗаписьXML				 - ЗаписьXML - Объект записи данных в файл;
//  ВерсияКлиента			 - Строка	 - Версия протокола обмена заявленная клиентом;
//  ПараметрыСинхронизации	 - Структура - Кэш параметров обмена;
//  ЭлементДанных			 - Ссылка, Набор, УдалениеОбъекта	 - Элемент выгружаемых данных.
//
Процедура ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если ЭлементДанных.Ссылка.УникальныйИдентификатор() = УникальныйИдентификаторПустой() 
		Или Не ЗначениеЗаполнено(ЭлементДанных) Тогда
		Возврат;
	КонецЕсли;

	// выбираем версию выгрузки в зависимости от используемой версии клиента
	//Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьУдалениеОбъектаДляВерсии206(ЗаписьXML, ЭлементДанных);
	//Иначе
	//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации);
	//КонецЕсли;

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

// Выгружает входящее письмо в терминах версии 206
//
// Параметры:
//  ЗаписьXML		 - ЗаписьXML - Объект записи XML файла
//  ЭлементДанных	 - Ссылка, Набор, УдалениеОбъекта - Элемент выгружаемых данных
//
Процедура ВыгрузитьУдалениеОбъектаДляВерсии206(ЗаписьXML, ЭлементДанных)

	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("ObjectDeletion", "206");

	// Записываем данные 
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Type", 
		ОбменСМобильнымиСерверПовтИсп.ПолучитьПредставлениеТипаПоСсылке(ЭлементДанных.Ссылка));

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);

	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область ИнформацияОбОшибках

// Определяет какую версию объекта нужно использовать для удаления объекта
//
// Параметры:
//  ЗаписьXML		 - ЗаписьXML - Объект записи данных в файл;
//  ВерсияКлиента	 - Строка - Версия протокола обмена заявленная клиентом
//  ПараметрыСинхронизации	 - Структура - Кэш параметров обмена;
//  ЭлементДанных	 - Ссылка, Набор, УдалениеОбъекта - Элемент выгружаемых данных
//
Процедура ВыгрузитьВXMLИнформациюОбОшибке(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	// выбираем версию выгрузки в зависимости от используемой версии клиента
	//Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьИнформациюОбОшибкеДляВерсии206(ЗаписьXML, ЭлементДанных);
	//Иначе
	//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации);
	//КонецЕсли;

КонецПроцедуры

// Выгружает входящее письмо в терминах версии 206
//
// Параметры:
//  ЗаписьXML		 - ЗаписьXML - Объект записи XML файла
//  ЭлементДанных	 - Ссылка, Набор, УдалениеОбъекта - Элемент выгружаемых данных
//
Процедура ВыгрузитьИнформациюОбОшибкеДляВерсии206(ЗаписьXML, ЭлементДанных)

	// Подготовка данных
	ТипЗаписи = "Error";
	Если СтрНайти(ЭлементДанных.Описание, "info:") Тогда
		ТипЗаписи = "Information";
	ИначеЕсли СтрНайти(ЭлементДанных.Описание, "warning:") Тогда
		ТипЗаписи = "Warning";
	КонецЕсли;

	ОписаниеОшибки = ЭлементДанных.Описание;
	ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "info:", "");
	ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "warning:", "");

	Если СтрСравнить(ТипЗаписи, "Error") = 0 Тогда

		ПодробноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ЭлементДанных);
		ПодробноеОписаниеОшибки = СтрЗаменить(ПодробноеОписаниеОшибки, "info:", "");
		ПодробноеОписаниеОшибки = СтрЗаменить(ПодробноеОписаниеОшибки, "warning:", "");

		ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'При синхронизации на сервере произошла ошибка:
				|%1
				|
				|#Текст ошибки (для администратора):#
				|%2'"),
			ОписаниеОшибки,
			ПодробноеОписаниеОшибки);

	КонецЕсли;

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("LogRecord", "206");

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "RecordType", ТипЗаписи);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Description", ОписаниеОшибки);

	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////////////

#Область Пользователи

Процедура ВыгрузитьВXMLПользователей(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = ПараметрыСинхронизации.КешДанныхОПользователях.Найти(ЭлементДанных.Ссылка, "Ссылка");
	Если Реквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Реквизиты.Наименование) Тогда
		Возврат;
	КонецЕсли;

	//Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьПользователейПоВерсии206(ЗаписьXML, Реквизиты, ПараметрыСинхронизации);
	//Иначе
	//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, Реквизиты.Ссылка, ПараметрыСинхронизации);
	//КонецЕсли;

	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(Реквизиты.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьПользователейПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	// Подготовка данных
	Адресат = ПолучитьАдресатаИзКонтактнойИнформации(ЭлементДанных.КонтактнаяИнформация);

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("User", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Presentation", ЭлементДанных.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Addressee", Строка(Адресат));
	ПараметрыСинхронизации.Адресаты.Вставить(Адресат, Истина);

	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область ПапкиПисем

Процедура ВыгрузитьВXMLПапкиПисем(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных] = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта = ПолучитьДанныеОбъектовВидаПапкиПисем(ЭлементДанных);

	Реквизиты = ДанныеОбъекта.Найти(ЭлементДанных, "Ссылка");
	Если Реквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;

	//Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьПапкиПисемПоВерсии206(ЗаписьXML, Реквизиты, ПараметрыСинхронизации);
	//Иначе
	//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, Реквизиты.Ссылка, ПараметрыСинхронизации);
	//КонецЕсли;

	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(Реквизиты.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Функция ПолучитьДанныеОбъектовВидаПапкиПисем(ЭлементДанных, Знач Пользователь = Неопределено)

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Объекты", ЭлементДанных);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПапкиУчетныхЗаписей.Папка,
		|	ПапкиУчетныхЗаписей.УчетнаяЗапись
		|ПОМЕСТИТЬ УчетныеЗаписиПапок
		|ИЗ
		|	РегистрСведений.ПапкиУчетныхЗаписей КАК ПапкиУчетныхЗаписей
		|ГДЕ
		|	ПапкиУчетныхЗаписей.Папка = &Объекты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПапкиПисем.Ссылка,
		|	ПапкиПисем.Наименование,
		|	ПапкиПисем.ВидПапки,
		|	ПапкиПисем.Родитель,
		|	ЕСТЬNULL(УчетныеЗаписиПапок.УчетнаяЗапись, ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка)) КАК УчетнаяЗапись
		|ИЗ
		|	Справочник.ПапкиПисем КАК ПапкиПисем
		|		ЛЕВОЕ СОЕДИНЕНИЕ УчетныеЗаписиПапок КАК УчетныеЗаписиПапок
		|		ПО ПапкиПисем.Ссылка = УчетныеЗаписиПапок.Папка
		|ГДЕ
		|	ПапкиПисем.Ссылка = &Объекты";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура ВыгрузитьПапкиПисемПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	// Получение данных
	СинхронизируемыеПапки = ПараметрыСинхронизации.ПапкиВСинхронизации;

	Если ЗначениеЗаполнено(ЭлементДанных.Родитель) И 
	  Не СинхронизируемыеПапки.Найти(ЭлементДанных.Родитель) = Неопределено Тогда
		ИДРодителя = ЭлементДанных.Родитель.УникальныйИдентификатор();

	Иначе
		ИДРодителя = УникальныйИдентификаторПустой();

	КонецЕсли;

	ВидПапки = ?(ЗначениеЗаполнено(ЭлементДанных.ВидПапки),
		ОбщегоНазначения.ИмяЗначенияПеречисления(ЭлементДанных.ВидПапки),
		ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ВидыПапокПисем.Общая));

	//Выгрузка связанных объектов
	ПолучитьXMLИзОбъекта(ЗаписьXML, "206", ПараметрыСинхронизации, ЭлементДанных.УчетнаяЗапись);

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("MailFolder", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Presentation", ЭлементДанных.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FolderType", ВидПапки);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ParentFolder", ИДРодителя);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "MailAccount", ЭлементДанных.УчетнаяЗапись);

	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область УчетныеЗаписиЭлектроннойПочты

Процедура ВыгрузитьВXMLУчетныеЗаписиЭлектроннойПочты(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;

	ТаблицаДанных = ПолучитьДанныеОбъектовВидаУчетныеЗаписиЭлектроннойПочты(ЭлементДанных, 
		ПользователиКлиентСервер.ТекущийПользователь());

	Для каждого ЭлементДанных Из ТаблицаДанных Цикл

		Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		//Если ВерсияКлиента >= "206" Тогда
			ВыгрузитьУчетныеЗаписиЭлектроннойПочтыПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации);
		//Иначе
		//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных.Ссылка, ПараметрыСинхронизации);
		//КонецЕсли;

		ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных.Ссылка, Истина);

		ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьДанныеОбъектовВидаУчетныеЗаписиЭлектроннойПочты(ЭлементДанных, Знач Пользователь = Неопределено)

	УстановитьПривилегированныйРежим(Истина);

	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Объекты", ЭлементДанных);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетныеЗаписи.Ссылка,
		|	ИСТИНА КАК ДоступнаДляОтправки
		|ПОМЕСТИТЬ УчетныеЗаписиДоступныеДляОтправки
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты.ОтветственныеЗаОбработкуПисем КАК УчетныеЗаписи
		|ГДЕ
		|	УчетныеЗаписи.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеУчетныхЗаписей.Ссылка,
		|	ДанныеУчетныхЗаписей.АдресЭлектроннойПочты,
		|	ЕСТЬNULL(УчетныеЗаписиДоступныеДляОтправка.ДоступнаДляОтправки, ЛОЖЬ) КАК ДоступнаДляОтправки
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК ДанныеУчетныхЗаписей
		|		ЛЕВОЕ СОЕДИНЕНИЕ УчетныеЗаписиДоступныеДляОтправки КАК УчетныеЗаписиДоступныеДляОтправка
		|		ПО ДанныеУчетныхЗаписей.Ссылка = УчетныеЗаписиДоступныеДляОтправка.Ссылка
		|ГДЕ
		|	ДанныеУчетныхЗаписей.Ссылка = &Объекты";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура ВыгрузитьУчетныеЗаписиЭлектроннойПочтыПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	УчетнаяЗаписьПоУмолчанию = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ВстроеннаяПочта",
		"ОсновнаяУчетнаяЗапись",
		Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка(),,
		ПараметрыСинхронизации.ПользовательИБ.Имя);

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("MailAccount", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CanBeUsedForSending", ЭлементДанных.ДоступнаДляОтправки);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Address", ЭлементДанных.АдресЭлектроннойПочты);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "IsDefaultAccount", 
		УчетнаяЗаписьПоУмолчанию = ЭлементДанных.Ссылка);

	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти


#Область НастройкиСинхронизации

Процедура ВыгрузитьВXMLНастройкиСинхронизации(ЗаписьXML, ВерсияКлиента, 
	ПараметрыСинхронизации, Запись)

	ВидНастройки = Запись.ВидНастройки;

	Если ВидНастройки = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.СинхронизацияПапокПисем Тогда

		ВыгрузитьВXMLНастройкуСинхронизацииПапокПисем(ЗаписьXML, ВерсияКлиента, 
			ПараметрыСинхронизации, Запись);

	ИначеЕсли ВидНастройки = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.ШаблоныТекстовПисем Тогда

		ВыгрузитьВXMLНастройкиШаблоновПисем(ЗаписьXML, ВерсияКлиента, 
			ПараметрыСинхронизации, Запись);

	ИначеЕсли ВидНастройки = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.МаксимальныйРазмерФайла Тогда

		ВыгрузитьВXMLНастройкуМаксРазмераФайла(ЗаписьXML, ВерсияКлиента, 
			ПараметрыСинхронизации, Запись);

	ИначеЕсли ВидНастройки = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.СрокУстареванияДанных Тогда

		ВыгрузитьВXMLНастройкуСрокаУстаревания(ЗаписьXML, ВерсияКлиента, 
			ПараметрыСинхронизации, Запись);

	ИначеЕсли ВидНастройки = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.СинхронизироватьПочту Тогда

		ВыгрузитьВXMLНастройкуСинхронизацииПочты(ЗаписьXML, ВерсияКлиента, 
			ПараметрыСинхронизации, Запись);

	ИначеЕсли ВидНастройки = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.СинхронизироватьЗадачи Тогда

		ВыгрузитьВXMLНастройкуСинхронизацииЗадач(ЗаписьXML, ВерсияКлиента, 
			ПараметрыСинхронизации, Запись);

	ИначеЕсли ВидНастройки = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.СинхронизироватьКалендарь Тогда

		ВыгрузитьВXMLНастройкуСинхронизацииКалендаря(ЗаписьXML, ПараметрыСинхронизации, Запись);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СинхронизироватьПочту

Процедура ВыгрузитьВXMLНастройкуСинхронизацииПочты(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	//Если ВерсияКлиента >= "214" Тогда
		ВыгрузитьНастройкуСинхронизацииПочтыПоВерсии214(ЗаписьXML, ПараметрыСинхронизации);
	//Иначе
	//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации);
	//КонецЕсли;

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьНастройкуСинхронизацииПочтыПоВерсии214(ЗаписьXML, ПараметрыСинхронизации)

	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("MailSynchronizationSettings", "214");

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, 
		"MailSynchronization", ПараметрыСинхронизации.СинхронизироватьПочту);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область СинхронизироватьЗадачи

Процедура ВыгрузитьВXMLНастройкуСинхронизацииЗадач(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	//Если ВерсияКлиента >= "214" Тогда
		ВыгрузитьНастройкуСинхронизацииЗадачПоВерсии214(ЗаписьXML, ПараметрыСинхронизации);
	//Иначе
	//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации);
	//КонецЕсли;

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьНастройкуСинхронизацииЗадачПоВерсии214(ЗаписьXML, ПараметрыСинхронизации)

	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("TaskSynchronizationSettings", "214");

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, 
		"TaskSynchronization", ПараметрыСинхронизации.СинхронизироватьЗадачи);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область СинхронизироватьКалендарь

Процедура ВыгрузитьВXMLНастройкуСинхронизацииКалендаря(ЗаписьXML, ПараметрыСинхронизации, ЭлементДанных)

	//Если Не ПараметрыСинхронизации.СинхронизироватьКалендарь Тогда
	//	Возврат;
	//КонецЕсли;

	//ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("CalendarSynchronizationSettings", "214");

	//ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, 
	//	"CalendarSynchronization", ПараметрыСинхронизации.СинхронизироватьКалендарь);

	//ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	//// Записываем файл данные объекта
	//ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

	//ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

#КонецОбласти

#Область НастройкаСинхронизацииПапок

Процедура ВыгрузитьВXMLНастройкуСинхронизацииПапокПисем(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;

	//Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьНастройкуСинхронизацииПапокПисемПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации);
	//Иначе
	//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации);
	//КонецЕсли;

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьНастройкуСинхронизацииПапокПисемПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	// Подготовка данных
	НаборПапки = РегистрыСведений.СинхронизацияПапокПисемСМобильнымКлиентом.СоздатьНаборЗаписей();
	НаборПапки.Отбор.Пользователь.Установить(ПользователиКлиентСервер.ТекущийПользователь(), Истина);
	НаборПапки.Прочитать();

	НаборПапок = Новый Массив();
	Для Каждого Запись Из НаборПапки Цикл

		НаборПапок.Добавить(Запись.Папка);

		ВыгрузитьВXMLПапкиПисем(ЗаписьXML, "206", ПараметрыСинхронизации, Запись.Папка);

	КонецЦикла;

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("MailFolderSynchronizationSettings", "206");

	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("Folders");

	Для Каждого Запись Из НаборПапки Цикл
		ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "Folder", Запись.Папка);
	КонецЦикла;

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // Folders

	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область НастройкиШаблоновПисем

Процедура ВыгрузитьВXMLНастройкиШаблоновПисем(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, МассивИзмененныхДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;

	Описание = "Настройка шаблонов писем";
	
	//Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьНастройкиШаблоновПисемПоВерсии206(ЗаписьXML, ПараметрыСинхронизации);
	//Иначе
	//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, Описание, ПараметрыСинхронизации);
	//КонецЕсли;

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьНастройкиШаблоновПисемПоВерсии206(ЗаписьXML, ПараметрыСинхронизации)

	// Получем необходимые данные
	ПодписьДляНовыхПисем =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта", "ПодписьДляНовыхПисем",
			Справочники.ШаблоныТекстов.ПустаяСсылка());

	ПодписьПриОтветеИПересылке =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта", "ПодписьПриОтветеИПересылке",
			Справочники.ШаблоныТекстов.ПустаяСсылка());

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("MailFooterSettings", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "NewMailFooter", ПодписьДляНовыхПисем);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ResponseMailFooter", ПодписьПриОтветеИПересылке);

	// Записываем в поток закрывающий тэг
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область НастройкаМаксРазмераФайла

Процедура ВыгрузитьВXMLНастройкуМаксРазмераФайла(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, МассивИзмененныхДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;
	
	Описание = "Настройка максимального размера передаваемых файлов";

	//Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьНастройкуМаксРазмерФайлаПоВерсии206(ЗаписьXML, ПараметрыСинхронизации);
	//Иначе
	//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, Описание, ПараметрыСинхронизации);
	//КонецЕсли;

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьНастройкуМаксРазмерФайлаПоВерсии206(ЗаписьXML, ПараметрыСинхронизации)

	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("MaxFileSizeToDownloadSetting", "206");

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FileSize", ПараметрыСинхронизации.МаксимальныйРазмерФайла);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область НастройкаСрокаУстаревания

Процедура ВыгрузитьВXMLНастройкуСрокаУстаревания(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, МассивИзмененныхДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;

	Описание = "Настройка срока устаревания";

	//Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьНастройкуСрокаУстареванияПоВерсии206(ЗаписьXML, ПараметрыСинхронизации);
	//Иначе
	//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, Описание, ПараметрыСинхронизации);
	//КонецЕсли;

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьНастройкуСрокаУстареванияПоВерсии206(ЗаписьXML, ПараметрыСинхронизации)

	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("DataExpirationSettings", "206");

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, 
		"DataExpirationPeriod", ПараметрыСинхронизации.СрокУстареванияДанных);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти


#Область ШаблоныТекстов

Процедура ВыгрузитьВXMLШаблоныТекстов(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;

	ТаблицаДанных = ПолучитьДанныеОбъектовВидаШаблоныТекстов(ЭлементДанных, ПользователиКлиентСервер.ТекущийПользователь());

	Для каждого ЭлементДанных Из ТаблицаДанных Цикл

		Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
			Продолжить;
		КонецЕсли;

		//Если ВерсияКлиента >= "206" Тогда
			ВыгрузитьШаблоныТекстовПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации);
		//Иначе
		//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных.Ссылка, ПараметрыСинхронизации);
		//КонецЕсли;

		ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных.Ссылка, Истина);

		ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьДанныеОбъектовВидаШаблоныТекстов(ЭлементДанных, Знач Пользователь = Неопределено)

	УстановитьПривилегированныйРежим(Истина);

	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Объекты", ЭлементДанных);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныТекстов.Ссылка,
		|	ШаблоныТекстов.ВерсияДанных,
		|	ШаблоныТекстов.Наименование,
		|	ШаблоныТекстов.Шаблон
		|ИЗ
		|	Справочник.ШаблоныТекстов КАК ШаблоныТекстов
		|ГДЕ
		|	ШаблоныТекстов.Ссылка = &Объекты";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура ВыгрузитьШаблоныТекстовПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("MailTextTemplate", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DataVersion", ЭлементДанных.ВерсияДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Presentation", ЭлементДанных.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Text", ЭлементДанных.Шаблон);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область ЗаписиКалендаряСотрудника

Процедура ВыгрузитьВXMLЗаписиКалендаряСотрудника(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьКалендарь Тогда
		Возврат;
	КонецЕсли;

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	ТаблицаДанных = ПолучитьДанныеОбъектовВидаЗаписиКалендаряСотрудника(ЭлементДанных, ПользователиКлиентСервер.ТекущийПользователь());

	Реквизиты = ТаблицаДанных.Найти(ЭлементДанных.Ссылка, "Ссылка");
	Если Реквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Объект может устареть и не подлежит выгрузке на клиент.
	ГраницаУстареванияДанных = ТекущаяДата() - ПараметрыСинхронизации.СрокУстареванияДанных * 86400;

	// Если настроено повторение, то объект должен передаваться до тех пор пока оно действует
	// и не меньше срока устаревания данных.
	Если Реквизиты.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		
		Если ЗначениеЗаполнено(Реквизиты.ДатаОкончанияПовторения) Тогда
			НадоВыгружать = Реквизиты.ДатаОкончанияПовторения >= ГраницаУстареванияДанных;
		Иначе
			НадоВыгружать = Истина;
		КонецЕсли;
		
		Если Не НадоВыгружать Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		Если Реквизиты.ДатаОкончания < ГраницаУстареванияДанных Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	//Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьЗаписиКалендаряСотрудникаПоВерсии206(ЗаписьXML, Реквизиты, ПараметрыСинхронизации);
	//Иначе
	//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, Реквизиты.Ссылка, ПараметрыСинхронизации);
	//КонецЕсли;

	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(Реквизиты.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Функция ПолучитьДанныеОбъектовВидаЗаписиКалендаряСотрудника(ЭлементДанных, Знач Пользователь = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);

	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Объекты", ЭлементДанных);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаписиКалендаряСотрудника.Ссылка,
		|	ЗаписиКалендаряСотрудника.ВерсияДанных,
		|	ЗаписиКалендаряСотрудника.Наименование,
		|	ЗаписиКалендаряСотрудника.Описание,
		|	ЗаписиКалендаряСотрудника.ВесьДень,
		|	ЗаписиКалендаряСотрудника.Начало КАК ДатаНачала,
		|	ЗаписиКалендаряСотрудника.Окончание КАК ДатаОкончания,
		|	ЗаписиКалендаряСотрудника.ТипЗаписиКалендаря,
		|	ЗаписиКалендаряСотрудника.ДатаНачалаПовторения,
		|	ЗаписиКалендаряСотрудника.ДатаОкончанияПовторения,
		|	ЗаписиКалендаряСотрудника.ИнтервалПовторения,
		|	ЗаписиКалендаряСотрудника.ПовторениеПоДнямМесяца,
		|	ЗаписиКалендаряСотрудника.ПовторениеПоМесяцам,
		|	ЗаписиКалендаряСотрудника.КоличествоПовторов,
		|	ЗаписиКалендаряСотрудника.ЧастотаПовторения,
		|	ЗаписиКалендаряСотрудника.ПравилоОкончанияПовторения,
		|	ЗаписиКалендаряСотрудника.ПовторениеПоДням.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДеньНедели,
		|		НомерВхождения
		|	),
		|	ЗаписиКалендаряСотрудника.ИсключенияПовторения.(
		|		Ссылка,
		|		НомерСтроки,
		|		ДатаИсключения,
		|		ЗаписьИсключения
		|	),
		|	ЗаписиКалендаряСотрудника.Календарь.ВладелецКалендаря КАК Пользователь,
		|	ЗаписиКалендаряСотрудника.Источник КАК Предмет
		|ИЗ
		|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
		|ГДЕ
		|	ЗаписиКалендаряСотрудника.Ссылка = &Объекты";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура ВыгрузитьЗаписиКалендаряСотрудникаПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	ПолучитьXMLИзОбъекта(ЗаписьXML, "206", ПараметрыСинхронизации, ЭлементДанных.Предмет, Истина);

	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("CalendarEvent", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DataVersion", ЭлементДанных.ВерсияДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Name", ЭлементДанных.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Description", ЭлементДанных.Описание);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DayLong", ЭлементДанных.ВесьДень);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "StartDate", ЭлементДанных.ДатаНачала);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "EndDate", ЭлементДанных.ДатаОкончания);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Type", 
		ОбменСМобильнымиСерверПовтИсп.ПолучитьПредставлениеТипаЗаписиКалендаря(ЭлементДанных.ТипЗаписиКалендаря));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "IsDone", Ложь);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Linked", ЗначениеЗаполнено(ЭлементДанных.Предмет));
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Target", ЭлементДанных.Предмет);

	Если ЭлементДанных.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда

		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "RecurrenceStartDate", ЭлементДанных.ДатаНачалаПовторения);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "RecurrenceEndDate", ЭлементДанных.ДатаОкончанияПовторения);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Interval", ЭлементДанных.ИнтервалПовторения);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ByMonthDay", ЭлементДанных.ПовторениеПоДнямМесяца);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ByMonth", ЭлементДанных.ПовторениеПоМесяцам);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Count", ЭлементДанных.КоличествоПовторов);

		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Frequency", 
			ОбменСМобильнымиСерверПовтИсп.ПолучитьПредставлениеЧастотыПовторений(ЭлементДанных.ЧастотаПовторения));

		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "EndRule", 
			ОбменСМобильнымиСерверПовтИсп.ПолучитьПредставлениеПравилаОкончанияПовторения(ЭлементДанных.ПравилоОкончанияПовторения));

		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("RecurrenceDays");

		Для Каждого ДеньПовторения Из ЭлементДанных.ПовторениеПоДням Цикл

			ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("RecurrenceDay");

			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Day", ДеньПовторения.ДеньНедели);
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Occurrence", ДеньПовторения.НомерВхождения);

			ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

		КонецЦикла;

		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("RecurrenceExceptions");

		Для Каждого ИсключениеПовторения Из ЭлементДанных.ИсключенияПовторения Цикл

			ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("RecurrenceException");

			ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ИсключениеПовторения.ЗаписьИсключения);
			ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Date", ИсключениеПовторения.ДатаИсключения);

			ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

		КонецЦикла;

		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	КонецЕсли;

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // CalendarEvent

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область Адресаты

Процедура ВыгрузитьВXMLАдресата(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если Не ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Неопределено Тогда
		Возврат;
	КонецЕсли;

	//Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьАдресатаПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации);
	//Иначе
	//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных.Ссылка, ПараметрыСинхронизации);
	//КонецЕсли;

	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных.Ссылка, ЭлементДанных.Ссылка);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьАдресатаПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("Addressee", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Presentation", ЭлементДанных.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Address", ЭлементДанных.Адрес);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область Задача

Процедура ВыгрузитьВXMLЗадачуИсполнителя(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	// Предварительные проверки

	Если Не ПараметрыСинхронизации.СинхронизироватьЗадачи Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ЭлементДанных) Тогда
		Возврат;
	КонецЕсли;

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = ОбменСМобильнымиDMXСервер.ПолучитьРеквизитыЗадачиСПроверкойДоступности(ЭлементДанных);
	Если РезультатЗапроса.Пустой() Тогда

		ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных);
		Возврат;

	КонецЕсли;

	ТаблицаДанных = РезультатЗапроса.Выгрузить();

	Реквизиты = ТаблицаДанных.Найти(ЭлементДанных.Ссылка, "Ссылка");
	Если Реквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Реквизиты.ПометкаУдаления 
	 Или Реквизиты.Статус = Перечисления.СтатусыЗадач.Отменена Тогда
		ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных);
		Возврат;
	КонецЕсли;
	
	Предметы = ЭлементДанных.Ссылка.Предметы.Выгрузить();

	// Выгрузка объектов

	//Если ВерсияКлиента >= "214" Тогда
		ВыгрузитьЗадачуИсполнителяПоВерсии214(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, Реквизиты, Предметы);
	//Иначе
	//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, Реквизиты.Ссылка, ПараметрыСинхронизации);
	//КонецЕсли;

	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьЗадачуИсполнителяПоВерсии214(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, ЭлементДанных, Предметы)

	//ПредставлениеФормы = Новый ХранилищеЗначения(
	//	ОбменСМобильнымиСервер.ПолучитьHTMLПредставлениеФормыЗадачи(ЭлементДанных.Ссылка), 
	//	Новый СжатиеДанных(9));

	ВерсияФормата = "214";

	// Записываем связанные объекты
	ПолучитьXMLИзОбъекта(ЗаписьXML, ВерсияФормата, ПараметрыСинхронизации, ЭлементДанных.Исполнитель);

	// Записываем объект
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("Task", ВерсияФормата);

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DataVersion", ЭлементДанных.ВерсияДанных);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Presentation", ЭлементДанных.Наименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Status", ЭлементДанных.Статус);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Customer", Строка(ЭлементДанных.Заказчик));//Заказчик
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ContactPerson", Строка(ЭлементДанных.КонтактноеЛицоЗаказчика));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Contacts", Документы.Задачи.ПолучитьКонтакты(ЭлементДанных.КонтактноеЛицоЗаказчика));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Project", Строка(ЭлементДанных.Проект));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Cost", ЭлементДанных.ОценкаТрудозатрат);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Calendar", Строка(ЭлементДанных.КалендарьСотрудника));	
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Description", ЭлементДанных.Описание);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ShortPresentation", 
		ОбменСМобильнымиПочтаСервер.ПолучитьКраткийТекст(ЭлементДанных.Описание, 500));

	//ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "Author", ЭлементДанных.Автор);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DeadLine", ЭлементДанных.Срок);

	//ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Importance", 
	//	ОбменСМобильнымиСерверПовтИсп.ПолучитьИдентификаторВажностиЗадачи(ЭлементДанных.Приоритет));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Importance", ЭлементДанных.Приоритет);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Nomer", ЭлементДанных.Номер);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CreationDate", ЭлементДанных.Дата);
	//ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FormPresentation", ПредставлениеФормы);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ExecutionResult", ЭлементДанных.РезультатВыполнения);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ExecutionDate", 
		?(Перечисления.СтатусыЗадач.ЭтоСтатусЗакрытойЗадачи(ЭлементДанных.Статус), ЭлементДанных.ДатаСтатуса, Дата(1,1,1)));

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "User", ЭлементДанных.Исполнитель);

	// Выгружаем подчиненные задаче предметы
	ПредметыКВыгрузке = ДобавитьПредметыКЗадаче(ЗаписьXMLОбъекта, ВерсияСервиса, ПараметрыСинхронизации, ЭлементДанных, Предметы);

	//Запись строк ТЧ Работы
	ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("Works");
	Для Каждого СтрокаТЧ Из ЭлементДанных.Ссылка.Работы Цикл
		ЗаписьXMLОбъекта.ЗаписатьНачалоЭлемента("Work");
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "StartDate", СтрокаТЧ.ДатаНачала);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FinishDate", СтрокаТЧ.ДатаОкончания);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "LaborCosts", СтрокаТЧ.Трудозатраты);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CommentWork", СтрокаТЧ.ВыполненныеДействия);
		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();
	
	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // Закрывающий тег Task.

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

	// Записываем связанные объекты
	Для каждого Предмет Из ПредметыКВыгрузке Цикл
		ПолучитьXMLИзОбъекта(ЗаписьXML, "214", ПараметрыСинхронизации, Предмет, Истина);
	КонецЦикла;

КонецПроцедуры

Функция ДобавитьПредметыКЗадаче(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, СсылкаЗадача, Предметы)

	Объекты = Новый Массив();
	
	Если Предметы.Количество() = 0 Тогда
		Возврат Объекты;
	КонецЕсли;

	ЗаписьXML.ЗаписатьНачалоЭлемента("Targets");

	Для Каждого ПредметЗадачи Из Предметы Цикл

		Если ПредметЗадачи.Предмет = Неопределено
			Или Не ЗначениеЗаполнено(ПредметЗадачи.Предмет) Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(ПредметЗадачи.Предмет) = Тип("СправочникСсылка.Файлы")
		 Или ТипЗнч(ПредметЗадачи.Предмет) = Тип("ДокументСсылка.Задачи")
		 Или ТипЗнч(ПредметЗадачи.Предмет) = Тип("ДокументСсылка.ВходящееПисьмо")
		 Или ТипЗнч(ПредметЗадачи.Предмет) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда

			ЗаписатьСсылкуНаЭлементДанных(ЗаписьXML, "Target", ПредметЗадачи.Предмет);

		Иначе

			ЗаписьXML.ЗаписатьНачалоЭлемента("Target");

			ЗаписатьЭлементОбъектаДанных(ЗаписьXML, "Type", "ActionTarget");
			ЗаписатьИдентификаторЭлементаДанных(ЗаписьXML, "ID", ПредметЗадачи.Предмет);

			ЗаписьXML.ЗаписатьКонецЭлемента();

		КонецЕсли;

		Объекты.Добавить(ПредметЗадачи.Предмет);

		Если Не ПараметрыСинхронизации.ВыгруженныеОбъекты[ПредметЗадачи.Предмет] = Истина Тогда
			ПараметрыСинхронизации.ОбъектыКВыгрузке.Вставить(ПредметЗадачи.Предмет, Истина);
		КонецЕсли;

	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();

	Возврат Объекты;

КонецФункции

#КонецОбласти

#Область НастройкаОтображенияЗаписейРабочегоКалендаря

Процедура ВыгрузитьВXMLНастройкиОтображенияЗаписейРабочегоКалендаря(ЗаписьXML, ВерсияКлиента, 
	ПараметрыСинхронизации, ЭлементДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьКалендарь Тогда
		Возврат;
	КонецЕсли;

	//Если ВерсияКлиента >= "206" Тогда

		Настройка = ЭлементДанных.Настройка;

		Если Настройка = Перечисления.НастройкиЗаписейРабочегоКалендаря.Цвет Тогда
			ВыгрузитьНастройкиОтображенияЗаписейРабочегоКалендаряПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации);

		ИначеЕсли Настройка = Перечисления.НастройкиЗаписейРабочегоКалендаря.Отработана Тогда
			ВыгрузитьВXMLЗаписиКалендаряСотрудника(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных.Событие);

		КонецЕсли;

	//Иначе
	//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации);
	//КонецЕсли;

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьНастройкиОтображенияЗаписейРабочегоКалендаряПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	// Записываем данные
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("ObjectColor", "206");

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Color", 
		ОбменСМобильнымиСерверПовтИсп.ПолучитьПредставлениеЦвета(ЭлементДанных.ЗначениеНастройки));

	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Object", ЭлементДанных.Событие);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти


#Область ПисьмаВПапках

Процедура ВыгрузитьВXMLПисьмаВПапках(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;

	ПапкиВСинхронизации = ПараметрыСинхронизации.ПапкиВСинхронизации;

	Если ПапкиВСинхронизации.Найти(ЭлементДанных.Папка) = Неопределено Тогда
		ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных.Письмо);

	//ИначеЕсли ВерсияКлиента >= "206" Тогда
	Иначе
		ВыгрузитьПисьмаВПапкахПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации);
	//Иначе
	//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации);
	КонецЕсли;

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьПисьмаВПапкахПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	Если Не ЗначениеЗаполнено(ЭлементДанных.Письмо) 
		Или Не ЗначениеЗаполнено(ЭлементДанных.Папка) Тогда
		Возврат;
	КонецЕсли;

	// Может возникнуть ситуация когда письмо перемещается из не синхронизируемой папки
	// в синхронизируемую. У нас этот случай никак не отслеживается, по этому необходимо 
	// выгрузить связанное письмо.
	ПолучитьXMLИзОбъекта(ЗаписьXML, "206", ПараметрыСинхронизации, ЭлементДанных.Письмо);
	
	// Записываем данные
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("ObjectInFolder", "206");

	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Object", ЭлементДанных.Письмо);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "Folder", ЭлементДанных.Папка);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область СведенияОПрочтении

Процедура ВыгрузитьВXMLСведенияОПрочтении(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, МассивИзмененныхДанных)

	Если Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;

	Для каждого ЭлементДанных Из МассивИзмененныхДанных Цикл

		//Если ВерсияКлиента >= "206" Тогда
			ВыгрузитьСведенияОПрочтенииПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации);
		//Иначе
		//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации);
		//КонецЕсли;

		ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузитьСведенияОПрочтенииПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	Объект = ЭлементДанных.Объект;

	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
		ТипОбъекта = "IncomingMail";

	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		ТипОбъекта = "OutgoingMail";

	Иначе
		Возврат;

	КонецЕсли;

	// Записываем данные
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("ObjectReadState", "206");

	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Object", ЭлементДанных.Объект);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "WasRead", ЭлементДанных.Прочтен);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область ФлагиОбъектов

Процедура ВыгрузитьВXMLФлагиОбъектов(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, МассивИзмененныхДанных)

	Для каждого ЭлементДанных Из МассивИзмененныхДанных Цикл

		НеобходимоВыгрузитьЗапись = 
			ПараметрыСинхронизации.СинхронизироватьПочту 
				И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ЭлементДанных.Объект);

		Если НеобходимоВыгрузитьЗапись Тогда
			//Если ВерсияКлиента >= "206" Тогда
				ВыгрузитьФлагиОбъектовПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации);
			//Иначе
			//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации);
			//КонецЕсли;

			ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузитьФлагиОбъектовПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	Объект = ЭлементДанных.Объект;
	Флаг = ЭлементДанных.Флаг;
	
	МассивСсылок = Новый Массив();
	МассивСсылок.Добавить(Объект);

	Для каждого Объект Из МассивСсылок Цикл

		// Записываем данные
		ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("ObjectFlag", "206");

		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Object", Объект);
		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Flag", 
			ОбменСМобильнымиСерверПовтИсп.ПолучитьИдентификаторФлагаОбъекта(Флаг));

		ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

		// Записываем файл данные объекта
		ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ВходящееПисьмо

// Менеджер выгрузки элемента данных типа ДокументСсылка.ВходящееПисьмо
//
// Параметры:
//  ЗаписьXML				 - ЗаписьXML - Объект записи XML файла;
//  ВерсияКлиента			 - Строка - Версия формата запрошенная клиентом;
//  ПараметрыСинхронизации	 - Структура - Кэш параметров обмена;
//  МассивИзмененныхДанных	 - Массив - Массив данных, зарегестрированных к выгрузке.
//
Процедура ВыгрузитьВXMLВходящееПисьмо(ЗаписьXML, ВерсияКлиента, 
	ПараметрыСинхронизации, МассивИзмененныхДанных, КакПредмет = Ложь)

	Если Не КакПредмет И Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;
	
	// Получим синхронизируемые папки клиента
	ПапкиВСинхронизации = ПараметрыСинхронизации.ПапкиВСинхронизации;

	// Получим данные для выгрузки
	ТаблицаДанных    = ПолучитьДанныеОбъектовВидаВходящееПисьмо(МассивИзмененныхДанных, ПользователиКлиентСервер.ТекущийПользователь());
	ГраницаУстареванияДанных = ТекущаяДата() - ПараметрыСинхронизации.СрокУстареванияДанных * 86400;
	
	Для каждого ЭлементДанных Из ТаблицаДанных Цикл

		Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
			Продолжить;
		КонецЕсли;

		Если Не КакПредмет Тогда

			Если ПапкиВСинхронизации.Найти(ЭлементДанных.Папка) = Неопределено Тогда

				ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных.Ссылка);

				ОбменСМобильнымиСервер.ЗаписатьПодробнуюИнформациюОСобытииОбмена(
					ПараметрыСинхронизации, ПараметрыСинхронизации.МобильныйКлиент, ЭлементДанных.Ссылка, 
					НСтр("ru = 'Сформировано удаление объекта: папка письма более не синхронизируется.'"));

				Продолжить;

			КонецЕсли;

			// Объект может устареть и не подлежит выгрузке на клиент
			Если ЭлементДанных.Дата < ГраницаУстареванияДанных Тогда

				ОбменСМобильнымиСервер.ЗаписатьПодробнуюИнформациюОСобытииОбмена(
					ПараметрыСинхронизации, ПараметрыСинхронизации.МобильныйКлиент, ЭлементДанных.Ссылка, 
					СтрШаблон(
						НСтр("ru = 'Объект не передан: находится за границей устаревания данных (%1).'"),
						ГраницаУстареванияДанных));

				Продолжить;

			КонецЕсли;

		КонецЕсли;

		//Если ВерсияКлиента >= "213" Тогда
			ВыгрузитьВходящееПисьмоПоВерсии213(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации);

			ВыгрузитьВXMLВсеПрисоединенныеФайлы(ЗаписьXML, ВерсияКлиента, ЭлементДанных.Ссылка, 
				ПараметрыСинхронизации);

			ВеткаПереписки = РегистрыСведений.ПисьмаВеток.ПолучитьВетку(ЭлементДанных.Ссылка);

			ВыгрузитьВXMLПисьмаВВетке(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных.Ссылка, ВеткаПереписки);
			ВыгрузитьВXMLКорневоеПисьмоВеткиПереписки(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ВеткаПереписки);

		//Иначе
		//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных.Ссылка, ПараметрыСинхронизации);
		//КонецЕсли;

		ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных.Ссылка, Истина);

		ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

	КонецЦикла;

КонецПроцедуры

// Получает таблицу данных о массиве объектом одним запросом
//
// Параметры:
//  МассивИзмененныхДанных	 - Массив - Массив данных, зарегестрированных к выгрузке
//  Пользователь			 - СправочникСсылка.Пользователи - Ссылка на пользователя клиента
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица реквизитов о выгружаемых данных
//
Функция ПолучитьДанныеОбъектовВидаВходящееПисьмо(СсылкаНаОбъект, Знач Пользователь = Неопределено)

	УстановитьПривилегированныйРежим(Истина);

	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Объект", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВходящееПисьмо.Ссылка,
		|	ВходящееПисьмо.ВерсияДанных,
		|	ВходящееПисьмо.ПометкаУдаления,
		|	ВходящееПисьмо.Номер,
		|	ВходящееПисьмо.Дата,
		|	ВходящееПисьмо.Важность,
		|	ВходящееПисьмо.ДатаОтправки,
		|	ВходящееПисьмо.ДатаПолучения,
		|	ВходящееПисьмо.ОтправительАдресат,
		|	ВходящееПисьмо.ТекстПисьмаHTMLХранилище,
		|	ВходящееПисьмо.ТекстПисьмаПростойТекстХранилище,
		|	ВходящееПисьмо.Тема,
		|	ВходящееПисьмо.ТипТекста,
		|	ВходящееПисьмо.ЕстьВложения,
		|	ВходящееПисьмо.УчетнаяЗапись,
		|	ВходящееПисьмо.ОтправительАдресат.Адрес КАК ОтправительАдрес,
		|	ВходящееПисьмо.ОтправительАдресат.Представление КАК ОтправительПредставление
		|ПОМЕСТИТЬ ВходящееПисьмо
		|ИЗ
		|	Документ.ВходящееПисьмо КАК ВходящееПисьмо
		|ГДЕ
		|	ВходящееПисьмо.Ссылка = &Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВходящееПисьмо.Ссылка,
		|	ВходящееПисьмо.ВерсияДанных,
		|	ВходящееПисьмо.ПометкаУдаления,
		|	ВходящееПисьмо.Номер,
		|	ВходящееПисьмо.Дата,
		|	ВходящееПисьмо.Важность,
		|	ВходящееПисьмо.ДатаОтправки,
		|	ВходящееПисьмо.ДатаПолучения,
		|	ВходящееПисьмо.ОтправительАдресат,
		|	ВходящееПисьмо.ТекстПисьмаHTMLХранилище,
		|	ВходящееПисьмо.ТекстПисьмаПростойТекстХранилище,
		|	ВходящееПисьмо.Тема,
		|	ВходящееПисьмо.ТипТекста,
		|	ВходящееПисьмо.ЕстьВложения,
		|	ВходящееПисьмо.УчетнаяЗапись,
		|	ЕСТЬNULL(КешИнформацииОбОбъектах.Переслан, ЛОЖЬ) КАК Переслан,
		|	ЕСТЬNULL(КешИнформацииОбОбъектах.ОтправленОтвет, ЛОЖЬ) КАК ОтправленОтвет,
		|	ЕСТЬNULL(КешИнформацииОбОбъектах.ПолученОтвет, ЛОЖЬ) КАК ПолученОтвет,
		|	ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ) КАК Прочтен,
		|	ПисьмаВеток.ВеткаПереписки,
		|	ПапкиПисем.Папка,
		|	ВходящееПисьмо.ОтправительАдрес,
		|	ВходящееПисьмо.ОтправительПредставление
		|ИЗ
		|	ВходящееПисьмо КАК ВходящееПисьмо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО ВходящееПисьмо.Ссылка = КешИнформацииОбОбъектах.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
		|		ПО ВходящееПисьмо.Ссылка = СведенияОПрочтении.Объект
		|			И (СведенияОПрочтении.Пользователь = &Пользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПисьмаВеток КАК ПисьмаВеток
		|		ПО ВходящееПисьмо.Ссылка = ПисьмаВеток.Письмо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПисьмаВПапках КАК ПапкиПисем
		|		ПО ВходящееПисьмо.Ссылка = ПапкиПисем.Письмо";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Процедура выгрузки входящего письма по версии формата 206.
//
// Параметры:
//  ЗаписьXML			 - ЗаписьXML - Объект приемник данных;
//  ЭлементДанных		 - ДокументСсылка.ВходящееПисьмо - Выгружаемый элемент данных;
//  ПараметрыСинхронизации - Структура - Кэш параметров обмена.
//
Процедура ВыгрузитьВходящееПисьмоПоВерсии213(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	// Запись связанных объектов
	ВыгрузитьВXMLПапкиПисем(ЗаписьXML, "213", ПараметрыСинхронизации, ЭлементДанных.Папка);

	ПараметрыСинхронизации.Адресаты.Вставить(ЭлементДанных.ОтправительАдресат, Истина);

	Если ПараметрыСинхронизации.КэшАдресатовВходящихПисем.Количество() = 0 Тогда
		МассивВходящихПисем = Новый Массив();
		МассивВходящихПисем.Добавить(ЭлементДанных);
		Таблица = ВстроеннаяПочтаСервер.ПолучитьПредставленияИКонтактыПолучателейВходящихПисем(МассивВходящихПисем);
	Иначе
		Таблица = ПараметрыСинхронизации.КэшАдресатовВходящихПисем;
	КонецЕсли;
	МассивПолучатели = Таблица.НайтиСтроки(Новый Структура("Письмо", ЭлементДанных.Ссылка));

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("IncomingMail", "206");
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DataVersion", ЭлементДанных.ВерсияДанных);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CreationDate", 
		?(ЗначениеЗаполнено(ЭлементДанных.Дата),
			ЭлементДанных.Дата,ТекущаяДатаСеанса()));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Importance", 
		ОбщегоНазначения.ИмяЗначенияПеречисления(
			?(ЗначениеЗаполнено(ЭлементДанных.Важность), 
				ЭлементДанных.Важность,
				Перечисления.ВажностьПисем.Обычная)));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Subject", ЭлементДанных.Тема);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "HasAttachment", ЭлементДанных.ЕстьВложения);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "MarkedForDeletion", ЭлементДанных.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "WasRead", ЭлементДанных.Прочтен);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "WasAnswered", ЭлементДанных.ОтправленОтвет);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "WasForwarded", ЭлементДанных.Переслан);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FullText", ЭлементДанных.ТекстПисьмаПростойТекстХранилище);

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "Folder", ЭлементДанных.Папка);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "Account", ЭлементДанных.УчетнаяЗапись);

	ОтправительПредставление = ЭлементДанных.ОтправительПредставление;
	Если СтрНайти(ЭлементДанных.ОтправительПредставление, ЭлементДанных.ОтправительАдрес) = 0 Тогда
		ОтправительПредставление = 
			СтрШаблон("%1 <%2>", ОтправительПредставление, ЭлементДанных.ОтправительАдрес);
	КонецЕсли;
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Sender", ОтправительПредставление);

	Кому    = Новый Массив();
	Копии   = Новый Массив();
	Скрытые = Новый Массив();

	Для каждого Получатель Из МассивПолучатели Цикл

		Если Получатель.ТипАдреса = Перечисления.ТипыАдресатов.Кому Тогда
			Кому.Добавить(Получатель.Представление);
		ИначеЕсли Получатель.ТипАдреса = Перечисления.ТипыАдресатов.Копия Тогда
			Копии.Добавить(Получатель.Представление);
		ИначеЕсли Получатель.ТипАдреса = Перечисления.ТипыАдресатов.СкрытаяКопия Тогда
			Скрытые.Добавить(Получатель.Представление);
		КонецЕсли;

	КонецЦикла;

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TO", СтрСоединить(Кому, ";"));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CC", СтрСоединить(Копии, ";"));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "BCC", СтрСоединить(Скрытые, ";"));

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // IncomingMail

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область ИсходящееПисьмо

// Менеджер выгрузки элемента данных типа ДокументСсылка.ИсходящееПисьмо.
//
// Параметры:
//  ЗаписьXML				 - ЗаписьXML - Объект записи XML файла;
//  ВерсияКлиента			 - Строка - Версия формата запрошенная клиентом;
//  ПараметрыСинхронизации	 - Структура - Кэш параметров обмена;
//  МассивИзмененныхДанных	 - Массив - Массив данных, зарегестрированных к выгрузке;
//  КакПредмер				 - Булево - Признак принудительной выгрузки.
//
Процедура ВыгрузитьВXMLИсходящееПисьмо(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, 
	ЭлементДанных, КакПредмет = Ложь)

	Если Не КакПредмет И Не ПараметрыСинхронизации.СинхронизироватьПочту Тогда
		Возврат;
	КонецЕсли;

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	// Получим синхронизируемые папки клиента
	ПапкиВСинхронизации = ПараметрыСинхронизации.ПапкиВСинхронизации;

	// Получим данные для выгрузки
	ТаблицаДанных = ПолучитьДанныеОбъектовВидаИсходящееПисьмо(
		ЭлементДанных, ПользователиКлиентСервер.ТекущийПользователь());

	ГраницаУстареванияДанных = ТекущаяДата() - ПараметрыСинхронизации.СрокУстареванияДанных * 86400;

	Для каждого ЭлементДанных Из ТаблицаДанных Цикл

		Если Не КакПредмет Тогда

			Если ПапкиВСинхронизации.Найти(ЭлементДанных.Папка) = Неопределено Тогда

				ВыгрузитьВXMLУдалениеОбъекта(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных.Ссылка);

				ОбменСМобильнымиСервер.ЗаписатьПодробнуюИнформациюОСобытииОбмена(
					ПараметрыСинхронизации, ПараметрыСинхронизации.МобильныйКлиент, ЭлементДанных.Ссылка, 
					НСтр("ru = 'Сформировано удаление объекта: папка письма более не синхронизируется.'"));

				Продолжить;

			КонецЕсли;

			// Объект может устареть и не подлежит выгрузке на клиент
			Если ЭлементДанных.Дата < ГраницаУстареванияДанных Тогда

				ОбменСМобильнымиСервер.ЗаписатьПодробнуюИнформациюОСобытииОбмена(
					ПараметрыСинхронизации, ПараметрыСинхронизации.МобильныйКлиент, ЭлементДанных.Ссылка, 
					СтрШаблон(
						НСтр("ru = 'Объект не передан: находится за границей устаревания данных (%1).'"),
						ГраницаУстареванияДанных));

				Продолжить;

			КонецЕсли;

		КонецЕсли;

		//Если ВерсияКлиента >= "213" Тогда

			ВыгрузитьИсходящееПисьмоПоВерсии213(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации);

			ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных.Ссылка, Истина);

			ВыгрузитьВXMLВсеПрисоединенныеФайлы(ЗаписьXML, ВерсияКлиента, ЭлементДанных.Ссылка, 
				ПараметрыСинхронизации);

			ВеткаПереписки = РегистрыСведений.ПисьмаВеток.ПолучитьВетку(ЭлементДанных.Ссылка);
			ВыгрузитьВXMLПисьмаВВетке(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных.Ссылка, ВеткаПереписки);
			ВыгрузитьВXMLКорневоеПисьмоВеткиПереписки(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ВеткаПереписки);

		//Иначе
		//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных.Ссылка, ПараметрыСинхронизации);
		//КонецЕсли;

		ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных.Ссылка, Истина);

		ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

	КонецЦикла;

КонецПроцедуры

// Получает таблицу данных о массиве объектом одним запросом
//
// Параметры:
//  МассивИзмененныхДанных	 - Массив - Массив данных, зарегестрированных к выгрузке
//  Пользователь			 - СправочникСсылка.Пользователи - Ссылка на пользователя клиента
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица реквизитов о выгружаемых данных
//
Функция ПолучитьДанныеОбъектовВидаИсходящееПисьмо(ЭлементДанных, Знач Пользователь = Неопределено)

	УстановитьПривилегированныйРежим(Истина);

	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Объекты", ЭлементДанных);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходящееПисьмо.Ссылка КАК Ссылка,
		|	ИсходящееПисьмо.ПометкаУдаления,
		|	ИсходящееПисьмо.Важность,
		|	ИсходящееПисьмо.ДатаОтправкиПолучения КАК ДатаОтправки,
		|	ИсходящееПисьмо.Тема,
		|	ИсходящееПисьмо.Дата КАК Дата,
		|	ИсходящееПисьмо.ЕстьВложения,
		|	ИсходящееПисьмо.УчетнаяЗапись,
		|	ИсходящееПисьмо.Папка
		|ПОМЕСТИТЬ Письма
		|ИЗ
		|	ЖурналДокументов.ЭлектроннаяПочта КАК ИсходящееПисьмо
		|ГДЕ
		|	ИсходящееПисьмо.Ссылка = &Объекты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходящееПисьмо.Ссылка КАК Ссылка,
		|	ИсходящееПисьмо.ПометкаУдаления,
		|	ИсходящееПисьмо.Важность,
		|	ИсходящееПисьмо.ДатаОтправки,
		|	ИсходящееПисьмо.Тема,
		|	ИсходящееПисьмо.Дата КАК Дата,
		|	ИсходящееПисьмо.ЕстьВложения,
		|	ИсходящееПисьмо.УчетнаяЗапись,
		|	ИсходящееПисьмо.Папка,
		|	ДанныеИзПисьма.ВерсияДанных КАК ВерсияДанных,
		|	ДанныеИзПисьма.Номер КАК Номер,
		|	ДанныеИзПисьма.ТекстХранилище КАК ТекстХранилище,
		|	ДанныеИзПисьма.ТипТекста КАК ТипТекста,
		|	ДанныеИзПисьма.ПодготовленоКОтправке КАК ПодготовленоКОтправке,
		|	ДанныеИзПисьма.ТипОтвета КАК ТипОтвета,
		|	ДанныеИзПисьма.ПисьмоОснование КАК ПисьмоОснование,
		|	ЕСТЬNULL(КешИнформацииОбОбъектах.Переслан, ЛОЖЬ) КАК Переслан,
		|	ЕСТЬNULL(КешИнформацииОбОбъектах.ОтправленОтвет, ЛОЖЬ) КАК ОтправленОтвет,
		|	ЕСТЬNULL(КешИнформацииОбОбъектах.ПолученОтвет, ЛОЖЬ) КАК ПолученОтвет,
		|	ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ) КАК Прочтен,
		|	ПисьмаВеток.ВеткаПереписки
		|ИЗ
		|	Письма КАК ИсходящееПисьмо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО ИсходящееПисьмо.Ссылка = КешИнформацииОбОбъектах.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
		|		ПО ИсходящееПисьмо.Ссылка = СведенияОПрочтении.Объект
		|			И (СведенияОПрочтении.Пользователь = &Пользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПисьмаВеток КАК ПисьмаВеток
		|		ПО ИсходящееПисьмо.Ссылка = ПисьмаВеток.Письмо
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИсходящееПисьмо КАК ДанныеИзПисьма
		|		ПО ИсходящееПисьмо.Ссылка = ДанныеИзПисьма.Ссылка
		|ГДЕ
		|	ИсходящееПисьмо.Ссылка = &Объекты";

	Данные = Запрос.Выполнить().Выгрузить();

	Возврат Данные;

КонецФункции

// Процедура выгрузки входящего письма по версии формата 206.
//
// Параметры:
//  ЗаписьXML			 - ЗаписьXML - Объект приемник данных;
//  ЭлементДанных		 - ДокументСсылка.ВходящееПисьмо - Выгружаемый элемент данных;
//  ПараметрыСинхронизации	 - Структура - Кэш параметров обмена.
//
Процедура ВыгрузитьИсходящееПисьмоПоВерсии213(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации)

	// Запись связанных объектов
	ВыгрузитьВXMLПапкиПисем(ЗаписьXML, "213", ПараметрыСинхронизации, ЭлементДанных.Папка);

	Если ПараметрыСинхронизации.КэшАдресатовИсходящихПисем.Количество() = 0 Тогда
		МассивВходящихПисем = Новый Массив();
		МассивВходящихПисем.Добавить(ЭлементДанных);
		Таблица = ВстроеннаяПочтаСервер.ПолучитьПредставленияИКонтактыПолучателейИсходящихПисем(МассивВходящихПисем);
	Иначе
		Таблица = ПараметрыСинхронизации.КэшАдресатовИсходящихПисем;
	КонецЕсли;
	МассивПолучатели = Таблица.НайтиСтроки(Новый Структура("Письмо", ЭлементДанных.Ссылка));

	// Запись данных
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("OutgoingMail", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "DataVersion", ЭлементДанных.ВерсияДанных);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CreationDate", 
		?(ЗначениеЗаполнено(ЭлементДанных.Дата),ЭлементДанных.Дата,ТекущаяДатаСеанса()));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Importance", 
		ОбщегоНазначения.ИмяЗначенияПеречисления(
			?(ЗначениеЗаполнено(ЭлементДанных.Важность), 
				ЭлементДанных.Важность, Перечисления.ВажностьПисем.Обычная)));

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Subject", ЭлементДанных.Тема);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "HasAttachment", ЭлементДанных.ЕстьВложения);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "MarkedForDeletion", ЭлементДанных.ПометкаУдаления);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "WasRead", ЭлементДанных.Прочтен);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "WasAnswered", ЭлементДанных.ОтправленОтвет);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "WasForwarded", ЭлементДанных.Переслан);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "HasAnswer", ЭлементДанных.ПолученОтвет);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "ReadyToBeSent", ЭлементДанных.ПодготовленоКОтправке);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "WasSent", ЗначениеЗаполнено(ЭлементДанных.ДатаОтправки));
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "Folder", ЭлементДанных.Папка);
	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "Account", ЭлементДанных.УчетнаяЗапись);

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FullText", ЭлементДанных.ТекстХранилище);

	Кому    = Новый Массив();
	Копии   = Новый Массив();
	Скрытые = Новый Массив();

	Для каждого Получатель Из МассивПолучатели Цикл

		Если Получатель.ТипАдреса = Перечисления.ТипыАдресатов.Кому Тогда
			Кому.Добавить(Получатель.Представление);
		ИначеЕсли Получатель.ТипАдреса = Перечисления.ТипыАдресатов.Копия Тогда
			Копии.Добавить(Получатель.Представление);
		ИначеЕсли Получатель.ТипАдреса = Перечисления.ТипыАдресатов.СкрытаяКопия Тогда
			Скрытые.Добавить(Получатель.Представление);
		КонецЕсли;

	КонецЦикла;

	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "TO", СтрСоединить(Кому, ";"));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "CC", СтрСоединить(Копии, ";"));
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "BCC", СтрСоединить(Скрытые, ";"));

	Если ЗначениеЗаполнено(ЭлементДанных.ПисьмоОснование) 
		И ЗначениеЗаполнено(ЭлементДанных.ТипОтвета) Тогда

		ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "AnswerType", 
			ОбщегоНазначения.ИмяЗначенияПеречисления(ЭлементДанных.ТипОтвета));

		ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "BaseLetter", ЭлементДанных.ПисьмоОснование);

	КонецЕсли;

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента(); // OutcomingMail

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

#Область ПисьмаВВетке

Процедура ВыгрузитьВXMLПисьмаВВетке(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, Письмо, ЭлементДанных)

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	//Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьПисьмоВВеткеПоВерсии206(ЗаписьXML, Письмо, ЭлементДанных, ПараметрыСинхронизации);
	//Иначе
	//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных, ПараметрыСинхронизации);
	//КонецЕсли;

	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьПисьмоВВеткеПоВерсии206(ЗаписьXML, Письмо, ЭлементДанных, ПараметрыСинхронизации)

	// Записываем данные
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("LetterInMailThread", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Letter", Письмо.Ссылка);
	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "RootLetter", ЭлементДанных.КорневоеПисьмо);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#Конецобласти

#Область Файлы

Процедура ВыгрузитьВXMLВсеПрисоединенныеФайлы(ЗаписьXML, ВерсияКлиента, Владелец, ПараметрыСинхронизации)

	Файлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Владелец);

	Для каждого Файл Из Файлы Цикл
		ВыгрузитьВXMLФайлы(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, Файл);
	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузитьВXMLФайлы(ЗаписьXML, ВерсияКлиента, ПараметрыСинхронизации, ЭлементДанных, ВыгрузитьПринудительноПолностью = Ложь)

	Если ПараметрыСинхронизации.ВыгруженныеОбъекты[ЭлементДанных.Ссылка] = Истина Тогда
		Возврат;
	КонецЕсли;

	//Если ВерсияКлиента >= "206" Тогда
		ВыгрузитьФайлыПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации, ВыгрузитьПринудительноПолностью);
	//Иначе
	//	СформироватьСообщениеОНеизвестнойВерсии(ВерсияКлиента, ЭлементДанных.Ссылка, ПараметрыСинхронизации);
	//КонецЕсли;

	ПараметрыСинхронизации.ВыгруженныеОбъекты.Вставить(ЭлементДанных.Ссылка, Истина);

	ОбновитьПротоколИСчетчики(ПараметрыСинхронизации);

КонецПроцедуры

Процедура ВыгрузитьФайлыПоВерсии206(ЗаписьXML, ЭлементДанных, ПараметрыСинхронизации, ВыгрузитьПринудительноПолностью)

	РеквизитыФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ЭлементДанных);

	// Подготовка данных
	Если ПараметрыСинхронизации.СинхронизироватьПочту 
		И ТипЗнч(РеквизитыФайла.Владелец) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда

		РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыФайла.Владелец,
			"Дата");

		Если РеквизитыВладельца.Дата > (ТекущаяДата() - ПараметрыСинхронизации.СрокУстареванияДанных * 86400) Тогда
			ТипВладельца = "IncomingMail";
		Иначе
			Возврат;
		КонецЕсли;

	ИначеЕсли ПараметрыСинхронизации.СинхронизироватьПочту 
		И ТипЗнч(РеквизитыФайла.Владелец) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда

		РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыФайла.Владелец,
			"Дата");

		Если РеквизитыВладельца.Дата > (ТекущаяДата() - ПараметрыСинхронизации.СрокУстареванияДанных * 86400) Тогда
			ТипВладельца = "OutgoingMail";
		Иначе
			Возврат;
		КонецЕсли;

	ИначеЕсли ПараметрыСинхронизации.СинхронизироватьЗадачи 
		И ЗначениеЗаполнено(РеквизитыФайла.Владелец) Тогда

		ТипВладельца = "ActionTarget";

	Иначе
		Возврат;

	КонецЕсли;

	// ограничим список файлов выгружаемых на устройство теми которые там можно просмотреть
	// остальные - будут переданы по запросу пользователя

	Если ПараметрыСинхронизации.ФильтроватьФайлыПоФормату Тогда
		ЕстьОграничениеПоРасширению = 
			Не ФайловыеФункцииКлиентСервер.РасширениеФайлаВСписке(
				ПараметрыСинхронизации.ФорматыПередаваемыхФайлов, РеквизитыФайла.Расширение);
	Иначе
		ЕстьОграничениеПоРасширению = Ложь;
	КонецЕсли;

	Если ВыгрузитьПринудительноПолностью Тогда
		ТолькоЗаголовок = Ложь;
	
	ИначеЕсли ЕстьОграничениеПоРасширению Тогда
		ТолькоЗаголовок = Истина;

	Иначе
		МаксимальныйРазмерФайла = ПараметрыСинхронизации.МаксимальныйРазмерФайла;
		ТолькоЗаголовок = МаксимальныйРазмерФайла > 0
							И РеквизитыФайла.Размер > МаксимальныйРазмерФайла * 1024;
	КонецЕсли;

	ПолноеНаименование = РеквизитыФайла.ПолноеНаименованиеВерсии;
	Если ТолькоЗаголовок Тогда
		ДанныеФайла = Неопределено;
	Иначе

		Попытка
			ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(ЭлементДанных);
		Исключение

			ДанныеФайла = Неопределено;
			ТолькоЗаголовок = Истина;

			ТекстПредупреждения = 
				ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
					ПолноеНаименование + "." + РеквизитыФайла.Расширение);

			РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьПредупреждение(
				ТекстПредупреждения, Ложь, ПараметрыСинхронизации.МобильныйКлиент);

		КонецПопытки;

	КонецЕсли;

	Если Найти(ПолноеНаименование, "."+РеквизитыФайла.Расширение) = 0 Тогда
		ПолноеНаименование = ПолноеНаименование + "." + РеквизитыФайла.Расширение;
	КонецЕсли;

	ДанныеФайла = Новый ХранилищеЗначения(ДанныеФайла, Новый СжатиеДанных(9));

	// Записываем данные
	ЗаписьXMLОбъекта = ЗаписатьЗаголовокОбъекта("File", "206");

	ЗаписатьИдентификаторЭлементаДанных(ЗаписьXMLОбъекта, "ID", ЭлементДанных.Ссылка);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Presentation", ПолноеНаименование);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Extension", РеквизитыФайла.Расширение);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "Size", РеквизитыФайла.Размер);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "HeaderOnly", ТолькоЗаголовок);
	ЗаписатьЭлементОбъектаДанных(ЗаписьXMLОбъекта, "FileData", ДанныеФайла);

	ЗаписатьСсылкуНаЭлементДанных(ЗаписьXMLОбъекта, "Owner", РеквизитыФайла.Владелец);

	ЗаписьXMLОбъекта.ЗаписатьКонецЭлемента();

	// Записываем файл данные объекта
	ЗаписьXML.ЗаписатьБезОбработки(ЗаписьXMLОбъекта.Закрыть());

КонецПроцедуры

#КонецОбласти

Процедура ВыгрузитьВXMLКорневоеПисьмоВеткиПереписки(ЗаписьXML, ВерсияСервиса, 
	ПараметрыСинхронизации, ЭлементДанных)

	КорневоеПисьмо = ЭлементДанных.КорневоеПисьмо;

	Если Не ЗначениеЗаполнено(КорневоеПисьмо) Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		КорневоеПисьмо, "Дата");

	Если Не ЗначениеЗаполнено(Реквизиты.Дата) Тогда
		Возврат;
	КонецЕсли;

	// Объект может устареть и не подлежит выгрузке на клиент
	Если Реквизиты.Дата < (ТекущаяДата() - ПараметрыСинхронизации.СрокУстареванияДанных * 86400) Тогда
		Возврат;
	КонецЕсли;

	Тип = ОбменСМобильнымиСерверПовтИсп.ПолучитьПредставлениеТипаПоСсылке(ЭлементДанных.Ссылка);

	Если СтрСравнить(Тип, "IncomingMail") = 0 Тогда
		ВыгрузитьВXMLВходящееПисьмо(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, КорневоеПисьмо);
	ИначеЕсли СтрСравнить(Тип, "OutcomingMail") = 0 Тогда
		ВыгрузитьВXMLИсходящееПисьмо(ЗаписьXML, ВерсияСервиса, ПараметрыСинхронизации, КорневоеПисьмо);
	Иначе
		Возврат;
	КонецЕсли;

	ВыгрузитьВXMLВсеПрисоединенныеФайлы(
		ЗаписьXML, ВерсияСервиса, КорневоеПисьмо.Ссылка, ПараметрыСинхронизации);

КонецПроцедуры

#КонецОбласти