
#Область Подписки

Процедура ПередЗаписьюСправочника(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//Используется при программном изменении командами
	Если Источник.ДополнительныеСвойства.Свойство("ПропуститьВыполнениеСценариев") Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеИсточника = Источник.Метаданные();
	ПолноеИмяИсточника = МетаданныеИсточника.ПолноеИмя();
	Если Не АвтоматизацияПовтИсп.ОбъектИспользуетсяВСценариях(ПолноеИмяИсточника) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСценария = Новый Структура;
	ПараметрыСценария.Вставить("ПолноеИмяИсточника", ПолноеИмяИсточника);
	ПараметрыСценария.Вставить("ЭтоНовый", Источник.ЭтоНовый());
	Если ПараметрыСценария.ЭтоНовый Тогда
		ПараметрыСценария.Вставить("ИсточникПередЗаписью", Справочники[МетаданныеИсточника.Имя].ПустаяСсылка());
	Иначе
		ПараметрыСценария.Вставить("ИсточникПередЗаписью", ПреобразоватьИсточникВСтруктуру(Источник));
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ПараметрыСценария", ПараметрыСценария);
	
	ВыполнениеСценариев(Источник, ПараметрыСценария, Отказ, Перечисления.АвтоматизацияВидыСобытий.ПередЗаписьюИсточника);
	
КонецПроцедуры

Процедура ПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПропуститьВыполнениеСценариев") Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеИсточника = Источник.Метаданные();
	ПолноеИмяИсточника = МетаданныеИсточника.ПолноеИмя();
	Если Не АвтоматизацияПовтИсп.ОбъектИспользуетсяВСценариях(ПолноеИмяИсточника) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСценария = Новый Структура;
	ПараметрыСценария.Вставить("ПолноеИмяИсточника", ПолноеИмяИсточника);
	ПараметрыСценария.Вставить("ЭтоНовый", Источник.ЭтоНовый());
	ПараметрыСценария.Вставить("РежимЗаписи", РежимЗаписи);
	ПараметрыСценария.Вставить("РежимПроведения", РежимПроведения);
	Если ПараметрыСценария.ЭтоНовый Тогда
		ПараметрыСценария.Вставить("ИсточникПередЗаписью", Документы[МетаданныеИсточника.Имя].ПустаяСсылка());
	Иначе
		ПараметрыСценария.Вставить("ИсточникПередЗаписью", ПреобразоватьИсточникВСтруктуру(Источник));
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ПараметрыСценария", ПараметрыСценария);
	
	ВыполнениеСценариев(Источник, ПараметрыСценария, Отказ, Перечисления.АвтоматизацияВидыСобытий.ПередЗаписьюИсточника);
	
КонецПроцедуры

Процедура ПриЗаписиДокументаСправочника(Источник, Отказ) Экспорт
		
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСценария = Неопределено;
	Если Не Источник.ДополнительныеСвойства.Свойство("ПараметрыСценария", ПараметрыСценария) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнениеСценариев(Источник, ПараметрыСценария, Отказ, Перечисления.АвтоматизацияВидыСобытий.ПриЗаписиИсточника);
		
КонецПроцедуры

Процедура ВыполнениеСценариев(Источник, ПараметрыСценария, Отказ, ВидСобытия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Поиск сценариев.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипИсточника", ПараметрыСценария.ПолноеИмяИсточника);
	Запрос.УстановитьПараметр("ВидСобытия", ВидСобытия);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	АвтоматизацияСценарии.Ссылка КАК Сценарий
		|ИЗ
		|	Справочник.АвтоматизацияСценарии КАК АвтоматизацияСценарии
		|ГДЕ
		|	НЕ АвтоматизацияСценарии.ПометкаУдаления
		|	И АвтоматизацияСценарии.Актуален
		|	И НЕ АвтоматизацияСценарии.ЭтоГруппа
		|	И АвтоматизацияСценарии.ВидСобытия = &ВидСобытия
		|	И АвтоматизацияСценарии.ТипИсточника = &ТипИсточника
		|
		|УПОРЯДОЧИТЬ ПО
		|	АвтоматизацияСценарии.ПорядокВыполнения";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВыполнитьКоманды(Выборка.Сценарий, Источник, ПараметрыСценария, Отказ);
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыВыполненияКоманд

Процедура ВыполнитьКоманды(Сценарий, Источник = Неопределено, ПараметрыСценария = Неопределено, Отказ = Ложь)
		
	Для Каждого СтрокаТЧ Из Сценарий.Команды Цикл
		
		Если Не СтрокаТЧ.Выполнять Тогда
			Продолжить;
		КонецЕсли;
		// Выполнение команд.
		Если ВыполнитьУсловие(Сценарий, СтрокаТЧ.Условие, Источник, ПараметрыСценария, Отказ) Тогда
			ВыполнитьКоманду(Сценарий, СтрокаТЧ.Команда, Источник, ПараметрыСценария, Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;	
	КонецЦикла;		
			
КонецПроцедуры

//Источники - массив, используется только для сценариев по расписанию
Функция ВыполнитьУсловие(Сценарий, Условие, Источник, ПараметрыСценария, Отказ, ПоРасписанию = Ложь) Экспорт
	
	//Проверка настроенных условий через конструктор
	РезультатФильтра = Истина;
	НастройкиКомпоновки = Условие.ОтборПоРеквизитам.Получить();
	Если НастройкиКомпоновки <> Неопределено И Не ПустаяСтрока(Условие.ТипИсточника)  Тогда
		
		СистемаКомпоновки = Справочники.АвтоматизацияУсловия.СформироватьСхемуКомпоновкиПоОбъектуМетаданных(Условие.ТипИсточника);
		Если ПоРасписанию Тогда
			ТекстЗапроса = СистемаКомпоновки.НаборыДанных.НаборДанных1.Запрос;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГДЕ ПсевдонимЗаданнойТаблицы.Ссылка = &Источник", "");
			СистемаКомпоновки.НаборыДанных.НаборДанных1.Запрос = ТекстЗапроса;
		КонецЕсли;
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СистемаКомпоновки));
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновки);
		КомпоновщикНастроек.Восстановить();
		
		Если Не ПоРасписанию Тогда
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Источник", Источник.Ссылка);
		КонецЕсли;
		
		//Добавление структуры в компоновке
		ГруппировкаКомпоновкиДанных = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ГруппировкаКомпоновкиДанных.Использование = Истина;
		ПолеГруппировки = ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		ПолеГруппировки.Использование = Истина;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СистемаКомпоновки, КомпоновщикНастроек.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Ложь);
		
		ДанныеПоОтбору = Новый ТаблицаЗначений;
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеПоОтбору);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		РезультатФильтра = ДанныеПоОтбору.Количество() > 0;
		
		Если ПоРасписанию Тогда
			Для Каждого СтрокаТЗ Из ДанныеПоОтбору Цикл
				Источник.Добавить(СтрокаТЗ.Ссылка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//Выполнение произвольного кода
	Результат = Истина;
	Если Не ПустаяСтрока(Условие.ВыполняемыйКод) Тогда
		Попытка
			Выполнить(Условие.ВыполняемыйКод);				
		Исключение
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка выполнения произвольного кода условия %1 для сценария %2. %3'"), 
					Условие, 
					Сценарий, 
					ОписаниеОшибки()
			);
			Если Не ПоРасписанию Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
			РегистрыСведений.АвтоматизацияЖурнал.ОтразитьВЖурнале(
					Сценарий,
					?(ПоРасписанию, "", Источник),
					Перечисления.АвтоматизацияВидыЗаписейЖурнала.Ошибка,
					ТекстОшибки
			);
			Результат = Ложь;
		КонецПопытки;				
	КонецЕсли;
	
	РезультатВложенныхУсловий = Истина;
	Для Каждого СтрокаУсловия Из Условие.ВложенныеУсловия Цикл
		Если Не ВыполнитьУсловие(Сценарий, СтрокаУсловия.Условие, Источник, ПараметрыСценария, Отказ, ПоРасписанию) Тогда
			РезультатВложенныхУсловий = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФильтра И Результат И РезультатВложенныхУсловий;
КонецФункции

Процедура ВыполнитьКоманду(Сценарий, Команда, Источник, ПараметрыСценария, Отказ) Экспорт
		
	Если Команда.Вид = Перечисления.АвтоматизацияВидыКомандСценариев.ВключитьОтключитьСценарий Тогда
		
		ВключитьОтключитьСценарий(Сценарий, Команда);
		
	ИначеЕсли Команда.Вид = Перечисления.АвтоматизацияВидыКомандСценариев.ВыполнитьКодИзВнешнейОбработки Тогда
		
		ВыполнитьКодИзВнешнейОбработки(Сценарий, Команда, Источник, ПараметрыСценария, Отказ);

	ИначеЕсли Команда.Вид = Перечисления.АвтоматизацияВидыКомандСценариев.ВыполнитьПрограммныйКод Тогда
		
		ВыполнитьПрограммныйКод(Сценарий, Команда, Источник, ПараметрыСценария, Отказ);

	ИначеЕсли Команда.Вид = Перечисления.АвтоматизацияВидыКомандСценариев.ВыполнитьПрограммныйКодВФоне Тогда
		
		ВыполнитьПрограммныйКодВФоне(Сценарий, Команда, Источник, ПараметрыСценария);

	ИначеЕсли Команда.Вид = Перечисления.АвтоматизацияВидыКомандСценариев.ВыполнитьСписокКоманд Тогда
		
		ВыполнитьСписокКоманд(Сценарий, Команда, Источник, ПараметрыСценария, Отказ);
		
	ИначеЕсли Команда.Вид = Перечисления.АвтоматизацияВидыКомандСценариев.ЗаполнитьИсточник Тогда
		
		ЗаполнитьИсточник(Сценарий, Команда, Источник);
		
	ИначеЕсли Команда.Вид = Перечисления.АвтоматизацияВидыКомандСценариев.ЗапуститьСценарии Тогда
		
		ЗапуститьСценарии(Сценарий, Команда, Источник, ПараметрыСценария, Отказ);
		
	ИначеЕсли Команда.Вид = Перечисления.АвтоматизацияВидыКомандСценариев.ОтправитьЭлектронноеПисьмо И Не Отказ Тогда
		
		ОтправитьЭлектронныеПисьма(Сценарий, Команда, Источник, ПараметрыСценария);
		
	ИначеЕсли Команда.Вид = Перечисления.АвтоматизацияВидыКомандСценариев.ПроверитьЗаполнениеИсточника Тогда
		
		ПроверитьЗаполнениеИсточника(Сценарий, Команда, Источник, Отказ);
		
	ИначеЕсли Команда.Вид = Перечисления.АвтоматизацияВидыКомандСценариев.СоздатьЗадачу И Не Отказ Тогда
		
		СоздатьЗадачи(Сценарий, Команда, Источник);
		
	ИначеЕсли Команда.Вид = Перечисления.АвтоматизацияВидыКомандСценариев.СоздатьНапоминаниеПользователю Тогда
		
		СоздатьНапоминанияПользователям(Сценарий, Команда, Источник);
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура ВключитьОтключитьСценарий(Знач Сценарий, Знач Команда)
	
	Для Каждого СтрокаТЧ Из Команда.Сценарии Цикл
		Если СтрокаТЧ.Сценарий.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		СценарийОбъект = СтрокаТЧ.Сценарий.ПолучитьОбъект();
		СценарийОбъект.Актуален = СтрокаТЧ.ВключитьОтключить;
		СценарийОбъект.ДополнительныеСвойства.Вставить("ПропуститьВыполнениеСценариев");
		СценарийОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьКодИзВнешнейОбработки(Знач Сценарий, Знач Команда, Источник, Знач ПараметрыСценария, Отказ)
	
	ТекстОшибки = "";
	Попытка
		ИмяОбработки = ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(Команда.ВнешняяОбработка);
		Если ИмяОбработки = Неопределено Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка выполнения команды %1 для сценария %2. Не удалось подключить внешнюю обработку.'"), Команда, Сценарий);
		Иначе
			ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяОбработки);
			ВнешняяОбработка.Автоматизация(Сценарий, Источник, ПараметрыСценария, Отказ);
		КонецЕсли;
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка выполнения команды %1 для сценария %2. %3'"), Команда, Сценарий, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		РегистрыСведений.АвтоматизацияЖурнал.ОтразитьВЖурнале(
				Сценарий, 
				?(Источник = Неопределено, "", Источник.Ссылка), 
				Перечисления.АвтоматизацияВидыЗаписейЖурнала.Ошибка,
				ТекстОшибки
		);
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьПрограммныйКод(Знач Сценарий, Знач Команда, Источник, Знач ПараметрыСценария, Отказ)
	
	Попытка
		Выполнить(Команда.ВыполняемыйКод);
	Исключение
		РегистрыСведений.АвтоматизацияЖурнал.ОтразитьВЖурнале(
				Сценарий, 
				?(Источник = Неопределено, "", Источник.Ссылка), 
				Перечисления.АвтоматизацияВидыЗаписейЖурнала.Ошибка,
				СтрШаблон(НСтр("ru = 'Ошибка выполнения команды %1 для сценария %2. %3'"), Команда, Сценарий, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()))
		);
	КонецПопытки;
КонецПроцедуры

Процедура ВыполнитьПрограммныйКодВФоне(Знач Сценарий, Знач Команда, Знач Источник, Знач ПараметрыСценария)
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(Сценарий);
	ПараметрыЗадания.Добавить(Команда);
	ПараметрыЗадания.Добавить(Источник.Ссылка);
	ПараметрыЗадания.Добавить(ПараметрыСценария);
	
	ФоновыеЗадания.Выполнить(
		"АвтоматизацияСервер.ВыполнитьПрограммныйКодВФоновомЗадании",
		ПараметрыЗадания,,
		НСтр("ru='Автоматизация, выполнение произвольного кода в фоновом задании'"));
		
КонецПроцедуры

//Процедура используется для запуска фоновых заданий с произвольным кодом
//
//Источник - ссылка на изначальный источник
Процедура ВыполнитьПрограммныйКодВФоновомЗадании(Знач Сценарий, Знач Команда, Знач Источник, Знач ПараметрыСценария) Экспорт
	
	Попытка
		Выполнить(Команда.ВыполняемыйКод);
	Исключение
		РегистрыСведений.АвтоматизацияЖурнал.ОтразитьВЖурнале(
				Сценарий, 
				?(Источник = Неопределено, "", Источник), 
				Перечисления.АвтоматизацияВидыЗаписейЖурнала.Ошибка,
				СтрШаблон(НСтр("ru = 'Ошибка выполнения команды %1 для сценария %2: %3'"), Команда, Сценарий, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()))
		);
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьСписокКоманд(Сценарий, Команда, Источник, ПараметрыСценария, Отказ)
	
	Для Каждого СтрокаТЧ Из Команда.Команды Цикл
		Если СтрокаТЧ.Команда.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		ВыполнитьКоманду(Сценарий, СтрокаТЧ.Команда, Источник, ПараметрыСценария, Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсточник(Знач Сценарий, Знач Команда, Источник = Неопределено)
	
	Записать = Ложь;
	Попытка
		Если Источник.Ссылка = Источник Тогда
			Источник = Источник.ПолучитьОбъект();
			Записать = Истина;
		КонецЕсли;	
	Исключение
		РегистрыСведений.АвтоматизацияЖурнал.ОтразитьВЖурнале(
				Сценарий, 
				?(Источник = Неопределено, "", Источник), 
				Перечисления.АвтоматизацияВидыЗаписейЖурнала.Ошибка,
				СтрШаблон(НСтр("ru = 'Ошибка выполнения команды %1 для сценария %2: %3'"), Команда, Сценарий, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()))
		);
		Возврат;
	КонецПопытки;			
	
	// Заполняем реквизитами Источник.
	Для Каждого СтрокаТЧ Из Команда.ЗаполнениеИсточника Цикл
		
		Попытка
			Источник[СтрокаТЧ.Реквизит] = СтрокаТЧ.Значение;
		Исключение						
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка выполнения команды %2 для сценария %1. Реквизит = %3, Значение = %4. %5'"),
					Сценарий,
					Команда,
					СтрокаТЧ.Реквизит,
					СтрокаТЧ.Значение,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			РегистрыСведений.АвтоматизацияЖурнал.ОтразитьВЖурнале(
					Сценарий, 
					?(Источник = Неопределено, "", Источник), 
					Перечисления.АвтоматизацияВидыЗаписейЖурнала.Ошибка,
					ТекстОшибки
			);
		КонецПопытки;					
		
	КонецЦикла;			
	
	Если Записать Тогда
		Источник.ДополнительныеСвойства.Вставить("ПропуститьВыполнениеСценариев");
		Источник.Записать();
		Источник = Источник.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьЭлектронныеПисьма(Знач Сценарий, Знач Команда, Знач Источник, Знач ПараметрыСценария)
	
	Источник = ?(Источник = Неопределено, "", Источник.Ссылка);
	Если Команда.ПолучателиПисем.Количество() = 0 Тогда
		РегистрыСведений.АвтоматизацияЖурнал.ОтразитьВЖурнале(
				Сценарий, 
				Источник, 
				Перечисления.АвтоматизацияВидыЗаписейЖурнала.Предупреждение,
				СтрШаблон(НСтр("ru = 'Не заполнены получатели писем в команде %1 для сценария %2.'"), Команда, Сценарий)
		);
		Возврат;
	КонецЕсли;
	Если Команда.ШаблонПисьма.Пустая() Тогда
		РегистрыСведений.АвтоматизацияЖурнал.ОтразитьВЖурнале(
				Сценарий, 
				Источник, 
				Перечисления.АвтоматизацияВидыЗаписейЖурнала.Предупреждение,
				СтрШаблон(НСтр("ru = 'Не заполнен шаблон письма в команде %1 для сценария %2.'"), Команда, Сценарий)
		);
		Возврат;
	КонецЕсли;
	
	ПолучателиПисем = Команда.ПолучателиПисем.Выгрузить();
	ПолучателиПисем.Колонки.Добавить("МассивПолучателей");
	
	Для Каждого СтрокаТЗ Из ПолучателиПисем Цикл		
		
		СтрокаТЗ.МассивПолучателей = Новый Массив;
		Если СтрокаТЗ.СпособЗаполнения = Перечисления.АвтоматизацияВидыПолучателей.ВыбратьИзБазы 
				И ТипЗнч(СтрокаТЗ.Получатель) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			СтрокаТЗ.МассивПолучателей = СтрокаТЗ.ПолучательЗначение.Состав.ВыгрузитьКолонку("Пользователь");
		ИначеЕсли СтрокаТЗ.СпособЗаполнения = Перечисления.АвтоматизацияВидыПолучателей.РеквизитИсточника Тогда
			СтрокаТЗ.МассивПолучателей = ПолучитьМассивПолучателейИзИсточника(Источник, СтрокаТЗ.Получатель);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.Получатель) Тогда
			СтрокаТЗ.МассивПолучателей.Добавить(СтрокаТЗ.Получатель);
		КонецЕсли;
		
		Если СтрокаТЗ.МассивПолучателей.Количество() = 0 Тогда
			РегистрыСведений.АвтоматизацияЖурнал.ОтразитьВЖурнале(
					Сценарий, 
					Источник, 
					Перечисления.АвтоматизацияВидыЗаписейЖурнала.Предупреждение,
					СтрШаблон(НСтр("ru = 'Не удалось получить список получателей в команде %1 для сценария %2. Номер строки в команде %3.'"), Команда, Сценарий, СтрокаТЗ.НомерСтроки)
			);
			Продолжить;
		КонецЕсли;
	
		СформироватьЭлектронноеПисьмо(СтрокаТЗ, Сценарий, Команда, Источник, ПараметрыСценария);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивПолучателейИзИсточника(Источник, Адресат)
	
	Получатели = Новый Массив;
	
	//Это реквизит табличной части источника
	Если СтрНайти(Адресат, "ТабличнаяЧасть") > 0 Тогда
		МетаданныеРеквизит = Метаданные.НайтиПоПолномуИмени(Адресат);
		МетаданныеТЧ = МетаданныеРеквизит.Родитель();
		Для Каждого СтрокаТЧ Из Источник[МетаданныеТЧ.Имя] Цикл
			//Проверка что выбранный получатель содержит контактную информацию
			Получатель = СтрокаТЧ[МетаданныеРеквизит.Имя];
			Если Не ЗначениеЗаполнено(Получатель) Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(Получатель) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				Для Каждого СтрокаТЧ Из Получатель.Состав Цикл
					Получатели.Добавить(СтрокаТЧ.Пользователь);
				КонецЦикла;
			//ИначеЕсли Получатель.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация") <> Неопределено Тогда
			Иначе
				Получатели.Добавить(Получатель);
			КонецЕсли;
		КонецЦикла;
	Иначе //Это реквизит источника или вложенный реквизит
		Получатель = Источник;
		МассивПолей = СтрРазделить(Адресат, ".", Ложь);
		Количество = МассивПолей.Количество();
		Сч = 0;
		Пока Сч < Количество Цикл
			Если МассивПолей[Сч] = "Реквизит" Тогда
				Получатель = Получатель[МассивПолей[Сч+1]];
			КонецЕсли;
			Сч = Сч + 1;
		КонецЦикла;
		Если ЗначениеЗаполнено(Получатель) Тогда
			Если ТипЗнч(Получатель) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				Получатели = Получатель.Состав.ВыгрузитьКолонку("Пользователь");
			//ИначеЕсли Получатель.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация") <> Неопределено Тогда
			Иначе
				Получатели.Добавить(Получатель);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Получатели;
	
КонецФункции

Процедура СформироватьЭлектронноеПисьмо(Знач СтрокаПолучатели, Знач Сценарий, Знач Команда, Знач Источник, Знач ПараметрыСценария)
	
	ТекущаяДата = ТекущаяДата();
	Сообщение = "";
	
	Уведомляемые = Новый Массив;
	ПолучателиПисьма = Новый Массив;
	
	//Получение получателей письма
	Для Каждого Получатель Из СтрокаПолучатели.МассивПолучателей Цикл
		
		Если Не ОтправлятьПолучателю(Получатель) Тогда
			Сообщение = Сообщение + СтрШаблон(НСтр("ru = 'Создание письма отменено. Пользователь %1 не действителен или является инициатором задания самому себе. Номер строки %2.'"), Получатель, СтрокаПолучатели.НомерСтроки) + Символы.ПС;
			Продолжить;
		КонецЕсли;	
		
		СтруктураАдреса = КонтактнаяИнформацияПолучателя(Получатель, 
				СтрокаПолучатели.СпособЗаполнения, 
				Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
		);
		Если СтруктураАдреса.Свойство("ОписаниеОшибки") Тогда							
			Сообщение = Сообщение + СтруктураАдреса.ОписаниеОшибки + Символы.ПС;
			Продолжить;
		КонецЕсли;
			
		// Контроль, что будет отправлено только одно уведомление.
		МассивСтрок = Уведомляемые.Найти(СтруктураАдреса.Кому);
		Если Уведомляемые.Найти(СтруктураАдреса.Кому) = Неопределено Тогда
			Уведомляемые.Добавить(СтруктураАдреса.Кому);
		Иначе
			Сообщение = Сообщение + СтрШаблон(НСтр("ru = 'Для получателя %1 создание письма отменено, т.к. этот получатель уже был обработан ранее. Номер строки %2.'"), Получатель, СтрокаПолучатели.НомерСтроки) + Символы.ПС;
			Продолжить;
		КонецЕсли;	
		
		ПолучателиПисьма.Добавить(ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(СтруктураАдреса.Кому, Строка(Получатель)));
		
	КонецЦикла;		
	
	Если ПолучателиПисьма.Количество() = 0 Тогда
		РегистрыСведений.АвтоматизацияЖурнал.ОтразитьВЖурнале(
				Сценарий, 
				Источник, 
				Перечисления.АвтоматизацияВидыЗаписейЖурнала.Предупреждение,
				СтрШаблон(НСтр("ru = 'Отправка письма отменена, не заполнены получатели. Сценарий %1, команда %2, источник %3, номер строки в команде %3.%4'"), 
					Сценарий, Команда, СтрокаПолучатели.НомерСтроки, ?(ПустаяСтрока(Сообщение), "", " "+Сообщение)),
				ТекущаяДата
		);
		Возврат;
	КонецЕсли;
		
	Если Команда.ОтложеннаяОтправкаПисем > 0 Тогда
		
		Событие = Новый Структура("ВидСобытия, Источник", Перечисления.СобытияУведомлений.УведомлениеПрограммы, Источник);
		Событие.Вставить("Получатель", Получатель);
		Событие.Вставить("ШаблонПисьма", Команда.ШаблонПисьма);
		ПроизвольныеПараметры = Новый Структура;
		ПроизвольныеПараметры.Вставить("УчетнаяЗапись", Команда.УчетнаяЗапись);
		ПроизвольныеПараметры.Вставить("ПолучателиПисьма", ПолучателиПисьма);
		ПроизвольныеПараметры.Вставить("МинимальнаяДатаСоздания", ТекущаяДата + Команда.ОтложеннаяОтправкаПисем);
		Если ПараметрыСценария.Свойство("ПроизвольныеПараметры") Тогда
			ПроизвольныеПараметры.Вставить("ПроизвольныеПараметры", ПараметрыСценария.ПроизвольныеПараметры);
		КонецЕсли;
		ПроизвольныеПараметрыХранилище = Новый ХранилищеЗначения(ПроизвольныеПараметры);
		Событие.Вставить("ПроизвольныеПараметры", ПроизвольныеПараметрыХранилище);
		РаботаСУведомлениями.ОбработатьБизнесСобытие(Событие);
	
	Иначе
		
		ПриемникОбъект = Документы.ИсходящееПисьмо.СоздатьДокумент();
		ПриемникОбъект.Заполнить(Команда.ШаблонПисьма); 
		ПриемникОбъект.Предмет = Источник;
		
		Уведомляемые = Новый Массив;
		
		//Получение получателей письма
		Счетчик = ПриемникОбъект.ПолучателиПисьма.Количество();
		Для Каждого Получатель Из ПолучателиПисьма Цикл
			ПолучательСтрока = ПриемникОбъект.ПолучателиПисьма.Добавить();
			ПолучательСтрока.Адресат = Получатель;
			ПолучательСтрока.ПорядковыйНомер = Счетчик;
			Счетчик = Счетчик + 1;
		КонецЦикла;		
		
		ДополнительныеПараметры = Новый Структура;
		Если ПараметрыСценария.Свойство("ПроизвольныеПараметры") Тогда
			ДополнительныеПараметры.Вставить("ПроизвольныеПараметры", ПараметрыСценария.ПроизвольныеПараметры);
		КонецЕсли;
		
		ПараметрыСообщения = ШаблоныСообщений.СформироватьСообщение(
				Команда.ШаблонПисьма, 
				Источник,
				Новый УникальныйИдентификатор,
				ДополнительныеПараметры
		);
		
		ПриемникОбъект.Тема = ПараметрыСообщения.Тема;
		ПриемникОбъект.Дата = ТекущаяДата;
		
		ПриемникОбъект.УчетнаяЗапись = ?(Команда.УчетнаяЗапись.Пустая(),
				Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты,
				Команда.УчетнаяЗапись
		);
		
		ПриемникОбъект.ДополнительныеСвойства.Вставить("ТекстПисьма", ПараметрыСообщения.Текст);
		
		ПриемникОбъект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
		Если Не ЗначениеЗаполнено(ПриемникОбъект.Автор) Тогда
			ПриемникОбъект.Автор = Пользователи.СсылкаНеуказанногоПользователя();
		КонецЕсли;	
		ПриемникОбъект.ПодготовленоКОтправке = ТекущаяДата;
		ПриемникОбъект.ПолучателиПисьмаСтрокой = ВстроеннаяПочтаСервер.ТаблицаПолучателейВСтроку(ПриемникОбъект.ПолучателиПисьма);
		ПриемникОбъект.ЕстьВложения = (ПараметрыСообщения.Вложения.Количество() > 0);
		
		ПриемникОбъект.Записать(РежимЗаписиДокумента.Запись);			
		
		// Файлы из задания.
		//Если ПриемникОбъект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML 
		//	И СтрНайти(ШаблонСообщения.ТекстШаблонаПисьмаHTML, "[Задание.ОписаниеЗаданияHTML]") > 0 Тогда 
		//	ЗаполнитьПрисоединенныеФайлы(Источник.Ссылка, ПриемникОбъект.Ссылка);					
		//КонецЕсли;
		
		Если ПараметрыСообщения.Вложения.Количество() > 0 Тогда
			
			Для Каждого Вложение Из ПараметрыСообщения.Вложения Цикл
				
				РазмерДанных = 0;
				Данные = ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище);
				Если ТипЗнч(Данные) =  Тип("ДвоичныеДанные") Тогда
					РазмерДанных = Данные.Размер();
				КонецЕсли;
				
				НовыйФайл = ВстроеннаяПочтаСервер.ДобавитьВложениеПисьмаИзВременногоХранилища(
					ПриемникОбъект.Ссылка, // Письмо
					Вложение.АдресВоВременномХранилище, // АдресВременногоХранилища
					Новый ХранилищеЗначения(""), // АдресВременногоХранилищаТекста
					РазмерДанных,
					Вложение.Представление,
					ТекущаяУниверсальнаяДата(), // ВремяИзменения
					Вложение.Идентификатор); // Идентификатор - идентификатор картинки
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
			
	Если ПустаяСтрока(Сообщение) Тогда				
		РегистрыСведений.АвтоматизацияЖурнал.ОтразитьВЖурнале(
				Сценарий, 
				Источник, 
				Перечисления.АвтоматизацияВидыЗаписейЖурнала.Информация,
				СтрШаблон(НСтр("ru = 'Электронное письмо сформировано. Сценарий %1, команда %2, номер строки в команде %3.'"), Сценарий, Команда, СтрокаПолучатели.НомерСтроки),
				ТекущаяДата
		);
	Иначе
		РегистрыСведений.АвтоматизацияЖурнал.ОтразитьВЖурнале(
				Сценарий, 
				Источник, 
				Перечисления.АвтоматизацияВидыЗаписейЖурнала.Ошибка,
				Сообщение,
				ТекущаяДата
		);
	КонецЕсли;					
	
КонецПроцедуры	

Функция КонтактнаяИнформацияПолучателя(Адресат, ВидПолучателя, ТипКИ)
	
	Кому = "";
	СтруктураВозврата = Новый Структура;
	ВидАдресата = "";
	
	Если ТипЗнч(Адресат) = Тип("Строка") Тогда
		Кому = Адресат;
	Иначе
		Для Каждого СтрокаКИ Из Адресат.КонтактнаяИнформация Цикл
			Если СтрокаКИ.Тип = ТипКИ Тогда
				Кому = СтрокаКИ.Представление;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ВидАдресата = Адресат.Метаданные().Синоним;
	КонецЕсли;
	Если ПустаяСтрока(Кому) Тогда
		СтруктураВозврата.Вставить("ОписаниеОшибки", СтрШаблон(НСтр("ru = '<%1> <%2>. Не указан адрес электронной почты.'"), ВидАдресата, Адресат));
	Иначе
		СтруктураВозврата.Вставить("Кому", Кому); 
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ЗапуститьСценарии(Сценарий, Команда, Источник, ПараметрыСценария, Отказ)
	
	Для Каждого СтрокаТЧ Из Команда.Сценарии Цикл
		Если Не СтрокаТЧ.Сценарий.Пустая() Тогда
			ЗапуститьСценарий(СтрокаТЧ.Сценарий);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеИсточника(Знач Сценарий, Знач Команда, Знач Источник, Отказ)
	
	Для Каждого СтрокаТЧ Из Команда.ПроверкаЗаполненияИсточника Цикл
		
		Если ЗначениеЗаполнено(Источник[СтрокаТЧ.Реквизит]) Тогда
			Продолжить;
		КонецЕсли;

		Синоним = Источник.Метаданные().Реквизиты[СтрокаТЧ.Реквизит].Синоним;
		Если ПустаяСтрока(Синоним) Тогда
			Синоним = СтрокаТЧ.Реквизит;
		КонецЕсли;
		Сообщение = ?(ПустаяСтрока(СтрокаТЧ.Сообщение), 
				СтрШаблон(НСтр("ru = 'Реквизит ""%1"" обязателен к заполнению.'"), Синоним),
				СтрокаТЧ.Сообщение
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение, Источник.Ссылка, СтрокаТЧ.Реквизит, , Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьНапоминанияПользователям(Знач Сценарий, Знач Команда, Знач Источник)
	
	Источник = ?(Источник = Неопределено, "", Источник.Ссылка);
	Если Команда.ПолучателиНапоминаний.Количество() = 0 Тогда
		РегистрыСведений.АвтоматизацияЖурнал.ОтразитьВЖурнале(
				Сценарий, 
				Источник, 
				Перечисления.АвтоматизацияВидыЗаписейЖурнала.Предупреждение,
				СтрШаблон(НСтр("ru = 'Не заполнены получатели напоминаний в команде %1 для сценария %2.'"), Команда, Сценарий),
		);
		Возврат;
	КонецЕсли;
	
	ПолучателиНапоминаний = Команда.ПолучателиНапоминаний.Выгрузить();
	ПолучателиНапоминаний.Колонки.Добавить("МассивПолучателей");
	
	Для Каждого СтрокаТЧ Из ПолучателиНапоминаний Цикл		
		
		СтрокаТЧ.МассивПолучателей = Новый Массив;
		Если СтрокаТЧ.СпособЗаполнения = Перечисления.АвтоматизацияВидыПолучателей.ВыбратьИзБазы 
				И ТипЗнч(СтрокаТЧ.Получатель) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			СтрокаТЧ.МассивПолучателей = СтрокаТЧ.Получатель.Состав.ВыгрузитьКолонку("Пользователь");
		ИначеЕсли СтрокаТЧ.СпособЗаполнения = Перечисления.АвтоматизацияВидыПолучателей.РеквизитИсточника Тогда
			СтрокаТЧ.МассивПолучателей = ПолучитьМассивПолучателейИзИсточника(Источник, СтрокаТЧ.Получатель);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.Получатель) Тогда
			СтрокаТЧ.МассивПолучателей.Добавить(СтрокаТЧ.Получатель);
		КонецЕсли;
		
		Если СтрокаТЧ.МассивПолучателей.Количество() = 0 Тогда
			РегистрыСведений.АвтоматизацияЖурнал.ОтразитьВЖурнале(
					Сценарий, 
					Источник, 
					Перечисления.АвтоматизацияВидыЗаписейЖурнала.Предупреждение,
					СтрШаблон(НСтр("ru = 'Не удалось получить список получателей в команде %1 для сценария %2. Номер строки в команде %3.'"), Команда, Сценарий, СтрокаТЧ.НомерСтроки)
			);
			Продолжить;
		КонецЕсли;
	
		СоздатьНапоминание(СтрокаТЧ, Сценарий, Команда, Источник);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьНапоминание(Знач ДанныеПолучателя, Знач Сценарий, Знач Команда, Знач Источник)
	
	ТекущаяДата = ТекущаяДатаСеанса();	
	Сообщение = "";
	
	НапоминаниеСтруктура = Новый Структура;
	НапоминаниеСтруктура.Вставить("Источник", Источник);			
	НапоминаниеСтруктура.Вставить("ВремяСобытия", ТекущаяДата);
	НапоминаниеСтруктура.Вставить("СрокНапоминания", ТекущаяДата + ДанныеПолучателя.ИнтервалВремениНапоминания);
	НапоминаниеСтруктура.Вставить("ПредставлениеИсточника", Строка(Источник));
	НапоминаниеСтруктура.Вставить("Описание", "Автоматизация: "+ДанныеПолучателя.Сообщение);
	НапоминаниеСтруктура.Вставить("СпособУстановкиВремениНапоминания", Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноТекущегоВремени);
	НапоминаниеСтруктура.Вставить("ИнтервалВремениНапоминания", ДанныеПолучателя.ИнтервалВремениНапоминания);
	
	Уведомляемые = Новый Массив;
	
	Для Каждого Получатель Из ДанныеПолучателя.МассивПолучателей Цикл
		
		// Контроль, что будет отправлено только одно уведомление.
		МассивСтрок = Уведомляемые.Найти(Получатель);
		Если Уведомляемые.Найти(Получатель) = Неопределено Тогда
			Уведомляемые.Добавить(Получатель);
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если Не (ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи") И ЗначениеЗаполнено(Получатель)) Тогда
			Сообщение = Сообщение + СтрШаблон(НСтр("ru = 'Не удалось создать напоминание для получателя %1. Данный получатель не является пользователем программы. Номер строки %2.'"), Получатель, ДанныеПолучателя.НомерСтроки) + Символы.ПС;
			Продолжить;
		КонецЕсли;
		Если Не ОтправлятьПолучателю(Получатель) Тогда
			Сообщение = Сообщение + СтрШаблон(НСтр("ru = 'Создание напоминания отменено. Пользователь %1 не действителен или является инициатором создания напоминания самому себе.'"), Получатель) + Символы.ПС;
			Продолжить;
		КонецЕсли;
		ПриемникОбъект = РегистрыСведений.НапоминанияПользователя.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ПриемникОбъект, НапоминаниеСтруктура);
		ПриемникОбъект.Пользователь = Получатель;
		Попытка
			ПриемникОбъект.Записать();
			Сообщение = Сообщение + СтрШаблон(НСтр("ru = 'Создано напоминание для пользователя: %1. Номер строки в команде %2.'"), Получатель, ДанныеПолучателя.НомерСтроки) + Символы.ПС;						
		Исключение
			Сообщение = Сообщение + СтрШаблон(НСтр("ru = 'Не удалось создать напоминание при выполнении команды %1 для пользователя %2. %3 Номер строки в команде %4.'"), Команда, Получатель, ОписаниеОшибки(), ДанныеПолучателя.НомерСтроки) + Символы.ПС;
		КонецПопытки;
	КонецЦикла;
	
	РегистрыСведений.АвтоматизацияЖурнал.ОтразитьВЖурнале(
			Сценарий, 
			Источник, 
			Перечисления.АвтоматизацияВидыЗаписейЖурнала.Информация,
			Сообщение,
			ТекущаяДата
	);
	
КонецПроцедуры	

Процедура СоздатьЗадачи(Знач Сценарий, Знач Команда, Знач Источник)
	
	Если Команда.Задачи.Количество() = 0 Тогда
		РегистрыСведений.АвтоматизацияЖурнал.ОтразитьВЖурнале(
				Сценарий, 
				?(Источник = Неопределено, НСтр("ru = 'Ошибка выполнения команды сценария'"), Источник), 
				Перечисления.АвтоматизацияВидыЗаписейЖурнала.Предупреждение,
				СтрШаблон(НСтр("ru = 'Не заполнены получатели задач в команде %1 для сценария %2.'"), Команда, Сценарий),
		);
		Возврат;
	КонецЕсли;
	
	ЗадачиТЗ = Команда.Задачи.Выгрузить();
	ЗадачиТЗ.Колонки.Добавить("МассивПолучателей");
	
	Для Каждого СтрокаТЧ Из ЗадачиТЗ Цикл
		
		СтрокаТЧ.МассивПолучателей = Новый Массив;
		Если СтрокаТЧ.СпособЗаполнения = Перечисления.АвтоматизацияВидыПолучателей.ВыбратьИзБазы 
				И ТипЗнч(СтрокаТЧ.Получатель) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			СтрокаТЧ.МассивПолучателей = СтрокаТЧ.Получатель.Состав.ВыгрузитьКолонку("Пользователь");
		ИначеЕсли СтрокаТЧ.СпособЗаполнения = Перечисления.АвтоматизацияВидыПолучателей.РеквизитИсточника Тогда
			СтрокаТЧ.МассивПолучателей = ПолучитьМассивПолучателейИзИсточника(Источник, СтрокаТЧ.Получатель);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.Получатель) Тогда
			СтрокаТЧ.МассивПолучателей.Добавить(СтрокаТЧ.Получатель);
		КонецЕсли;
		
		Если СтрокаТЧ.МассивПолучателей.Количество() = 0 Тогда
			РегистрыСведений.АвтоматизацияЖурнал.ОтразитьВЖурнале(
					Сценарий, 
					?(Источник = Неопределено, НСтр("ru = 'Ошибка выполнения команды сценария'"), Источник), 
					Перечисления.АвтоматизацияВидыЗаписейЖурнала.Предупреждение,
					СтрШаблон(НСтр("ru = 'Не удалось получить список получателей в команде %1 для сценария %2. Источник %3, номер строки %4.'"), Команда, Сценарий, Источник, СтрокаТЧ.НомерСтроки)
			);
			Продолжить;
		КонецЕсли;
	
		СформироватьЗадачу(СтрокаТЧ, Сценарий, Команда, Источник);
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьЗадачу(Знач СтрокаЗадание, Знач Сценарий, Знач Команда, Знач Источник)
	
	ТекущаяДата = ТекущаяДатаСеанса();	
	Сообщение = "";
	
	Уведомляемые = Новый Массив;
	
	Для Каждого Получатель Из СтрокаЗадание.МассивПолучателей Цикл
		
		// Контроль, что будет отправлено только одно уведомление.
		МассивСтрок = Уведомляемые.Найти(Получатель);
		Если Уведомляемые.Найти(Получатель) = Неопределено Тогда
			Уведомляемые.Добавить(Получатель);
		Иначе
			Продолжить;
		КонецЕсли;
		
		//Создание задачи
		НоваяЗадача = Документы.Задачи.СоздатьДокумент();
		Если Не СтрокаЗадание.Шаблон.Пустая() Тогда
			НоваяЗадача.Заполнить(СтрокаЗадание.Шаблон);
		КонецЕсли;
		Если СтрокаЗадание.ЗаполнитьПоИсточнику Тогда
			НоваяЗадача.Заполнить(Источник.Ссылка);
		КонецЕсли;
		
		НоваяЗадача.Исполнитель = Получатель;
		НоваяЗадача.ДополнительныеСвойства.Вставить("ПропуститьВыполнениеСценариев");
		Попытка
			НоваяЗадача.Записать();
			Сообщение = Сообщение + СтрШаблон(НСтр("ru = 'Создана задача для исполнителя: %1. Номер строки %2.'"), Получатель, СтрокаЗадание.НомерСтроки) + Символы.ПС;						
		Исключение
			Сообщение = Сообщение + СтрШаблон(НСтр("ru = 'Не удалось создать задачу при выполнении команды %1 для исполнителя %2. %3 Номер строки %4.'"), Команда, Получатель, ОписаниеОшибки(), СтрокаЗадание.НомерСтроки) + Символы.ПС;
		КонецПопытки;
	КонецЦикла;
	
	РегистрыСведений.АвтоматизацияЖурнал.ОтразитьВЖурнале(
			Сценарий, 
			?(Источник = Неопределено, НСтр("ru = 'Ошибка выполнения команды сценария'"), Источник.Ссылка), 
			Перечисления.АвтоматизацияВидыЗаписейЖурнала.Информация,
			Сообщение,
			ТекущаяДата
	);
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Запускает сценарий и контролирует результат.
//
// Параметры:
//   Сценарий - СправочникСсылка.СценарииАвтоматизации - Выполняемый сценарий.
//
Процедура АвтоматизацияРегламентноеЗадание(Сценарий) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Автоматизация);
	
	ДатаОкончанияПроверки = ТекущаяДатаСеанса();
	
	РегистрыСведений.АвтоматизацияЖурнал.ОтразитьВЖурнале(
			Сценарий,
			"Запуск сценария", 
			Перечисления.АвтоматизацияВидыЗаписейЖурнала.Информация,
			СтрШаблон(НСтр("ru = 'Запуск сценария %1.'"), Сценарий)
	);	
	
	//Удаление старых записей.
	ОчиститьЗаписиЖурнала();
	
	ЗапуститьСценарий(Сценарий);
	
	РегистрыСведений.АвтоматизацияЖурнал.ОтразитьВЖурнале(
			Сценарий,
			"Окончание выполнения сценария",
			Перечисления.АвтоматизацияВидыЗаписейЖурнала.Информация,
			СтрШаблон(НСтр("ru = 'Окончание выполнения сценария %1.'"), Сценарий)
	);
	                                                                                  
КонецПроцедуры

Процедура ОчиститьЗаписиЖурнала()
	
	СрокХранения = Константы.АвтоматизацияСрокХраненияЗаписейЖурнала.Получить();
	Если СрокХранения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АвтоматизацияЖурнал.Дата КАК Дата,
	               |	АвтоматизацияЖурнал.Вид КАК Вид,
	               |	АвтоматизацияЖурнал.Сценарий КАК Сценарий,
	               |	АвтоматизацияЖурнал.Источник КАК Источник
	               |ИЗ
	               |	РегистрСведений.АвтоматизацияЖурнал КАК АвтоматизацияЖурнал
	               |ГДЕ
	               |	АвтоматизацияЖурнал.Дата < &Срок";
	Запрос.УстановитьПараметр("Срок", НачалоДня(ТекущаяДата()) - 86400 * СрокХранения);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.АвтоматизацияЖурнал.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапуститьСценарий(Сценарий) Экспорт
	
	Если Сценарий.ВидСобытия <> Перечисления.АвтоматизацияВидыСобытий.ПовторяющеесяСобытие Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСценария = Новый Структура;
	ПараметрыСценария.Вставить("ЭтоНовый", Ложь);
	
	Для Каждого СтрокаТЧ Из Сценарий.Команды Цикл
		
		Если Не СтрокаТЧ.Выполнять Тогда
			Продолжить;
		КонецЕсли;
		
		Источники = Новый Массив;
		Если Не ВыполнитьУсловие(Сценарий, СтрокаТЧ.Условие, Источники, ПараметрыСценария, Ложь, Истина) Тогда
			Продолжить;
		КонецЕсли;
		Если Источники.Количество() = 0 ИЛИ ТипЗнч(Источники) <> Тип("Массив") ИЛИ ПустаяСтрока(Сценарий.ТипИсточника) Тогда
			ВыполнитьКоманду(Сценарий, СтрокаТЧ.Команда, Неопределено, ПараметрыСценария, Ложь);
		Иначе
			Для Каждого Источник Из Источники Цикл
				//Выбираем источники только с нужным типом
				Если Сценарий.ТипИсточника = Источник.Метаданные().ПолноеИмя() Тогда
					ВыполнитьКоманду(Сценарий, СтрокаТЧ.Команда, Источник, ПараметрыСценария, Ложь);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьТипЗначенияРеквизита(Знач ТипИсточника, Знач ИмяРеквизита) Экспорт
	
	МетаданныеИсточника = Метаданные.НайтиПоПолномуИмени(ТипИсточника);
	
	// Стандартные реквизиты.
	Для Каждого Реквизит Из МетаданныеИсточника.СтандартныеРеквизиты Цикл
		Если Реквизит.Имя = ИмяРеквизита Тогда
			Возврат Реквизит.Тип;
		КонецЕсли;
	КонецЦикла;	
	
	// реквизиты.
	Для Каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		Если Реквизит.Имя = ИмяРеквизита Тогда
			Возврат Реквизит.Тип;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
		
КонецФункции

Функция СписокРеквизитовИсточника(Знач ПолноеИмя) Экспорт
	
	СписокРеквизитов = Новый СписокЗначений;
	Если ПустаяСтрока(ПолноеИмя) Тогда
		Возврат СписокРеквизитов;
	КонецЕсли;
		
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	
	// Стандартные реквизиты.
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
	КонецЦикла;	

	// Реквизиты.
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);			
	КонецЦикла;
	
	СписокРеквизитов.СортироватьПоПредставлению();
	
	Возврат СписокРеквизитов;
	
КонецФункции

Функция ПреобразоватьИсточникВСтруктуру(Знач Источник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсточникСтруктура = Новый Структура;
	ОбъектМетаданные = Источник.Метаданные();
	ИсточникСтруктура.Вставить("ИмяМетаданных", ОбъектМетаданные.Имя);
	ИсточникСтруктура.Вставить("Тип", ТипЗнч(Источник));
	
	Реквизиты = Новый Структура;
	Для Каждого Реквизит Из ОбъектМетаданные.Реквизиты Цикл
		Реквизиты.Вставить(Реквизит.Имя, Источник.Ссылка[Реквизит.Имя]);
	КонецЦикла;
	Для Каждого Реквизит Из ОбъектМетаданные.СтандартныеРеквизиты Цикл
		Реквизиты.Вставить(Реквизит.Имя, Источник.Ссылка[Реквизит.Имя]);
	КонецЦикла;
	ИсточникСтруктура.Вставить("Реквизиты", Реквизиты);	
	ИсточникСтруктура.Вставить("ДополнительныеСвойства", Источник.ДополнительныеСвойства);
	
	ТабличныеЧасти = Новый Структура;	
	Для Каждого ТЧ Из ОбъектМетаданные.ТабличныеЧасти Цикл
		ТабличныеЧасти.Вставить(ТЧ.Имя, Источник.Ссылка[ТЧ.Имя].Выгрузить());
	КонецЦикла;
	ИсточникСтруктура.Вставить("ТабличныеЧасти", ТабличныеЧасти);
	
	Возврат ИсточникСтруктура;	
	
КонецФункции

Функция ОтправлятьПолучателю(Знач Адресат)
	
	// Проверка на не уведомление.
	Если ТипЗнч(Адресат) = Тип("СправочникСсылка.Пользователи") Тогда
		//Оповещение самого себя отключено
		Если Адресат = ПользователиКлиентСервер.ТекущийПользователь() Тогда
			Возврат Ложь;
		ИначеЕсли Адресат.Недействителен Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Адресат) = Тип("СправочникСсылка.Заказчики") 
			ИЛИ ТипЗнч(Адресат) = Тип("СправочникСсылка.КонтактныеЛицаЗаказчиков") Тогда
		Возврат Не Адресат["НеУведомлять"] И Адресат["Актуален"];
	Иначе
		Возврат Истина;
	КонецЕсли;		
	
КонецФункции	

#КонецОбласти