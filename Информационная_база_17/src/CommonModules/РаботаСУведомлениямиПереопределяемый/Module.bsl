////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с уведомлениями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Фомирует список бизнес-событий, по которым необходим группировать уведомления.
//
// Параметры:
//  ВидыСобытий - Массив - Сформированные типовые виды событий для группировки.
//  ПолучательУведомления - СправочникСсылка.Пользователь - Получатель уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ уведомления.
//
// Возвращаемое значение:
//  Массив - Виды бизнес-событий для группировки.
//
Процедура ВидыСобытийДляГруппировки(ВидыСобытий, ПолучательУведомления, СпособУведомления) Экспорт
	
	Если СпособУведомления = Перечисления.СпособыУведомления.ПоПочте Тогда
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеСообщения);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.СозданиеЗаписиКалендаря);
	КонецЕсли;
	
	Если СпособУведомления = Перечисления.СпособыУведомления.ПоПочте Тогда
		ВключеноВыполнениеЗадачПоПочте = РегистрыСведений.НастройкиУведомлений.ПолучитьДополнительнуюНастройку(
			ПолучательУведомления,
			Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте);
		Если ВключеноВыполнениеЗадачПоПочте Тогда
			Индекс = ВидыСобытий.Найти(Справочники.ВидыБизнесСобытий.СозданиеЗадачи);
			Если Индекс <> Неопределено Тогда
				ВидыСобытий.Удалить(Индекс);
			КонецЕсли;
			Индекс = ВидыСобытий.Найти(Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи);
			Если Индекс <> Неопределено Тогда
				ВидыСобытий.Удалить(Индекс);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Вызов переопределяемого метода для возможной корректировки состава вида событий для группировки.
	ВидыСобытийДляГруппировкиПереопределяемый(ВидыСобытий, ПолучательУведомления, СпособУведомления);
	
КонецПроцедуры

// Заполняет таблицу доступных уведомлений с учетом функциональных опций.
//
// Параметры:
//  ДоступныеУведомления - ТаблицаЗначений - Доступные уведомления.
//
Функция ДоступныеУведомления(ДоступныеУведомления) Экспорт
	
	СтруктураДополнительнойНастройки = Новый ФиксированнаяСтруктура("Настройка, Представление");
	
	// Выполнение моей задачи
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ВыполнениеМоейЗадачи;
	СтрокаУведомления.ОсновноеСобытие = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи;
	СтрокаУведомления.Представление = НСтр("ru = 'Выполнение моей задачи'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;
	
	// Перенаправление моей задачи
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПеренаправлениеМоейЗадачи;
	СтрокаУведомления.ОсновноеСобытие = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи;
	СтрокаУведомления.Представление = НСтр("ru = 'Перенаправление моей задачи'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;
	
	// Выполнение задач по почте.
	СтрокаУведомления = ДоступныеУведомления.Найти(Справочники.ВидыБизнесСобытий.СозданиеЗадачи, "ВидСобытия");
	Если СтрокаУведомления <> Неопределено Тогда
		ДополнительнаяНастройка = Новый Структура(СтруктураДополнительнойНастройки);
		ДополнительнаяНастройка.Настройка = Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте;
		ДополнительнаяНастройка.Представление = НСтр("ru = 'Использовать выполнение задач по почте'");
		СтрокаУведомления.ДополнительныеНастройки.Добавить(ДополнительнаяНастройка);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбсуждения") Тогда
		
		// Появление ответа в форуме.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения;
		СтрокаУведомления.Представление = НСтр("ru = 'Появление ответа в форуме'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
	КонецЕсли;
	
	// Уведомления программы.
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.УведомлениеПрограммы;
	СтрокаУведомления.Представление = НСтр("ru = 'Уведомления программы'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;
	
КонецФункции

// Формирует текстовое представление задачи
Функция СформироватьПредставлениеЗадачи(
	Задача,
	ВидСобытия,
	ДополнительноеОписание) Экспорт
	
	ИспользоватьДатуИВремяВСрокахЗадач = Ложь;//ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	НадписьНеУказанСрок = НСтр("ru = 'не указан'");
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматДаты = СтрШаблон("ДЛФ=DDT; ДП='%1'", НадписьНеУказанСрок);
	Иначе
		ФорматДаты = СтрШаблон("ДЛФ=DD; ДП='%1'", НадписьНеУказанСрок);
	КонецЕсли;
	
	ПредставлениеЗадачи = "";
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Задача'"),
		Задача.Ссылка);
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора Тогда
		
		ПредставлениеСрока = РаботаСУведомлениями.ПолучитьПредставлениеСрока(
			Задача.Исполнитель,
			Задача.Срок,
			ВидСобытия);
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ПредставлениеЗадачи,
			Символы.ПС,
			ПредставлениеСрока);
		
	КонецЕсли;
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПеренаправлениеМоейЗадачи Тогда
		
		Если ЗначениеЗаполнено(ДополнительноеОписание) Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				ПредставлениеЗадачи,
				Символы.ПС,
				ДополнительноеОписание);
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Исполнитель'"),
		Задача.Исполнитель);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Роль'"),
		Задача.Исполнитель.Роль);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Контактное лицо'"),
		Задача.КонтактноеЛицоЗаказчика);
		
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Крайний срок'"),
		Формат(Задача.Срок, ФорматДаты));
	
	Если ЗначениеЗаполнено(Задача.ДатаСтатуса) И Документы.Задачи.ЗадачаЗакрыта(Задача) Тогда
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеЗадачи,
			НСтр("ru = 'Выполнено'"),
			Формат(Задача.ДатаСтатуса, ФорматДаты));
	КонецЕсли;
	
	//РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
	//	ПредставлениеЗадачи,
	//	НСтр("ru = 'Автор'"),
	//	Задача.Автор);
	
	Если ВидСобытия <> Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
		Если ВидСобытия <> Справочники.ВидыБизнесСобытий.СозданиеЗадачи Тогда
			РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
				ПредставлениеЗадачи,
				НСтр("ru = 'Трудоемкость (ч)'"),
				Задача.ОценкаТрудозатрат);
		КонецЕсли;
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеЗадачи,
			НСтр("ru = 'Описание'"),
			Задача.Описание);
	КонецЕсли;
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Комментарий к выполнению'"),
		Задача.РезультатВыполнения);
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Ссылка'"),
		РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(Задача));
	
	Возврат ПредставлениеЗадачи;
	
КонецФункции

// Формирует текстовое представление объекта.
//
// Параметры:
//  Объект - СправочникСсылка, ДокументСсылка - Объект, по которому формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление объекта.
//
Функция СформироватьПредставлениеОбъекта(Объект, ВидСобытия, ПолучательУведомления, ДополнительноеОписание) Экспорт
	
	ПредставлениеОбъекта = СформироватьПредставлениеОбъектаПереопределяемый(
		Объект,
		ВидСобытия,
		ПолучательУведомления,
		ДополнительноеОписание);
	Если ЗначениеЗаполнено(ПредставлениеОбъекта) Тогда
		Возврат ПредставлениеОбъекта;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеСообщения(
			Объект,
			ВидСобытия,
			ДополнительноеОписание);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.Задачи") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеЗадачи(
			Объект,
			ВидСобытия,
			ДополнительноеОписание);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.УведомлениеПрограммы Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеУведомленияПрограммы(Объект, ДополнительноеОписание);
		
	КонецЕсли;
	
	Возврат ПредставлениеОбъекта
	
КонецФункции

// Формирует текст уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Строка - Текст уведомления.
//
Функция СформироватьТекстУведомленияПоОбъектамУведомления(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания) Экспорт
	
	ТекстУведомления = СформироватьТекстУведомленияПоОбъектамУведомленияПереопределяемый(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектыУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительныеОписания);
	Если ЗначениеЗаполнено(ТекстУведомления) Тогда
		Возврат ТекстУведомления;
	КонецЕсли;
	
	Возврат ТекстУведомления;
	
КонецФункции

// Формирует текст уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текст уведомления.
//
Функция СформироватьТекстУведомленияПоСобытию(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание) Экспорт
	
	ТекстУведомления = СформироватьТекстУведомленияПоСобытиюПереопределяемый(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание);
	Если ЗначениеЗаполнено(ТекстУведомления) Тогда
		Возврат ТекстУведомления;
	КонецЕсли;
	
	Если СпособУведомления = Перечисления.СпособыУведомления.ПоПочте Тогда
		ВключеноВыполнениеЗадачПоПочте = РегистрыСведений.НастройкиУведомлений.ПолучитьДополнительнуюНастройку(
			ПолучательУведомления,
			Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте);
		Если ВключеноВыполнениеЗадачПоПочте Тогда
			//Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи
			//	Или ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
			//	ТекстУведомления = ВыполнениеЗадачПоПочтеСервер.СформироватьТекстУведомленияПоЗадачеСВозможностьюВыполненияПоПочте(
			//		ОбъектУведомления, ПолучательУведомления);
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.УведомлениеПрограммы Тогда
		
		Если ЗначениеЗаполнено(ДополнительноеОписание) Тогда
			ТекстУведомления = ДополнительноеОписание;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектУведомления) И СпособУведомления <> Перечисления.СпособыУведомления.Окном Тогда
			РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
				ТекстУведомления,
				НСтр("ru = 'Ссылка'"),
				РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(ОбъектУведомления));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекстУведомления) Тогда
			ТекстУведомления = НСтр("ru = 'Уведомление 1С Система учета задач'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстУведомления;
	
КонецФункции

// Формирует тему уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Строка - Тема уведомления.
//
Функция СформироватьТемуУведомленияПоОбъектамУведомления(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания) Экспорт
	
	ТемаУведомления = СформироватьТемуУведомленияПоОбъектамУведомленияПереопределяемый(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектыУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительныеОписания);
	Если ЗначениеЗаполнено(ТемаУведомления) Тогда
		Возврат ТемаУведомления;
	КонецЕсли;
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
		
		ПредставлениеОбъектаПодписки = "";
		
		Если ЗначениеЗаполнено(ПредставлениеОбъектаПодписки) Тогда
			Если ОбъектыУведомления.Количество() = 1 Тогда
				ОбъектУведомления = ОбъектыУведомления[0];
				ТемаУведомления = СтрШаблон(
					НСтр("ru = 'Новый файл ""%1"" %2'"),
					ОбъектУведомления.Ссылка,
					ПредставлениеОбъектаПодписки);
			Иначе
				КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
				ТемаУведомления = СтрШаблон(
					НСтр("ru = 'Новые файлы (%1) %2'"),
					КоличествоОбъектовУведомления,
					ПредставлениеОбъектаПодписки);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		Если ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
			ТемаСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектПодписки.Ссылка, "ВладелецСообщения");
			ПредставлениеОбъектаПодписки = СтрШаблон(
				НСтр("ru = 'в теме ""%1""'"),
				ТемаСообщения);
		ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
			ПредставлениеОбъектаПодписки = СтрШаблон(
				НСтр("ru = 'в теме ""%1""'"),
				ОбъектПодписки.Ссылка);
		Иначе
			ПредставлениеОбъектаПодписки = СтрШаблон(
				НСтр("ru = 'в обсуждении ""%1""'"),
				ОбъектПодписки.Ссылка);
		КонецЕсли;
		ТемаУведомления = СтрШаблон(
			НСтр("ru = 'Новое сообщение %1'"),
			ПредставлениеОбъектаПодписки);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.УведомлениеПрограммы Тогда
		
		ТемаУведомления = НСтр("ru = 'Уведомление 1С Документооборот'");
		
	КонецЕсли;
	
	Возврат ТемаУведомления;
	
КонецФункции

// Формирует тему уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Тема уведомления.
//
Функция СформироватьТемуУведомленияПоСобытию(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание) Экспорт
	
	ТемаУведомления = СформироватьТемуУведомленияПоСобытиюПереопределяемый(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание);
	Если ЗначениеЗаполнено(ТемаУведомления) Тогда
		Возврат ТемаУведомления;
	КонецЕсли;
	
	Если СпособУведомления = Перечисления.СпособыУведомления.ПоПочте Тогда
		ВключеноВыполнениеЗадачПоПочте = РегистрыСведений.НастройкиУведомлений.ПолучитьДополнительнуюНастройку(
			ПолучательУведомления,
			Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте);
		Если ВключеноВыполнениеЗадачПоПочте Тогда
			//Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи
			//	Или ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
			//	ТемаУведомления =
			//		ВыполнениеЗадачПоПочтеСервер.СформироватьТемуУведомленияПоЗадачеСВозможностьюВыполненияПоПочте(
			//			ОбъектУведомления,
			//			ПолучательУведомления);
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.УведомлениеПрограммы Тогда
		
		Если ЗначениеЗаполнено(ДополнительноеОписание) Тогда
			ТемаУведомления = СтрПолучитьСтроку(ДополнительноеОписание, 1);
		Иначе
			ТемаУведомления = НСтр("ru = 'Уведомление 1С СУЗ'");
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПеренаправлениеМоейЗадачи Тогда
		Если СтрНачинаетсяС(ДополнительноеОписание, НСтр("ru = 'Автоперенаправление'")) Тогда
			ТемаУведомления = СтрШаблон(
				"%1 ""%2""",
				НСтр("ru = 'Автоперенаправление моей задачи'"),
				ОбъектУведомления);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТемаУведомления;
	
КонецФункции

// Формирует уведомления по событию с группировкой.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназанчено увдеомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
// Возвращаемое значение:
//  Булево - Поведение переопределено.
//
Функция СформироватьУведомленияПоВидуБизнесСобытия(
	ПолучательУведомления,
	СпособУведомления,
	ВидСобытия,
	Уведомления,
	СформированныеУведомления) Экспорт
	
	Если СформироватьУведомленияПоВидуБизнесСобытияПереопределяемый(
		ПолучательУведомления,
		СпособУведомления,
		ВидСобытия,
		Уведомления,
		СформированныеУведомления) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Переопределено = Ложь;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Пользователь", ПолучательУведомления);
	Отбор.Вставить("СпособУведомления", СпособУведомления);
	Отбор.Вставить("ВидСобытия", ВидСобытия);
	УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
	
	УведомленияПодписки = Новый Массив;
	ДополнительныеОписания = Новый Соответствие;
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		Переопределено = Истина;
		
		// Группировка уведомлений по предмету / теме / сообщению.
		ОбъектыПодписки = Новый Массив;
		
		// Подписка на предметы.
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ТипЗнч(Уведомление.ОбъектПодписки) = Тип("СправочникСсылка.СообщенияОбсуждений")
				Или ТипЗнч(Уведомление.ОбъектПодписки) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			РаботаСУведомлениями.ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
			Если ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
				
				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Подписка на темы.
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ТипЗнч(Уведомление.ОбъектПодписки) <> Тип("СправочникСсылка.ТемыОбсуждений") Тогда
				Продолжить;
			КонецЕсли;
			
			РаботаСУведомлениями.ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
			ПредметОбсуждения = Уведомление.ОбъектПодписки.Документ; 
			Если ОбъектыПодписки.Найти(ПредметОбсуждения) = Неопределено
				И ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено  Тогда
				
				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Подписка на сообщения.
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ТипЗнч(Уведомление.ОбъектПодписки) <> Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
				Продолжить;
			КонецЕсли;
			
			РаботаСУведомлениями.ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
			ТемаОбсуждения = Уведомление.ОбъектПодписки.ВладелецСообщения;
			Уведомление.ОбъектПодписки = ТемаОбсуждения;
			ПредметОбсуждения = ТемаОбсуждения.Документ;
			Если ОбъектыПодписки.Найти(ТемаОбсуждения) = Неопределено
				И ОбъектыПодписки.Найти(ПредметОбсуждения) = Неопределено
				И ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
				
				ОбъектыПодписки.Добавить(ТемаОбсуждения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Группировка по объектам подписки.
		Для Каждого ОбъектПодписки Из ОбъектыПодписки Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("Пользователь", ПолучательУведомления);
			Отбор.Вставить("СпособУведомления", СпособУведомления);
			Отбор.Вставить("ВидСобытия", ВидСобытия);
			Отбор.Вставить("ОбъектПодписки", ОбъектПодписки);
			УведомленияПользователяПоВидуИПоОбъектуПодписки = Уведомления.НайтиСтроки(Отбор);
			
			ОбъектыУведомления = Новый Массив;
			Для Каждого Уведомление Из УведомленияПользователяПоВидуИПоОбъектуПодписки Цикл
				Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
					ОбъектыУведомления.Добавить(Уведомление.Объект);
				КонецЕсли;
			КонецЦикла;
			
			Если ОбъектыУведомления.Количество() > 0 Тогда
				
				ДанныеУведомления = РаботаСУведомлениями.ДанныеУведомленияПоОбъектам(
					ОбъектПодписки,
					ВидСобытия,
					ОбъектыУведомления,
					ПолучательУведомления,
					СпособУведомления,
					ДополнительныеОписания);
				
				СформированноеУведомление = СформированныеУведомления.Добавить();
				ЗаполнитьЗначенияСвойств(СформированноеУведомление, ДанныеУведомления);
				СформированноеУведомление.Пользователь = ПолучательУведомления;
				СформированноеУведомление.СпособУведомления = СпособУведомления;
				СформированноеУведомление.Уведомления = УведомленияПодписки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.УведомлениеПрограммы Тогда
		
		Переопределено = Истина;
		
		// Группировка по событию.
		РаботаСУведомлениями.СформироватьУведомленияГруппировкаПоСобытию(
			ПолучательУведомления,
			СпособУведомления,
			ВидСобытия,
			Уведомления,
			СформированныеУведомления);
		
	КонецЕсли;
	
	Возврат Переопределено;
	
КонецФункции

// Формирует уведомления по событиям без группировки.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ОбработанныеВидыБизнесСобытий - Массив - Виды события, по которым уже сгруппированы уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназанчено увдеомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
// Возвращаемое значение:
//  Булево - Поведение переопределено.
//
Функция СформироватьУведомленияПоСобытиям(
	ПолучательУведомления,
	СпособУведомления,
	ОбработанныеВидыБизнесСобытий,
	Уведомления,
	СформированныеУведомления) Экспорт
	
	Если СформироватьУведомленияПоСобытиямПереопределяемый(
		ПолучательУведомления,
		СпособУведомления,
		ОбработанныеВидыБизнесСобытий,
		Уведомления,
		СформированныеУведомления) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Переопределено = Ложь;
	
	Возврат Переопределено;
	
КонецФункции

// Формирует файлы уведомления по событию с группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Массив - Массив структур файлов уведомлений.
//   * Ссылка - СправочникСсылка.Файлы - Ссылка на файл.
//   * ИмяФайла - Строка - Имя файла.
//
Функция СформироватьФайлыУведомленияПоОбъектамУведомления(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание) Экспорт
	
	Файлы = СформироватьФайлыУведомленияПоОбъектамУведомленияПереопределяемый(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание);
	Если Файлы <> Неопределено Тогда
		Возврат Файлы;
	КонецЕсли;
	
	Возврат Файлы;
	
КонецФункции

// Формирует файлы уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Массив - Массив структур файлов уведомлений.
//   * Ссылка - СправочникСсылка.Файлы - Ссылка на файл.
//   * ИмяФайла - Строка - Имя файла.
//
Функция СформироватьФайлыУведомленияПоСобытию(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание) Экспорт
	
	Файлы = СформироватьФайлыУведомленияПоСобытиюПереопределяемый(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание);
	Если Файлы <> Неопределено Тогда
		Возврат Файлы;
	КонецЕсли;
	
	ВключеноВыполнениеЗадачПоПочте = РегистрыСведений.НастройкиУведомлений.ПолучитьДополнительнуюНастройку(
		ПолучательУведомления,
		Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте);
	Если ВключеноВыполнениеЗадачПоПочте Тогда
		//Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи
		//	Или ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
		//	Файлы = ВыполнениеЗадачПоПочтеСервер.СформироватьФайлыУведомленияПоЗадачеСВозможностьюВыполненияПоПочте(
		//		ОбъектУведомления, ПолучательУведомления);
		//КонецЕсли;
	КонецЕсли;
	
	Возврат Файлы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Позволяет скорректировать виды событий, по которым следует группировать уведомления.
// В массиве ВидыСобытий поступают уже полностью сформированные типовые виды событий для группировки.
//
// Параметры:
//  ВидыСобытий - Массив - Сформированные типовые виды событий для группировки.
//  ПолучательУведомления - СправочникСсылка.Пользователь - Получатель уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ уведомления.
//
Процедура ВидыСобытийДляГруппировкиПереопределяемый(ВидыСобытий, ПолучательУведомления, СпособУведомления)
	
КонецПроцедуры

// Позволяет скорректировать формирование текстового представления объекта для уведомления.
//
// Параметры:
//  Объект - СправочникСсылка, ДокументСсылка - Объект, по которому формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление объекта.
//
Функция СформироватьПредставлениеОбъектаПереопределяемый(Объект, ВидСобытия, ПолучательУведомления, ДополнительноеОписание)
	
	ПредставлениеОбъекта = "";
	
	// Пример. Новое представление текст описания файла во всех уведомлениях по файлу.
	//КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
	//Если ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы") Тогда
	//	ПредставлениеОбъекта = СтрШаблон(
	//		НСтр("ru = 'Файл <a href=""%4""><b>%1</b> (%2, %3)</a>'"),
	//		Объект,
	//		Объект.ТекущаяВерсияАвтор,
	//		Объект.ТекущаяВерсияДатаСоздания,
	//		РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(Объект));
	//КонецЕсли;
	
	Возврат ПредставлениеОбъекта
	
КонецФункции

// Формирует текстовое представление сообщения.
//
// Параметры:
//  Сообщение - СправочникСсылка.СообщенияОбсуждений - Сообщение, по которому формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление сообщения
//
Функция СформироватьПредставлениеСообщения(
	Сообщение,
	ВидСобытия,
	ДополнительноеОписание)
	
	ПредставлениеСообщения = "";
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеСообщения,
		НСтр("ru = 'Сообщение'"),
		Сообщение.ТекстСообщения);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеСообщения,
		НСтр("ru = 'Тема'"),
		Сообщение.ВладелецСообщения);
	Если ЗначениеЗаполнено(Сообщение.ВладелецСообщения) Тогда
		ТемаСообщения = Сообщение.ВладелецСообщения;
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеСообщения,
			НСтр("ru = 'Предмет обсуждения'"),
			ТемаСообщения.Документ, ТипЗнч(ТемаСообщения.Документ));
	КонецЕсли;
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеСообщения,
		НСтр("ru = 'Автор'"),
		Сообщение.Автор);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеСообщения,
		НСтр("ru = 'Дата'"),
		Сообщение.ДатаСоздания);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеСообщения,
		НСтр("ru = 'Ссылка'"), 
		РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(Сообщение));
	
	Возврат ПредставлениеСообщения;
	
КонецФункции

// Формирует текстовое представление уведомления программы.
// 
// Параметры:
//  Объект - ЛюбаяСсылка - Объект уведомления программы.
//  Описание - Строка - Описание уедомления.
//
// Возвращаемое значение:
//  Строка - Текстовое представление уведомления программы.
//
Функция СформироватьПредставлениеУведомленияПрограммы(
	Объект,
	Описание)
	
	ПредставлениеУведомления = "";
	
	НавигационнаяСсылкаНаОбъектУведомления = "";
	Если Объект <> Неопределено Тогда
		НавигационнаяСсылкаНаОбъектУведомления =
			РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(Объект);
	КонецЕсли;
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеУведомления,
		,
		Описание);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеУведомления,
		НСтр("ru = 'Ссылка на объект уведомления'"),
		НавигационнаяСсылкаНаОбъектУведомления);
	
	Возврат ПредставлениеУведомления;
	
КонецФункции

// Позволяет скорректировать текст уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Строка - Текст уведомления.
//
Функция СформироватьТекстУведомленияПоОбъектамУведомленияПереопределяемый(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания)
	
	ТекстУведомления = "";
	
	// Пример. Новый разделитель между текстами уведомлений при группировке.
	//Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл
	//	
	//	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля Тогда
	//		ДополнительноеОписание = ОбъектыУведомления.Количество();
	//	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
	//		ДополнительноеОписание = ДополнительныеОписания.Получить(ОбъектУведомления);
	//	Иначе
	//		ДополнительноеОписание = Неопределено;
	//	КонецЕсли;
	//	
	//	ПредставлениеОбъекта = РаботаСУведомлениями.СформироватьПредставлениеОбъекта(
	//		ОбъектУведомления,
	//		ВидСобытия,
	//		ПолучательУведомления,
	//		ДополнительноеОписание);
	//	
	//	ДобавитьЗначениеКСтрокеЧерезРазделитель(
	//		ТекстУведомления,
	//		"<hr>",
	//		ПредставлениеОбъекта);
	//	
	//КонецЦикла;
	
	Возврат ТекстУведомления;
	
КонецФункции

// Позволяет скорректировать текст уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текст уведомления.
//
Функция СформироватьТекстУведомленияПоСобытиюПереопределяемый(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание)
	
	ТекстУведомления = "";
	
	// Пример. Новый текст уведомления о новой задаче (без группировки).
	// Требуется использовать вместе с примером из ВидыСобытийДляГруппировкиПереопределяемый,
	// чтобы отключить группирвоку уведомлений.
	//Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи Тогда
	//	
	//	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектУведомления, "СрокИсполнения, Наименование");
	//	НеУказанПредставление = НСтр("ru = 'Не указан'");
	//	ФорматнаяСтрока = СтрШаблон("ДФ='dd.MM.yyyy HH:mm'; ДП='%1'", НеУказанПредставление);
	//	ПредставлениеСрока = Формат(РеквизитыЗадачи.СрокИсполнения, ФорматнаяСтрока);
	//	
	//	ТекстСсылокВыполненияЗадачи = "";
	//	ВключеноВыполнениеЗадачПоПочте = РегистрыСведений.НастройкиУведомлений.ПолучитьДополнительнуюНастройку(
	//		ПолучательУведомления,
	//		Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте);
	//	Если ВключеноВыполнениеЗадачПоПочте Тогда
	//		СсылкиОтветов = ВыполнениеЗадачПоПочтеСервер.ПолучитьОтветыВВидеСсылокMailto(ОбъектУведомления);
	//		ТекстСсылокВыполненияЗадачи = СсылкиОтветов.Текст;
	//	КонецЕсли;
	//	
	//	ТекстУведомления = СтрШаблон(
	//		НСтр("ru = 'Уважаемый (ая) %1!
	//			|
	//			|Вам поступила задача ""%2"".
	//			|Крайний срок исполнения задачи: %3.
	//			|Вы можетее перейти к задаче, нажав на ссылку: <a href=""%4"">Перейти к выполнению задачу</a>
	//			|%5
	//			|
	//			|С уважением,
	//			|Сервис уведомлений 1С:СУЗ'"),
	//		ПолучательУведомления,
	//		РеквизитыЗадачи.Наименование,
	//		ПредставлениеСрока,
	//		РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(ОбъектУведомления),
	//		ТекстСсылокВыполненияЗадачи);
	//	
	//КонецЕсли;
	
	Возврат ТекстУведомления;
	
КонецФункции

// Позволяет скорректировать тему уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Строка - Тема уведомления.
//
Функция СформироватьТемуУведомленияПоОбъектамУведомленияПереопределяемый(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания)
	
	ТемаУведомления = "";
	
	// Пример. Новая тема уведомления о новых файлах (с группировкой).
	//КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
	//Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
	//	
	//	ТемаУведомления = "";
	//	Если ОбъектыУведомления.Количество() = 1 Тогда
	//		ОбъектУведомления = ОбъектыУведомления[0];
	//		ТемаУведомления = СтрШаблон(
	//			НСтр("ru = 'Создан новый файл ""%1""'"),
	//			ОбъектУведомления.Ссылка);
	//	Иначе
	//		КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
	//		ТемаУведомления = СтрШаблон(
	//			НСтр("ru = 'Созданы новые файлы (%1)'"),
	//			КоличествоОбъектовУведомления);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Возврат ТемаУведомления;
	
КонецФункции

// Позволяет скорректировать тему уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Тема уведомления.
//
Функция СформироватьТемуУведомленияПоСобытиюПереопределяемый(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание)
	
	ТемаУведомления = "";
	
	// Пример. Новая тема уведомления о новой задаче (без группировки).
	// Требуется использовать вместе с примером из ВидыСобытийДляГруппировкиПереопределяемый,
	// чтобы отключить группирвоку уведомлений.
	//КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
	//Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи Тогда
	//	НаименованиеЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектУведомления, "Наименование");
	//	ТемаУведомления = СтрШаблон(
	//		НСтр("ru = 'Вам поступила задача ""%1""'"),
	//		НаименованиеЗадачи);
	//КонецЕсли;
	
	Возврат ТемаУведомления;
	
КонецФункции

// Позволяет скорректировать формирование уведомления по событию с группировкой.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназанчено увдеомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
// Возвращаемое значение:
//  Булево - Поведение переопределено.
//
Функция СформироватьУведомленияПоВидуБизнесСобытияПереопределяемый(
	ПолучательУведомления,
	СпособУведомления,
	ВидСобытия,
	Уведомления,
	СформированныеУведомления)
	
	Переопределено = Ложь;
	
	// Пример. Уведомление о создании файла группировать не по объекту подписки, а только по событию.
	//Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
	//	
	//	Переопределено = Истина;
	//	
	//	// Группировка по событию и объекту подписки.
	//	РаботаСУведомлениями.СформироватьУведомленияГруппировкаПоСобытию(
	//		ПолучательУведомления,
	//		СпособУведомления,
	//		ВидСобытия,
	//		Уведомления,
	//		СформированныеУведомления);
	//	
	//КонецЕсли;
	
	Возврат Переопределено;
	
КонецФункции

// Позволяет скорректировать формирование уведомления по событию без группировки.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ОбработанныеВидыБизнесСобытий - Массив - Виды события, по которым уже сгруппированы уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназанчено увдеомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
// Возвращаемое значение:
//  Булево - Поведение переопределено.
//
Функция СформироватьУведомленияПоСобытиямПереопределяемый(
	ПолучательУведомления,
	СпособУведомления,
	ОбработанныеВидыБизнесСобытий,
	Уведомления,
	СформированныеУведомления) Экспорт
	
	Переопределено = Ложь;
	
	// Пример. Для пользователя Великанова все не сгруппированные уведомления объединять в одно письмо.
	//КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
	//Если СтрНайти(ПолучательУведомления, "Великанова") Тогда
	//	
	//	Переопределено = Истина;
	//	
	//	Отбор = Новый Структура();
	//	Отбор.Вставить("Пользователь", ПолучательУведомления);
	//	Отбор.Вставить("СпособУведомления", СпособУведомления);
	//	УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
	//	
	//	ТекстУведомления = Новый Массив;
	//	УведомленияПодписки = Новый Массив;
	//	
	//	Для Каждого Уведомление Из УведомленияПользователя Цикл
	//		
	//		Если ОбработанныеВидыБизнесСобытий.Найти(Уведомление.ВидСобытия) <> Неопределено Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		ДанныеУведомления = РаботаСУведомлениями.ДанныеУведомленияПоСобытию(
	//			Уведомление.ОбъектПодписки, 
	//			Уведомление.ВидСобытия, 
	//			Уведомление.Объект,
	//			ПолучательУведомления,
	//			Уведомление.ТекстУведомления);
	//		
	//		ТекстУведомления.Добавить(
	//			СтрШаблон(
	//				"<b>%1</b>
	//				|%2",
	//				ДанныеУведомления.ТемаУведомления,
	//				ДанныеУведомления.ТекстУведомления));
	//		РаботаСУведомлениями.ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
	//		
	//	КонецЦикла;
	//	
	//	ТекстУведомления = СтрСоединить(ТекстУведомления, "<hr>");
	//	
	//	СформированноеУведомление = СформированныеУведомления.Добавить();
	//	СформированноеУведомление.ТемаУведомления = НСтр("ru = 'Новые события в Документообороте'");
	//	СформированноеУведомление.ТекстУведомления = ТекстУведомления;
	//	СформированноеУведомление.Файлы = Новый Массив;
	//	СформированноеУведомление.Пользователь = ПолучательУведомления;
	//	СформированноеУведомление.СпособУведомления = СпособУведомления;
	//	СформированноеУведомление.Уведомления = УведомленияПодписки;
	//	
	//КонецЕсли;
	
	Возврат Переопределено;
	
КонецФункции

// Позволяет скорректировать файлы уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Массив - Массив структур файлов уведомлений.
//   * Ссылка - СправочникСсылка.Файлы - Ссылка на файл.
//   * ИмяФайла - Строка - Имя файла.
//
Функция СформироватьФайлыУведомленияПоОбъектамУведомленияПереопределяемый(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания)
	
	Файлы = Неопределено;
	
	// Пример. В уведомление о создании файла прикладывать файлы (с группировкой).
	//Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
	//	
	//	Файлы = Новый Массив;
	//	Для Каждого Файл Из ОбъектыУведомления Цикл
	//		
	//		ИмяСРасширением = Файл.ПолноеНаименование;
	//		Если ЗначениеЗаполнено(Файл.ТекущаяВерсияРасширение) Тогда
	//			ИмяСРасширением = ИмяСРасширением + "." + Файл.ТекущаяВерсияРасширение;
	//		КонецЕсли;
	//		
	//		МаксимальныйРазмерВложений = 20 * 1024 * 1024; // 20 МБ
	//		
	//		ТекущийРазмерВложений = 0;
	//		ТекущийРазмерВложений = ТекущийРазмерВложений + Файл.ТекущаяВерсияРазмер;
	//		Если ТекущийРазмерВложений <= МаксимальныйРазмерВложений Тогда
	//			СтруктураФайла = Новый Структура("Ссылка, ИмяФайла");
	//			СтруктураФайла.Ссылка = Файл;
	//			СтруктураФайла.ИмяФайла = ИмяСРасширением;
	//			Файлы.Добавить(СтруктураФайла);
	//		Иначе
	//			Прервать;
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
	Возврат Файлы;
	
КонецФункции

// Позволяет скорректировать файлы уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Массив - Массив структур файлов уведомлений.
//   * Ссылка - СправочникСсылка.Файлы - Ссылка на файл.
//   * ИмяФайла - Строка - Имя файла.
//
Функция СформироватьФайлыУведомленияПоСобытиюПереопределяемый(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание)
	
	Файлы = Неопределено;
	
	// Пример. В уведомление об изменении файла прикладывать файл (без группировки).
	//Если ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеФайла Тогда
	//	
	//	Файлы = Новый Массив;
	//	
	//	Файл = ОбъектУведомления;
	//	
	//	ИмяСРасширением = Файл.ПолноеНаименование; 
	//	Если ЗначениеЗаполнено(Файл.ТекущаяВерсияРасширение) Тогда
	//		ИмяСРасширением = ИмяСРасширением + "." + Файл.ТекущаяВерсияРасширение;
	//	КонецЕсли;
	//	
	//	МаксимальныйРазмерВложений = 20 * 1024 * 1024; // 20 МБ
	//	
	//	ТекущийРазмерВложений = 0;
	//	ТекущийРазмерВложений = ТекущийРазмерВложений + Файл.ТекущаяВерсияРазмер;
	//	Если ТекущийРазмерВложений <= МаксимальныйРазмерВложений Тогда
	//		СтруктураФайла = Новый Структура("Ссылка, ИмяФайла");
	//		СтруктураФайла.Ссылка = Файл;
	//		СтруктураФайла.ИмяФайла = ИмяСРасширением;
	//		Файлы.Добавить(СтруктураФайла);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Возврат Файлы;
	
КонецФункции

#КонецОбласти