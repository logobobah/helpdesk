Функция ПолучитьСвязанныйДокумент(Документ, Знач ТипСвязи) Экспорт
	
	Если ТипЗнч(ТипСвязи) = Тип("Строка") Тогда
		ТипСвязи = Справочники.ТипыСвязей[ТипСвязи];
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СвязиДокументов.СвязанныйДокумент,
		|	СвязиДокументов.Комментарий,
		|	СвязиДокументов.Установил,
		|	СвязиДокументов.ДатаУстановки
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|ГДЕ
		|	СвязиДокументов.Документ = &Документ
		|	И СвязиДокументов.ТипСвязи = &ТипСвязи";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ТипСвязи", ТипСвязи);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.СвязанныйДокумент;
	
КонецФункции

Функция ПолучитьСвязанныеДокументы(Документ, Знач ТипСвязи) Экспорт
	
	Если ТипЗнч(ТипСвязи) = Тип("Строка") Тогда
		ТипСвязи = Справочники.ТипыСвязей[ТипСвязи];
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиДокументов.СвязанныйДокумент,
		|	СвязиДокументов.Комментарий,
		|	СвязиДокументов.Установил,
		|	СвязиДокументов.ДатаУстановки
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|ГДЕ
		|	СвязиДокументов.Документ = &Документ
		|	И СвязиДокументов.ТипСвязи = &ТипСвязи";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ТипСвязи", ТипСвязи);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СвязанныйДокумент");
	
КонецФункции

Процедура СоздатьНастройкуСвязи(
	ТипСвязи,
	СсылкаИз,
	СсылкаНа,
	ХарактерСвязи,
	ТипОбратнойСвязи = Неопределено,
	ХарактерОбратнойСвязи = Неопределено,
	Предопределенная = Ложь,
	Комментарий = "") Экспорт
	
	МенеджерЗаписи = РегистрыСведений.НастройкаСвязей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ТипСвязи = ТипСвязи;
	МенеджерЗаписи.СсылкаИз = СсылкаИз;
	МенеджерЗаписи.СсылкаНа = СсылкаНа;
	МенеджерЗаписи.ХарактерСвязи = ХарактерСвязи;
	МенеджерЗаписи.ТипОбратнойСвязи = ТипОбратнойСвязи;
	МенеджерЗаписи.ХарактерОбратнойСвязи = ХарактерОбратнойСвязи;
	МенеджерЗаписи.Предопределенная = Предопределенная;
	МенеджерЗаписи.Комментарий = Комментарий;
	МенеджерЗаписи.Записать();
	
	Если ЗначениеЗаполнено(ТипОбратнойСвязи) Тогда
		МенеджерЗаписи = РегистрыСведений.НастройкаСвязей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТипСвязи = ТипОбратнойСвязи ;
		МенеджерЗаписи.СсылкаИз = СсылкаНа;
		МенеджерЗаписи.СсылкаНа = СсылкаИз;
		МенеджерЗаписи.ХарактерСвязи = ХарактерОбратнойСвязи;
		МенеджерЗаписи.ТипОбратнойСвязи = ТипСвязи;
		МенеджерЗаписи.ХарактерОбратнойСвязи = ХарактерСвязи;
		МенеджерЗаписи.Предопределенная = Предопределенная;
		МенеджерЗаписи.Комментарий = Комментарий;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьСвязь(
	Документ,
	СвязанныйДокумент,
	ТипСвязи,
	Установил = Неопределено,
	ДатаУстановки = Неопределено,
	Комментарий = "",
	Порядок = 0) Экспорт
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		МенеджерЗаписи = РегистрыСведений.СвязиДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Документ = Документ;
		
		Если ТипЗнч(СвязанныйДокумент) = Тип("Строка") Тогда 
			МенеджерЗаписи.СвязаннаяСтрока = СвязанныйДокумент;
		Иначе
			МенеджерЗаписи.СвязанныйДокумент = СвязанныйДокумент;
		КонецЕсли;	

		МенеджерЗаписи.ТипСвязи = ТипСвязи;
		МенеджерЗаписи.Комментарий = Комментарий;
		МенеджерЗаписи.Порядок = Порядок;
		
		Если Установил = Неопределено Тогда
			МенеджерЗаписи.Установил = ПользователиКлиентСервер.ТекущийПользователь();
		Иначе
			МенеджерЗаписи.Установил = Установил;
		КонецЕсли;
		
		Если ДатаУстановки = Неопределено Тогда
			МенеджерЗаписи.ДатаУстановки = ТекущаяДатаСеанса();
		Иначе
			МенеджерЗаписи.ДатаУстановки = ДатаУстановки;
		КонецЕсли;
		МенеджерЗаписи.Записать();
		
		//НастройкаСвязи = ПолучитьНастройкуСвязи(Документ, СвязанныйДокумент, ТипСвязи);
		//
		//Если НастройкаСвязи = Неопределено Тогда
		//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		//		НСтр("ru = 'Тип связи %1 не настроен для %2'"), Строка(ТипСвязи), Строка(СвязанныйДокумент));
		//	ВызватьИсключение ТекстСообщения;
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(НастройкаСвязи.ТипОбратнойСвязи) Тогда
		//	МенеджерОбратнойЗаписи = РегистрыСведений.СвязиДокументов.СоздатьМенеджерЗаписи();
		//	МенеджерОбратнойЗаписи.Документ = МенеджерЗаписи.СвязанныйДокумент;
		//	МенеджерОбратнойЗаписи.СвязанныйДокумент = МенеджерЗаписи.Документ;
		//	МенеджерОбратнойЗаписи.ТипСвязи = НастройкаСвязи.ТипОбратнойСвязи;
		//	МенеджерОбратнойЗаписи.Установил = МенеджерЗаписи.Установил;
		//	МенеджерОбратнойЗаписи.ДатаУстановки = МенеджерЗаписи.ДатаУстановки;
		//	МенеджерОбратнойЗаписи.Комментарий = МенеджерЗаписи.Комментарий;
		//	МенеджерОбратнойЗаписи.Порядок = МенеджерЗаписи.Порядок;
		//	МенеджерОбратнойЗаписи.Записать();
		//КонецЕсли;
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьСвязь(Документ, СвязанныйДокумент, ТипСвязи) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.СвязиДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Документ = Документ;
	
	Если ТипЗнч(СвязанныйДокумент) = Тип("Строка") Тогда 
		МенеджерЗаписи.СвязаннаяСтрока = СвязанныйДокумент;
	Иначе
		МенеджерЗаписи.СвязанныйДокумент = СвязанныйДокумент;
	КонецЕсли;	

	МенеджерЗаписи.ТипСвязи = ТипСвязи;
	МенеджерЗаписи.Удалить();
	
	НастройкаСвязи = ПолучитьНастройкуСвязи(Документ, СвязанныйДокумент, ТипСвязи);
	Если НастройкаСвязи = Неопределено Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Тип связи %1 не настроен для %2'"), Строка(ТипСвязи), Строка(СвязанныйДокумент));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкаСвязи.ТипОбратнойСвязи) Тогда
		МенеджерЗаписи = РегистрыСведений.СвязиДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Документ = СвязанныйДокумент;
		МенеджерЗаписи.СвязанныйДокумент = Документ;
		МенеджерЗаписи.ТипСвязи = НастройкаСвязи.ТипОбратнойСвязи;
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКомментарийТипаСвязи(ТипСвязи, Комментарий) Экспорт
	
	ТипСвязиОбъект = ТипСвязи.ПолучитьОбъект();
	ТипСвязиОбъект.Комментарий = Комментарий;
	ТипСвязиОбъект.Записать();
	
КонецПроцедуры

Функция ПолучитьРодителей(Элемент) Экспорт
	
	Родители = Новый Массив;
	
	ТекущийРодитель = Элемент.Родитель;
	Пока Не ТекущийРодитель.Пустая() Цикл
		Родители.Добавить(ТекущийРодитель);
		ТекущийРодитель = ТекущийРодитель.Родитель;
	КонецЦикла;
	
	Возврат Родители;
	
КонецФункции

Функция ПолучитьНастройкуСвязи(Документ, СвязанныйДокумент, ТипСвязи) Экспорт
	
	СтруктураВозврата = Новый Структура("ТипСвязи, СсылкаИз, СсылкаНа, ТипОбратнойСвязи, ХарактерСвязи, ХарактерОбратнойСвязи");
	
	НастройкиСвязи = Новый ТаблицаЗначений;
	НастройкиСвязи.Колонки.Добавить("ТипСвязи");
	НастройкиСвязи.Колонки.Добавить("СсылкаИз");
	НастройкиСвязи.Колонки.Добавить("УровеньСсылкаИз");
	НастройкиСвязи.Колонки.Добавить("СсылкаНа");
	НастройкиСвязи.Колонки.Добавить("УровеньСсылкаНа");
	НастройкиСвязи.Колонки.Добавить("Уровень");
	НастройкиСвязи.Колонки.Добавить("ХарактерСвязи");
	НастройкиСвязи.Колонки.Добавить("ТипОбратнойСвязи");
	НастройкиСвязи.Колонки.Добавить("ХарактерОбратнойСвязи");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкаСвязей.ТипСвязи,
		|	НастройкаСвязей.СсылкаИз,
		|	НастройкаСвязей.СсылкаНа,
		|	НастройкаСвязей.ХарактерСвязи,
		|	НастройкаСвязей.ТипОбратнойСвязи,
		|	НастройкаСвязей.ХарактерОбратнойСвязи,
		|	НастройкаСвязей.Комментарий
		|ИЗ
		|	РегистрСведений.НастройкаСвязей КАК НастройкаСвязей
		|ГДЕ
		|	НастройкаСвязей.ТипСвязи = &ТипСвязи";
	Запрос.УстановитьПараметр("ТипСвязи", ТипСвязи);
	
	Если ТипЗнч(Документ) = Тип("СправочникСсылка.Файлы")
		Или ТипЗнч(Документ) = Тип("СправочникСсылка.Проекты")
		Или ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Документ)
		Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Документ) Тогда
		Запрос.Текст = Запрос.Текст +
		" И (ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаИз) = ТИПЗНАЧЕНИЯ(&Документ)) ";
		Запрос.УстановитьПараметр("Документ", Документ);
	Иначе
		Запрос.Текст = Запрос.Текст +
		" И (НастройкаСвязей.СсылкаИз = &ВидДокумента
		| ИЛИ НастройкаСвязей.СсылкаИз В (&Родители)
		| ИЛИ НастройкаСвязей.СсылкаИз = &ПустаяСсылка) ";
		
		Если ТипЗнч(Документ) = Тип("Структура") Тогда 
			ВидДокументаСсылкаИз = Документ.ВидДокумента;
		Иначе 
			ВидДокументаСсылкаИз = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидДокумента");
		КонецЕсли;
		
		ПустаяСсылкаИз = Справочники[ВидДокументаСсылкаИз.Метаданные().Имя].ПустаяСсылка();
		РодителиСсылкаИз = ПолучитьРодителей(ВидДокументаСсылкаИз);
		
		Запрос.УстановитьПараметр("ВидДокумента", ВидДокументаСсылкаИз);
		Запрос.УстановитьПараметр("Родители", 	  РодителиСсылкаИз);
		Запрос.УстановитьПараметр("ПустаяСсылка", ПустаяСсылкаИз);
	КонецЕсли;
	
	Если ТипЗнч(СвязанныйДокумент) = Тип("Строка")
		Или ТипЗнч(СвязанныйДокумент) = Тип("СправочникСсылка.Файлы")
		Или ТипЗнч(СвязанныйДокумент) = Тип("СправочникСсылка.Проекты")
		Или ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(СвязанныйДокумент)
		Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(СвязанныйДокумент) Тогда
		Запрос.Текст = Запрос.Текст +
			" И (ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаНа) = ТИПЗНАЧЕНИЯ(&СвязанныйДокумент)) ";
		Запрос.УстановитьПараметр("СвязанныйДокумент", СвязанныйДокумент);
	Иначе
		
		Если ТипЗнч(СвязанныйДокумент) = Тип("Структура") Тогда 
			ВидДокументаСсылкаНа = СвязанныйДокумент.ВидДокумента;
		ИначеЕсли ЗначениеЗаполнено(СвязанныйДокумент) Тогда 
			ВидДокументаСсылкаНа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвязанныйДокумент, "ВидДокумента");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидДокументаСсылкаНа) Тогда
			
			РодителиСсылкаНа = ПолучитьРодителей(ВидДокументаСсылкаНа);
			ПустаяСсылкаНа = Справочники[ВидДокументаСсылкаНа.Метаданные().Имя].ПустаяСсылка();
			
			Запрос.Текст = Запрос.Текст +
				" И (НастройкаСвязей.СсылкаНа = &ВидДокументаСсылкаНа
				|	ИЛИ НастройкаСвязей.СсылкаНа В (&РодителиСсылкаНа)
				|	ИЛИ НастройкаСвязей.СсылкаНа = &ПустаяСсылкаНа) ";
			
			Запрос.УстановитьПараметр("ВидДокументаСсылкаНа", ВидДокументаСсылкаНа);
			Запрос.УстановитьПараметр("РодителиСсылкаНа", РодителиСсылкаНа);
			Запрос.УстановитьПараметр("ПустаяСсылкаНа", ПустаяСсылкаНа);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = НастройкиСвязи.Добавить();
		НоваяСтрока.ТипСвязи = Выборка.ТипСвязи;
		НоваяСтрока.СсылкаИз = Выборка.СсылкаИз;
		НоваяСтрока.СсылкаНа = Выборка.СсылкаНа;
		
		Если ТипЗнч(Выборка.СсылкаИз) = Тип("СправочникСсылка.Файлы")
			Или ТипЗнч(Выборка.СсылкаИз) = Тип("СправочникСсылка.Проекты")
			Или ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Выборка.СсылкаИз)
			Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Выборка.СсылкаИз) Тогда
			НоваяСтрока.УровеньСсылкаИз = 0;
		Иначе
			Если Выборка.СсылкаИз = ВидДокументаСсылкаИз Тогда
				НоваяСтрока.УровеньСсылкаИз = 0;
			ИначеЕсли Выборка.СсылкаИз = ПустаяСсылкаИз Тогда
				НоваяСтрока.УровеньСсылкаИз = 1000;
			Иначе
				НоваяСтрока.УровеньСсылкаИз = РодителиСсылкаИз.Найти(Выборка.СсылкаИз) + 1;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Выборка.СсылкаНа) = Тип("Строка")
			Или ТипЗнч(Выборка.СсылкаНа) = Тип("СправочникСсылка.Файлы")
			Или ТипЗнч(Выборка.СсылкаНа) = Тип("СправочникСсылка.Проекты")
			Или ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Выборка.СсылкаНа)
			Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Выборка.СсылкаНа) Тогда
			НоваяСтрока.УровеньСсылкаНа = 0;
		Иначе
			Если Выборка.СсылкаНа = ВидДокументаСсылкаНа Тогда
				НоваяСтрока.УровеньСсылкаНа = 0;
			ИначеЕсли Выборка.СсылкаНа = ПустаяСсылкаНа Тогда
				НоваяСтрока.УровеньСсылкаНа = 1000;
			Иначе
				НоваяСтрока.УровеньСсылкаНа = РодителиСсылкаНа.Найти(Выборка.СсылкаНа) + 1;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Уровень = НоваяСтрока.УровеньСсылкаИз + НоваяСтрока.УровеньСсылкаНа;
		НоваяСтрока.ХарактерСвязи = Выборка.ХарактерСвязи;
		НоваяСтрока.ТипОбратнойСвязи = Выборка.ТипОбратнойСвязи;
		НоваяСтрока.ХарактерОбратнойСвязи = Выборка.ХарактерОбратнойСвязи;
	КонецЦикла;
	
	//Если ТипЗнч(Документ) <> Тип("Структура")
	//	И ТипЗнч(СвязанныйДокумент) <> Тип("Структура") Тогда // Добавим предопределенную связь для интегрированных объектов.
	//	
	//	ЗапросИнтегрированныеОбъекты = Новый Запрос(
	//		"ВЫБРАТЬ ПЕРВЫЕ 1
	//		|	1 КАК Поле1
	//		|ИЗ
	//		|	РегистрСведений.СвязиОбъектовИнтегрированныхСистем КАК ИнтегрированныеДляДокумента
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиОбъектовИнтегрированныхСистем КАК ИнтегрированныеДляСвязанногоДокумента
	//		|		ПО ИнтегрированныеДляДокумента.УзелИнтегрированнойСистемы = ИнтегрированныеДляСвязанногоДокумента.УзелИнтегрированнойСистемы
	//		|			И (ИнтегрированныеДляДокумента.СсылкаНаОбъектДО = &Документ)
	//		|			И (ИнтегрированныеДляСвязанногоДокумента.СсылкаНаОбъектДО = &СвязанныйДокумент)");
	//	ЗапросИнтегрированныеОбъекты.УстановитьПараметр("Документ", Документ);
	//	ЗапросИнтегрированныеОбъекты.УстановитьПараметр("СвязанныйДокумент", СвязанныйДокумент);
	//	Выборка = ЗапросИнтегрированныеОбъекты.Выполнить().Выбрать();
	//	Если Выборка.Следующий() Тогда
	//		
	//		НоваяСтрока = НастройкиСвязи.Добавить();
	//		
	//		НоваяСтрока.ТипСвязи = Справочники.ТипыСвязей.СодержитСсылкуНаИнтегрированныйОбъект;
	//		НоваяСтрока.СсылкаИз = Документ;
	//		НоваяСтрока.СсылкаНа = СвязанныйДокумент;
	//		НоваяСтрока.ХарактерСвязи = Перечисления.ХарактерСвязей.Множественная;
	//		НоваяСтрока.Уровень = 1000000;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
		
	НастройкиСвязи.Сортировать("Уровень Возр");
	Если НастройкиСвязи.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, НастройкиСвязи[0]);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьНастройкиСвязи(Документ, СвязанныйДокумент = Неопределено) Экспорт
	
	НастройкиСвязи = Новый ТаблицаЗначений;
	НастройкиСвязи.Колонки.Добавить("ТипСвязи");
	НастройкиСвязи.Колонки.Добавить("СсылкаИз");
	НастройкиСвязи.Колонки.Добавить("ТипСсылкаИз");
	НастройкиСвязи.Колонки.Добавить("ТипСсылкаИзПредставление");
	НастройкиСвязи.Колонки.Добавить("СсылкаНа");
	НастройкиСвязи.Колонки.Добавить("ТипСсылкаНа");
	НастройкиСвязи.Колонки.Добавить("ТипСсылкаНаПредставление");
	НастройкиСвязи.Колонки.Добавить("ХарактерСвязи");
	НастройкиСвязи.Колонки.Добавить("ТипОбратнойСвязи");
	НастройкиСвязи.Колонки.Добавить("ХарактерОбратнойСвязи");
	НастройкиСвязи.Колонки.Добавить("Предопределенная");
	НастройкиСвязи.Колонки.Добавить("Обязательная");
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат НастройкиСвязи;
	КонецЕсли;
	
	ИспользованиеВстроеннойПочты = ПолучитьФункциональнуюОпцию("ИспользованиеВстроеннойПочты");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкаСвязей.ТипСвязи,
		|	НастройкаСвязей.СсылкаИз,
		|	НастройкаСвязей.СсылкаНа,
		|	НастройкаСвязей.ХарактерСвязи,
		|	НастройкаСвязей.ТипОбратнойСвязи,
		|	НастройкаСвязей.ХарактерОбратнойСвязи,
		|	НастройкаСвязей.Предопределенная,
		|	НастройкаСвязей.Обязательная,
		|	НастройкаСвязей.Комментарий
		|ИЗ
		|	РегистрСведений.НастройкаСвязей КАК НастройкаСвязей
		|ГДЕ
		|	НЕ НастройкаСвязей.ТипСвязи.ПометкаУдаления";
	
	Если ТипЗнч(Документ) = Тип("СправочникСсылка.Файлы")
		Или ТипЗнч(Документ) = Тип("СправочникСсылка.Проекты")
		Или ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Документ)
		Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Документ) Тогда
		Запрос.Текст = Запрос.Текст +
		" И (ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаИз) = ТИПЗНАЧЕНИЯ(&Документ)) ";
		Запрос.УстановитьПараметр("Документ", Документ);
	Иначе
		Запрос.Текст = Запрос.Текст +
		" И (НастройкаСвязей.СсылкаИз = &ВидДокумента
		| ИЛИ НастройкаСвязей.СсылкаИз В (&Родители)
		| ИЛИ НастройкаСвязей.СсылкаИз = &ПустаяСсылка) ";
		
		Если ТипЗнч(Документ) = Тип("Структура") Тогда 
			ВидДокументаСсылкаИз = Документ.ВидДокумента;
		Иначе 
			ВидДокументаСсылкаИз = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидДокумента");
		КонецЕсли;
		
		ПустаяСсылкаИз = Справочники[ВидДокументаСсылкаИз.Метаданные().Имя].ПустаяСсылка();
		РодителиИз = ПолучитьРодителей(ВидДокументаСсылкаИз);
		
		Запрос.УстановитьПараметр("ВидДокумента", ВидДокументаСсылкаИз);
		Запрос.УстановитьПараметр("Родители", РодителиИз);
		Запрос.УстановитьПараметр("ПустаяСсылка", ПустаяСсылкаИз);
	КонецЕсли;
	
	Если Не ИспользованиеВстроеннойПочты Тогда 
		Запрос.Текст = Запрос.Текст + "
			| И ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаИз) <> ТИП(Документ.ВходящееПисьмо)
			| И ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаИз) <> ТИП(Документ.ИсходящееПисьмо)
			| И ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаНа) <> ТИП(Документ.ВходящееПисьмо)
			| И ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаНа) <> ТИП(Документ.ИсходящееПисьмо)";
	КонецЕсли;
	
	Если СвязанныйДокумент <> Неопределено Тогда
		Если ТипЗнч(СвязанныйДокумент) = Тип("Строка")
			Или ТипЗнч(СвязанныйДокумент) = Тип("СправочникСсылка.Файлы")
			Или ТипЗнч(СвязанныйДокумент) = Тип("СправочникСсылка.Проекты")
			Или ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(СвязанныйДокумент)
			Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(СвязанныйДокумент) Тогда
			Запрос.Текст = Запрос.Текст +
			" И (ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаНа) = ТИПЗНАЧЕНИЯ(&СвязанныйДокумент)) ";
			Запрос.УстановитьПараметр("СвязанныйДокумент", СвязанныйДокумент);
		Иначе
			Запрос.Текст = Запрос.Текст +
			" И (НастройкаСвязей.СсылкаНа = &ВидДокументаСсылкаНа
			|	ИЛИ НастройкаСвязей.СсылкаНа В (&РодителиСсылкаНа)
			|	ИЛИ НастройкаСвязей.СсылкаНа = &ПустаяСсылкаНа) ";
			
			Если ТипЗнч(СвязанныйДокумент) = Тип("Структура") Тогда 
				ВидДокументаСсылкаНа = СвязанныйДокумент.ВидДокумента;
			Иначе 
				ВидДокументаСсылкаНа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвязанныйДокумент, "ВидДокумента");
			КонецЕсли;
			
			РодителиСсылкаНа = ПолучитьРодителей(ВидДокументаСсылкаНа);
			ПустаяСсылкаНа = Справочники[ВидДокументаСсылкаНа.Метаданные().Имя].ПустаяСсылка();
			
			Запрос.УстановитьПараметр("ВидДокументаСсылкаНа", ВидДокументаСсылкаНа);
			Запрос.УстановитьПараметр("РодителиСсылкаНа", РодителиСсылкаНа);
			Запрос.УстановитьПараметр("ПустаяСсылкаНа", ПустаяСсылкаНа);
		КонецЕсли;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = НастройкиСвязи.Добавить();
		
		НоваяСтрока.ТипСвязи = Выборка.ТипСвязи;
		
		НоваяСтрока.СсылкаИз = Выборка.СсылкаИз;
		ЗаполнитьТипИПредставлениеСсылки(ТипЗнч(Выборка.СсылкаИз),
			НоваяСтрока.ТипСсылкаИз,
			НоваяСтрока.ТипСсылкаИзПредставление);
		
		НоваяСтрока.СсылкаНа = Выборка.СсылкаНа;
		ЗаполнитьТипИПредставлениеСсылки(ТипЗнч(Выборка.СсылкаНа),
			НоваяСтрока.ТипСсылкаНа,
			НоваяСтрока.ТипСсылкаНаПредставление);
		
		НоваяСтрока.ХарактерСвязи = Выборка.ХарактерСвязи;
		НоваяСтрока.ТипОбратнойСвязи = Выборка.ТипОбратнойСвязи;
		НоваяСтрока.ХарактерОбратнойСвязи = Выборка.ХарактерОбратнойСвязи;
		НоваяСтрока.Предопределенная = Выборка.Предопределенная;
		НоваяСтрока.Обязательная = Выборка.Обязательная;
		
	КонецЦикла;
	
	//Если ТипЗнч(Документ) <> Тип("Структура") Тогда // Добавим предопределенную связь для интегрированных объектов.
	//	
	//	Если СвязанныйДокумент = Неопределено
	//		Или ТипЗнч(СвязанныйДокумент) = Тип("Структура") Тогда
	//		
	//		ЗапросИнтегрированныеОбъекты = Новый Запрос(
	//			"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//			|	ТИПЗНАЧЕНИЯ(ИнтегрированныеДляСвязанногоДокумента.СсылкаНаОбъектДО) КАК ТипСвязанного
	//			|ИЗ
	//			|	РегистрСведений.СвязиОбъектовИнтегрированныхСистем КАК ИнтегрированныеДляДокумента
	//			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиОбъектовИнтегрированныхСистем КАК ИнтегрированныеДляСвязанногоДокумента
	//			|		ПО ИнтегрированныеДляДокумента.УзелИнтегрированнойСистемы = ИнтегрированныеДляСвязанногоДокумента.УзелИнтегрированнойСистемы
	//			|			И (ИнтегрированныеДляДокумента.СсылкаНаОбъектДО = &Документ)
	//			|			И (ИнтегрированныеДляСвязанногоДокумента.СсылкаНаОбъектДО <> &Документ)
	//			|ГДЕ
	//			|	 ИнтегрированныеДляСвязанногоДокумента.СсылкаНаОбъектДО ССЫЛКА Справочник.Файлы
	//			|");
	//		
	//	Иначе
	//		
	//		ЗапросИнтегрированныеОбъекты = Новый Запрос(
	//			"ВЫБРАТЬ ПЕРВЫЕ 1
	//			|	1 КАК Поле1
	//			|ИЗ
	//			|	РегистрСведений.СвязиОбъектовИнтегрированныхСистем КАК ИнтегрированныеДляДокумента
	//			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиОбъектовИнтегрированныхСистем КАК ИнтегрированныеДляСвязанногоДокумента
	//			|		ПО ИнтегрированныеДляДокумента.УзелИнтегрированнойСистемы = ИнтегрированныеДляСвязанногоДокумента.УзелИнтегрированнойСистемы
	//			|			И (ИнтегрированныеДляДокумента.СсылкаНаОбъектДО = &Документ)
	//			|			И (ИнтегрированныеДляСвязанногоДокумента.СсылкаНаОбъектДО = &СвязанныйДокумент)");
	//		ЗапросИнтегрированныеОбъекты.УстановитьПараметр("СвязанныйДокумент", СвязанныйДокумент);
	//		
	//	КонецЕсли;
	//	
	//	ЗапросИнтегрированныеОбъекты.УстановитьПараметр("Документ", Документ);
	//	Выборка = ЗапросИнтегрированныеОбъекты.Выполнить().Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		
	//		НоваяСтрока = НастройкиСвязи.Добавить();
	//		
	//		НоваяСтрока.ТипСвязи = Справочники.ТипыСвязей.СодержитСсылкуНаИнтегрированныйОбъект;
	//		
	//		НоваяСтрока.СсылкаИз = Документ;
	//		ЗаполнитьТипИПредставлениеСсылки(ТипЗнч(Документ),
	//			НоваяСтрока.ТипСсылкаИз,
	//			НоваяСтрока.ТипСсылкаИзПредставление);
	//			
	//		Если СвязанныйДокумент = Неопределено Тогда
	//			ЗаполнитьТипИПредставлениеСсылки(Выборка.ТипСвязанного,
	//				НоваяСтрока.ТипСсылкаНа,
	//				НоваяСтрока.ТипСсылкаНаПредставление);
	//		Иначе
	//			НоваяСтрока.СсылкаНа = СвязанныйДокумент;
	//			ЗаполнитьТипИПредставлениеСсылки(ТипЗнч(СвязанныйДокумент),
	//				НоваяСтрока.ТипСсылкаНа,
	//				НоваяСтрока.ТипСсылкаНаПредставление);
	//		КонецЕсли;
	//		
	//		НоваяСтрока.ХарактерСвязи = Перечисления.ХарактерСвязей.Множественная;
	//		НоваяСтрока.Предопределенная = Истина;
	//		НоваяСтрока.Обязательная = Ложь;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
		
	Возврат НастройкиСвязи;
	
КонецФункции

// Заполняет имя типа и представление типа ссылки.
//
Процедура ЗаполнитьТипИПредставлениеСсылки(Тип, ИмяТипа, ПредставлениеТипа)
	
	Если Тип = Тип("Строка") Тогда
		ИмяТипа = "Строка";
		ПредставлениеТипа = НСтр("ru = 'Внешняя ссылка'");
	ИначеЕсли Тип = Тип("СправочникСсылка.Файлы") Тогда
		ИмяТипа = "СправочникСсылка.Файлы";
		ПредставлениеТипа = НСтр("ru = 'Файл'");
	ИначеЕсли Тип = Тип("СправочникСсылка.Проекты") Тогда
		ИмяТипа = "СправочникСсылка.Проекты";
		ПредставлениеТипа = НСтр("ru = 'Проект'");
	ИначеЕсли Тип = Тип("ДокументСсылка.Задачи") Тогда
		ИмяТипа = "ДокументСсылка.Задачи";
		ПредставлениеТипа = НСтр("ru = 'Задача'");
	ИначеЕсли Тип = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
		ИмяТипа = "ДокументСсылка.ВходящееПисьмо";
		ПредставлениеТипа = НСтр("ru = 'Входящее письмо'");
	ИначеЕсли Тип = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		ИмяТипа = "ДокументСсылка.ИсходящееПисьмо";
		ПредставлениеТипа = НСтр("ru = 'Исходящее письмо'");
	КонецЕсли;
		
КонецПроцедуры

Процедура УстановитьСвязь(
	Документ,
	НачальныйСвязанныйДокумент,
	СвязанныйДокумент,
	ТипСвязи,
	Установил = Неопределено,
	ДатаУстановки = Неопределено,
	Комментарий = "") Экспорт
	
	Если НачальныйСвязанныйДокумент = СвязанныйДокумент Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НачальныйСвязанныйДокумент) Тогда
		Если ЗначениеЗаполнено(СвязанныйДокумент) Тогда
			СвязиДокументов.УдалитьСвязь(Документ, НачальныйСвязанныйДокумент, ТипСвязи);
			СвязиДокументов.СоздатьСвязь(Документ, СвязанныйДокумент, ТипСвязи, Установил, ДатаУстановки, Комментарий);
		Иначе
			СвязиДокументов.УдалитьСвязь(Документ, НачальныйСвязанныйДокумент, ТипСвязи);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(СвязанныйДокумент) Тогда
			СвязиДокументов.СоздатьСвязь(Документ, СвязанныйДокумент, ТипСвязи, Установил, ДатаУстановки, Комментарий);
		КонецЕсли;
	КонецЕсли;
	
	НачальныйСвязанныйДокумент = СвязанныйДокумент;
	
КонецПроцедуры

Процедура ОбновитьСвязиДокумента(СвязанныйДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СвязиДокументов.Документ,
		|	СвязиДокументов.ТипСвязи,
		|	СвязиДокументов.СвязанныйДокумент
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|ГДЕ
		|	СвязиДокументов.СвязанныйДокумент = &СвязанныйДокумент";
	Запрос.УстановитьПараметр("СвязанныйДокумент", СвязанныйДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.СвязиДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Документ = Выборка.Документ;
		МенеджерЗаписи.ТипСвязи = Выборка.ТипСвязи;
		МенеджерЗаписи.СвязанныйДокумент = Выборка.СвязанныйДокумент;
		МенеджерЗаписи.СвязаннаяСтрока = "";
		МенеджерЗаписи.Прочитать();
		
		Если ТипЗнч(СвязанныйДокумент) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
			Получатели = СвязанныйДокумент.Получатели;
			
			Отправлен = Ложь;
			Если Получатели.Количество() = 1 Тогда
				Отправлен = Получатели[0].Отправлен;
				
			ИначеЕсли Получатели.Найти(Ложь, "Отправлен") = Неопределено Тогда
				Отправлен = Истина;
				
			ИначеЕсли ТипЗнч(МенеджерЗаписи.Документ) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
				ВходящийДокумент = МенеджерЗаписи.Документ;
				РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВходящийДокумент,
					"Отправитель, Подписал");
				ПараметрыОтбора = Новый Структура("Получатель", РеквизитыДокумента.Отправитель);
				НайденныеСтроки = Получатели.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 1 Тогда
					Отправлен = НайденныеСтроки[0].Отправлен;
				Иначе
					ПараметрыОтбора = Новый Структура("Получатель, Адресат", РеквизитыДокумента.Отправитель, РеквизитыДокумента.Подписал);
					НайденныеСтроки = Получатели.НайтиСтроки(ПараметрыОтбора);
					Если НайденныеСтроки.Количество() = 1 Тогда
						Отправлен = НайденныеСтроки[0].Отправлен;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Отправлен <> МенеджерЗаписи.СвязанныйДокументОтправлен Тогда
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция УстановитьРеквизитыПриДобавленииСвязи(ДокументСсылка, УникальныйИдентификаторДокумента, ТипСвязи) Экспорт
	
	РеквизитыИзменены = Ложь;
	
	Возврат РеквизитыИзменены;
	
КонецФункции

Функция УстановитьРеквизитыПриУдаленииСвязи(ДокументСсылка, УникальныйИдентификаторДокумента, ТипСвязи) Экспорт
	
	РеквизитыИзменены = Ложь;
	
	Возврат РеквизитыИзменены;
	
КонецФункции

// Обработчик обновления информационной базы
//
Процедура ПерейтиНаВерсию_1_2_1_3() Экспорт
	
	Набор = РегистрыСведений.СвязиДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.ТипСвязи.Установить(Справочники.ТипыСвязей.Содержит);
	Набор.Прочитать();
	Набор.Очистить();
	Набор.Записать(Истина);
	
	Набор = РегистрыСведений.СвязиДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.ТипСвязи.Установить(Справочники.ТипыСвязей.ВходитВКомплект);
	Набор.Прочитать();
	Набор.Очистить();
	Набор.Записать(Истина);
	
	УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ВходитВКомплект, НСтр("ru = 'Ссылка на комплект документов'"));
	УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.Содержит, НСтр("ru = 'Ссылка на элемент комплекта'"));
	
	СоздатьНастройкуСвязи(Справочники.ТипыСвязей.Содержит,
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(),
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Множественная,
		Справочники.ТипыСвязей.ВходитВКомплект,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	СоздатьНастройкуСвязи(Справочники.ТипыСвязей.Содержит,
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(),
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Множественная,
		Справочники.ТипыСвязей.ВходитВКомплект,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	СоздатьНастройкуСвязи(Справочники.ТипыСвязей.Содержит,
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(),
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Множественная,
		Справочники.ТипыСвязей.ВходитВКомплект,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	СоздатьНастройкуСвязи(Справочники.ТипыСвязей.Содержит,
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(),
		Справочники.Файлы.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Множественная,,,
		Истина);
	
КонецПроцедуры

Процедура ОбновитьСвязиПриРазделенииИзмерения() Экспорт
	
КонецПроцедуры

// Пересчитывает ресурсы ОтправленОтвет и Переслан регистра сведений
// КешИнформацииОбОбъектах.
//
Процедура ОбновитьКешИнформацииОбОбъектах() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		НаборЗаписей = РегистрыСведений.КешИнформацииОбОбъектах.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		Для каждого Запись Из НаборЗаписей Цикл
			Запись.ОтправленОтвет = Ложь;
			Запись.Переслан = Ложь;
			Запись.ПолученОтвет = Ложь;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СвязиДокументов.Документ КАК Ссылка,
			|	ВЫБОР
			|		КОГДА СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленоОтветноеПисьмо)
			|				ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленОтветныйДокумент)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ОтправленОтвет,
			|	ВЫБОР
			|		КОГДА СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПересланоПисьмом)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК Переслан,
			|	ВЫБОР
			|		КОГДА СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученоОтветноеПисьмо)
			|				ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученОтветныйДокумент)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ПолученОтвет
			|ИЗ
			|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
			|ГДЕ
			|	(СвязиДокументов.Документ ССЫЛКА Документ.ВходящееПисьмо
			|			ИЛИ СвязиДокументов.Документ ССЫЛКА Документ.ИсходящееПисьмо)
			|	И (СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленоОтветноеПисьмо)
			|			ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленОтветныйДокумент)
			|			ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПересланоПисьмом)
			|			ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученоОтветноеПисьмо)
			|			ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученОтветныйДокумент))");
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ОтправленОтвет Тогда
				РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(
					Выборка.Ссылка,
					"ОтправленОтвет",
					Истина);
			ИначеЕсли Выборка.Переслан Тогда
				РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(
					Выборка.Ссылка,
					"Переслан",
					Истина);
			ИначеЕсли Выборка.ПолученОтвет Тогда
				РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(
					Выборка.Ссылка,
					"ПолученОтвет",
					Истина);
			КонецЕсли;
		КонецЦикла;
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает имя ресурса в регистре сведений КешИнформацииОбОбъекте для
// указанного типа связи.
//
Функция ПолучитьИмяПризнакаДляТипаСвязи(ТипСвязи) Экспорт
	
	Если ТипСвязи = Справочники.ТипыСвязей.ОтправленоОтветноеПисьмо
		Или ТипСвязи = Справочники.ТипыСвязей.ОтправленОтветныйДокумент Тогда
		Возврат "ОтправленОтвет";
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ПересланоПисьмом Тогда
		Возврат "Переслан";
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ПолученоОтветноеПисьмо
		Или ТипСвязи = Справочники.ТипыСвязей.ПолученОтветныйДокумент Тогда
		Возврат "ПолученОтвет";
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный тип связи письма'");
	КонецЕсли;
	
КонецФункции

// Проверяет возможность установки проверяемого типа связи между проверяемыми документами 
//
// Параметры:
//  Документ  	 			  - Любая ссылка - документ основание связи
//  СвязанныйДокумент	 	  - Любая ссылка - документ с которым пытаемся создать связь
//  ТипСвязи			  	  – Справочник.ТипыСвязи - проверяемый тип связи
//
// Возвращаемое значение
//    Булево - Истина - если между проверяемыми документами возможно установить проверяемый тип связи
//			   Ложь - в противном случае
//
Функция ЭтоПодходящийТипСвязи(ДокументСсылка, СвязанныйДокумент, ТипСвязи) Экспорт 
	
	Если ТипСвязи = Справочники.ТипыСвязей.ПервичноеОбращение 
		Или ТипСвязи = Справочники.ТипыСвязей.ПовторноеОбращение
		Или ТипСвязи = Справочники.ТипыСвязей.ОсновноеОбращение
		Или ТипСвязи = Справочники.ТипыСвязей.Дубликат Тогда 
		//ВестиУчетОбращенийГраждан = ПолучитьФункциональнуюОпцию("ВестиУчетОбращенийГраждан");
		//
		//Если Не ВестиУчетОбращенийГраждан Тогда
			Возврат Ложь;
		//ИначеЕсли ЗначениеЗаполнено(СвязанныйДокумент)
		//	И ТипЗнч(СвязанныйДокумент) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
		//	УчитыватьКакОбращениеГраждан = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвязанныйДокумент,
		//		"ВидДокумента.УчитыватьКакОбращениеГраждан");
		//	
		//	Если Не УчитыватьКакОбращениеГраждан Тогда 
		//		Возврат Ложь;
		//	КонецЕсли;
		//КонецЕсли;
	
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.Содержит Тогда
		//И Не РаботаСКомплектамиДокументовСервер.ЭтоКомплект(ДокументСсылка) Тогда
		Возврат Ложь;
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ВходитВКомплект Тогда
		//И Не РаботаСКомплектамиДокументовСервер.ЭтоКомплект(СвязанныйДокумент) Тогда
		Возврат Ложь;
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ДелаетНеДействующим Тогда
		//И Не Делопроизводство.УчитыватьНеДействующие(СвязанныйДокумент) Тогда
		Возврат Ложь;
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.НеДействуетВСоответствии Тогда
		//И Не Делопроизводство.УчитыватьНеДействующие(ДокументСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

Функция ПолучитьВсеСвязиДокумента(Документ, ПолучатьПомеченныеНаУдаление = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиДокументов.СвязанныйДокумент,
		|	СвязиДокументов.Комментарий,
		|	СвязиДокументов.Установил,
		|	СвязиДокументов.ДатаУстановки,
		|	СвязиДокументов.ТипСвязи
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|ГДЕ
		|	СвязиДокументов.Документ = &Документ";
		
	Если НЕ ПолучатьПомеченныеНаУдаление Тогда
		Запрос.Текст = Запрос.Текст + " И СвязиДокументов.СвязанныйДокумент.ПометкаУдаления = ЛОЖЬ";
	КонецЕсли;	
		
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

// Возвращает список всех типов связей, которые установлены с проверяемыми документами 
//
// Параметры:
//  МассивДокументов - Массив - документы, для которых ищем установленные типы связи 
//
// Возвращаемое значение:
//  ТипыСвязей - СписокЗначений - список всех типов связей, которые установлены с проверяемыми документами
//
Функция ПолучитьАктуальныеТипыСвязейДокументов(МассивДокументов) Экспорт 
	
	ТипыСвязей = Новый СписокЗначений;
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат ТипыСвязей;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СвязиДокументов.ТипСвязи
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|ГДЕ
		|	СвязиДокументов.Документ В(&МассивДокументов)";
		
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТипыСвязей.Добавить(Выборка.ТипСвязи);
	КонецЦикла;
	
	Возврат ТипыСвязей;
	
КонецФункции
