#Область СлужебныеПроцедурыИФункции

// Параметры:
//  Информация - Структура - См. функцию.
//
Функция ПроверитьДоступностьКомпоненты(Информация)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Браузер = Неопределено;
	#Если ВебКлиент Тогда
		
		Строка = СистемнаяИнформация.ИнформацияПрограммыПросмотра;
		
		Если СтрНайти(Строка, "Chrome/") > 0 Тогда
			Браузер = "Chrome";
		ИначеЕсли СтрНайти(Строка, "MSIE") > 0 Тогда
			Браузер = "MSIE";
		ИначеЕсли СтрНайти(Строка, "Safari/") > 0 Тогда
			Браузер = "Safari";
		ИначеЕсли СтрНайти(Строка, "Firefox/") > 0 Тогда
			Браузер = "Firefox";
		КонецЕсли;
	#КонецЕсли
	
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		
		Если Браузер = Неопределено Тогда
			Возврат Информация.Linux_x86;
		КонецЕсли;
		
		Если Браузер = "Firefox" Тогда
			Возврат Информация.Linux_x86_Firefox;
		КонецЕсли;
		
		Если Браузер = "Chrome" Тогда
			Возврат Информация.Linux_x86_Chrome;
		КонецЕсли;
			
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		
		Если Браузер = Неопределено Тогда
			Возврат Информация.Linux_x86_64;
		КонецЕсли;
		
		Если Браузер = "Firefox" Тогда
			Возврат Информация.Linux_x86_64_Firefox;
		КонецЕсли;
		
		Если Браузер = "Chrome" Тогда
			Возврат Информация.Linux_x86_64_Chrome;
		КонецЕсли;
		
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда
		
		Если Браузер = "Safari" Тогда
			Возврат Информация.MacOS_x86_64_Safari;
		КонецЕсли;
		
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		
		Если Браузер = Неопределено Тогда
			Возврат Информация.Windows_x86;
		КонецЕсли;
		
		Если Браузер = "Firefox" Тогда
			Возврат Информация.Windows_x86_Firefox;
		КонецЕсли;
		
		Если Браузер = "Chrome" Тогда
			Возврат Информация.Windows_x86_Chrome;
		КонецЕсли;
		
		Если Браузер = "MSIE" Тогда
			Возврат Информация.Windows_x86_MSIE;
		КонецЕсли;
		
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		
		Если Браузер = Неопределено Тогда
			Возврат Информация.Windows_x86_64;
		КонецЕсли;
		
		Если Браузер = "Firefox" Тогда
			Возврат Информация.Windows_x86_Firefox;
		КонецЕсли;
		
		Если Браузер = "Chrome" Тогда
			Возврат Информация.Windows_x86_Chrome;
		КонецЕсли;
		
		Если Браузер = "MSIE" Тогда
			Возврат Информация.Windows_x86_64_MSIE;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#Область ПодключениеВнешнейКомпоненты

// Вызывается после подготовки длительной операцией
//
Процедура ПодключитьКомпонентуПослеПодготовки(Результат, Контекст) Экспорт

	// Ответ: 
	// - Структура - Выполнено - результат в структуре.
	// - Неопределено - Отменено пользователем.	
	Если Результат = Неопределено Тогда
		
		// Освобождаем выделенную память.
		УдалитьИзВременногоХранилища(Контекст.АдресРезультатаПодготовкиКомпоненты); // Вызов сервера.
		
		Возврат;
	КонецЕсли;
	
	// В контексте АдресРезультата больше не нужен, теперь он актуализирован в Результат.АдресРезультата.
	Контекст.Удалить("АдресРезультатаПодготовкиКомпоненты");
	
	// Результат.Статус:
	// - "Ошибка" - описание в ОписаниеОшибки.
	// - "Выполнено" - результат в Результат.АдресРезультата.
	Если Результат.Статус = "Ошибка" Тогда
		
		// Освобождаем выделенную память.
		УдалитьИзВременногоХранилища(Результат.АдресРезультата); // Вызов сервера.
		
		РезультатПодключения = Новый Структура;
		РезультатПодключения.Вставить("Подключено"    , Ложь);
		РезультатПодключения.Вставить("ОписаниеОшибки", Результат.КраткоеПредставлениеОшибки);
		
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, РезультатПодключения);
		Возврат;
		
	КонецЕсли;
		
	Информация = ВнешниеКомпонентыСлужебныйВызовСервера.РезультатПодготовкиКомпонентыКПодключению(
		Результат.АдресРезультата); // Вызов сервера.
	
	Доступна = ПроверитьДоступностьКомпоненты(Информация);
	
	Если Не Доступна Тогда 
		
		ОповещениеФормы = Новый ОписаниеОповещения(
			"ПодключитьКомпонентуЗавершениеНеДоступноВКлиенте", ЭтотОбъект, Контекст.Оповещение);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекстПояснения"       , Контекст.ТекстПояснения);
		ПараметрыФормы.Вставить("ПоддерживаемыеКлиенты", Информация);
		
		ОткрытьФорму("ОбщаяФорма.ДоступныеВидыКлиентовВнешнейКомпоненты",
			ПараметрыФормы,,,,, ОповещениеФормы);
			
		Возврат;
		
	КонецЕсли;
	
	Контекст.Вставить("Местоположение", Информация.Местоположение);	
	
	ОбщегоНазначенияСлужебныйКлиент.ПодключитьКомпоненту(Контекст);
	
КонецПроцедуры

//
Процедура ПодключитьКомпонентуЗавершениеНеДоступноВКлиенте(Результат, Оповещение) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Подключено"    , Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	ВыполнитьОбработкуОповещения(Оповещение, Результат);
	
КонецПроцедуры

// Параметры:
//  Контекст - Структура - контекст процедуры:
//      * Оповещение                   - ОписаниеОповещения   - .
//      * Идентификатор                - Строка               - .
//      * ИдентификаторСозданияОбъекта - Строка, Неопределено - .
//
Процедура ПодключитьКомпонентуИзРеестраWindows(Контекст) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент()
		И Не ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		
		Оповещение = Новый ОписаниеОповещения(
		"ПодключитьКомпонентуИзРеестраWindowsЗавершение", ЭтотОбъект, Контекст,
		"ПодключитьКомпонентуЗавершениеПоОшибке", ЭтотОбъект);
		
		НачатьПодключениеВнешнейКомпоненты(Оповещение, "AddIn." + Контекст.Идентификатор);
		Возврат;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Подключено"    , Ложь);
	Результат.Вставить("ОписаниеОшибки", НСтр("ru = 'Подключить компоненту из реестра Windows
	                                          |возможно только в тонком и толстом клиенте Windows'"));
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
		
КонецПроцедуры

// Продолжение процедуры ПодключитьКомпонентуИзРеестраWindows.
Процедура ПодключитьКомпонентуИзРеестраWindowsЗавершение(Подключено, Контекст) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Подключено", Подключено);
	
	Если Не Подключено Тогда 
		
		Результат.Вставить("ОписаниеОшибки", НСтр("ru = 'Ошибка при подключении внешней компоненты'"));
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		ИдентификаторСозданияОбъекта = Контекст.ИдентификаторСозданияОбъекта;
		Если ИдентификаторСозданияОбъекта = Неопределено Тогда 
			ИдентификаторСозданияОбъекта = Контекст.Идентификатор;
		КонецЕсли;
		
		ПодключаемыйМодуль = Новый("AddIn." + ИдентификаторСозданияОбъекта);
		
		Если ПодключаемыйМодуль = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка при создании экземпляра внешней компоненты'");
		КонецЕсли;
		
		Результат.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
		
	Исключение
		Результат.Вставить("Подключено"    , Ложь);
		Результат.Вставить("ОписаниеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	
КонецПроцедуры

// Продолжение процедуры ПодключитьКомпонентуИзРеестраWindows.
Процедура ПодключитьКомпонентуЗавершениеПоОшибке(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Результат = Новый Структура;
	Результат.Вставить("Подключено"    , Ложь);
	Результат.Вставить("ОписаниеОшибки", КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	
КонецПроцедуры
  
#КонецОбласти

#Область УстановкаВнешнейКомпоненты

// Вызывается после подготовки длительной операцией
//
Процедура УстановитьКомпонентуПослеПодготовки(Результат, Контекст) Экспорт

	// Ответ: 
	// - Структура - Выполнено - результат в структуре.
	// - Неопределено - Отменено пользователем.
	Если Результат = Неопределено Тогда
		
		// Освобождаем выделенную память.
		УдалитьИзВременногоХранилища(Контекст.АдресРезультатаПодготовкиКомпоненты); // Вызов сервера.
		
		Возврат;
	КонецЕсли;
	
	// В контексте АдресРезультата больше не нужен, теперь он актуализирован в Результат.АдресРезультата.
	Контекст.Удалить("АдресРезультатаПодготовкиКомпоненты");
	
	// Результат.Статус:
	// - "Ошибка" - описание в ОписаниеОшибки.
	// - "Выполнено" - результат в Результат.АдресРезультата.
	Если Результат.Статус = "Ошибка" Тогда
		
		// Освобождаем выделенную память.
		УдалитьИзВременногоХранилища(Результат.АдресРезультата); // Вызов сервера.
		
		РезультатУстановки = Новый Структура;
		РезультатУстановки.Вставить("Установлено"   , Ложь);
		РезультатУстановки.Вставить("ОписаниеОшибки", Результат.КраткоеПредставлениеОшибки);
		
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, РезультатУстановки);
		Возврат;
		
	КонецЕсли;
		
	Информация = ПолучитьИзВременногоХранилища(Результат.АдресРезультата); // Вызов сервера.
	
	// Освобождаем выделенную память.
	УдалитьИзВременногоХранилища(Результат.АдресРезультата); // Вызов сервера.
		
	Доступна = ПроверитьДоступностьКомпоненты(Информация);
	
	Если Не Доступна Тогда 
		
		ОповещениеФормы = Новый ОписаниеОповещения(
			"УстановитьКомпонентуЗавершениеНеДоступноВКлиенте", ЭтотОбъект, Контекст.Оповещение);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекстПояснения"       , Контекст.ТекстПояснения);
		ПараметрыФормы.Вставить("ПоддерживаемыеКлиенты", Информация);
		
		ОткрытьФорму("ОбщаяФорма.ДоступныеВидыКлиентовВнешнейКомпоненты", 
			ПараметрыФормы,,,,, ОповещениеФормы);
			
		Возврат;
			
	КонецЕсли;
	
	Контекст.Вставить("Местоположение", Информация.Местоположение);
	
	ОбщегоНазначенияСлужебныйКлиент.УстановитьКомпоненту(Контекст);
	
КонецПроцедуры

//
Процедура УстановитьКомпонентуЗавершениеНеДоступноВКлиенте(Результат, Оповещение) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Установлено"   , Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	ВыполнитьОбработкуОповещения(Оповещение, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаВнешнейКомпоненты

// Параметры:
//  Контекст - Структура - контекст процедуры:
//      * Оповещение    - ОписаниеОповещения   - .
//      * Идентификатор - Строка, Неопределено - .
//      * Версия        - Строка, Неопределено - .
//
Процедура ЗагрузитьКомпонентуИзФайла(Контекст) Экспорт 
	
	Если Не ВнешниеКомпонентыСлужебныйВызовСервера.ДоступнаЗагрузкаКомпонентыИзФайла() Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("Загружено", Ложь);
		Результат.Вставить("ОписаниеОшибки", НСтр("ru = 'Для загрузки компоненты требуются права администратора.'"));
		
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказатьДиалогЗагрузкиИзФайлаПриОткрытии", Истина);
	ПараметрыФормы.Вставить("ВернутьРезультатЗагрузкиИзФайла"         , Истина);
	
	Если Контекст.Идентификатор <> Неопределено Тогда 
		Ссылка = ВнешниеКомпонентыСлужебныйВызовСервера.СсылкаПоИдентификатору(Контекст.Идентификатор,
			Контекст.Версия);
		Если Не Ссылка.Пустая() Тогда
			ПараметрыФормы.Вставить("Ключ", Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьКомпонентуИзФайлаПослеЗагрузки", ЭтотОбъект, Контекст);
	
	ОткрытьФорму("Справочник.ВнешниеКомпоненты.ФормаОбъекта", ПараметрыФормы,,,,, Оповещение);
	
КонецПроцедуры

// Продолжение процедуры ЗагрузитьКомпонентуИзФайла.
Процедура ЗагрузитьКомпонентуИзФайлаПослеЗагрузки(Результат, Контекст) Экспорт
	
	// Результат: 
	// - Структура - Загружено.
	// - Неопределено - Закрыто окно. 
	
	Загружено = (ТипЗнч(Результат) = Тип("Структура"));
	
	Если Не Загружено Тогда 
		Результат = Новый Структура;
		Результат.Вставить("ОписаниеОшибки", "");
	КонецЕсли;
	
	Результат.Вставить("Загружено", Загружено);
	
	ВыполнитьОбработкуОповещения(Контекст.Оповещение, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеВнешнейКомпоненты

// Параметры:
//  Ссылка - СправочникСсылка.ВнешниеКомпоненты - контейнер внешней компоненты в информационной базе.
//
Процедура СохранитьКомпонентуВФайл(Ссылка) Экспорт 

	Контекст =  Новый Структура;
	Контекст.Вставить("Ссылка", Ссылка);
	
	Оповещение = Новый ОписаниеОповещения("СохранитьКомпонентуВФайлПослеУстановкиРасширения", ЭтотОбъект, Контекст);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

// Продолжение процедуры СохранитьКомпонентуВФайл.
Процедура СохранитьКомпонентуВФайлПослеУстановкиРасширения(РасширениеПодключено, Контекст) Экспорт
	
	Местоположение = ПолучитьНавигационнуюСсылку(Контекст.Ссылка, "ХранилищеКомпоненты");
	ИмяФайла = ВнешниеКомпонентыСлужебныйВызовСервера.ИмяФайлаКомпоненты(Контекст.Ссылка);
	
	Если Не РасширениеПодключено Тогда
		ПолучитьФайл(Местоположение, ИмяФайла);
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок = НСтр("ru = 'Выберите файл для сохранения внешней компоненты'");
	Диалог.Фильтр    = НСтр("ru = 'Файлы внешних компонент (*.zip)|*.zip|Все файлы (*.*)|*.*'");
	Диалог.МножественныйВыбор = Ложь;
	
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла, Местоположение));
	
	Оповещение = Новый ОписаниеОповещения("СохранитьКомпонентуВФайлПослеПолученияФайлов", ЭтотОбъект, Контекст);
	НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, Диалог);
	
КонецПроцедуры

// Продолжение процедуры СохранитьКомпонентуВФайл.
Процедура СохранитьКомпонентуВФайлПослеПолученияФайлов(ПолученныеФайлы, Контекст) Экспорт
	
	Если ПолученныеФайлы <> Неопределено 
		И ПолученныеФайлы.Количество() > 0 Тогда
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Сохранение в файл'"),,
			НСтр("ru = 'Внешняя компонента успешно сохранена в файл.'"), БиблиотекаКартинок.Успешно32);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
