
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает список функций для автоподстановки адресатов в адресной книге
Функция ПолучитьСписокДоступныхФункций() Экспорт
	
	ДоступныеФункции = РаботаСАдреснойКнигойПереопределяемый.ПолучитьСписокДоступныхФункций();
	
	ДоступныеФункции.Добавить("РаботаСАдреснойКнигой.ВсеКоллеги()", 				 НСтр("ru = 'Все исполнители моего отдела'"));
	ДоступныеФункции.Добавить("РаботаСАдреснойКнигой.ВсеПользователиИнформационнойБазы()", НСтр("ru = 'Все исполнители'"));
	
	Возврат ДоступныеФункции;
	
КонецФункции

// Возвращает значение автоподстановки
Функция ПолучитьЗначениеАвтоподстановки(Автоподстановка) Экспорт
	
	ФункцияАвтоподстановки = "";
	
	СписокФункций = ПолучитьСписокДоступныхФункций();
	Для Инд = 0 По СписокФункций.Количество() - 1 Цикл
		Если СписокФункций[Инд].Представление = Автоподстановка Тогда 
			ФункцияАвтоподстановки = СписокФункций[Инд].Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Если ФункцияАвтоподстановки = "" Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не определена автоподстановка %1'"), Автоподстановка);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	РезультатФункции = Неопределено;
	Попытка
		Выполнить("РезультатФункции = " + ФункцияАвтоподстановки);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при выполнении автоподстановки %1:
			|%2'"), Автоподстановка, ИнформацияОбОшибке().Описание);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Если (ТипЗнч(РезультатФункции) = Тип("Массив") И РезультатФункции.Количество() > 0) Тогда 
		Возврат РезультатФункции;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Автоподстановки

// автоподстановка ВсеКоллеги
Функция ВсеКоллеги() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыПользователейСостав.Ссылка КАК Группа
	|ПОМЕСТИТЬ втГруппы
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|ГДЕ
	|	ГруппыПользователейСостав.Пользователь = &Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппыПользователейСостав.Пользователь КАК Пользователь
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втГруппы КАК втГруппы
	|		ПО ГруппыПользователейСостав.Ссылка = втГруппы.Группа
	|ГДЕ
	|	ГруппыПользователейСостав.Пользователь <> &Пользователь
	|	И ГруппыПользователейСостав.Пользователь.Недействителен = ЛОЖЬ";
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции	

// автоподстановка ВсеПользователиИнформационнойБазы
Функция ВсеПользователиИнформационнойБазы() Экспорт 
	
	МассивПользователей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка,
		|	Пользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Недействителен = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователи.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ИдентификаторПользователяИБ) Тогда 
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
			Если ПользовательИБ <> Неопределено Тогда 
				МассивПользователей.Добавить(Выборка.Ссылка);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
	
	Возврат МассивПользователей;
	
КонецФункции

#КонецОбласти

#КонецЕсли
