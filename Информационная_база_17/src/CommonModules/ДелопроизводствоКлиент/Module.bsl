// Открывает форму предупреждения при регистрации документа
Процедура ПредупредитьПриРегистрации(ОписаниеОповещения) Экспорт
	
	//ПоказыватьПредупреждениеПриРегистрации = 
	//	ДелопроизводствоКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСДокументами().ПоказыватьПредупреждениеПриРегистрации;
	//	
	//Если ПоказыватьПредупреждениеПриРегистрации = Истина Тогда 
	//	
	//	ПараметрыОбработчика = Новый Структура;
	//	ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	//	ОписаниеОтветаНаВопрос = Новый ОписаниеОповещения(
	//		"ПредупредитьПриРегистрацииПродолжение",
	//		ЭтотОбъект,
	//		ПараметрыОбработчика);
	//	
	//	ОткрытьФорму("ОбщаяФорма.ПредупреждениеПриРегистрации",,,,,, 
	//		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	//	Возврат;
	//КонецЕсли;
	//
	//ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	
КонецПроцедуры	

Процедура ПредупредитьПриРегистрацииПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Истина);
	
КонецПроцедуры

// Открывает форму предупреждения при перерегистрации документа
Функция ПредупредитьПриПеререгистрации(ОписаниеОповещения) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ОписаниеОповещенияПриЗакрытииВопроса = Новый ОписаниеОповещения(
		"ПредупредитьПриПеререгистрацииПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
	
	ТекстВопроса = НСтр("ru = 'Документ будет перерегистрирован. Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещенияПриЗакрытииВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
КонецФункции

Процедура ПредупредитьПриПеререгистрацииПродолжение(Ответ, Параметры) Экспорт
	
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Ответ = КодВозвратаДиалога.Да);	
	
КонецПроцедуры

// Открывает форму записи журнала передачи документа
Процедура ОткрытьКарточкуПередачиДокумента(Документ, ВладелецФормы) Экспорт
	
	//Количество = Делопроизводство.КоличествоКомуПереданДокумент(Документ);
	//
	//Если Количество = 0 Тогда
	//	Возврат;
	//ИначеЕсли Количество = 1 Тогда
	//	ПараметрыФормы = Новый Структура("ПоказатьДержателяДокумента", Документ);
	//	ОткрытьФорму("РегистрСведений.ЖурналПередачиДокументов.ФормаЗаписи", ПараметрыФормы, ВладелецФормы);
	//Иначе
	//	ПараметрыФормы = Новый Структура("ПоказатьДержателейДокумента", Документ);
	//	ОткрытьФорму("РегистрСведений.ЖурналПередачиДокументов.Форма.ФормаСпискаДокумента", ПараметрыФормы, ВладелецФормы);
	//КонецЕсли;	
	
КонецПроцедуры	

// Показывает форму вопроса с возможностью сохранения ответа в персональные настройки
// Параметры:
//		ЭлементВладелец - элемент формы, который будет владельцем открываемой формы с вопросом
//		Заголовок вопроса - заголовок для формы вопроса
//		ТекстВопроса - формулировка вопроса
//		КлючПерсональнойНастройкиПоказаВопроса - ключ персональной настройки, хранящей флаг необходимости показа формы
//		ИмяПерсональнойНастройкиПоказаВопроса - имя персональной настройки, хранящей флаг необходимости показа формы
//		СписокДоступныхВариантов - список доступных вариантов ответов на вопрос
//		ВариантОтветаПоУмолчанию - вариант ответа, который будет помечен как вариант ответа по умолчанию
// Возвращает:
//		Значение типа КодВозвратаДиалога
Процедура ПоказатьРасширеннуюФормуВопроса(
	ЭлементВладелец,
	ЗаголовокВопроса,
	ТекстВопроса,
	КлючПерсональнойНастройкиПоказаВопроса,
	ИмяПерсональнойНастройкиПоказаВопроса,
	СписокДоступныхВариантов,
	ВариантОтветаПоУмолчанию = "Да",
	ОписаниеОповещения) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", ЗаголовокВопроса);
	ПараметрыФормы.Вставить("ТекстВопроса", ТекстВопроса);
	ПараметрыФормы.Вставить("СписокДоступныхВариантов", СписокДоступныхВариантов);
	ПараметрыФормы.Вставить("КлючПерсональнойНастройки", КлючПерсональнойНастройкиПоказаВопроса);
	ПараметрыФормы.Вставить("ИмяПерсональнойНастройки", ИмяПерсональнойНастройкиПоказаВопроса);
	ПараметрыФормы.Вставить("ВариантОтветаПоУмолчанию", ВариантОтветаПоУмолчанию);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
		"ПоказатьРасширеннуюФормуВопросаПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
		
	//ПоказыватьФормуВопроса = Делопроизводство.ПолучитьНастройкуПользователя(КлючПерсональнойНастройкиПоказаВопроса,
	//	ИмяПерсональнойНастройкиПоказаВопроса);
	
	//Если ТипЗнч(ПоказыватьФормуВопроса) = Тип("Булево") И НЕ ПоказыватьФормуВопроса Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, Неопределено);
	//Иначе 
	//	ОткрытьФорму(
	//		"ОбщаяФорма.РасширенныйВопрос", 
	//		ПараметрыФормы, 
	//		ЭлементВладелец,,,,
	//		ОписаниеОповещенияОЗакрытии, 
	//		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьРасширеннуюФормуВопросаПродолжение(Ответ, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ответ) Или Ответ = Ложь Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Ответ); 
		Возврат;
	КонецЕсли;
	
	ЗначениеДляВозврата = Неопределено;
	
	Если Ответ = НСтр("ru = 'Да'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.Да;
	ИначеЕсли Ответ = НСтр("ru = 'Нет'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.Нет;
	ИначеЕсли Ответ = НСтр("ru = 'ОК'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.ОК;
	ИначеЕсли Ответ = НСтр("ru = 'Отмена'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.Отмена;
	ИначеЕсли Ответ = НСтр("ru = 'Повторить'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.Повторить;
	ИначеЕсли Ответ = НСтр("ru = 'Прервать'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.Прервать;
	ИначеЕсли Ответ = НСтр("ru = 'Пропустить'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.Пропустить;
	ИначеЕсли Ответ = НСтр("ru = 'Таймаут'") Тогда 
		ЗначениеДляВозврата = КодВозвратаДиалога.Таймаут;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, ЗначениеДляВозврата);
	
КонецПроцедуры

// Копирует файл из временного хранилища на клиента и открывает его для просмотра
//
Процедура ОткрытьФайлИзВременногоХранилища(АдресВоВременномХранилище, ИмяФайла) Экспорт
	
	Если Не РасширениеРаботыСФайламиПодключено() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось подключить расширение работы с файлами.'"));
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Если ДвоичныеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось получить файл. Возможно он был удален.'"));
		Возврат;
	КонецЕсли;
	
	ПолноеИмяВременногоФайла = ПолучитьПолноеИмяВременногоФайла(ИмяФайла);
	Если ПустаяСтрока(ПолноеИмяВременногоФайла) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось создать временный файл.'"));
		Возврат;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанные.Записать(ПолноеИмяВременногоФайла);
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось записать временный файл.
			|%1'"),
			СообщениеОбОшибке));
		Возврат;
	КонецПопытки;	
	
	ОткрытьФайлНаДиске(ПолноеИмяВременногоФайла, ИмяФайла);
	
КонецПроцедуры

Процедура ОткрытьФайлНаДиске(ПолноеИмяФайла, ИмяФайла) Экспорт
	
	Попытка
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(ПолноеИмяФайла);
	Исключение
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось открыть файл %1
				|%2'"),
			ИмяФайла,
			ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Функция РасширениеРаботыСФайламиПодключено()
	
	Если Не ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не подключено расширение работы с файлами!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;;
	
КонецФункции

Функция ПолучитьПолноеИмяВременногоФайла(ИмяФайла) Экспорт
	
	#Если ВебКлиент Тогда
		Возврат "";
	#Иначе
		Возврат ПолучитьИмяВременногоКаталога() + "\" + ИмяФайла;
	#КонецЕсли
	
КонецФункции

#Если Не ВебКлиент Тогда
Функция ПолучитьИмяВременногоКаталога()
	
	ИмяВременногоКаталога = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ИмяВременногоКаталога);
	Возврат ИмяВременногоКаталога;
	
КонецФункции
#КонецЕсли

// Открывает меню выбора папки и сохраняет файл из временного хранилища в указанную папку
// Возвращает ссылку на файл или Неопределено в случае неуспеха
//
Функция СоздатьФайлИзВременногоХранилища(Форма, АдресВоВременномХранилище, ИмяФайла) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", Неопределено);
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ПараметрыОбработчика.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	ПараметрыОбработчика.Вставить("ИмяФайла", ИмяФайла);
	Обработчик = Новый ОписаниеОповещения("СоздатьФайлИзВременногоХранилищаЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ВыбратьПапку(Обработчик);
	
КонецФункции

// Продолжение процедуры (см. выше).
Процедура СоздатьФайлИзВременногоХранилищаЗавершение(Папка, ПараметрыВыполнения) Экспорт
	
	Попытка
		
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
		
		ИмяБезРасширения = ПараметрыВыполнения.ИмяФайла;
		Расширение = "";
		МассивСтрок = СтрРазделить(ПараметрыВыполнения.ИмяФайла, ".", Ложь);
		Если МассивСтрок.Количество() >= 2 Тогда
			ИмяБезРасширения = МассивСтрок[0];
			Расширение = МассивСтрок[МассивСтрок.Количество()-1];
		КонецЕсли;	
		
		РазмерФайла = 0;
		#Если Не ВебКлиент Тогда
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыВыполнения.АдресВоВременномХранилище);
			РазмерФайла = ДвоичныеДанные.Размер();
		#КонецЕсли	
		
		СведенияОФайле.ВремяИзменения = ТекущаяДата();
		СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяДата();
		СведенияОФайле.АдресВременногоХранилищаФайла = ПараметрыВыполнения.АдресВоВременномХранилище;
		СведенияОФайле.Автор = ПользователиКлиентСервер.ТекущийПользователь();
		СведенияОФайле.РасширениеБезТочки = Расширение;
		СведенияОФайле.Размер = РазмерФайла;
		СведенияОФайле.ИмяБезРасширения = ИмяБезРасширения;
		
		Файл = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
			Папка,
			СведенияОФайле);
			
		ПоказатьОповещениеПользователя(
			НСтр("ru= 'Создан файл:'"), 
			ПолучитьНавигационнуюСсылку(Файл),
			Строка(Файл),
			БиблиотекаКартинок.Информация32);
			
	Исключение
		Текст = НСтр("ru = 'Не удалось сохранить файл.'") + Символы.ПС + ОписаниеОшибки();
		ПоказатьПредупреждение(, Текст);
	КонецПопытки;		
	
	Если ТипЗнч(ПараметрыВыполнения.ОбработчикРезультата) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОбработчикРезультата, Файл);
	КонецЕсли;
	
КонецПроцедуры	

// Открывает меню выбора папки и сохраняет файл из временного хранилища в указанную папку
// Возвращает ссылку на файл или Неопределено в случае неуспеха
//
Функция СоздатьФайлИзВременногоФайлаНаДиске(Форма, ПолноеИмяФайла, ИмяФайла) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", Неопределено);
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ПараметрыОбработчика.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	ПараметрыОбработчика.Вставить("ИмяФайла", ИмяФайла);
	Обработчик = Новый ОписаниеОповещения("СоздатьФайлИзВременногоФайлаНаДискеЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ВыбратьПапку(Обработчик);
	
КонецФункции

// Продолжение процедуры (см. выше).
Процедура СоздатьФайлИзВременногоФайлаНаДискеЗавершение(Папка, ПараметрыВыполнения) Экспорт
	
	Попытка
		Файл = РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(
			ПараметрыВыполнения.ПолноеИмяФайла,
			Папка,
			ПараметрыВыполнения.Форма,
			Ложь, //НеОткрыватьКарточкуПослеСозданияИзФайла
			ПараметрыВыполнения.ИмяФайла);
		
	Исключение
		Текст = НСтр("ru = 'Не удалось сохранить файл.'") + Символы.ПС + ОписаниеОшибки();
		ПоказатьПредупреждение(, Текст);
	КонецПопытки;		
	
	Если ТипЗнч(ПараметрыВыполнения.ОбработчикРезультата) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОбработчикРезультата, Файл);
	КонецЕсли;
	
КонецПроцедуры	

Функция ВыбратьПапку(ОбработчикРезультата)

	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	Обработчик = Новый ОписаниеОповещения("ВыбратьПапкуЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		
	ОткрытьФорму("Справочник.ПапкиФайлов.ФормаВыбора",,,,,,Обработчик,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецФункции

// Продолжение процедуры (см. выше).
Процедура ВыбратьПапкуЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Неопределено Или Результат.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Папка = Результат;
	
	Если ТипЗнч(ПараметрыВыполнения.ОбработчикРезультата) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОбработчикРезультата, Папка);
	КонецЕсли;
	
КонецПроцедуры	

Процедура НайтиСтрокуДереваПоСсылке(Ссылка, Дерево, Идентификатор) Экспорт 
	
	Если Идентификатор <> Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Если Строка.Ссылка = Ссылка Тогда 
			Идентификатор = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;	
		
		НайтиСтрокуДереваПоСсылке(Ссылка, Строка, Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

// Определить значение параметра по переданной строке 
//
// Параметры
//  Текст				– строка – строка, в которой осуществляется поиск значения
//  ТекстПоиска	 		- строка - строка, для которой ищется значение
//
// Возвращаемое значение:
//   СтрокаКоличество   – строка - строковое представление значения
//
Функция ОпределитьЗначениеПараметраВСтроке(Текст, ТекстПоиска)
	
	СтрокаКоличество = "";
	ДлинаТекстаПоиска = СтрДлина(ТекстПоиска) + 1;
	НачальнаяПозиция = Найти(Текст,ТекстПоиска) + ДлинаТекстаПоиска;
	
	Для НомСимвола = НачальнаяПозиция По СтрДлина(Текст) Цикл
			
		Если Сред(Текст, НомСимвола, 1) = "," Тогда
			Если НачальнаяПозиция = НомСимвола Тогда
				СтрокаКоличество = "0";
			КонецЕсли;	
			Прервать;
		КонецЕсли;
		
		СтрокаКоличество = СтрокаКоличество + Сред(Текст, НомСимвола, 1);
		
	КонецЦикла;
	
	Если ДлинаТекстаПоиска > 0 И Не ЗначениеЗаполнено(СтрокаКоличество) Тогда
		СтрокаКоличество = "0";
	КонецЕсли;	
	
    Возврат СтрокаКоличество;
	
КонецФункции	

// Проверяет тип параметра на принадлежность к типу измерения «Документ» регистра сведений «СвязиДокументов»
//
// Параметры
//  ОбъектОснование		– Любая ссылка – объект, на основании которого создается связь
//  СвязуемыйОбъект		– Любая ссылка – объект, который проверяем на возможность создания связи
//
// Возвращаемое значение:
//   Булево - Истина, если объект является одним из проверяемых типов данных
//
Функция ДокументыМожноСвязать(ОбъектОснование, СвязуемыйОбъект) Экспорт
	
	Если ОбъектОснование <> СвязуемыйОбъект
		И ТипЗнч(СвязуемыйОбъект) = Тип("СправочникСсылка.Файлы") Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции	

// Обновляет данные одного файла в строке списка в карточке документа
//
// Параметры
//    Файлы - ДанныеФормыКоллекция - таблица файлов
//    Файл - СправочникСсылка.Файлы - ссылка на файл
//    ЗаполнитьПризнакОригинал - Булево - Истина, если требуется обновить признак оригинала
//
Процедура ОбновитьСтрокуФайла(Файлы, Файл, ЗаполнитьПризнакОригинал = Ложь, ОтметитьЗахваченныеФайлы = Ложь) Экспорт 
	
	//Для Каждого Строка Из Файлы Цикл
	//	Если Строка.Ссылка = Файл Тогда 
	//		СтруктураДанных = Делопроизводство.ПолучитьДанныеФайлаДляСписка(
	//			Файл, ЗаполнитьПризнакОригинал, ОтметитьЗахваченныеФайлы);
	//		ЗаполнитьЗначенияСвойств(Строка, СтруктураДанных);
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

// Возвращает массив имен файлов ("Приказ.doc" - т.е. без полного пути) занятые внешними программами
Функция ПолучитьЗанятыеВнешнимиПрограммамиФайлы(Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов) Экспорт
	
	МассивФайловВозврата = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат МассивФайловВозврата;
	КонецЕсли;
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	Если Не РасширениеПодключено Тогда
		Возврат МассивФайловВозврата;
	КонецЕсли;
	
	ЗанятыеФайлы = Новый Массив;
	ЗанятыеНеИзмененныеФайлы = Новый Массив;
	
	Для Каждого ФайлыСтрока Из МассивЗахваченныхФайлов Цикл
		
		Если Не ФайлыСтрока.РедактируетТекущийПользователь
			Или Не ЗначениеЗаполнено(ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге) Тогда
			Продолжить;
		КонецЕсли;
		
		Файл = Новый Файл(ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге);
		Если Файл.Существует() Тогда
			
			ИмяРасширение = Файл.Имя;
			Файл = Неопределено;
			
			ПутьКИсходномуФайлу = ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге;
			
			Если РаботаСФайламиКлиент.ФайлОткрытВнешнейПрограммойДляРедактирования(ПутьКИсходномуФайлу) Тогда
				
				МассивФайловВозврата.Добавить(ИмяРасширение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивФайловВозврата;
	
КонецФункции

// Помещает захваченные файлы в хранилище. Не измененные освобождает.
Процедура ПоместитьИзмененияФайлов(Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов, НеОсвобождатьЗанятыеWordФайлы = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;	
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	Если Не РасширениеПодключено Тогда
		Возврат;
	КонецЕсли;	
		
	ЗанятыеФайлы = Новый Массив;
	ЗанятыеНеИзмененныеФайлы = Новый Массив;
	
	Для Каждого ФайлыСтрока Из МассивЗахваченныхФайлов Цикл
		Если Не ФайлыСтрока.РедактируетТекущийПользователь Тогда
			Продолжить;
		КонецЕсли;
		
		ФайлИзменен = Ложь;
		
		Если ЗначениеЗаполнено(ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге) Тогда
			
			Файл = Новый Файл(ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге);
			Если Файл.Существует() Тогда
				
				УниверсальноеВремяИзмененияНаДиске = Файл.ПолучитьУниверсальноеВремяИзменения();
				РазмерНаДиске = Файл.Размер();
				Файл = Неопределено;
				
				ПутьКИсходномуФайлу	= ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге;
				Если РаботаСФайламиКлиент.ФайлОткрытВнешнейПрограммойДляРедактирования(ПутьКИсходномуФайлу) Тогда
					Продолжить;
				КонецЕсли;
				
				Если УниверсальноеВремяИзмененияНаДиске > ФайлыСтрока.ДатаМодификацииУниверсальнаяВБазе
					Или РазмерНаДиске <> ФайлыСтрока.Размер Тогда
					
					ФайлИзменен = Истина;
					
					ПараметрыВыполнения = Новый Структура;
					ПараметрыВыполнения.Вставить("ОбработчикРезультата", Неопределено);
					ПараметрыВыполнения.Вставить("ПараметрКоманды", ФайлыСтрока.Ссылка);
					
					Обработчик = Новый ОписаниеОповещения("ПоместитьИзмененияВложенийЗавершение", 
						ЭтотОбъект, ПараметрыВыполнения);
					ПараметрыОбработчика = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(
						Обработчик, ФайлыСтрока.Ссылка, УникальныйИдентификатор);
					ПараметрыОбработчика.Вставить("СоздатьНовуюВерсию", Истина);
					ПараметрыОбработчика.Вставить("ХранитьВерсии", Истина);
					ПараметрыОбработчика.Вставить("ПоказыватьОповещение", Ложь);
					
					ПутьКИсходномуФайлу	= ФайлыСтрока.ПолноеИмяФайлаВРабочемКаталоге;
					
					РаботаСФайламиКлиент.ЗакончитьРедактирование(ПараметрыОбработчика);
					
					Оповестить("Запись_Файл", 
						Новый Структура("Событие, Файл, Владелец, ЕстьЗанятыеФайлы, ИдентификаторРодительскойФормы", 
							"ДанныеФайлаИзменены", 
							ФайлыСтрока.Ссылка, 
							Ссылка, 
							Неопределено,
							Неопределено),
						ФайлыСтрока.Ссылка);
				КонецЕсли;
				
			КонецЕсли
			
		КонецЕсли;
		
		Если Не ФайлИзменен Тогда
			ЗанятыеНеИзмененныеФайлы.Добавить(ФайлыСтрока.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗанятыеНеИзмененныеФайлы.Количество() <> 0 Тогда
		
		РаботаСФайламиКлиент.ОсвободитьФайлыПоСсылкам(
			,
			ЗанятыеНеИзмененныеФайлы, Истина);
			
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОповеститьОбИзмененииОбъекта.
Процедура ПоместитьИзмененияВложенийЗавершение(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	Оповестить("ФайлыПомещены");
	
КонецПроцедуры	

// По имени файла открывает его приложением
//
// Параметры
//  ПолноеИмяФайла -Строка - имя файла, который нужно открыть.
//
Процедура ОткрытьФайлПриложением(ПолноеИмяФайла) Экспорт 
	
	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	Если Не РасширениеПодключено Тогда
		Возврат;
	КонецЕсли;
	
	// Открыть Файл
	Попытка
		
		СисИнфо = Новый СистемнаяИнформация;
		Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 Или СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			ИмяОткрываемогоФайла = СтрЗаменить(ПолноеИмяФайла, "/", "\");
		КонецЕсли;
		
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(ПолноеИмяФайла);
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ПоказатьПредупреждение(,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Описание=""%1""'"),
				Инфо.Описание));
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает массив перетаскиваемых файлов, в котором содержатся только скан-копии оригиналов. 
// Параметры
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания - содержит перетаскиваемое значение, тип действия и возможные действия при перетаскивании
//  Состояние               - Строка - строковое представление текущего состояния документа
//  ТекстПредупреждения     - Строка - строковое предупреждения, в случае ошибки или отсутствия файлов оригиналов
//
// Возвращаемое значение
//  ФайлыОригиналы - Массив - массив перетаскиваемых значений.
//
Функция ОтобратьДляПеретаскиванияТолькоФайлыОригиналы(ПараметрыПеретаскивания, Состояние, ТекстПредупреждения) Экспорт 
	
	ФайлыОригиналы = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") 
		И ПараметрыПеретаскивания.Значение.ЭтоФайл() Тогда
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Файлы") Тогда
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1 Тогда 
			Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			
				Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
					Если Не ФайлПринятый.ЭтоФайл() Тогда // только файлы, но не каталоги
						ТекстПредупреждения = Нстр("ru = 'Выберите для импорта только файлы, но не каталоги.'");
						ФайлыОригиналы = Новый Массив;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Файлы") Тогда
				
				Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
					Расширение = ОбщегоНазначенияСУЗВызовСервера.ЗначениеРеквизитаОбъекта(
						ФайлПринятый, "ТекущаяВерсияРасширение");
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекстПредупреждения) И ФайлыОригиналы.Количество() = 0 Тогда 
		ТекстПредупреждения = СтрШаблон(Нстр("ru = 'Среди перетаскиваемых файлов нет скан-копий оригиналов.
			|В текущем состоянии ""%1"" можно добавить только скан-копию оригинала документа.'"),
			Состояние);
	КонецЕсли;
	
	Возврат ФайлыОригиналы;
	
КонецФункции
