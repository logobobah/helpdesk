
#Область ФормаОбъекта

// Процедура создает элементы отображения тегов в форме объекта
//
// Параметры:
//  Форма	 - 	 - 
Процедура ОбновитьОблакоТегов(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	МассивУдаляемых = Новый Массив;
	Для Каждого ЭлементТег Из Элементы.ОблакоТегов.ПодчиненныеЭлементы Цикл
		Если Лев(ЭлементТег.Имя, 12) = "СтрокаТегов_" И НЕ ЭлементТег.Имя = "СтрокаТегов_1" Тогда
			МассивУдаляемых.Добавить(ЭлементТег);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементТег Из Элементы.СтрокаТегов_1.ПодчиненныеЭлементы Цикл
		Если Лев(ЭлементТег.Имя, 4) = "Тег_" Тогда
			МассивУдаляемых.Добавить(ЭлементТег);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементТег Из МассивУдаляемых Цикл
		Элементы.Удалить(ЭлементТег);
	КонецЦикла;
	
	МаксДлинаПервойСтроки = 61;
	МаксДлинаСтроки = МаксДлинаПервойСтроки + 24;
	НомерЭлемента = 0;
	НомерСтрокиЭлементов = 1;
	ТекущаяДлинаСтроки = 0;
	ГруппаТегов = Элементы.СтрокаТегов_1;
	
	Для Каждого СтрокаТегов Из Объект.Теги Цикл
		
		НомерЭлемента = НомерЭлемента + 1;
		ПредставлениеТега = Строка(СтрокаТегов.Тег);
		Если СтрДлина(ПредставлениеТега) > 15 Тогда
			ПредставлениеТега = Лев(ПредставлениеТега, 15) + "...";
			ДлинаТега = 15 + 1;
		Иначе
			ДлинаТега = СтрДлина(ПредставлениеТега) + 2;
		КонецЕсли;
		
		ТекущаяДлинаСтроки = ТекущаяДлинаСтроки + ДлинаТега;
		
		Если (НомерСтрокиЭлементов = 1 И ТекущаяДлинаСтроки > МаксДлинаПервойСтроки) Или (НомерСтрокиЭлементов > 1 И ТекущаяДлинаСтроки > МаксДлинаСтроки) Тогда
			
			ТекущаяДлинаСтроки = ДлинаТега;
			НомерСтрокиЭлементов = НомерСтрокиЭлементов + 1;
			
			ГруппаТегов = Элементы.Добавить("СтрокаТегов_" + НомерСтрокиЭлементов, Тип("ГруппаФормы"), ?(НомерСтрокиЭлементов = 1, Элементы.ПерваяСтрока, Элементы.ОблакоТегов));
			ГруппаТегов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаТегов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаТегов.ОтображатьЗаголовок = Ложь;
			ГруппаТегов.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаТегов.РастягиватьПоВертикали = Ложь;
			ГруппаТегов.Высота = 1;
			
		КонецЕсли;
		
		КомпонентыТега = Новый Массив;
		КомпонентыТега.Добавить(Новый ФорматированнаяСтрока(ПредставлениеТега + " "));
		КомпонентыТега.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить, , , , "ТегИД_" + СтрокаТегов.ПолучитьИдентификатор()));
		
		ЭлементТег = Элементы.Добавить("Тег_" + НомерЭлемента, Тип("ДекорацияФормы"), ГруппаТегов);
		ЭлементТег.Вид = ВидДекорацииФормы.Надпись;
		ЭлементТег.Заголовок = Новый ФорматированнаяСтрока(КомпонентыТега);
		ЭлементТег.Подсказка = Строка(СтрокаТегов.Тег);
		ЭлементТег.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		ЭлементТег.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
		ЭлементТег.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементТег.Ширина = СтрДлина(ПредставлениеТега) + 2;
		ЭлементТег.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ТегОбработкаНавигационнойСсылки");
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФормаСписка

// Процедура создает элементы формы для отборов по периодам
//
// Параметры:
//  Форма	 - форма списка
Процедура ОбновитьЗначенияОтбораПериодов(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Форма.ОтборСозданы.Очистить();
	
	ДатаСеанса = ТекущаяДатаСеанса();
	
	ПериодПроизвольный = Форма.ОтборСозданы.Добавить();
	
	ПериодСегодня = Форма.ОтборСозданы.Добавить();
	ПериодСегодня.Значение.Вариант = ВариантСтандартногоПериода.Сегодня;
	
	Период3Дня = Форма.ОтборСозданы.Добавить();
	Период3Дня.Значение.ДатаНачала = НачалоДня(ДатаСеанса) - 2*24*3600;
	Период3Дня.Значение.ДатаОкончания = КонецДня(ДатаСеанса);
	
	ПериодНеделя = Форма.ОтборСозданы.Добавить();
	ПериодНеделя.Значение.Вариант = ВариантСтандартногоПериода.Последние7Дней;
	
	ПериодМесяц = Форма.ОтборСозданы.Добавить();
	ПериодМесяц.Значение.Вариант = ВариантСтандартногоПериода.Месяц;
	
КонецПроцедуры

// Процедура создает элементы формы для отборов по тегам
//
// Параметры:
//  Форма					 - форма списка
//  МаксимальнаяДлинаСтроки	 - число - максимальное количество символов помещающихся в одну строку
Процедура ОбновитьЗначенияОтбораТегов(Форма, МаксимальнаяДлинаСтроки = 85) Экспорт
	
	Элементы = Форма.Элементы;
	Форма.ОтборТеги.Очистить();
	
	МассивУдаляемыхЭлементов = Новый Массив;
	Для Каждого Элемент Из Элементы.ЗначенияОтбораТеги.ПодчиненныеЭлементы Цикл
		Если Лев(Элемент.Имя, 4) = "Тег_" Или Лев(Элемент.Имя, 11) = "СтрокаТегов" Тогда
			МассивУдаляемыхЭлементов.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Теги.Ссылка,
		|	Теги.Представление КАК Представление
		|ИЗ
		|	Справочник.Теги КАК Теги
		|ГДЕ
		|	Теги.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Представление";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НомерЭлемента = 0;
	НомерСтрокиЭлементов = 0;
	ТекущаяДлинаСтроки = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если СтрДлина(Выборка.Представление) > 15 Тогда
			ПредставлениеТега = Лев(Выборка.Представление, 15) + "...";
			ТекущаяДлинаСтроки = ТекущаяДлинаСтроки + 15 + 2;
		Иначе
			ПредставлениеТега = Выборка.Представление;
			ТекущаяДлинаСтроки = ТекущаяДлинаСтроки + СтрДлина(ПредставлениеТега) + 2;
		КонецЕсли;
		
		СтрокаОтбораТегов = Форма.ОтборТеги.Добавить(Выборка.Ссылка, ПредставлениеТега);
		
		Если НомерСтрокиЭлементов = 0 Или ТекущаяДлинаСтроки > МаксимальнаяДлинаСтроки Тогда
			
			ТекущаяДлинаСтроки = СтрДлина(ПредставлениеТега) + 2;
			НомерСтрокиЭлементов = НомерСтрокиЭлементов + 1;
			
			ГруппаТегов = Элементы.Добавить("СтрокаТегов" + НомерСтрокиЭлементов, Тип("ГруппаФормы"), Элементы.ЗначенияОтбораТеги);
			ГруппаТегов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаТегов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаТегов.ОтображатьЗаголовок = Ложь;
			ГруппаТегов.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаТегов.РастягиватьПоВертикали = Ложь;
			ГруппаТегов.Высота = 1;
			
		КонецЕсли;
		
		ЭлементТег = Элементы.Добавить("Тег_" + СтрокаОтбораТегов.ПолучитьИдентификатор(), Тип("ПолеФормы"), ГруппаТегов);
		ЭлементТег.Вид = ВидПоляФормы.ПолеНадписи;
		ЭлементТег.ПутьКДанным = "ОтборТеги[" + НомерЭлемента + "].Представление";
		ЭлементТег.Гиперссылка = Истина;
		ЭлементТег.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементТег.Подсказка = Выборка.Представление;
		ЭлементТег.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		ЭлементТег.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементТег.Ширина = СтрДлина(ПредставлениеТега);
		ЭлементТег.РастягиватьПоГоризонтали = Ложь;
		ЭлементТег.УстановитьДействие("Нажатие", "Подключаемый_ТегОтборНажатие");
		
		НомерЭлемента = НомерЭлемента + 1;
		
	КонецЦикла;
	
	Если Выборка.Количество() = 0 Тогда
		
		ЭлементПояснение = Элементы.Добавить("Тег_Пояснение", Тип("ДекорацияФормы"), Элементы.ЗначенияОтбораТеги);
		ЭлементПояснение.Вид = ВидДекорацииФормы.Надпись;
		ЭлементПояснение.Гиперссылка = Истина;
		ЭлементПояснение.Заголовок = "Как работать с тегами?";
		ЭлементПояснение.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементПояснение.УстановитьДействие("Нажатие", "Подключаемый_ТегОтборНажатие");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Функция создания тега
//
// Параметры:
//  НаименованиеТега - строка - имя тега
// Возвращаемое значение:
//  СправочникСсылка.Теги - ссылка на созданный элемент
Функция СоздатьТег(НаименованиеТега) Экспорт
	
	НовыйТег = Справочники.Теги.СоздатьЭлемент();
	НовыйТег.Наименование = НаименованиеТега;
	НовыйТег.Записать();
	
	Возврат НовыйТег.Ссылка;
	
КонецФункции

// Процедура изменяет цвет элемента отбора в зависимости от признака использования
// Необходимо вызывать с сервера для подключаемых процедур, иначе не отрисовывается цвет
//
// Параметры:
//  Форма		 - форма списка
//  Пометка		 - булево - признак использования отбора по данному элементу
//  ИмяЭлемента	 - строка - имя элемента формы
Процедура ИзменитьЦветЭлементаОтбора(Форма, Пометка, ИмяЭлемента) Экспорт
	
	ЭлементОтбора = Форма.Элементы.Найти(ИмяЭлемента);
	Если ЭлементОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Пометка Тогда
		ЭлементОтбора.ЦветФона = ЦветаСтиля.ФонАктивногоЗначенияОтбора;
	Иначе
		ЭлементОтбора.ЦветФона = Новый Цвет;
	КонецЕсли;
	
КонецПроцедуры

Функция УстановитьТег(ВладельцыТегов, Тег) Экспорт
	
	УспешноУстановлено = 0;
	
	Для Каждого ВладелецТега Из ВладельцыТегов Цикл
		
		ВладелецОбъект = ВладелецТега.ПолучитьОбъект();
		
		Если ВладелецОбъект.Теги.Найти(Тег) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ВладелецОбъект.Теги.Добавить();
		НоваяСтрока.Тег = Тег;
		
		ВладелецОбъект.Записать();
		УспешноУстановлено = УспешноУстановлено + 1;
		
	КонецЦикла;
	
	Возврат УспешноУстановлено;
	
КонецФункции

#КонецОбласти

