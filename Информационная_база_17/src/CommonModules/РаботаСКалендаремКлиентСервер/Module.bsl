////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с рабочим календарем.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура отображает текущую запись календаря в планировщике.
//
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  НастройкиОтображения - Структура - Настройки отображения.
//  Ссылка - СправочникСсылка.ЗаписиКалендаряСотрудника - Ссылка.
//  ДатаНачала - Дата - Дата начала.
//  ДатаОкончания - Дата - Дата окончания.
//
Процедура ОтобразитьТекущуюЗапись(Планировщик, НастройкиОтображения) Экспорт
	
	УдалитьЭлементТекущейЗаписи(Планировщик, НастройкиОтображения);
	ДобавитьЭлементТекущейЗаписи(Планировщик, НастройкиОтображения);
	
КонецПроцедуры

// Удаляет элемент текущей записи из планировщика.
//
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  НастройкиОтображения - Структура - Настройки отображения.
//
Процедура УдалитьЭлементТекущейЗаписи(Планировщик, НастройкиОтображения)
	
	КоличествоЭлементов = Планировщик.Элементы.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ЭлементПланировщика = Планировщик.Элементы[КоличествоЭлементов - Индекс];
		Если ЭлементПланировщика.Значение.Ссылка = НастройкиОтображения.ТекущаяЗаписьСсылка 
			Или ЭлементПланировщика.Значение.ЭтоТекущаяЗапись Тогда
			Планировщик.Элементы.Удалить(ЭлементПланировщика);
		КонецЕсли;
		
		//Определение из формы задачи
		Если ТипЗнч(ЭлементПланировщика.Значение.Ссылка) = Тип("СправочникСсылка.ЗаписиКалендаряСотрудника")
			И ЭлементПланировщика.Значение.Ссылка.Источник = НастройкиОтображения.ТекущаяЗаписьСсылка
			И ЭлементПланировщика.Значение.Ссылка.НомерСтрокиИсточника = НастройкиОтображения.НомерСтрокиТекущейЗаписи Тогда
			Планировщик.Элементы.Удалить(ЭлементПланировщика);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет элемент текущей записи в планировщик.
//
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  НастройкиОтображения - Структура - Настройки отображения.
//
Процедура ДобавитьЭлементТекущейЗаписи(Планировщик, НастройкиОтображения)
	
	ЭлементПланировщика = Планировщик.Элементы.Добавить(
		НастройкиОтображения.ТекущаяЗаписьДатаНачала,
		НастройкиОтображения.ТекущаяЗаписьДатаОкончания);
	ЭлементПланировщика.Значение = СформироватьЭлементТекущейЗаписиКалендаря(НастройкиОтображения);
	ЭлементПланировщика.ЦветФона = НастройкиОтображения.ЦветКалендаряТекущаяЗапись;
	ЭлементПланировщика.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
	ЭлементПланировщика.ЦветРамки = НастройкиОтображения.ЦветРамкиТекущаяЗапись;
	ЭлементПланировщика.Текст = НСтр("ru = 'Текущая запись календаря'");
	
КонецПроцедуры

// Формирует структуру элемента текущей записи календаря.
//
// Параметры:
//  ЗаписьКалендаря	 - СтрокаТаблицыЗначений,
//                     СправочникОбъект.ЗаписиКалендаряСотрудника,
//                     СправочникСсылка.ЗаписиКалендаряСотрудника - Данные записи календаря.
// 
// Возвращаемое значение:
//  Структура - Структура данных записи календаря.
//
Функция СформироватьЭлементТекущейЗаписиКалендаря(НастройкиОтображения) Экспорт
	
	ЭлементЗаписиКалендаря = НовыйЭлементЗаписиКалендаря();
	ЭлементЗаписиКалендаря.ДатаНачала = НастройкиОтображения.ТекущаяЗаписьДатаНачала;
	ЭлементЗаписиКалендаря.ДатаОкончания = НастройкиОтображения.ТекущаяЗаписьДатаОкончания;
	ЭлементЗаписиКалендаря.Предмет = НастройкиОтображения.ТекущаяЗаписьСсылка;
	ЭлементЗаписиКалендаря.НомерСтрокиПредмета = НастройкиОтображения.НомерСтрокиТекущейЗаписи;
	ЭлементЗаписиКалендаря.Ссылка = ПредопределенноеЗначение("Справочник.ЗаписиКалендаряСотрудника.ПустаяСсылка");
	ЭлементЗаписиКалендаря.ЭтоТекущаяЗапись = Истина;
	
	Возврат ЭлементЗаписиКалендаря;
	
КонецФункции

// Формирует структуру элемента записи календаря.
// 
// Возвращаемое значение:
//  Структура - Элемент записи календаря.
//
Функция НовыйЭлементЗаписиКалендаря()
	
	ЭлементЗаписиКалендаря = Новый Структура;
	
	ЭлементЗаписиКалендаря.Вставить("Ссылка", ПредопределенноеЗначение("Справочник.ЗаписиКалендаряСотрудника.ПустаяСсылка"));
	ЭлементЗаписиКалендаря.Вставить("ДатаНачала", Дата(1,1,1));
	ЭлементЗаписиКалендаря.Вставить("ДатаОкончания", Дата(1,1,1));
	ЭлементЗаписиКалендаря.Вставить("Предмет", Неопределено);
	ЭлементЗаписиКалендаря.Вставить("ЭтоТекущаяЗапись", Ложь);
	ЭлементЗаписиКалендаря.Вставить("ДатаНачалаИсходная", Дата(1,1,1));
	ЭлементЗаписиКалендаря.Вставить("НомерСтрокиПредмета", 1);
	ЭлементЗаписиКалендаря.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	
	Возврат ЭлементЗаписиКалендаря;
	
КонецФункции

// Применяет настройки отображения планировщика.
//
Процедура ПрименитьНастройкиОтображения(Планировщик, НастройкиОтображения) Экспорт
	
	ВыделенныеДаты = ПолучитьВыделенныеДаты(НастройкиОтображения);
	ОтображатьВремяС = НастройкиОтображения.ОтображатьВремяС;
	ОтображатьВремяПо = НастройкиОтображения.ОтображатьВремяПо;
	
	// Заполнение текущих периодов отображения
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		
		ОтображаемаяДатаНачала = НачалоДня(ВыделеннаяДата);
		ОтображаемаяДатаОкончания = КонецДня(ВыделеннаяДата);
		Планировщик.ТекущиеПериодыОтображения.Добавить(ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания);
		
	КонецЦикла;
	
	// Настройки общие для всех периодов отображения
	Планировщик.ОтображениеВремениЭлементов = НастройкиОтображения.НастройкаОтображениеВремениЭлементов;
	Планировщик.ВыравниватьГраницыЭлементовПоШкалеВремени = Истина;
	Планировщик.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
	Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d MMM yyyy'";
	
	// Настройки специфичные для дня
	Планировщик.ЦветФона = НастройкиОтображения.ЦветКалендаряФонШапки;
	
	// Планировщик по часам
	Планировщик.ОтображатьТекущуюДату = Истина;
	Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
	Планировщик.КратностьПериодическогоВарианта = 24;
	Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
	Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
	
	// Отображать только рабочее время
	Планировщик.ОтступСНачалаПереносаШкалыВремени = ОтображатьВремяС;
	Планировщик.ОтступСКонцаПереносаШкалыВремени = ОтображатьВремяПо;
	
	// Шкала времени
	УстановитьШкалуВремени(Планировщик, НастройкиОтображения);
	
	// Измерение Исполнитель
	Планировщик.Измерения.Очистить();
	Если НастройкиОтображения.Календари.Количество() > 1 Тогда
		ИзмерениеПланировщика = Планировщик.Измерения.Добавить("Календарь");
		Для Каждого Календарь Из НастройкиОтображения.Календари Цикл
			ЭлементИзмеренияПомещение = ИзмерениеПланировщика.Элементы.Добавить(Календарь);
		КонецЦикла;
	КонецЕсли;
	
	// Выделение текущего дня.
	ДобавитьФонТекущегоДня(Планировщик.ИнтервалыФона, НастройкиОтображения);
	
КонецПроцедуры

// Возвращает выделенные даты в планировщике.
//
// Параметры:
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Массив - Выделеныне даты.
//
Функция ПолучитьВыделенныеДаты(НастройкиОтображения) Экспорт
	
	ВыделенныеДаты = НастройкиОтображения.ВыделенныеДаты;
	
	Если ВыделенныеДаты.Количество() = 0 Тогда
		ВыделенныеДаты.Добавить(НастройкиОтображения.ОтображаемаяДата);
	КонецЕсли;
	
	СписокДат = Новый СписокЗначений;
	СписокДат.ЗагрузитьЗначения(ВыделенныеДаты);
	СписокДат.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	ВыделенныеДаты = СписокДат.ВыгрузитьЗначения();
	
	Возврат ВыделенныеДаты;
	
КонецФункции

// Устанавливает шкалу времени планировщика в соответсвии с персональными настройками.
//
Процедура УстановитьШкалуВремени(Планировщик, НастройкиОтображения)
	
	КоличествоЭлементов = Планировщик.ШкалаВремени.Элементы.Количество();
	Если КоличествоЭлементов >= 2 Тогда
		Для Индекс = 1 По КоличествоЭлементов - 1 Цикл
			ЭтотЭлемент = Планировщик.ШкалаВремени.Элементы[КоличествоЭлементов - Индекс];
			Планировщик.ШкалаВремени.Элементы.Удалить(ЭтотЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
	
	ШкалаВремениЧас = Планировщик.ШкалаВремени.Элементы[0];
	ШкалаВремениЧас.ОтображатьПериодическиеМетки = Истина;
	ШкалаВремениЧас.Единица = ТипЕдиницыШкалыВремени.Час;
	ШкалаВремениЧас.Кратность = 1;
	ШкалаВремениЧас.Формат = "DF='HH:mm'";
	ШкалаВремениЧас.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
	ШкалаВремениЧас.ЦветФона = НастройкиОтображения.ЦветКалендаряФонШапки;
	
	ШкалаВремениМинута = Планировщик.ШкалаВремени.Элементы.Добавить();
	ШкалаВремениМинута.ОтображатьПериодическиеМетки = Ложь;
	ШкалаВремениМинута.Единица = ТипЕдиницыШкалыВремени.Минута;
	ШкалаВремениМинута.Кратность = НастройкиОтображения.РазмерЯчейкиВремени;
	ШкалаВремениМинута.Формат = "";
	ШкалаВремениМинута.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
	ШкалаВремениМинута.ЦветФона = НастройкиОтображения.ЦветКалендаряФонШапки;
	
КонецПроцедуры

// Добавляем в интервалы фона фон текущего дня.
//
// Параметры:
//  ИнтервалыФона - КоллекцияИнтерваловФонаПланировщика - Интервалы фоны, в которые следует добавить фон текущего дня.
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
Процедура ДобавитьФонТекущегоДня(ИнтервалыФона, НастройкиОтображения)
	
	ИнтервалыФонаТекущегоДня = Новый Массив;
	ВозможныеИнтервалыФонаТекущегоДня = Новый Массив;
	ВозможныеИнтервалыФонаТекущегоДня.Добавить(
		СформироватьВремяИнтервалаФона(НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата())));
	
	Пока ВозможныеИнтервалыФонаТекущегоДня.Количество() <> 0 Цикл
		
		ВозможыйИнтервалФона = ВозможныеИнтервалыФонаТекущегоДня[0];
		
		ЕстьПересечения = Ложь;
		Для Каждого ИнтервалФона Из ИнтервалыФона Цикл
			
			// Интервал фона пустой.
			Если ИнтервалФона.Цвет = НастройкиОтображения.ЦветКалендаряДоступноеВремя Тогда
				Продолжить;
			КонецЕсли;
			
			// Интервал фона до текущего дня.
			Если ИнтервалФона.Конец <= ВозможыйИнтервалФона.Начало Тогда
				Продолжить;
			КонецЕсли;
			
			// Интервал фона после текущего дня.
			Если ИнтервалФона.Начало >= ВозможыйИнтервалФона.Конец Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьПересечения = Истина;
			
			// Интервал фона покрывает текущий день.
			Если ИнтервалФона.Начало <= ВозможыйИнтервалФона.Начало
				И ИнтервалФона.Конец >= ВозможыйИнтервалФона.Конец Тогда
				Прервать;
			КонецЕсли;
			
			// Интервал фона закрывает начало текущего дня.
			Если ИнтервалФона.Начало <= ВозможыйИнтервалФона.Начало
				И ИнтервалФона.Конец > ВозможыйИнтервалФона.Начало
				И ИнтервалФона.Конец < ВозможыйИнтервалФона.Конец Тогда
				ВозможныеИнтервалыФонаТекущегоДня.Добавить(
					СформироватьВремяИнтервалаФона(ИнтервалФона.Конец, ВозможыйИнтервалФона.Конец));
				Прервать;
			КонецЕсли;
			
			// Интервал фона закрывает конец текущего дня.
			Если ИнтервалФона.Начало > ВозможыйИнтервалФона.Начало
				И ИнтервалФона.Начало < ВозможыйИнтервалФона.Конец
				И ИнтервалФона.Конец >= ВозможыйИнтервалФона.Конец Тогда
				ВозможныеИнтервалыФонаТекущегоДня.Добавить(
					СформироватьВремяИнтервалаФона(ВозможыйИнтервалФона.Начало, ИнтервалФона.Начало));
				Прервать;
			КонецЕсли;
			
			// Интервал фона входит в текущий день.
			Если ИнтервалФона.Начало > ВозможыйИнтервалФона.Начало
				И ИнтервалФона.Начало < ВозможыйИнтервалФона.Конец
				И ИнтервалФона.Конец > ВозможыйИнтервалФона.Начало
				И ИнтервалФона.Конец < ВозможыйИнтервалФона.Конец Тогда
				ВозможныеИнтервалыФонаТекущегоДня.Добавить(
					СформироватьВремяИнтервалаФона(ИнтервалФона.Конец, ВозможыйИнтервалФона.Конец));
				ВозможныеИнтервалыФонаТекущегоДня.Добавить(
					СформироватьВремяИнтервалаФона(ВозможыйИнтервалФона.Начало, ИнтервалФона.Начало));
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЕстьПересечения Тогда
			ИнтервалыФонаТекущегоДня.Добавить(ВозможыйИнтервалФона);
		КонецЕсли;
		
		ВозможныеИнтервалыФонаТекущегоДня.Удалить(0);
		
	КонецЦикла;
	
	Для Каждого ИнтервалФона Из ИнтервалыФонаТекущегоДня Цикл
		ФонТекущегоДня = ИнтервалыФона.Добавить(
			ИнтервалФона.Начало, ИнтервалФона.Конец);
		ФонТекущегоДня.Цвет = НастройкиОтображения.ЦветФонаТекущегоДня;
	КонецЦикла;
	
КонецПроцедуры

// Формирует структуру времени интервала фона.
//
// Параметры:
//  Начало	 - Дата	 - Начало времени интервала фона.
//  Конец	 - Дата	 - Конец времени интервала фона.
// 
// Возвращаемое значение:
//  Структура - Структура времени интервала фона.
//
Функция СформироватьВремяИнтервалаФона(Начало, Конец)
	
	Время = Новый Структура("Начало, Конец");
	Время.Начало = Начало;
	Время.Конец = Конец;
	
	Возврат Время;
	
КонецФункции

// Формирует структуру элемента записи календаря.
//
// Параметры:
//  ЗаписьКалендаря	 - СтрокаТаблицыЗначений,
//                     СправочникОбъект.ЗаписиКалендаряСотрудника,
//                     СправочникСсылка.ЗаписиКалендаряСотрудника - Данные записи календаря.
// 
// Возвращаемое значение:
//  Структура - Структура данных записи календаря.
//
Функция СформироватьЭлементЗаписиКалендаря(ЗаписьКалендаря) Экспорт
	
	ЭлементЗаписиКалендаря = НовыйЭлементЗаписиКалендаря();
	ЗаполнитьЗначенияСвойств(ЭлементЗаписиКалендаря, ЗаписьКалендаря);
	
	ЭлементЗаписиКалендаря.ДатаНачалаИсходная = ЗаписьКалендаря.ДатаНачала;
	
	Возврат ЭлементЗаписиКалендаря;
	
КонецФункции

#КонецОбласти

#Область ДляПовторений
	
// Возвращает текстовое представление повторения
Функция ПолучитьТекстовоеПредставлениеПовторения(НастройкиПовторения) Экспорт
	
	ПредставлениеПовторения = "";
	
	Если НЕ ЗначениеЗаполнено(НастройкиПовторения.ЧастотаПовторения) Тогда
		
		ПредставлениеПовторения = НСтр("ru = 'Не повторять'");
		Возврат ПредставлениеПовторения;
		
	ИначеЕсли НастройкиПовторения.ИнтервалПовторения > 1 Тогда
		
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = 
			ПолучитьТекстовоеПредставлениеЕдиницыИзмеренияИнтервалаПовторения(НастройкиПовторения);
		ПредставлениеПовторения = СтрШаблон(НСтр("ru = 'Каждые %1 %2'"),
				НастройкиПовторения.ИнтервалПовторения,
				ПредставлениеЕдиницыИзмеренияИнтервалаПовторения);
				
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежедневно") Тогда
		
		ПредставлениеПовторения = НСтр("ru = 'Каждый день'");
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Еженедельно") Тогда
		
		ПредставлениеПовторения = НСтр("ru = 'Каждую неделю'");
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежемесячно") Тогда
		
		ПредставлениеПовторения = НСтр("ru = 'Каждый месяц'");
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежегодно") Тогда
		
		ПредставлениеПовторения = НСтр("ru = 'Каждый год'");
		
	КонецЕсли;
	
	СимволТире = " – ";
	Если НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Еженедельно") Тогда
		
		Если НастройкиПовторения.ПовторениеПоДнямНедели[1]
			И НастройкиПовторения.ПовторениеПоДнямНедели[2]
			И НастройкиПовторения.ПовторениеПоДнямНедели[3]
			И НастройкиПовторения.ПовторениеПоДнямНедели[4]
			И НастройкиПовторения.ПовторениеПоДнямНедели[5]
			И НастройкиПовторения.ПовторениеПоДнямНедели[6]
			И НастройкиПовторения.ПовторениеПоДнямНедели[7] Тогда
			
			ПредставлениеПовторения = ПредставлениеПовторения + СимволТире + НСтр("ru = 'во все дни'");
			
		ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНедели[1]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[2]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[3]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[4]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[5]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[6]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[7] Тогда
			
			ПредставлениеДнейНедели = "";
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[1] Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'в понедельник'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[2] Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'во вторник'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[3] Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'в среду'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[4] Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'в четверг'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[5] Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'в пятницу'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[6] Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'в субботу'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[7] Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'в воскресенье'"));
			КонецЕсли;
			
			ПредставлениеПовторения = ПредставлениеПовторения + СимволТире + ПредставлениеДнейНедели;
			
		КонецЕсли;
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежемесячно") Тогда
		
		Если ЗначениеЗаполнено(НастройкиПовторения.ПовторениеПоДнямМесяца) Тогда
			
			ПредставлениеДняМесяца = СтрШаблон(НСтр("ru = '%1-го числа'"),
				НастройкиПовторения.ПовторениеПоДнямМесяца);
			ПредставлениеПовторения = ПредставлениеПовторения + СимволТире + ПредставлениеДняМесяца;
			
		Иначе
			
			Если НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 1 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'понедельник'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последний'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 2 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'вторник'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последний'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 3 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'среда'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последняя'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 4 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'четверг'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последний'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 5 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'пятница'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последняя'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 6 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'суббота'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последняя'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 7 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'воскресенье'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последнее'");
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.НомерВхождения <> -1 Тогда
				ПредставлениеПорядкаДняНеделиМесяца =
					Строка(НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.НомерВхождения);
			КонецЕсли;
			
			ПредставлениеДняНеделиМесяца = СтрШаблон(НСтр("ru = '%1 %2'"),
				ПредставлениеПорядкаДняНеделиМесяца,
				ПредставлениеДняНедели);
			
			ПредставлениеПовторения = ПредставлениеПовторения + СимволТире + ПредставлениеДняНеделиМесяца;
			
		КонецЕсли;
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежегодно") Тогда
		
		МесяцДень = Дата(1,НастройкиПовторения.ПовторениеПоМесяцам, НастройкиПовторения.ПовторениеПоДнямМесяца);
		ПредставлениеДняГода = Формат(МесяцДень, "ДФ='d MMMM'");
		
		ПредставлениеПовторения = ПредставлениеПовторения + СимволТире + ПредставлениеДняГода;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиПовторения.КоличествоПовторов) 
		И НастройкиПовторения.ПравилоОкончанияПовторения =
			ПредопределенноеЗначение("Перечисление.ПравилаОкончанияПовторения.ПослеЧислаПовторов") Тогда
		
		ПредставлениеРаз = НСтр("ru = 'раз'") + "," + НСтр("ru = 'раза'") + "," + НСтр("ru = 'раз'");
		ПредставлениеКоличестваПовторов = 
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				НастройкиПовторения.КоличествоПовторов, ПредставлениеРаз);
		
		ПредставлениеПовторения = ПредставлениеПовторения + ", " + ПредставлениеКоличестваПовторов;
		
	ИначеЕсли ЗначениеЗаполнено(НастройкиПовторения.ДатаОкончанияПовторения)
		И НастройкиПовторения.ПравилоОкончанияПовторения =
			ПредопределенноеЗначение("Перечисление.ПравилаОкончанияПовторения.ДоДаты") Тогда
		
		ПредставлениеДо = СтрШаблон(НСтр("ru = 'до %1'"),
			Формат(НастройкиПовторения.ДатаОкончанияПовторения, "ДЛФ=DD"));
		
		ПредставлениеПовторения = ПредставлениеПовторения + ", " + ПредставлениеДо;
		
	КонецЕсли;
	
	Возврат ПредставлениеПовторения;
	
КонецФункции

// Возвращает текстовое представление единицы измерения интервала повторения
Функция ПолучитьТекстовоеПредставлениеЕдиницыИзмеренияИнтервалаПовторения(НастройкиПовторения) Экспорт
	
	ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = "";
	
	Если НЕ ЗначениеЗаполнено(НастройкиПовторения.ЧастотаПовторения) Тогда
		
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = "";
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежедневно") Тогда
		
		ПредставлениеДней = НСтр("ru = 'день'") + "," + НСтр("ru = 'дня'") + "," + НСтр("ru = 'дней'");
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = 
			ОбщегоНазначенияСУЗКлиентСервер.ПредметИсчисленияПрописью(
				НастройкиПовторения.ИнтервалПовторения, ПредставлениеДней);
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Еженедельно") Тогда
		
		ПредставлениеНедель = НСтр("ru = 'неделя'") + "," + НСтр("ru = 'недели'") + "," + НСтр("ru = 'недель'");
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = 
			ОбщегоНазначенияСУЗКлиентСервер.ПредметИсчисленияПрописью(
				НастройкиПовторения.ИнтервалПовторения, ПредставлениеНедель);
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежемесячно") Тогда
		
		ПредставлениеМесяцев = НСтр("ru = 'месяц'") + "," + НСтр("ru = 'месяца'") + "," + НСтр("ru = 'месяцев'");
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = 
			ОбщегоНазначенияСУЗКлиентСервер.ПредметИсчисленияПрописью(
				НастройкиПовторения.ИнтервалПовторения, ПредставлениеМесяцев);
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежегодно") Тогда
		
		ПредставлениеЛет = НСтр("ru = 'год'") + "," + НСтр("ru = 'года'") + "," + НСтр("ru = 'лет'");
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = 
			ОбщегоНазначенияСУЗКлиентСервер.ПредметИсчисленияПрописью(
				НастройкиПовторения.ИнтервалПовторения, ПредставлениеЛет);
		
	КонецЕсли;
	
	Возврат ПредставлениеЕдиницыИзмеренияИнтервалаПовторения;
	
КонецФункции

// Возвращает структуру настройки повторения
Функция ПолучитьСтруктуруНастройкиПовторения(
	ЧастотаПовторения, ИнтервалПовторения, ПравилоОкончанияПовторения,
	КоличествоПовторов, ДатаОкончанияПовторения, ПовторениеПоДнямНедели,
	ПовторениеПоДнямМесяца, ПовторениеПоДнямНеделиВМесяце, ПовторениеПоМесяцам) Экспорт
	
	НастройкиПовторения = Новый Структура;
	НастройкиПовторения.Вставить("ЧастотаПовторения", ЧастотаПовторения);
	НастройкиПовторения.Вставить("ИнтервалПовторения", ИнтервалПовторения);
	НастройкиПовторения.Вставить("ПравилоОкончанияПовторения", ПравилоОкончанияПовторения);
	НастройкиПовторения.Вставить("КоличествоПовторов", КоличествоПовторов);
	НастройкиПовторения.Вставить("ДатаОкончанияПовторения", ДатаОкончанияПовторения);
	НастройкиПовторения.Вставить("ПовторениеПоДнямНедели", ПовторениеПоДнямНедели);
	НастройкиПовторения.Вставить("ПовторениеПоДнямМесяца", ПовторениеПоДнямМесяца);
	НастройкиПовторения.Вставить("ПовторениеПоДнямНеделиВМесяце", ПовторениеПоДнямНеделиВМесяце);
	НастройкиПовторения.Вставить("ПовторениеПоМесяцам", ПовторениеПоМесяцам);
	
	Возврат НастройкиПовторения;
	
КонецФункции

// Возвращает день недели в месяце
Функция ПолучитьДеньНеделиВМесяце(Дата, СУчетомПоследнего = Истина) Экспорт
	
	ДеньНеделиВМесяце = Новый Структура("НомерВхождения, ДеньНедели");
	
	ДеньНеделиВМесяце.ДеньНедели = ДеньНедели(Дата);
	
	НомерНеделиСНачалаМесяца = Цел((Дата - (НачалоМесяца(Дата))) / 604800) + 1; // 604800 - число секунд в неделе
	ДеньНеделиВМесяце.НомерВхождения = НомерНеделиСНачалаМесяца;
	
	Если СУчетомПоследнего Тогда
		НомерНеделиСКонцаМесяца = Цел((КонецМесяца(Дата) - Дата) / 604800) + 1; // 604800 - число секунд в неделе
		Если НомерНеделиСКонцаМесяца = 1 Тогда
			ДеньНеделиВМесяце.НомерВхождения = -1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДеньНеделиВМесяце;
	
КонецФункции

#КонецОбласти
