//#Область СлужебныйПрограммныйИнтерфейс

//// Проверяет, включено ли регламентное задание по функциональным опциям.
////
//// Параметры:
////  Задание - ОбъектМетаданных: РегламентноеЗадание - регламентное задание.
////  ЗависимостиЗаданий - ТаблицаЗначений - таблица зависимостей регламентных
////    заданий, полученная методом РегламентныеЗаданияСлужебный.РегламентныеЗаданияЗависимыеОтФункциональныхОпций.
////    Если не указано, получается автоматически.
////
//// Возвращаемое значение:
////  Использование - Булево - Истина, если регламентное задание используется.
////
Функция РегламентноеЗаданиеДоступноПоФункциональнымОпциям(Задание, ЗависимостиЗаданий = Неопределено) Экспорт
	
	Если ЗависимостиЗаданий = Неопределено Тогда
		ЗависимостиЗаданий = РегламентныеЗаданияЗависимыеОтФункциональныхОпций();
	КонецЕсли;
	
	ОтключитьВПодчиненномУзлеРИБ = Ложь;
	ОтключитьВАвтономномРабочемМесте = Ложь;
	Использование                = Неопределено;
	ЭтоПодчиненныйУзелРИБ        = ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ();
	ЭтоРазделенныйРежим          = ОбщегоНазначения.РазделениеВключено();
	ЭтоАвтономноеРабочееМесто = ОбщегоНазначения.ЭтоАвтономноеРабочееМесто();
	
	НайденныеСтроки = ЗависимостиЗаданий.НайтиСтроки(Новый Структура("РегламентноеЗадание", Задание));
	
	Для Каждого СтрокаЗависимости Из НайденныеСтроки Цикл
		Если ЭтоРазделенныйРежим И СтрокаЗависимости.ДоступноВМоделиСервиса = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ОтключитьВПодчиненномУзлеРИБ = (СтрокаЗависимости.ДоступноВПодчиненномУзлеРИБ = Ложь) И ЭтоПодчиненныйУзелРИБ;
		ОтключитьВАвтономномРабочемМесте = (СтрокаЗависимости.ДоступноВАвтономномРабочемМесте = Ложь) И ЭтоАвтономноеРабочееМесто;
		
		Если ОтключитьВПодчиненномУзлеРИБ Или ОтключитьВАвтономномРабочемМесте Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если СтрокаЗависимости.ФункциональнаяОпция = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеФО = ПолучитьФункциональнуюОпцию(СтрокаЗависимости.ФункциональнаяОпция.Имя);
		
		Если Использование = Неопределено Тогда
			Использование = ЗначениеФО;
		ИначеЕсли СтрокаЗависимости.ЗависимостьПоИ Тогда
			Использование = Использование И ЗначениеФО;
		Иначе
			Использование = Использование Или ЗначениеФО;
		КонецЕсли;
	КонецЦикла;
	
	Если Использование = Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Использование;
	КонецЕсли;
	
КонецФункции

//// Формирует таблицу зависимостей регламентных заданий от функциональных опций.
////
//// Возвращаемое значение:
////  Зависимости - ТаблицаЗначений - таблица значений с колонками:
////    * РегламентноеЗадание - ОбъектМетаданных:РегламентноеЗадание - регламентное задание.
////    * ФункциональнаяОпция - ОбъектМетаданных:ФункциональнаяОпция - функциональная опция,
////        от которой зависит регламентное задание.
////    * ЗависимостьПоИ      - Булево - если регламентное задание зависит более, чем
////        от одной функциональной опции и его необходимо включать только тогда,
////        когда все функциональные опции включены, то следует указывать Истина
////        для каждой зависимости.
////        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
////        то регламентное задание тоже включено.
////    * ВключатьПриВключенииФункциональнойОпции - Булево, Неопределено - если Ложь, то при
////        включении функциональной опции регламентное задание не будет включаться. Значение
////        Неопределено соответствует значению Истина.
////        По умолчанию - неопределено.
////    * ДоступноВПодчиненномУзлеРИБ - Булево, Неопределено - Истина или Неопределено, если регламентное
////        задание доступно в РИБ.
////        По умолчанию - неопределено.
////    * ДоступноВМоделиСервиса      - Булево, Неопределено - Истина или Неопределено, если регламентное
////        задание доступно в модели сервиса.
////        По умолчанию - неопределено.
////    * РаботаетСВнешнимиРесурсами   - Булево - Истина, если регламентное задание работает
////        с внешними ресурсами (получение почты, синхронизация данных и т.п.).
////        По умолчанию - Ложь.
////
Функция РегламентныеЗаданияЗависимыеОтФункциональныхОпций() Экспорт
	
	Зависимости = Новый ТаблицаЗначений;
	Зависимости.Колонки.Добавить("РегламентноеЗадание");
	Зависимости.Колонки.Добавить("ФункциональнаяОпция");
	Зависимости.Колонки.Добавить("ЗависимостьПоИ", Новый ОписаниеТипов("Булево"));
	Зависимости.Колонки.Добавить("ДоступноВМоделиСервиса");
	Зависимости.Колонки.Добавить("ДоступноВПодчиненномУзлеРИБ");
	Зависимости.Колонки.Добавить("ВключатьПриВключенииФункциональнойОпции");
	Зависимости.Колонки.Добавить("ДоступноВАвтономномРабочемМесте");
	Зависимости.Колонки.Добавить("РаботаетСВнешнимиРесурсами",  Новый ОписаниеТипов("Булево"));
	Зависимости.Колонки.Добавить("Параметризуется",  Новый ОписаниеТипов("Булево"));
	
	ИнтеграцияСтандартныхПодсистем.ПриОпределенииНастроекРегламентныхЗаданий(Зависимости);
	РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий(Зависимости);
	
	Зависимости.Сортировать("РегламентноеЗадание");
	
	Возврат Зависимости;
	
КонецФункции

//// Устанавливает признак использования регламентных заданий в информационной базе
//// в зависимости от значений функциональных опций.
////
//// Параметры:
////  ВключатьЗадания - Булево - если Истина, отключенные регламентные задания будут включаться
////                             при доступности по функциональным опциям. По умолчанию Ложь.
////
//Процедура УстановитьИспользованиеРегламентныхЗаданийПоФункциональнымОпциям(ВключатьЗадания = Ложь) Экспорт
//	
//	ЭтоПодчиненныйУзелРИБ = ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ();
//	ЭтоАвтономноеРабочееМесто = ОбщегоНазначения.ЭтоАвтономноеРабочееМесто();
//	
//	ЗависимыеРегламентныеЗадания = РегламентныеЗаданияЗависимыеОтФункциональныхОпций();
//	Задания = ЗависимыеРегламентныеЗадания.Скопировать(,"РегламентноеЗадание");
//	Задания.Свернуть("РегламентноеЗадание");
//	
//	Для Каждого СтрокаЗадание Из Задания Цикл
//		
//		Использование                    = Неопределено;
//		ОтключитьЗадание                 = Истина;
//		ОтключитьВПодчиненномУзлеРИБ     = Ложь;
//		ОтключитьВАвтономномРабочемМесте = Ложь;
//		
//		НайденныеСтроки = ЗависимыеРегламентныеЗадания.НайтиСтроки(Новый Структура("РегламентноеЗадание", СтрокаЗадание.РегламентноеЗадание));
//		
//		Для Каждого СтрокаЗависимости Из НайденныеСтроки Цикл
//			ОтключитьВПодчиненномУзлеРИБ = (СтрокаЗависимости.ДоступноВПодчиненномУзлеРИБ = Ложь) И ЭтоПодчиненныйУзелРИБ;
//			ОтключитьВАвтономномРабочемМесте = (СтрокаЗависимости.ДоступноВАвтономномРабочемМесте = Ложь) И ЭтоАвтономноеРабочееМесто;
//			Если ОтключитьВПодчиненномУзлеРИБ Или ОтключитьВАвтономномРабочемМесте Тогда
//				Использование = Ложь;
//				Прервать;
//			КонецЕсли;
//			
//			Если СтрокаЗависимости.ФункциональнаяОпция = Неопределено Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			ЗначениеФО = ПолучитьФункциональнуюОпцию(СтрокаЗависимости.ФункциональнаяОпция.Имя);
//			
//			Если СтрокаЗависимости.ВключатьПриВключенииФункциональнойОпции = Ложь Тогда
//				Если ОтключитьЗадание Тогда
//					ОтключитьЗадание = Не ЗначениеФО;
//				КонецЕсли;
//				ЗначениеФО = Ложь;
//			КонецЕсли;
//			
//			Если Использование = Неопределено Тогда
//				Использование = ЗначениеФО;
//			ИначеЕсли СтрокаЗависимости.ЗависимостьПоИ Тогда
//				Использование = Использование И ЗначениеФО;
//			Иначе
//				Использование = Использование Или ЗначениеФО;
//			КонецЕсли;
//		КонецЦикла;
//		
//		Если Использование = Неопределено
//			Или (Использование И Не ВключатьЗадания) // Автоматически при обновлении только отключаем регламентные задания.
//			Или (Не Использование И Не ОтключитьЗадание) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(Новый Структура("Метаданные", СтрокаЗадание.РегламентноеЗадание));
//		Для Каждого РегламентноеЗадание Из СписокЗаданий Цикл
//			ПараметрыЗадания = Новый Структура("Использование", Использование);
//			РегламентныеЗаданияСервер.ИзменитьЗадание(РегламентноеЗадание, ПараметрыЗадания);
//		КонецЦикла;
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// Обработчики подписок на события.

//// Процедура включает/отключает созданные в ИБ регламентные задания
//// при изменении функциональной опции.
////
//// Параметры:
////  Источник - КонстантаМенеджерЗначения - константа хранения значения ФО.
////  Отказ    - Булево - Отказ при записи константы.
////
Процедура ВключитьРегламентноеЗаданиеПриИзмененииФункциональнойОпции(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ИзменитьИспользованиеРегламентныхЗаданийПоФункциональнымОпциям(Источник, Источник.Значение);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// Обработчики событий подсистем конфигурации.

//// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПослеЗагрузкиДанных.
//Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
//	
//	БлокировкаРаботыСВнешнимиРесурсами.ПослеЗагрузкиДанных(Контейнер);
//	
//КонецПроцедуры

//// См. РаботаВМоделиСервисаПереопределяемый.ПриЗаполненииТаблицыПараметровИБ.
//Процедура ПриЗаполненииТаблицыПараметровИБ(Знач ТаблицаПараметров) Экспорт
//	
//	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.БазоваяФункциональность") Тогда
//		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
//		МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания");
//		МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "МаксимальноеКоличествоИсполняющихФоновыхЗаданий");
//	КонецЕсли;
//	
//КонецПроцедуры

//// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
//// 
//// Параметры:
////  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
////
//Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
//	
//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "2.3.3.12";
//	Обработчик.НачальноеЗаполнение = Истина;
//	Обработчик.РежимВыполнения = "Оперативно";
//	Обработчик.Процедура = "БлокировкаРаботыСВнешнимиРесурсами.ОбновитьПараметрыБлокировкиРаботыСВнешнимиРесурсами";
//	
//КонецПроцедуры

//// См. ОбменДаннымиПереопределяемый.ПриНастройкеПодчиненногоУзлаРИБ.
//Процедура ПриНастройкеПодчиненногоУзлаРИБ() Экспорт
//	
//	УстановитьИспользованиеРегламентныхЗаданийПоФункциональнымОпциям();
//	
//КонецПроцедуры

//#КонецОбласти

//#Область СлужебныеПроцедурыИФункции

//Функция ЗначениеНастройки(ИмяНастройки) Экспорт
//	
//	Настройки = НастройкиПоУмолчанию();
//	РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроек(Настройки);
//	
//	Возврат Настройки[ИмяНастройки];
//	
//КонецФункции

//// Содержит значения настроек по умолчанию.
////
//// Возвращаемое значение:
////  Структура - Структура с ключами:
////    * РасположениеКомандыСнятияБлокировки - Строка - определяет расположение команды снятия
////                                                     блокировки работы с внешними ресурсами.
////
//Функция НастройкиПоУмолчанию()
//	
//	НастройкиПодсистемы = Новый Структура;
//	НастройкиПодсистемы.Вставить("РасположениеКомандыСнятияБлокировки",
//		НСтр("ru = 'Блокировку также можно снять позднее в разделе <b>Администрирование - Обслуживание</b>.'"));
//	
//	Возврат НастройкиПодсистемы;
//	
//КонецФункции

//// Вызывает исключение, если у пользователя нет права администрирования.
//Процедура ВызватьИсключениеЕслиНетПраваАдминистрирования() Экспорт
//	
//	Если ОбщегоНазначения.РазделениеВключено()
//		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
//		Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
//			ВызватьИсключение НСтр("ru = 'Нарушение прав доступа.'");
//		КонецЕсли;
//	Иначе
//		Если НЕ ПривилегированныйРежим() Тогда
//			ВыполнитьПроверкуПравДоступа("Администрирование", Метаданные);
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры

Функция ОбновленнаяТаблицаРегламентныхЗаданий(Параметры, АдресХранилища) Экспорт
	
	ИдентификаторРегламентногоЗадания = Параметры.ИдентификаторРегламентногоЗадания;
	Таблица                           = Параметры.Таблица;
	ОтключенныеЗадания                = Параметры.ОтключенныеЗадания;
	
	// Обновление таблицы РегламентныеЗадания и списка СписокВыбора регламентного задания для отбора.
	ТекущиеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
	ОтключенныеЗадания.Очистить();
	
	ПараметрыРегламентныхЗаданий = РегламентныеЗаданияЗависимыеОтФункциональныхОпций();
	ПараметрыОтбора        = Новый Структура;
	ПараметризуемыеЗадания = Новый Массив;
	ПараметрыОтбора.Вставить("Параметризуется", Истина);
	РезультатПоиска = ПараметрыРегламентныхЗаданий.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаРезультата Из РезультатПоиска Цикл
		ПараметризуемыеЗадания.Добавить(СтрокаРезультата.РегламентноеЗадание);
	КонецЦикла;
	
	ЗаданияВМоделиСервиса = Новый Соответствие;
	ПодсистемаРаботаВМоделиСервиса = Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы.Найти("РаботаВМоделиСервиса");
	Для Каждого ОбъектМетаданных Из Метаданные.РегламентныеЗадания Цикл
		Если Не РегламентноеЗаданиеДоступноПоФункциональнымОпциям(ОбъектМетаданных, ПараметрыРегламентныхЗаданий) Тогда
			ОтключенныеЗадания.Добавить(ОбъектМетаданных.Имя);
			Продолжить;
		КонецЕсли;
		Если НЕ ОбщегоНазначения.РазделениеВключено() И ПодсистемаРаботаВМоделиСервиса <> Неопределено Тогда
			Если ПодсистемаРаботаВМоделиСервиса.Состав.Содержит(ОбъектМетаданных) Тогда
				ЗаданияВМоделиСервиса.Вставить(ОбъектМетаданных.Имя, Истина);
				Продолжить;
			КонецЕсли;
			Для каждого Подсистема Из ПодсистемаРаботаВМоделиСервиса.Подсистемы Цикл
				Если Подсистема.Состав.Содержит(ОбъектМетаданных) Тогда
					ЗаданияВМоделиСервиса.Вставить(ОбъектМетаданных.Имя, Истина);
					Продолжить;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторРегламентногоЗадания = Неопределено Тогда
		
		Индекс = 0;
		Для каждого Задание Из ТекущиеЗадания Цикл
			Если НЕ ОбщегоНазначения.РазделениеВключено()
			   И ЗаданияВМоделиСервиса[Задание.Метаданные.Имя] <> Неопределено Тогда
				
				Продолжить;
			КонецЕсли;
			
			Идентификатор = Строка(Задание.УникальныйИдентификатор);
			
			Если Индекс >= Таблица.Количество()
			 ИЛИ Таблица[Индекс].Идентификатор <> Идентификатор Тогда
				
				// Вставка нового задания.
				Обновляемое = Таблица.Вставить(Индекс);
				
				// Установка уникального идентификатора.
				Обновляемое.Идентификатор = Идентификатор;
			Иначе
				Обновляемое = Таблица[Индекс];
			КонецЕсли;
			
			Если ПараметризуемыеЗадания.Найти(Задание.Метаданные) <> Неопределено Тогда
				Обновляемое.Параметризуемое = Истина;
			КонецЕсли;
			
			ОбновитьСтрокуТаблицыРегламентныхЗаданий(Обновляемое, Задание);
			Индекс = Индекс + 1;
		КонецЦикла;
	
		// Удаление лишних строк.
		Пока Индекс < Таблица.Количество() Цикл
			Таблица.Удалить(Индекс);
		КонецЦикла;
	Иначе
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(
			Новый УникальныйИдентификатор(ИдентификаторРегламентногоЗадания));
		
		Строки = Таблица.НайтиСтроки(
			Новый Структура("Идентификатор", ИдентификаторРегламентногоЗадания));
		
		Если Задание <> Неопределено
		   И Строки.Количество() > 0 Тогда
			
			СтрокаЗадание = Строки[0];
			Если ПараметризуемыеЗадания.Найти(Задание.Метаданные) <> Неопределено Тогда
				СтрокаЗадание.Параметризуемое = Истина;
			КонецЕсли;
			ОбновитьСтрокуТаблицыРегламентныхЗаданий(СтрокаЗадание, Задание);
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Таблица", Таблица);
	Результат.Вставить("ОтключенныеЗадания", ОтключенныеЗадания);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецФункции

Процедура ОбновитьСтрокуТаблицыРегламентныхЗаданий(Строка, Задание)
	
	ЗаполнитьЗначенияСвойств(Строка, Задание);
	
	// Уточнение наименования
	Строка.Наименование = ПредставлениеРегламентногоЗадания(Задание);
	
	// Установка Даты завершения и Состояния завершения по последней фоновой процедуре.
	СвойстваПоследнегоФоновогоЗадания = РегламентныеЗаданияСлужебный
		.ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(Задание);
	
	Строка.ИмяЗадания = Задание.Метаданные.Имя;
	Если СвойстваПоследнегоФоновогоЗадания = Неопределено Тогда
		Строка.ДатаНачала          = ТекстНеОпределено();
		Строка.ДатаОкончания       = ТекстНеОпределено();
		Строка.СостояниеВыполнения = ТекстНеОпределено();
	Иначе
		Строка.ДатаНачала          = ?(ЗначениеЗаполнено(СвойстваПоследнегоФоновогоЗадания.Начало),
		                               СвойстваПоследнегоФоновогоЗадания.Начало,
		                               "<>");
		Строка.ДатаОкончания       = ?(ЗначениеЗаполнено(СвойстваПоследнегоФоновогоЗадания.Конец),
		                               СвойстваПоследнегоФоновогоЗадания.Конец,
		                               "<>");
		Строка.СостояниеВыполнения = СвойстваПоследнегоФоновогоЗадания.Состояние;
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с регламентными заданиями.

// Предназначена для "ручного" немедленного выполнения процедуры регламентного задания
// либо в сеансе клиента (в файловой ИБ), либо в фоновом задании на сервере (в серверной ИБ).
// Применяется в любом режиме соединения.
// Ручной режим запуска не влияет на выполнение регламентного задания по аварийному
// и основному расписаниям, т.к. не указывается ссылка на регламентное задание у фонового задания.
// Тип ФоновоеЗадание не допускает установки такой ссылки, поэтому для файлового режима применяется
// тоже правило.
// 
// Параметры:
//  Задание             - РегламентноеЗадание, Строка - уникального идентификатора РегламентногоЗадания.
//
// Возвращаемое значение:
//  Структура - со свойствами
//    * МоментЗапуска -   Неопределено, Дата - для файловой ИБ устанавливает переданный момент, как момент запуска
//                        метода регламентного задания.
//                        Для серверной ИБ - возвращает момент запуска фонового задания по факту.
//    * ИдентификаторФоновогоЗадания - Строка - для серверной ИБ возвращает идентификатор запущенного фонового задания.
//
Функция ВыполнитьРегламентноеЗаданиеВручную(Знач Задание) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыВыполнения = ПараметрыВыполненияРегламентногоЗадания();
	ПараметрыВыполнения.ПроцедураУжеВыполняется = Ложь;
	Задание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(Задание);
	
	ПараметрыВыполнения.ЗапускВыполнен = Ложь;
	СвойстваПоследнегоФоновогоЗадания = ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(Задание);
	
	Если СвойстваПоследнегоФоновогоЗадания <> Неопределено
	   И СвойстваПоследнегоФоновогоЗадания.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		
		ПараметрыВыполнения.МоментЗапуска  = СвойстваПоследнегоФоновогоЗадания.Начало;
		Если ЗначениеЗаполнено(СвойстваПоследнегоФоновогоЗадания.Наименование) Тогда
			ПараметрыВыполнения.ПредставлениеФоновогоЗадания = СвойстваПоследнегоФоновогоЗадания.Наименование;
		Иначе
			ПараметрыВыполнения.ПредставлениеФоновогоЗадания = ПредставлениеРегламентногоЗадания(Задание);
		КонецЕсли;
	Иначе
		НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Запуск вручную: %1'"), ПредставлениеРегламентногоЗадания(Задание));
		ФоновоеЗадание = ФоновыеЗадания.Выполнить(Задание.Метаданные.ИмяМетода, Задание.Параметры, Строка(Задание.УникальныйИдентификатор), НаименованиеФоновогоЗадания);
		ПараметрыВыполнения.ИдентификаторФоновогоЗадания = Строка(ФоновоеЗадание.УникальныйИдентификатор);
		ПараметрыВыполнения.МоментЗапуска = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ФоновоеЗадание.УникальныйИдентификатор).Начало;
		ПараметрыВыполнения.ЗапускВыполнен = Истина;
	КонецЕсли;
	
	ПараметрыВыполнения.ПроцедураУжеВыполняется = НЕ ПараметрыВыполнения.ЗапускВыполнен;
	Возврат ПараметрыВыполнения;
	
КонецФункции

Функция ПараметрыВыполненияРегламентногоЗадания() 
	
	Результат = Новый Структура;
	Результат.Вставить("МоментЗапуска");
	Результат.Вставить("ИдентификаторФоновогоЗадания");
	Результат.Вставить("ПредставлениеФоновогоЗадания");
	Результат.Вставить("ПроцедураУжеВыполняется");
	Результат.Вставить("ЗапускВыполнен");
	Возврат Результат;
	
КонецФункции 

//++КИТ-ИНТ ЗайцевНС 01.02.2023 
// Разкоментировал модуль ВыполнитьРегламентноеЗаданиеВручную
// Разкоментировал модуль ПараметрыВыполненияРегламентногоЗадания
//++КИТ-ИНТ ЗайцевНС 01.02.2023


//// Возвращает представление регламентного задания,
//// это по порядку исключения незаполненных реквизитов:
//// Наименование, Метаданные.Синоним, Метаданные.Имя.
////
//// Параметры:
////  Задание      - РегламентноеЗадание, Строка - если строка, тогда УникальныйИдентификатор строкой.
////
//// Возвращаемое значение:
////  Строка.
////
Функция ПредставлениеРегламентногоЗадания(Знач Задание) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Задание) = Тип("РегламентноеЗадание") Тогда
		РегламентноеЗадание = Задание;
	Иначе
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(Задание));
	КонецЕсли;
	
	Если РегламентноеЗадание <> Неопределено Тогда
		Представление = РегламентноеЗадание.Наименование;
		
		Если ПустаяСтрока(РегламентноеЗадание.Наименование) Тогда
			Представление = РегламентноеЗадание.Метаданные.Синоним;
			
			Если ПустаяСтрока(Представление) Тогда
				Представление = РегламентноеЗадание.Метаданные.Имя;
			КонецЕсли
		КонецЕсли;
	Иначе
		Представление = ТекстНеОпределено();
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Возвращает текст "<не определено>".
Функция ТекстНеОпределено() Экспорт
	
	Возврат НСтр("ru = '<не определено>'");
	
КонецФункции

//// Возвращает многострочную Строку содержащую Сообщения и ОписаниеИнформацииОбОшибке,
//// последнее фоновое задание найдено по идентификатору регламентного задания
//// и сообщения/ошибки есть.
////
//// Параметры:
////  Задание      - РегламентноеЗадание, Строка - УникальныйИдентификатор
////                 РегламентногоЗадания строкой.
////
//// Возвращаемое значение:
////  Строка.
////
Функция СообщенияИОписанияОшибокРегламентногоЗадания(Знач Задание) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);

	ИдентификаторРегламентногоЗадания = ?(ТипЗнч(Задание) = Тип("РегламентноеЗадание"), Строка(Задание.УникальныйИдентификатор), Задание);
	СвойстваПоследнегоФоновогоЗадания = ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(ИдентификаторРегламентногоЗадания);
	Возврат ?(СвойстваПоследнегоФоновогоЗадания = Неопределено,
	          "",
	          СообщенияИОписанияОшибокФоновогоЗадания(СвойстваПоследнегоФоновогоЗадания.Идентификатор) );
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с фоновыми заданиями.

// Отменяет фоновое задание, если это возможно, а именно, если оно выполняется на сервере, и активно.
//
// Параметры:
//  Идентификатор  - Строка уникального идентификатора ФоновогоЗадания.
// 
Процедура ОтменитьФоновоеЗадание(Идентификатор) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйУникальныйИдентификатор = Новый УникальныйИдентификатор(Идентификатор);
	Отбор = Новый Структура;
	Отбор.Вставить("УникальныйИдентификатор", НовыйУникальныйИдентификатор);
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если МассивФоновыхЗаданий.Количество() = 1 Тогда
		ФоновоеЗадание = МассивФоновыхЗаданий[0];
	Иначе
		ВызватьИсключение НСтр("ru = 'Фоновое задание не найдено на сервере.'");
	КонецЕсли;
	
	Если ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		ВызватьИсключение НСтр("ru = 'Задание не выполняется, его нельзя отменить.'");
	КонецЕсли;
	
	ФоновоеЗадание.Отменить();
	
КонецПроцедуры

//++КИТ-ИНТ ЗайцевНС 01.02.2023 
// Разкоментировал модуль ОтменитьФоновоеЗадание 
//++КИТ-ИНТ ЗайцевНС 01.02.2023


// Только для внутреннего использования.
//
Функция ТаблицаСвойствФоновыхЗаданийВФоне(Параметры, АдресХранилища) Экспорт
	
	ТаблицаСвойств = СвойстваФоновыхЗаданий(Параметры.Отбор);
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаСвойств", ТаблицаСвойств);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецФункции

//++КИТ-ИНТ ЗайцевНС 01.02.2023 
// Разкоментировал модуль ТаблицаСвойствФоновыхЗаданийВФоне 
//++КИТ-ИНТ ЗайцевНС 01.02.2023


//// Возвращает таблицу свойств фоновых заданий.
////  Структуру таблицы смотри в функции ПустаяТаблицаСвойствФоновыхЗаданий().
//// 
//// Параметры:
////  Отбор        - Структура - допустимые поля:
////                 Идентификатор, Ключ, Состояние, Начало, Конец,
////                 Наименование, ИмяМетода, РегламентноеЗадание. 
////
//// Возвращаемое значение:
////  ТаблицаЗначений  - возвращается таблица после отбора.
////
Функция СвойстваФоновыхЗаданий(Отбор = Неопределено) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	Таблица = НовыеСвойстваФоновыхЗаданий();
	
	Если ЗначениеЗаполнено(Отбор) И Отбор.Свойство("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания") Тогда
		Отбор.Удалить("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания");
		ПолучитьПоследнее = Истина;
	Иначе
		ПолучитьПоследнее = Ложь;
	КонецЕсли;
	
	РегламентноеЗадание = Неопределено;
	
	// Добавление истории фоновых заданий, полученных с сервера.
	Если ЗначениеЗаполнено(Отбор) И Отбор.Свойство("ИдентификаторРегламентногоЗадания") Тогда
		Если Отбор.ИдентификаторРегламентногоЗадания <> "" Тогда
			РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(
				Новый УникальныйИдентификатор(Отбор.ИдентификаторРегламентногоЗадания));
			ТекущийОтбор = Новый Структура("Ключ", Отбор.ИдентификаторРегламентногоЗадания);
			ФоновыеЗаданияЗапущенныеВручную = ФоновыеЗадания.ПолучитьФоновыеЗадания(ТекущийОтбор);
			Если РегламентноеЗадание <> Неопределено Тогда
				ПоследнееФоновоеЗадание = РегламентноеЗадание.ПоследнееЗадание;
			КонецЕсли;
			Если НЕ ПолучитьПоследнее ИЛИ ПоследнееФоновоеЗадание = Неопределено Тогда
				ТекущийОтбор = Новый Структура("РегламентноеЗадание", РегламентноеЗадание);
				АвтоматическиеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(ТекущийОтбор);
			КонецЕсли;
			Если ПолучитьПоследнее Тогда
				Если ПоследнееФоновоеЗадание = Неопределено Тогда
					ПоследнееФоновоеЗадание = ПоследнееФоновоеЗаданиеВМассиве(АвтоматическиеФоновыеЗадания);
				КонецЕсли;
				
				ПоследнееФоновоеЗадание = ПоследнееФоновоеЗаданиеВМассиве(
					ФоновыеЗаданияЗапущенныеВручную, ПоследнееФоновоеЗадание);
				
				Если ПоследнееФоновоеЗадание <> Неопределено Тогда
					МассивФоновыхЗаданий = Новый Массив;
					МассивФоновыхЗаданий.Добавить(ПоследнееФоновоеЗадание);
					ДобавитьСвойстваФоновыхЗаданий(МассивФоновыхЗаданий, Таблица);
				КонецЕсли;
				Возврат Таблица;
			КонецЕсли;
			ДобавитьСвойстваФоновыхЗаданий(ФоновыеЗаданияЗапущенныеВручную, Таблица);
			ДобавитьСвойстваФоновыхЗаданий(АвтоматическиеФоновыеЗадания, Таблица);
		Иначе
			МассивФоновыхЗаданий = Новый Массив;
			ВсеИдентификаторыРегламентныхЗаданий = Новый Соответствие;
			Для каждого ТекущееЗадание Из РегламентныеЗадания.ПолучитьРегламентныеЗадания() Цикл
				ВсеИдентификаторыРегламентныхЗаданий.Вставить(
					Строка(ТекущееЗадание.УникальныйИдентификатор), Истина);
			КонецЦикла;
			ВсеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания();
			Для каждого ТекущееЗадание Из ВсеФоновыеЗадания Цикл
				Если ТекущееЗадание.РегламентноеЗадание = Неопределено
				   И ВсеИдентификаторыРегламентныхЗаданий[ТекущееЗадание.Ключ] = Неопределено Тогда
				
					МассивФоновыхЗаданий.Добавить(ТекущееЗадание);
				КонецЕсли;
			КонецЦикла;
			ДобавитьСвойстваФоновыхЗаданий(МассивФоновыхЗаданий, Таблица);
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(Отбор) Тогда
			МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания();
		Иначе
			Если Отбор.Свойство("Идентификатор") Тогда
				Отбор.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор(Отбор.Идентификатор));
				Отбор.Удалить("Идентификатор");
			КонецЕсли;
			МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
			Если Отбор.Свойство("УникальныйИдентификатор") Тогда
				Отбор.Вставить("Идентификатор", Строка(Отбор.УникальныйИдентификатор));
				Отбор.Удалить("УникальныйИдентификатор");
			КонецЕсли;
		КонецЕсли;
		ДобавитьСвойстваФоновыхЗаданий(МассивФоновыхЗаданий, Таблица);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отбор) И Отбор.Свойство("ИдентификаторРегламентногоЗадания") Тогда
		РегламентныеЗаданияДляОбработки = Новый Массив;
		Если Отбор.ИдентификаторРегламентногоЗадания <> "" Тогда
			Если РегламентноеЗадание = Неопределено Тогда
				РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(
					Новый УникальныйИдентификатор(Отбор.ИдентификаторРегламентногоЗадания));
			КонецЕсли;
			Если РегламентноеЗадание <> Неопределено Тогда
				РегламентныеЗаданияДляОбработки.Добавить(РегламентноеЗадание);
			КонецЕсли;
		КонецЕсли;
	Иначе
		РегламентныеЗаданияДляОбработки = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
	КонецЕсли;
	
	Таблица.Сортировать("Начало Убыв, Конец Убыв");
	
	// Отбор фоновых заданий.
	Если ЗначениеЗаполнено(Отбор) Тогда
		Начало    = Неопределено;
		Конец     = Неопределено;
		Состояние = Неопределено;
		Если Отбор.Свойство("Начало") Тогда
			Начало = ?(ЗначениеЗаполнено(Отбор.Начало), Отбор.Начало, Неопределено);
			Отбор.Удалить("Начало");
		КонецЕсли;
		Если Отбор.Свойство("Конец") Тогда
			Конец = ?(ЗначениеЗаполнено(Отбор.Конец), Отбор.Конец, Неопределено);
			Отбор.Удалить("Конец");
		КонецЕсли;
		Если Отбор.Свойство("Состояние") Тогда
			Если ТипЗнч(Отбор.Состояние) = Тип("Массив") Тогда
				Состояние = Отбор.Состояние;
				Отбор.Удалить("Состояние");
			КонецЕсли;
		КонецЕсли;
		
		Если Отбор.Количество() <> 0 Тогда
			Строки = Таблица.НайтиСтроки(Отбор);
		Иначе
			Строки = Таблица;
		КонецЕсли;
		// Выполнение дополнительного отбора по периоду и состоянию (если отбор определен).
		НомерЭлемента = Строки.Количество() - 1;
		Пока НомерЭлемента >= 0 Цикл
			Если Начало    <> Неопределено И Начало > Строки[НомерЭлемента].Начало
				Или Конец     <> Неопределено И Конец  < ?(ЗначениеЗаполнено(Строки[НомерЭлемента].Конец), Строки[НомерЭлемента].Конец, ТекущаяДатаСеанса())
				Или Состояние <> Неопределено И Состояние.Найти(Строки[НомерЭлемента].Состояние) = Неопределено Тогда
				Строки.Удалить(НомерЭлемента);
			КонецЕсли;
			НомерЭлемента = НомерЭлемента - 1;
		КонецЦикла;
		// Удаление лишних строк из таблицы.
		Если ТипЗнч(Строки) = Тип("Массив") Тогда
			НомерСтроки = Таблица.Количество() - 1;
			Пока НомерСтроки >= 0 Цикл
				Если Строки.Найти(Таблица[НомерСтроки]) = Неопределено Тогда
					Таблица.Удалить(Таблица[НомерСтроки]);
				КонецЕсли;
				НомерСтроки = НомерСтроки - 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

//// Возвращает свойства ФоновогоЗадания по строке уникального идентификатора.
////
//// Параметры:
////  Идентификатор - Строка - уникального идентификатора ФоновогоЗадания.
////  ИменаСвойств  - Строка, если заполнено, возвращается структура с указанными свойствами.
//// 
//// Возвращаемое значение:
////  СтрокаТаблицыЗначений, Структура - свойства ФоновогоЗадания.
////
Функция ПолучитьСвойстваФоновогоЗадания(Идентификатор, ИменаСвойств = "") Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура("Идентификатор", Идентификатор);
	ТаблицаСвойствФоновыхЗаданий = СвойстваФоновыхЗаданий(Отбор);
	
	Если ТаблицаСвойствФоновыхЗаданий.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(ИменаСвойств) Тогда
			Результат = Новый Структура(ИменаСвойств);
			ЗаполнитьЗначенияСвойств(Результат, ТаблицаСвойствФоновыхЗаданий[0]);
		Иначе
			Результат = ТаблицаСвойствФоновыхЗаданий[0];
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//// Возвращает свойства последнего фонового задания выполненного при выполнении регламентного задания, если оно есть.
//// Процедура работает, как в файл-серверном, так и в клиент-серверном режимах.
////
//// Параметры:
////  РегламентноеЗадание - РегламентноеЗадание, Строка - строка уникального идентификатора РегламентногоЗадания.
////
//// Возвращаемое значение:
////  СтрокаТаблицыЗначений, Неопределено.
////
Функция ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(РегламентноеЗадание) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторРегламентногоЗадания = ?(ТипЗнч(РегламентноеЗадание) = Тип("РегламентноеЗадание"), Строка(РегламентноеЗадание.УникальныйИдентификатор), РегламентноеЗадание);
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторРегламентногоЗадания", ИдентификаторРегламентногоЗадания);
	Отбор.Вставить("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания");
	ТаблицаСвойствФоновыхЗаданий = СвойстваФоновыхЗаданий(Отбор);
	ТаблицаСвойствФоновыхЗаданий.Сортировать("Конец Возр");
	
	Если ТаблицаСвойствФоновыхЗаданий.Количество() = 0 Тогда
		СвойстваФоновогоЗадания = Неопределено;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТаблицаСвойствФоновыхЗаданий[0].Конец) Тогда
		СвойстваФоновогоЗадания = ТаблицаСвойствФоновыхЗаданий[0];
	Иначе
		СвойстваФоновогоЗадания = ТаблицаСвойствФоновыхЗаданий[ТаблицаСвойствФоновыхЗаданий.Количество()-1];
	КонецЕсли;
	
	Возврат СвойстваФоновогоЗадания;
	
КонецФункции

//// Возвращает многострочную Строку содержащую Сообщения и ОписаниеИнформацииОбОшибке,
//// если фоновое задание найдено по идентификатору и сообщения/ошибки есть.
////
//// Параметры:
////  Задание      - Строка - УникальныйИдентификатор ФоновогоЗадания строкой.
////
//// Возвращаемое значение:
////  Строка.
////
Функция СообщенияИОписанияОшибокФоновогоЗадания(Идентификатор, СвойстваФоновогоЗадания = Неопределено) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	Если СвойстваФоновогоЗадания = Неопределено Тогда
		СвойстваФоновогоЗадания = ПолучитьСвойстваФоновогоЗадания(Идентификатор);
	КонецЕсли;
	
	Строка = "";
	Если СвойстваФоновогоЗадания <> Неопределено Тогда
		Для каждого Сообщение Из СвойстваФоновогоЗадания.СообщенияПользователю Цикл
			Строка = Строка + ?(Строка = "",
			                    "",
			                    "
			                    |
			                    |") + Сообщение.Текст;
		КонецЦикла;
		Если ЗначениеЗаполнено(СвойстваФоновогоЗадания.ОписаниеИнформацииОбОшибке) Тогда
			Строка = Строка + ?(Строка = "",
			                    СвойстваФоновогоЗадания.ОписаниеИнформацииОбОшибке,
			                    "
			                    |
			                    |" + СвойстваФоновогоЗадания.ОписаниеИнформацииОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
//// Вспомогательные процедуры и функции.

Процедура ИзменитьИспользованиеРегламентныхЗаданийПоФункциональнымОпциям(Источник, Знач Использование)
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(Источник);
	ХранениеФО = Метаданные.НайтиПоТипу(ТипИсточника);
	ФункциональнаяОпция = Неопределено;
	ЭтоПодчиненныйУзелРИБ = ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ();
	ЭтоАвтономноеРабочееМесто = ОбщегоНазначения.ЭтоАвтономноеРабочееМесто();
	
	ЗависимыеРегламентныеЗадания = РегламентныеЗаданияЗависимыеОтФункциональныхОпций();
	
	СписокФО = ЗависимыеРегламентныеЗадания.Скопировать(,"ФункциональнаяОпция");
	СписокФО.Свернуть("ФункциональнаяОпция");
	
	Для Каждого СтрокаФО Из СписокФО Цикл
		
		Если СтрокаФО.ФункциональнаяОпция = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаФО.ФункциональнаяОпция.Хранение = ХранениеФО Тогда
			ФункциональнаяОпция = СтрокаФО.ФункциональнаяОпция;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ФункциональнаяОпция = Неопределено
		Или ПолучитьФункциональнуюОпцию(ФункциональнаяОпция.Имя) = Использование Тогда
		Возврат;
	КонецЕсли;
	
	Задания = ЗависимыеРегламентныеЗадания.Скопировать(Новый Структура("ФункциональнаяОпция", ФункциональнаяОпция) ,"РегламентноеЗадание");
	Задания.Свернуть("РегламентноеЗадание");
	
	Для Каждого СтрокаЗадание Из Задания Цикл
		
		ИспользованиеПоФО                = Неопределено;
		ОтключитьЗадание                 = Истина;
		ОтключитьВПодчиненномУзлеРИБ     = Ложь;
		ОтключитьВАвтономномРабочемМесте = Ложь;
		
		НайденныеСтроки = ЗависимыеРегламентныеЗадания.НайтиСтроки(Новый Структура("РегламентноеЗадание", СтрокаЗадание.РегламентноеЗадание));
		
		Для Каждого СтрокаЗависимости Из НайденныеСтроки Цикл
			ОтключитьВПодчиненномУзлеРИБ = (СтрокаЗависимости.ДоступноВПодчиненномУзлеРИБ = Ложь) И ЭтоПодчиненныйУзелРИБ;
			ОтключитьВАвтономномРабочемМесте = (СтрокаЗависимости.ДоступноВАвтономномРабочемМесте = Ложь) И ЭтоАвтономноеРабочееМесто;
			Если ОтключитьВПодчиненномУзлеРИБ Или ОтключитьВАвтономномРабочемМесте Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаЗависимости.ФункциональнаяОпция = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаЗависимости.ФункциональнаяОпция = ФункциональнаяОпция Тогда
				ЗначениеФО = Использование;
			Иначе
				ЗначениеФО = ПолучитьФункциональнуюОпцию(СтрокаЗависимости.ФункциональнаяОпция.Имя);
			КонецЕсли;
			
			Если СтрокаЗависимости.ВключатьПриВключенииФункциональнойОпции = Ложь Тогда
				Если ОтключитьЗадание Тогда
					ОтключитьЗадание = Не ЗначениеФО;
				КонецЕсли;
				ЗначениеФО = Ложь;
			КонецЕсли;
			
			Если ИспользованиеПоФО = Неопределено Тогда
				ИспользованиеПоФО = ЗначениеФО;
			ИначеЕсли СтрокаЗависимости.ЗависимостьПоИ Тогда
				ИспользованиеПоФО = ИспользованиеПоФО И ЗначениеФО;
			Иначе
				ИспользованиеПоФО = ИспользованиеПоФО Или ЗначениеФО;
			КонецЕсли;
		КонецЦикла;
		
		Если ОтключитьВПодчиненномУзлеРИБ Или ОтключитьВАвтономномРабочемМесте Тогда
			Использование = Ложь;
		Иначе
			Если Использование <> ИспользованиеПоФО Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не Использование И Не ОтключитьЗадание Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(Новый Структура("Метаданные", СтрокаЗадание.РегламентноеЗадание));
		Для Каждого РегламентноеЗадание Из СписокЗаданий Цикл
			ПараметрыЗадания = Новый Структура("Использование", Использование);
			РегламентныеЗаданияСервер.ИзменитьЗадание(РегламентноеЗадание, ПараметрыЗадания);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//// Возвращает новую таблицу свойств фоновых заданий.
////
//// Возвращаемое значение:
////  ТаблицаЗначений.
////
Функция НовыеСвойстваФоновыхЗаданий()
	
	НоваяТаблица = Новый ТаблицаЗначений;
	НоваяТаблица.Колонки.Добавить("Идентификатор",                     Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Наименование",                      Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Ключ",                              Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Начало",                            Новый ОписаниеТипов("Дата"));
	НоваяТаблица.Колонки.Добавить("Конец",                             Новый ОписаниеТипов("Дата"));
	НоваяТаблица.Колонки.Добавить("ИдентификаторРегламентногоЗадания", Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Состояние",                         Новый ОписаниеТипов("СостояниеФоновогоЗадания"));
	НоваяТаблица.Колонки.Добавить("ИмяМетода",                         Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Расположение",                      Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("ОписаниеИнформацииОбОшибке",        Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("ПопыткаЗапуска",                    Новый ОписаниеТипов("Число"));
	НоваяТаблица.Колонки.Добавить("СообщенияПользователю",             Новый ОписаниеТипов("Массив"));
	НоваяТаблица.Колонки.Добавить("НомерСеанса",                       Новый ОписаниеТипов("Число"));
	НоваяТаблица.Колонки.Добавить("НачалоСеанса",                      Новый ОписаниеТипов("Дата"));
	НоваяТаблица.Индексы.Добавить("Идентификатор, Начало");
	
	Возврат НоваяТаблица;
	
КонецФункции

Процедура ДобавитьСвойстваФоновыхЗаданий(Знач МассивФоновыхЗаданий, Знач ТаблицаСвойствФоновыхЗаданий)
	
	Индекс = МассивФоновыхЗаданий.Количество() - 1;
	Пока Индекс >= 0 Цикл
		ФоновоеЗадание = МассивФоновыхЗаданий[Индекс];
		Строка = ТаблицаСвойствФоновыхЗаданий.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, ФоновоеЗадание);
		Строка.Идентификатор = ФоновоеЗадание.УникальныйИдентификатор;
		РегламентноеЗадание = ФоновоеЗадание.РегламентноеЗадание;
		
		Если РегламентноеЗадание = Неопределено
		   И СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ФоновоеЗадание.Ключ) Тогда
			
			РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ФоновоеЗадание.Ключ));
		КонецЕсли;
		Строка.ИдентификаторРегламентногоЗадания = ?(
			РегламентноеЗадание = Неопределено,
			"",
			РегламентноеЗадание.УникальныйИдентификатор);
		
		Строка.ОписаниеИнформацииОбОшибке = ?(
			ФоновоеЗадание.ИнформацияОбОшибке = Неопределено,
			"",
			ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке));
		
		Индекс = Индекс - 1;
	КонецЦикла;
	
КонецПроцедуры

Функция ПоследнееФоновоеЗаданиеВМассиве(МассивФоновыхЗаданий, ПоследнееФоновоеЗадание = Неопределено)
	
	Для каждого ТекущееФоновоеЗадание Из МассивФоновыхЗаданий Цикл
		Если ПоследнееФоновоеЗадание = Неопределено Тогда
			ПоследнееФоновоеЗадание = ТекущееФоновоеЗадание;
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПоследнееФоновоеЗадание.Конец) Тогда
			Если НЕ ЗначениеЗаполнено(ТекущееФоновоеЗадание.Конец)
			 ИЛИ ПоследнееФоновоеЗадание.Конец < ТекущееФоновоеЗадание.Конец Тогда
				ПоследнееФоновоеЗадание = ТекущееФоновоеЗадание;
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(ТекущееФоновоеЗадание.Конец)
			   И ПоследнееФоновоеЗадание.Начало < ТекущееФоновоеЗадание.Начало Тогда
				ПоследнееФоновоеЗадание = ТекущееФоновоеЗадание;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоследнееФоновоеЗадание;
	
КонецФункции

//#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// В локальном режиме работы возвращает регламентные задания, соответствующие отбору.
// В модели сервиса - таблицу значений, в которой содержится описание найденных заданий
// в справочниках ОчередьЗаданий (если не установлены разделители) или ОчередьЗаданийОбластейДанных.
//
// Параметры:
//  Отбор - Структура - со свойствами: 
//          1) Общие для любого режима работы:
//             * УникальныйИдентификатор - УникальныйИдентификатор - идентификатор регламентного задания в локальном
//                                         режиме работы или идентификатор ссылки задания очереди в модели сервиса.
//                                       - Строка - строка уникального идентификатора регламентного задания в локальном
//                                         режиме работы или идентификатор ссылки задания очереди в модели сервиса.
//                                       - СправочникСсылка.ОчередьЗаданий
//                                       - СправочникСсылка.ОчередьЗаданийОбластейДанных - идентификатор задания
//                                            очереди в модели сервиса.
//             * Метаданные              - ОбъектМетаданныхРегламентноеЗадание - метаданные регламентного задания.
//                                       - Строка - имя регламентного задания.
//             * Использование           - Булево - если Истина, задание включено.
//             * Ключ                    - Строка - прикладной идентификатор задания.
//          2) Возможные ключи только локального режима:
//             * Наименование            - Строка - наименование регламентного задания.
//             * Предопределенное        - Булево - если Истина, регламентное задание определено в метаданных.
//          3) Возможные ключи только для модели сервиса:
//             * ИмяМетода               - Строка - имя метода (или псевдоним) обработчика очереди задании.
//             * ОбластьДанных           - Число - значение разделителя области данных задания.
//             * СостояниеЗадания        - ПеречислениеСсылка.СостоянияЗаданий - состояние задания очереди.
//             * Шаблон                  - СправочникСсылка.ШаблоныЗаданийОчереди - шаблон задания, используется только
//                                            для разделенных заданий очереди.
//
// Возвращаемое значение:
//     Массив из РегламентноеЗадание - в локальном режиме работы массив регламентных заданий.
//     ТаблицаЗначений - в модели сервиса с колонками:
//        * Использование                - Булево - если Истина, задание включено.
//        * Ключ                         - Строка - прикладной идентификатор задания.
//        * Параметры                    - Массив - параметры, передаваемые в обработчик задания.
//        * Расписание                   - РасписаниеРегламентногоЗадания - расписание задания.
//        * УникальныйИдентификатор      - СправочникСсылка.ОчередьЗаданий
//                                       - СправочникСсылка.ОчередьЗаданийОбластейДанных - идентификатор задания
//                                            очереди в модели сервиса.
//        * ЗапланированныйМоментЗапуска - Дата - дата и время запланированного запуска задания
//                                         (в часовом поясе области данных).
//        * ИмяМетода                    - Строка - имя метода (или псевдоним) обработчика очереди задании.
//        * ОбластьДанных                - Число - значение разделителя области данных задания.
//        * СостояниеЗадания             - ПеречислениеСсылка.СостоянияЗаданий - состояние задания очереди.
//        * Шаблон                       - СправочникСсылка.ШаблоныЗаданийОчереди - шаблон задания,
//                                            используется только для разделенных заданий очереди.
//        * ЭксклюзивноеВыполнение       - Булево - при установленном флаге задание будет выполнено 
//                                                  даже при установленной блокировке начала сеансов в области
//                                                  данных. Так же если в области есть задания с таким флагом
//                                                  сначала будут выполнены они.
//        * ИнтервалПовтораПриАварийномЗавершении - Число - интервал в секундах, через который нужно перезапускать
//                                                          задание в случае его аварийного завершения.
//        * КоличествоПовторовПриАварийномЗавершении - Число - количество повторов при аварийном завершении задания.
//
Функция НайтиЗадания(Отбор) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	КопияОтбора = ОбщегоНазначения.СкопироватьРекурсивно(Отбор); // см. НайтиЗадания.Отбор
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ОчередьЗаданий") Тогда
			
			Если КопияОтбора.Свойство("УникальныйИдентификатор") И НЕ КопияОтбора.Свойство("Идентификатор") Тогда
				КопияОтбора.Вставить("Идентификатор", КопияОтбора.УникальныйИдентификатор);
				КопияОтбора.Удалить("УникальныйИдентификатор");
			КонецЕсли;
			
			Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
				ОбластьДанных = МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
				КопияОтбора.Вставить("ОбластьДанных", ОбластьДанных);
			КонецЕсли;
			
			МодульОчередьЗаданий  = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
			ШаблоныЗаданийОчереди = МодульОчередьЗаданий.ШаблоныЗаданийОчереди();
			
			Если КопияОтбора.Свойство("Метаданные") Тогда
				Если ТипЗнч(КопияОтбора.Метаданные) = Тип("ОбъектМетаданных") Тогда
					Если ШаблоныЗаданийОчереди.Найти(КопияОтбора.Метаданные.Имя) <> Неопределено Тогда
						УстановитьПривилегированныйРежим(Истина);
						Шаблон = МодульОчередьЗаданий.ШаблонПоИмени(КопияОтбора.Метаданные.Имя);
						УстановитьПривилегированныйРежим(Ложь);
						КопияОтбора.Вставить("Шаблон", Шаблон);
					Иначе
						КопияОтбора.Вставить("ИмяМетода", КопияОтбора.Метаданные.ИмяМетода);
					КонецЕсли;
				Иначе
					МетаданныеРегламентноеЗадание = Метаданные.РегламентныеЗадания.Найти(КопияОтбора.Метаданные);
					Если МетаданныеРегламентноеЗадание <> Неопределено Тогда
						Если ШаблоныЗаданийОчереди.Найти(МетаданныеРегламентноеЗадание.Имя) <> Неопределено Тогда
							УстановитьПривилегированныйРежим(Истина);
							Шаблон = МодульОчередьЗаданий.ШаблонПоИмени(МетаданныеРегламентноеЗадание.Имя);
							УстановитьПривилегированныйРежим(Ложь);
							КопияОтбора.Вставить("Шаблон", Шаблон);
						Иначе
							КопияОтбора.Вставить("ИмяМетода", МетаданныеРегламентноеЗадание.ИмяМетода);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли КопияОтбора.Свойство("Идентификатор")
				И (ТипЗнч(КопияОтбора.Идентификатор) = Тип("УникальныйИдентификатор")
				ИЛИ ТипЗнч(КопияОтбора.Идентификатор) = Тип("Строка")) Тогда
				
				Если ТипЗнч(КопияОтбора.Идентификатор) = Тип("Строка") Тогда
					КопияОтбора.Идентификатор = Новый УникальныйИдентификатор(КопияОтбора.Идентификатор);
				КонецЕсли;
				
				КопияОтбора.Вставить("Идентификатор", СсылкаЗаданияОчереди(КопияОтбора.Идентификатор, КопияОтбора));
			КонецЕсли;
			
			КопияОтбора.Удалить("Метаданные");
			Возврат УточненныйСписокЗаданий(МодульОчередьЗаданий.ПолучитьЗадания(КопияОтбора));
			
		КонецЕсли;
	Иначе
		
		СписокЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(КопияОтбора);
		
		Возврат СписокЗаданий;
		
	КонецЕсли;
	
КонецФункции

// Возвращает задание из очереди или регламентное.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                                     предопределенного регламентного задания.
//                - Строка - имя метаданных предопределенного регламентного задания в любом режиме работы
//                           или строка уникального идентификатора регламентного задания в локальном режиме работы
//                           или строка уникального идентификатора ссылки задания очереди в модели сервиса.
//                - УникальныйИдентификатор - идентификатор регламентного задания в локальном режиме работы
//                           или идентификатор ссылки задания очереди в модели сервиса.
//                - РегламентноеЗадание - регламентное задание из которого нужно получить уникальный идентификатор
//                           для получения свежей копии регламентного задания в локальном режиме работы.
//                - СправочникСсылка.ОчередьЗаданий
//                - СправочникСсылка.ОчередьЗаданийОбластейДанных - идентификатор задания очереди в модели сервиса.
//                - СтрокаТаблицыЗначений: см. НайтиЗадания
// 
// Возвращаемое значение:
//  РегламентноеЗадание - в локальном режиме работы.
//  СтрокаТаблицыЗначений: см. НайтиЗадания
//  Неопределено - задание не найдено.
//
Функция Задание(Знач Идентификатор) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	Идентификатор = УточненныйИдентификаторЗадания(Идентификатор);
	РегламентноеЗадание = Неопределено;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ОчередьЗаданий") Тогда
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
			
			ПараметрыЗадания = Новый Структура;
			Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
				ОбластьДанных = МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
				ПараметрыЗадания.Вставить("ОбластьДанных", ОбластьДанных);
			КонецЕсли;
			
			МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
			
			Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") Тогда
				Если Идентификатор.Предопределенное Тогда
					УстановитьПривилегированныйРежим(Истина);
					ПараметрыЗадания.Вставить("Шаблон", МодульОчередьЗаданий.ШаблонПоИмени(Идентификатор.Имя));
					УстановитьПривилегированныйРежим(Ложь);
				Иначе
					ПараметрыЗадания.Вставить("ИмяМетода", Идентификатор.ИмяМетода);
				КонецЕсли; 
			ИначеЕсли ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
				ПараметрыЗадания.Вставить("Идентификатор", СсылкаЗаданияОчереди(Идентификатор, ПараметрыЗадания));
				
			ИначеЕсли ТипЗнч(Идентификатор) = Тип("СтрокаТаблицыЗначений") Тогда
				ПараметрыЗадания.Вставить("Идентификатор", Идентификатор.Идентификатор);
			Иначе
				ПараметрыЗадания.Вставить("Идентификатор", Идентификатор);
			КонецЕсли;
			
			СписокЗаданий = УточненныйСписокЗаданий(МодульОчередьЗаданий.ПолучитьЗадания(ПараметрыЗадания));
			Для Каждого Задание Из СписокЗаданий Цикл
				РегламентноеЗадание = Задание;
				Прервать;
			КонецЦикла;
		КонецЕсли;
	Иначе
		
		Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") Тогда
			Если Идентификатор.Предопределенное Тогда
				РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Идентификатор);
			Иначе
				СписокЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", Идентификатор));
				Если СписокЗаданий.Количество() > 0 Тогда
					РегламентноеЗадание = СписокЗаданий[0];
				КонецЕсли;
			КонецЕсли; 
		Иначе
			РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РегламентноеЗадание;
	
КонецФункции

// Добавляет новое задание в очередь или регламентное.
// 
// Параметры: 
//  Параметры - Структура - параметры добавляемого задания, возможные свойства:
//   * Использование - Булево - Истина, если регламентное задание должно выполняться автоматически согласно расписанию. 
//   * Метаданные    - ОбъектМетаданныхРегламентноеЗадание - обязательно для указания. Объект метаданных, на основе 
//                              которого будет создано регламентное задание.
//   * Параметры     - Массив - параметры регламентного задания. Количество и состав параметров должны соответствовать 
//                              параметрам метода регламентного задания.
//   * Ключ          - Строка - прикладной идентификатор регламентного задания.
//   * ИнтервалПовтораПриАварийномЗавершении - Число - интервал в секундах, через который нужно перезапускать задание 
//                              в случае его аварийного завершения.
//   * Расписание    - РасписаниеРегламентногоЗадания - расписание задания.
//   * КоличествоПовторовПриАварийномЗавершении - Число - количество повторов при аварийном завершении задания.
//
// Возвращаемое значение:
//  РегламентноеЗадание - в локальном режиме работы.
//  СтрокаТаблицыЗначений: см. НайтиЗадания
// 
Функция ДобавитьЗадание(Параметры) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ОчередьЗаданий") Тогда
			
			ПараметрыЗадания = ОбщегоНазначения.СкопироватьРекурсивно(Параметры);
			
			Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
				МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
				ОбластьДанных = МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
				ПараметрыЗадания.Вставить("ОбластьДанных", ОбластьДанных);
			КонецЕсли;
			
			МетаданныеЗадания = ПараметрыЗадания.Метаданные;
			ИмяМетода = МетаданныеЗадания.ИмяМетода;
			ПараметрыЗадания.Вставить("ИмяМетода", ИмяМетода);
			
			ПараметрыЗадания.Удалить("Метаданные");
			ПараметрыЗадания.Удалить("Наименование");
			
			МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
			Задание = МодульОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
			Отбор = Новый Структура("Идентификатор", Задание);
			СписокЗаданий = УточненныйСписокЗаданий(МодульОчередьЗаданий.ПолучитьЗадания(Отбор));
			Для Каждого Задание Из СписокЗаданий Цикл
				Возврат Задание;
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		Задание = ДобавитьРегламентноеЗадание(Параметры);
	КонецЕсли;
	
	Возврат Задание;
	
КонецФункции

// Удаляет задание из очереди или регламентное.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                                     непредопределенного регламентного задания.
//                - Строка - имя метаданных предопределенного регламентного задания в любом режиме работы
//                           или строка уникального идентификатора регламентного задания в локальном режиме работы
//                           или строка уникального идентификатора ссылки задания очереди в модели сервиса.
//                - УникальныйИдентификатор - идентификатор регламентного задания в локальном режиме работы.
//                           или идентификатор ссылки задания очереди в модели сервиса.
//                - РегламентноеЗадание - регламентное задание, уникальный идентификатор которого используется 
//                  для определения удаляемого экземпляра регламентного задания в локальном режиме работы.
//                - СправочникСсылка.ОчередьЗаданий
//                - СправочникСсылка.ОчередьЗаданийОбластейДанных - идентификатор задания очереди в модели сервиса.
//                - СтрокаТаблицыЗначений: см. НайтиЗадания
//
Процедура УдалитьЗадание(Знач Идентификатор) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	Идентификатор = УточненныйИдентификаторЗадания(Идентификатор);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ОчередьЗаданий") Тогда
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
			
			ПараметрыЗадания = Новый Структура;
			Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
				ОбластьДанных = МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
				ПараметрыЗадания.Вставить("ОбластьДанных", ОбластьДанных);
			КонецЕсли;
			
			Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") Тогда
				ИмяМетода = Идентификатор.ИмяМетода;
				ПараметрыЗадания.Вставить("ИмяМетода", ИмяМетода);
				
			ИначеЕсли ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
				ПараметрыЗадания.Вставить("Идентификатор", СсылкаЗаданияОчереди(Идентификатор, ПараметрыЗадания));
				
			ИначеЕсли ТипЗнч(Идентификатор) = Тип("СтрокаТаблицыЗначений") Тогда
				
				МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
				МодульОчередьЗаданий.УдалитьЗадание(Идентификатор.Идентификатор);
				Возврат;
				
			Иначе
				ПараметрыЗадания.Вставить("Идентификатор", Идентификатор);
			КонецЕсли;
			
			МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
			СписокЗаданий = МодульОчередьЗаданий.ПолучитьЗадания(ПараметрыЗадания);
			Для Каждого Задание Из СписокЗаданий Цикл
				МодульОчередьЗаданий.УдалитьЗадание(Задание.Идентификатор);
			КонецЦикла;
		КонецЕсли;
	Иначе
		УдалитьРегламентноеЗадание(Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Изменяет задание очереди или регламентное.
//
// В модели сервиса (разделение включено):
// - в случае вызова в транзакции на задание устанавливается объектная блокировка,
// - если задание создано на основе шаблона или предопределенное, может быть указано
// только свойство Использование в параметре Параметры. Расписание в этом случае,
// изменять нельзя, т.к. оно хранится централизованно в неразделенном Шаблоне задания,
// отдельно для каждой области оно не сохраняется.
// 
// Параметры: 
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                                     непредопределенного регламентного задания.
//                - Строка - имя метаданных предопределенного регламентного задания в любом режиме работы
//                           или строка уникального идентификатора регламентного задания в локальном режиме работы
//                           или строка уникального идентификатора ссылки задания очереди в модели сервиса.
//                - УникальныйИдентификатор - идентификатор регламентного задания в локальном режиме работы
//                           или идентификатор ссылки задания очереди в модели сервиса.
//                - РегламентноеЗадание - регламентное задание в локальном режиме работы.
//                - СправочникСсылка.ОчередьЗаданий
//                - СправочникСсылка.ОчередьЗаданийОбластейДанных - идентификатор задания очереди в модели сервиса.
//                - СтрокаТаблицыЗначений: см. НайтиЗадания
//
//  Параметры - Структура - параметры, которые следует установить заданию, возможные свойства:
//   * Использование - Булево - Истина, если регламентное задание должно выполняться автоматически согласно расписанию.
//   * Параметры     - Массив - параметры регламентного задания. Количество и состав параметров должны соответствовать
//                              параметрам метода регламентного задания.
//   * Ключ          - Строка - прикладной идентификатор регламентного задания.
//   * ИнтервалПовтораПриАварийномЗавершении - Число - интервал в секундах, через который нужно перезапускать задание
//                              в случае его аварийного завершения.
//   * Расписание    - РасписаниеРегламентногоЗадания - расписание задания.
//   * КоличествоПовторовПриАварийномЗавершении - Число - количество повторов при аварийном завершении задания.
//   
Процедура ИзменитьЗадание(Знач Идентификатор, Знач Параметры) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	Идентификатор = УточненныйИдентификаторЗадания(Идентификатор);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ОчередьЗаданий") Тогда
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
			
			ПараметрыЗадания = ОбщегоНазначения.СкопироватьРекурсивно(Параметры);
			ПараметрыПоиска = Новый Структура;
			
			ПараметрыЗадания.Удалить("Наименование");
			Если ПараметрыЗадания.Количество() = 0 Тогда
				Возврат;
			КонецЕсли; 
			
			Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
				ОбластьДанных = МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
				ПараметрыПоиска.Вставить("ОбластьДанных", ОбластьДанных);
			КонецЕсли;
			
			Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") Тогда
				ИмяМетода = Идентификатор.ИмяМетода;
				ПараметрыПоиска.Вставить("ИмяМетода", ИмяМетода);
				
				// Если рег.задание предопределенное и есть шаблон очереди - можно изменять только "Использование".
				Если Идентификатор.Предопределенное Тогда
					
					МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
					Шаблоны = МодульОчередьЗаданий.ШаблоныЗаданийОчереди();
					
					Если Шаблоны.Найти(Идентификатор.Имя) <> Неопределено 
						И (ПараметрыЗадания.Количество() > 1 
						ИЛИ НЕ ПараметрыЗадания.Свойство("Использование")) Тогда
						
						Для каждого ПараметрЗадания Из ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗадания) Цикл
							
							Если ПараметрЗадания.Ключ = "Использование" Тогда
								Продолжить;
							КонецЕсли;
							
							ПараметрыЗадания.Удалить(ПараметрЗадания.Ключ);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
				ПараметрыПоиска.Вставить("Идентификатор", СсылкаЗаданияОчереди(Идентификатор, ПараметрыЗадания));
				
			ИначеЕсли ТипЗнч(Идентификатор) = Тип("СтрокаТаблицыЗначений") Тогда
				
				Если ЗначениеЗаполнено(Идентификатор.Шаблон)
					И (ПараметрыЗадания.Количество() > 1 
					ИЛИ НЕ ПараметрыЗадания.Свойство("Использование")) Тогда
					
					Для Каждого ПараметрЗадания Из ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗадания) Цикл
						
						Если ПараметрЗадания.Ключ = "Использование" Тогда
							Продолжить;
						КонецЕсли;
						
						ПараметрыЗадания.Удалить(ПараметрЗадания.Ключ);
					КонецЦикла;
				КонецЕсли;
				
				Если ПараметрыЗадания.Количество() = 0 Тогда
					Возврат;
				КонецЕсли;
				
				МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
				МодульОчередьЗаданий.ИзменитьЗадание(Идентификатор.Идентификатор, ПараметрыЗадания);
				Возврат;
				
			Иначе
				ПараметрыПоиска.Вставить("Идентификатор", Идентификатор);
			КонецЕсли;
			
			Если ПараметрыЗадания.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
			СписокЗаданий = МодульОчередьЗаданий.ПолучитьЗадания(ПараметрыПоиска);
			Для Каждого Задание Из СписокЗаданий Цикл
				МодульОчередьЗаданий.ИзменитьЗадание(Задание.Идентификатор, ПараметрыЗадания);
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		ИзменитьРегламентноеЗадание(Идентификатор, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает уникальный идентификатор задания из очереди или регламентного.
// Для вызова требуются права администрирования или УстановитьПривилегированныйРежим.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                                     регламентного задания.
//                - Строка - строка уникального идентификатора регламентного задания
//                           или идентификатора ссылки задания очереди в модели сервиса.
//                - УникальныйИдентификатор - идентификатор регламентного задания в локальном режиме работы
//                           или идентификатор ссылки задания очереди в модели сервиса.
//                - РегламентноеЗадание - регламентное задание.
//
// Возвращаемое значение:
//  УникальныйИдентификатор - идентификатор регламентного задания в локальном режиме работы
//                            или идентификатор ссылки задания очереди в модели сервиса.
// 
Функция УникальныйИдентификатор(Знач Идентификатор) Экспорт
	
	Возврат УникальныйИдентификаторЗадания(Идентификатор, Истина);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции без поддержки заданий очереди в модели сервиса.

// Возвращает использование регламентного задания.
// Перед вызовом требуется иметь право администрирования или УстановитьПривилегированныйРежим.
//
// В модели сервиса работает с регламентными заданиями платформы, а не с заданиями очереди,
// одинаково как в разделенном, так и в неразделенном режимах.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                  предопределенного регламентного задания.
//                - УникальныйИдентификатор - идентификатор регламентного задания.
//                - Строка - строка уникального идентификатора регламентного задания.
//                - РегламентноеЗадание - регламентное задание.
//
// Возвращаемое значение:
//  Булево - Истина, если регламентное задание используется.
// 
Функция РегламентноеЗаданиеИспользуется(Знач Идентификатор) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	Задание = ПолучитьРегламентноеЗадание(Идентификатор);
	
	Возврат Задание.Использование;
	
КонецФункции

// Возвращает расписание регламентного задания.
// Перед вызовом требуется иметь право администрирования или УстановитьПривилегированныйРежим.
//
// В модели сервиса работает с регламентными заданиями платформы, а не с заданиями очереди,
// одинаково как в разделенном, так и в неразделенном режимах.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                  предопределенного регламентного задания.
//                - УникальныйИдентификатор - идентификатор регламентного задания.
//                - Строка - строка уникального идентификатора регламентного задания.
//                - РегламентноеЗадание - регламентное задание.
//
//  ВСтруктуре    - Булево - если Истина, тогда расписание будет преобразовано
//                  в структуру, которую можно передать на клиент.
// 
// Возвращаемое значение:
//  РасписаниеРегламентногоЗадания, Структура - структура содержит те же свойства, что и расписание.
// 
Функция РасписаниеРегламентногоЗадания(Знач Идентификатор, Знач ВСтруктуре = Ложь) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	Задание = ПолучитьРегламентноеЗадание(Идентификатор);
	
	Если ВСтруктуре Тогда
		Возврат ОбщегоНазначенияКлиентСервер.РасписаниеВСтруктуру(Задание.Расписание);
	КонецЕсли;
	
	Возврат Задание.Расписание;
	
КонецФункции

// Устанавливает использование регламентного задания.
// Перед вызовом требуется иметь право администрирования или УстановитьПривилегированныйРежим.
//
// В модели сервиса работает с регламентными заданиями платформы, а не с заданиями очереди,
// одинаково как в разделенном, так и в неразделенном режимах.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных        - объект метаданных регламентного задания для поиска
//                                            предопределенного регламентного задания.
//                - УникальныйИдентификатор - идентификатор регламентного задания.
//                - Строка                  - строка уникального идентификатора регламентного задания.
//                - РегламентноеЗадание     - регламентное задание.
//  Использование - Булево                  - значение использования которое нужно установить.
//
Процедура УстановитьИспользованиеРегламентногоЗадания(Знач Идентификатор, Знач Использование) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	ИдентификаторЗадания = УникальныйИдентификаторЗадания(Идентификатор);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КэшПрограммныхИнтерфейсов");
	ЭлементБлокировки.УстановитьЗначение("Идентификатор", Строка(ИдентификаторЗадания));
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Задание = ПолучитьРегламентноеЗадание(ИдентификаторЗадания);
		
		Если Задание.Использование <> Использование Тогда
			Задание.Использование = Использование;
			Задание.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Устанавливает расписание регламентного задания.
// Перед вызовом требуется иметь право администрирования или УстановитьПривилегированныйРежим.
//
// В модели сервиса работает с регламентными заданиями платформы, а не с заданиями очереди,
// одинаково как в разделенном, так и в неразделенном режимах.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                  предопределенного регламентного задания.
//                - УникальныйИдентификатор - идентификатор регламентного задания.
//                - Строка - строка уникального идентификатора регламентного задания.
//                - РегламентноеЗадание - регламентное задание.
//
//  Расписание    - РасписаниеРегламентногоЗадания - расписание.
//                - Структура - значение возвращаемое функцией РасписаниеВСтруктуру
//                  общего модуля ОбщегоНазначенияКлиентСервер.
// 
Процедура УстановитьРасписаниеРегламентногоЗадания(Знач Идентификатор, Знач Расписание) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	ИдентификаторЗадания = УникальныйИдентификаторЗадания(Идентификатор);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КэшПрограммныхИнтерфейсов");
	ЭлементБлокировки.УстановитьЗначение("Идентификатор", Строка(ИдентификаторЗадания));
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Задание = ПолучитьРегламентноеЗадание(ИдентификаторЗадания);
		
		Если ТипЗнч(Расписание) = Тип("РасписаниеРегламентногоЗадания") Тогда
			Задание.Расписание = Расписание;
		Иначе
			Задание.Расписание = ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(Расписание);
		КонецЕсли;
		
		Задание.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает РегламентноеЗадание из информационной базы.
//
// В модели сервиса работает с регламентными заданиями платформы, а не с заданиями очереди,
// одинаково как в разделенном, так и в неразделенном режимах.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                  предопределенного регламентного задания.
//                - УникальныйИдентификатор - идентификатор регламентного задания.
//                - Строка - строка уникального идентификатора регламентного задания.
//                - РегламентноеЗадание - регламентное задание из которого нужно получить
//                  уникальный идентификатор для получения свежей копии регламентного задания.
// 
// Возвращаемое значение:
//  РегламентноеЗадание - прочитано из базы данных.
//
Функция ПолучитьРегламентноеЗадание(Знач Идентификатор) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	Если ТипЗнч(Идентификатор) = Тип("РегламентноеЗадание") Тогда
		Идентификатор = Идентификатор.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") Тогда
		РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Идентификатор);
	Иначе
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	КонецЕсли;
	
	Если РегламентноеЗадание = Неопределено Тогда
		ВызватьИсключение( НСтр("ru = 'Регламентное задание не существует.
		                              |Возможно оно удалено другим пользователем.'") );
	КонецЕсли;
	
	Возврат РегламентноеЗадание;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции.

// Возвращает признак установленной блокировки работы с внешними ресурсами.
//
// Возвращаемое значение:
//   Булево   - Истина, если работа с внешними ресурсами заблокирована.
//
Функция РаботаСВнешнимиРесурсамиЗаблокирована() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РегламентныеЗадания") Тогда
		МодульБлокировкаРаботыСВнешнимиРесурсами = ОбщегоНазначения.ОбщийМодуль("БлокировкаРаботыСВнешнимиРесурсами");
		Возврат МодульБлокировкаРаботыСВнешнимиРесурсами.РаботаСВнешнимиРесурсамиЗаблокирована();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Разрешает работу с внешними ресурсами.
//
Процедура РазблокироватьРаботуСВнешнимиРесурсами() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РегламентныеЗадания") Тогда
		МодульБлокировкаРаботыСВнешнимиРесурсами = ОбщегоНазначения.ОбщийМодуль("БлокировкаРаботыСВнешнимиРесурсами");
		МодульБлокировкаРаботыСВнешнимиРесурсами.РазрешитьРаботуСВнешнимиРесурсами();
	КонецЕсли;
	
КонецПроцедуры

// Запрещает работу с внешними ресурсами.
//
Процедура ЗаблокироватьРаботуСВнешнимиРесурсами() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РегламентныеЗадания") Тогда
		МодульБлокировкаРаботыСВнешнимиРесурсами = ОбщегоНазначения.ОбщийМодуль("БлокировкаРаботыСВнешнимиРесурсами");
		МодульБлокировкаРаботыСВнешнимиРесурсами.ЗапретитьРаботуСВнешнимиРесурсами();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Устанавливает требуемые значения параметров регламентного задания.
// В модели сервиса для задания, созданного на основе шаблона очереди заданий,
// может быть изменено только значение свойства Использование.
//
// Параметры:
//  РегламентноеЗадание - ОбъектМетаданныхРегламентноеЗадание - задание, свойства которого
//                        требуется изменить.
//  ИзменяемыеПараметры - Структура - свойства регламентного задания, которые требуется изменить.
//                        Ключ структуры - имя параметра, а значение - значение параметра формы.
//  Отбор               - см. НайтиЗадания.Отбор.
//
Процедура УстановитьПараметрыРегламентногоЗадания(РегламентноеЗадание, ИзменяемыеПараметры, Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
	КонецЕсли;
	Отбор.Вставить("Метаданные", РегламентноеЗадание);
	
	СписокЗаданий = НайтиЗадания(Отбор);
	Если СписокЗаданий.Количество() = 0 Тогда
		ИзменяемыеПараметры.Вставить("Метаданные", РегламентноеЗадание);
		ДобавитьЗадание(ИзменяемыеПараметры);
	Иначе
		Для Каждого Задание Из СписокЗаданий Цикл
			ИзменитьЗадание(Задание, ИзменяемыеПараметры);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Устанавливает использование предопределенного регламентного задания.
//
// Параметры:
//  ЗаданиеМетаданные - ОбъектМетаданных - метаданные предопределенного регламентного задания.
//  Использование     - Булево - Истина, если задание нужно включить, иначе Ложь.
//
Процедура УстановитьИспользованиеПредопределенногоРегламентногоЗадания(ЗаданиеМетаданные, Использование) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Отбор     = Новый Структура;
		Отбор.Вставить("Метаданные", ЗаданиеМетаданные);
		Параметры = Новый Структура;
		Параметры.Вставить("Использование", Истина);
		Задания = НайтиЗадания(Отбор);
		Для Каждого Задание Из Задания Цикл
			ИзменитьЗадание(Задание.УникальныйИдентификатор, Параметры);
			Прервать;
		КонецЦикла;
	Иначе
		ИдентификаторЗадания = УникальныйИдентификаторЗадания(ЗаданиеМетаданные);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КэшПрограммныхИнтерфейсов");
		ЭлементБлокировки.УстановитьЗначение("Идентификатор", Строка(ИдентификаторЗадания));
		
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
			
			Если Задание.Использование <> Использование Тогда
				Задание.Использование = Использование;
				Задание.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Отменяет выполнение фоновых заданий для регламентного задания
// и делает запись в журнал регистрации.
//
Процедура ОтменитьВыполнениеЗадания(Знач РегламентноеЗадание, ТекстДляЖурнала) Экспорт
	
	ТекущийСеанс = ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
	Если ТекущийСеанс = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РегламентноеЗадание = Неопределено Тогда
		Для Каждого Задание Из Метаданные.РегламентныеЗадания Цикл
			Если Задание.ИмяМетода = ТекущийСеанс.ИмяМетода Тогда
				РегламентноеЗадание = Задание;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если РегламентноеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСобытия = НСтр("ru = 'Отмена фонового задания'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ЗаписьЖурналаРегистрации(ИмяСобытия,
		УровеньЖурналаРегистрации.Предупреждение,
		РегламентноеЗадание,
		,
		ТекстДляЖурнала);
	
	ТекущийСеанс.Отменить();
	ТекущийСеанс.ОжидатьЗавершенияВыполнения(1);
	
КонецПроцедуры

Функция ПараметрРегламентногоЗадания(РегламентноеЗадание, ИмяСвойства, ЗначениеПоУмолчанию) Экспорт
	
	ПараметрыЗадания = Новый Структура;
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ПараметрыЗадания.Вставить("ИмяМетода", РегламентноеЗадание.ИмяМетода);
	Иначе
		ПараметрыЗадания.Вставить("Метаданные", РегламентноеЗадание);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = НайтиЗадания(ПараметрыЗадания);
	Для Каждого Задание Из СписокЗаданий Цикл
		Возврат Задание[ИмяСвойства];
	КонецЦикла;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

// Устанавливает исключительную управляемую блокировку для записи регламентных заданий.
//  Технически, блокировка устанавливается на регистр сведений КэшПрограммныхИнтерфейсов.
//
// Параметры:
//  Идентификатор - УникальныйИдентификатор - идентификатор регламентного задания.
//
Процедура ЗаблокироватьРегламентноеЗадание(Идентификатор) Экспорт 
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КэшПрограммныхИнтерфейсов");
	ЭлементБлокировки.УстановитьЗначение("Идентификатор", Строка(Идентификатор));
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Добавляет новое регламентное задание (без учета очереди заданий модели сервиса).
// 
// Параметры: 
//  Параметры - Структура - параметры добавляемого задания, возможные свойства:
//   * Использование - Булево - Истина, если регламентное задание должно выполняться автоматически согласно расписанию. 
//   * Метаданные    - ОбъектМетаданныхРегламентноеЗадание - обязательно для указания. Объект метаданных, на основе 
//                              которого будет создано регламентное задание.
//   * Параметры     - Массив - параметры регламентного задания. Количество и состав параметров должны соответствовать 
//                              параметрам метода регламентного задания.
//   * Ключ          - Строка - прикладной идентификатор регламентного задания.
//   * ИнтервалПовтораПриАварийномЗавершении - Число - интервал в секундах, через который нужно перезапускать задание 
//                              в случае его аварийного завершения.
//   * Расписание    - РасписаниеРегламентногоЗадания - расписание задания.
//   * КоличествоПовторовПриАварийномЗавершении - Число - количество повторов при аварийном завершении задания.
//
// Возвращаемое значение:
//  РегламентноеЗадание
//
Функция ДобавитьРегламентноеЗадание(Параметры) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	МетаданныеЗадания = Параметры.Метаданные;
	Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(МетаданныеЗадания);
	
	Если Параметры.Свойство("Наименование") Тогда
		Задание.Наименование = Параметры.Наименование;
	Иначе
		Задание.Наименование = МетаданныеЗадания.Наименование;
	КонецЕсли;
	
	Если Параметры.Свойство("Использование") Тогда
		Задание.Использование = Параметры.Использование;
	Иначе
		Задание.Использование = МетаданныеЗадания.Использование;
	КонецЕсли;
	
	Если Параметры.Свойство("Ключ") Тогда
		Задание.Ключ = Параметры.Ключ;
	Иначе
		Задание.Ключ = МетаданныеЗадания.Ключ;
	КонецЕсли;
	
	Если Параметры.Свойство("ИмяПользователя") Тогда
		Задание.ИмяПользователя = Параметры.ИмяПользователя;
	КонецЕсли;
	
	Если Параметры.Свойство("ИнтервалПовтораПриАварийномЗавершении") Тогда
		Задание.ИнтервалПовтораПриАварийномЗавершении = Параметры.ИнтервалПовтораПриАварийномЗавершении;
	Иначе
		Задание.ИнтервалПовтораПриАварийномЗавершении = МетаданныеЗадания.ИнтервалПовтораПриАварийномЗавершении;
	КонецЕсли;
	
	Если Параметры.Свойство("КоличествоПовторовПриАварийномЗавершении") Тогда
		Задание.КоличествоПовторовПриАварийномЗавершении = Параметры.КоличествоПовторовПриАварийномЗавершении;
	Иначе
		Задание.КоличествоПовторовПриАварийномЗавершении = МетаданныеЗадания.КоличествоПовторовПриАварийномЗавершении;
	КонецЕсли;
	
	Если Параметры.Свойство("Параметры") Тогда
		Задание.Параметры = Параметры.Параметры;
	КонецЕсли;
	
	Если Параметры.Свойство("Расписание") Тогда
		Задание.Расписание = Параметры.Расписание;
	КонецЕсли;
	
	Задание.Записать();
	
	Возврат Задание;
	
КонецФункции

// Удаляет регламентное задание (без учета очереди заданий модели сервиса).
//
// Параметры:
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                                     непредопределенного регламентного задания.
//                - Строка - имя метаданных предопределенного регламентного задания
//                           или строка уникального идентификатора регламентного задания.
//                - УникальныйИдентификатор - идентификатор регламентного задания.
//                - РегламентноеЗадание - регламентное задание, уникальный идентификатор которого используется 
//                  для определения удаляемого экземпляра регламентного задания.
//
Процедура УдалитьРегламентноеЗадание(Знач Идентификатор) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	Идентификатор = УточненныйИдентификаторЗадания(Идентификатор);
	
	СписокЗаданий = Новый Массив; // Массив из РегламентноеЗадание.
	
	Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") И Идентификатор.Предопределенное Тогда
		ВызватьИсключение( НСтр("ru = 'Предопределенное регламентное задание удалить невозможно.'") );
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") И Не Идентификатор.Предопределенное Тогда
		СписокЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", Идентификатор));
	Иначе
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
		Если РегламентноеЗадание <> Неопределено Тогда
			СписокЗаданий.Добавить(РегламентноеЗадание);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого РегламентноеЗадание Из СписокЗаданий Цикл
		ИдентификаторЗадания = УникальныйИдентификаторЗадания(РегламентноеЗадание);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КэшПрограммныхИнтерфейсов");
		ЭлементБлокировки.УстановитьЗначение("Идентификатор", Строка(ИдентификаторЗадания));
		
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
			Если Задание <> Неопределено Тогда
				Задание.Удалить();
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Изменяет регламентное задание (без учета очереди заданий модели сервиса).
//
// Параметры: 
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                                     непредопределенного регламентного задания.
//                - Строка - имя метаданных предопределенного регламентного задания
//                           или строка уникального идентификатора регламентного задания.
//                - УникальныйИдентификатор - идентификатор регламентного задания.
//                - РегламентноеЗадание - регламентное задание.
//
//  Параметры - Структура - параметры, которые следует установить заданию, возможные свойства:
//   * Использование - Булево - Истина, если регламентное задание должно выполняться автоматически согласно расписанию.
//   * Параметры     - Массив - параметры регламентного задания. Количество и состав параметров должны соответствовать
//                              параметрам метода регламентного задания.
//   * Ключ          - Строка - прикладной идентификатор регламентного задания.
//   * ИнтервалПовтораПриАварийномЗавершении - Число - интервал в секундах, через который нужно перезапускать задание
//                              в случае его аварийного завершения.
//   * Расписание    - РасписаниеРегламентногоЗадания - расписание задания.
//   * КоличествоПовторовПриАварийномЗавершении - Число - количество повторов при аварийном завершении задания.
//   
Процедура ИзменитьРегламентноеЗадание(Знач Идентификатор, Знач Параметры) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	Идентификатор = УточненныйИдентификаторЗадания(Идентификатор);
	ИдентификаторЗадания = УникальныйИдентификаторЗадания(Идентификатор);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КэшПрограммныхИнтерфейсов");
	ЭлементБлокировки.УстановитьЗначение("Идентификатор", Строка(ИдентификаторЗадания));
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		Если Задание <> Неопределено Тогда
			ЕстьИзменения = Ложь;
			
			ОбновитьЗначениеСвойстваЗадания(Задание,
				"Наименование", Параметры, ЕстьИзменения);
			ОбновитьЗначениеСвойстваЗадания(Задание,
				"Использование", Параметры, ЕстьИзменения);
			ОбновитьЗначениеСвойстваЗадания(Задание,
				"Ключ", Параметры, ЕстьИзменения);
			ОбновитьЗначениеСвойстваЗадания(Задание,
				"ИмяПользователя", Параметры, ЕстьИзменения);
			ОбновитьЗначениеСвойстваЗадания(Задание,
				"ИнтервалПовтораПриАварийномЗавершении", Параметры, ЕстьИзменения);
			ОбновитьЗначениеСвойстваЗадания(Задание,
				"КоличествоПовторовПриАварийномЗавершении", Параметры, ЕстьИзменения);
			ОбновитьЗначениеСвойстваЗадания(Задание,
				"Параметры", Параметры, ЕстьИзменения);
			ОбновитьЗначениеСвойстваЗадания(Задание,
				"Расписание", Параметры, ЕстьИзменения);
			
			Если ЕстьИзменения Тогда
				Задание.Записать();
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УточненныйИдентификаторЗадания(Знач Идентификатор)
	
	Если ТипЗнч(Идентификатор) = Тип("РегламентноеЗадание") Тогда
		Идентификатор = Идентификатор.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		ОбъектМетаданных = Метаданные.РегламентныеЗадания.Найти(Идентификатор);
		Если ОбъектМетаданных = Неопределено Тогда
			Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
		Иначе
			Идентификатор = ОбъектМетаданных;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

Функция УникальныйИдентификаторЗадания(Знач Идентификатор, ВРазделенномРежимеИдентификаторЗаданияОчереди = Ложь)
	
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		Возврат Идентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("РегламентноеЗадание") Тогда
		Возврат Идентификатор.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Возврат Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;
	
	Если ВРазделенномРежимеИдентификаторЗаданияОчереди
	   И ОбщегоНазначения.РазделениеВключено() Тогда
		
		Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") Тогда
			ПараметрыЗадания = Новый Структура("Метаданные", Идентификатор);
			СписокЗаданий = НайтиЗадания(ПараметрыЗадания);
			Если СписокЗаданий = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Для Каждого Задание Из СписокЗаданий Цикл
				Возврат Задание.Идентификатор.УникальныйИдентификатор();
			КонецЦикла;
		ИначеЕсли ТипЗнч(Идентификатор) = Тип("СтрокаТаблицыЗначений") Тогда
			Возврат Идентификатор.Идентификатор.УникальныйИдентификатор();
		ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Идентификатор)) Тогда
			Возврат Идентификатор.УникальныйИдентификатор();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") И Идентификатор.Предопределенное Тогда
			Возврат РегламентныеЗадания.НайтиПредопределенное(Идентификатор).УникальныйИдентификатор;
		ИначеЕсли ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") И НЕ Идентификатор.Предопределенное Тогда
			СписокЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", Идентификатор));
			Для каждого РегламентноеЗадание Из СписокЗаданий Цикл
				Возврат РегламентноеЗадание.УникальныйИдентификатор;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Для процедуры ИзменитьЗадание.
Процедура ОбновитьЗначениеСвойстваЗадания(Задание, ИмяСвойства, ПараметрыЗадания, ЕстьИзменения)
	
	Если Не ПараметрыЗадания.Свойство(ИмяСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	Если Задание[ИмяСвойства] = ПараметрыЗадания[ИмяСвойства]
	 Или ТипЗнч(Задание[ИмяСвойства]) = Тип("РасписаниеРегламентногоЗадания")
	   И ТипЗнч(ПараметрыЗадания[ИмяСвойства]) = Тип("РасписаниеРегламентногоЗадания")
	   И Строка(Задание[ИмяСвойства]) = Строка(ПараметрыЗадания[ИмяСвойства]) Тогда
		
		Возврат;
	КонецЕсли;
	
	Задание[ИмяСвойства] = ПараметрыЗадания[ИмяСвойства];
	ЕстьИзменения = Истина;
	
КонецПроцедуры

// Для функций НайтиЗадания, Задание, ДобавитьЗадание.
Функция УточненныйСписокЗаданий(СписокЗаданий)
	
	// Для обратной совместимости поле Идентификатор не удаляется.
	КопияСписка = СписокЗаданий.Скопировать();
	КопияСписка.Колонки.Добавить("УникальныйИдентификатор");
	Для Каждого Строка Из КопияСписка Цикл
		Строка.УникальныйИдентификатор = Строка.Идентификатор;
	КонецЦикла;
	
	Возврат КопияСписка;
	
КонецФункции

// Для функций НайтиЗадание, Задание, УдалитьЗадание, ИзменитьЗадание.
Функция СсылкаЗаданияОчереди(Идентификатор, ПараметрыЗадания)
	
	МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
	СправочникДляЗадания = МодульОчередьЗаданий.СправочникОчередьЗаданий();
	
	МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
	Если МодульРаботаВМоделиСервиса.ЭтоРазделеннаяКонфигурация() Тогда
		МодульОчередьЗаданийРазделениеДанных = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданийРазделениеДанных");
		ПереопределенныйСправочник = МодульОчередьЗаданийРазделениеДанных.ПриВыбореСправочникаДляЗадания(ПараметрыЗадания);
		Если ПереопределенныйСправочник <> Неопределено Тогда
			СправочникДляЗадания = ПереопределенныйСправочник;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СправочникДляЗадания.ПолучитьСсылку(Идентификатор);
	
КонецФункции

// Вызывает исключение, если у пользователя нет права администрирования.
Процедура ВызватьИсключениеЕслиНетПраваАдминистрирования()
	
	ПроверятьПраваАдминистрированияСистемы = Истина;
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		ПроверятьПраваАдминистрированияСистемы = Ложь;
	КонецЕсли;
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь(, ПроверятьПраваАдминистрированияСистемы) Тогда
		ВызватьИсключение НСтр("ru = 'Нарушение прав доступа.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти