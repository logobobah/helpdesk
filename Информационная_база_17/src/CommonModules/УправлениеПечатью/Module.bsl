#Область ПрограммныйИнтерфейс

// Возвращает описание найденной в коллекции печатной формы.
// Если описание не найдено, возвращает Неопределено.
// Функция предназначена для использования только внутри процедуры Печать.
//
// Параметры:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - служебный параметр, переданный в процедуру Печать;
//  Идентификатор         - Строка          - идентификатор печатной формы.
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - найденное описание печатной формы.
Функция СведенияОПечатнойФорме(КоллекцияПечатныхФорм, Идентификатор) Экспорт
	Возврат КоллекцияПечатныхФорм.Найти(ВРег(Идентификатор), "ИмяВРЕГ");
КонецФункции

// Проверить, нужно ли печатать макет.
// Функция предназначена для использования только внутри процедуры Печать.
//
// Параметры:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - служебный параметр, переданный в процедуру Печать;
//  ИмяМакета             - Строка          - имя проверяемого макета.
//
// Возвращаемое значение:
//  Булево - Истина, если макет надо печатать.
Функция НужноПечататьМакет(КоллекцияПечатныхФорм, ИмяМакета) Экспорт
	
	Возврат КоллекцияПечатныхФорм.Найти(ВРег(ИмяМакета), "ИмяВРЕГ") <> Неопределено;
	
КонецФункции

// Добавляет табличный документ в коллекцию печатных форм.
// Процедура предназначена для использования только внутри процедуры Печать.
//
// Параметры:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - служебный параметр, переданный в процедуру Печать;
//  ИмяМакета             - Строка - имя макета;
//  СинонимМакета         - Строка - представление макета;
//  ТабличныйДокумент     - ТабличныйДокумент - печатная форма документа;
//  Картинка              - Картинка - пиктограмма печатной формы;
//  ПолныйПутьКМакету     - Строка - путь к макету в дереве метаданных, например:
//                                   "Документ.СчетНаОплатуПокупателю.ПФ_MXL_СчетЗаказ".
//                                   Если не указывать этот параметр, то редактирование макета пользователем будет
//                                   недоступно в форме ПечатьДокументов.
//  ИмяФайлаПечатнойФормы - Строка - имя, используемое при сохранении печатной формы в файл;
//                        - Соответствие:
//                           * Ключ     - ЛюбаяСсылка - ссылка на объект печати;
//                           * Значение - Строка - имя файла.
Процедура ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, СинонимМакета, ТабличныйДокумент,
	Картинка = Неопределено, ПолныйПутьКМакету = "", ИмяФайлаПечатнойФормы = Неопределено) Экспорт
	
	ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег(ИмяМакета), "ИмяВРЕГ");
	Если ОписаниеПечатнойФормы <> Неопределено Тогда
		ОписаниеПечатнойФормы.ТабличныйДокумент = ТабличныйДокумент;
		ОписаниеПечатнойФормы.СинонимМакета = СинонимМакета;
		ОписаниеПечатнойФормы.Картинка = Картинка;
		ОписаниеПечатнойФормы.ПолныйПутьКМакету = ПолныйПутьКМакету;
		ОписаниеПечатнойФормы.ИмяФайлаПечатнойФормы = ИмяФайлаПечатнойФормы;
	КонецЕсли;
	
КонецПроцедуры

// Задает область печати объекта в табличном документе.
// Применяется для связывания области в табличном документе, с объектом печати (ссылка).
// Необходимо вызывать при формировании очередной области печатной формы в табличном
// документе.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - печатная форма;
//  НомерСтрокиНачало - Число - позиция начала очередной области в документе;
//  ОбъектыПечати - СписокЗначений - список объектов печати;
//  Ссылка - ЛюбаяСсылка - объект печати.
Процедура ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка) Экспорт
	
	Элемент = ОбъектыПечати.НайтиПоЗначению(Ссылка);
	Если Элемент = Неопределено Тогда
		ИмяОбласти = "Документ_" + Формат(ОбъектыПечати.Количество() + 1, "ЧН=; ЧГ=");
		ОбъектыПечати.Добавить(Ссылка, ИмяОбласти);
	Иначе
		ИмяОбласти = Элемент.Представление;
	КонецЕсли;
	
	НомерСтрокиОкончание = ТабличныйДокумент.ВысотаТаблицы;
	ТабличныйДокумент.Область(НомерСтрокиНачало, , НомерСтрокиОкончание, ).Имя = ИмяОбласти;

	Для Каждого Рисунок Из ТабличныйДокумент.Рисунки Цикл
		ЭтоПодписьИПечать = Ложь;
		Для Каждого ИмяОбластиСПодписьюИПечатью Из ПрефиксыИменОбластейСПодписьюИПечатью() Цикл
			Если СтрНайти(Рисунок.Имя, ИмяОбластиСПодписьюИПечатью) > 0 Тогда
				ЭтоПодписьИПечать = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЭтоПодписьИПечать Тогда
			Продолжить;
		КонецЕсли;
		Если Рисунок.ТипРисунка = ТипРисункаТабличногоДокумента.Картинка И СтрНайти(Рисунок.Имя, "_Документ_") = 0 Тогда
			Рисунок.Имя = Рисунок.Имя + "_" + ИмяОбласти;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список внешних печатных форм.
//
// Параметры:
//  ПолноеИмяОбъектаМетаданных - Строка - полное имя объекта метаданных, для которого необходимо получить список
//                                        печатных форм.
//
// Возвращаемое значение:
//  СписокЗначений - коллекция печатных форм:
//   * Значение      - Строка - идентификатор печатной формы;
//   * Представление - Строка - представление печатной формы.
Функция СписокПечатныхФормИзВнешнихИсточников(ПолноеИмяОбъектаМетаданных) Экспорт
	
	ВнешниеПечатныеФормы = Новый СписокЗначений;
	Если Не ПустаяСтрока(ПолноеИмяОбъектаМетаданных) Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
			МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
			МодульДополнительныеОтчетыИОбработки.ПриПолученииСпискаВнешнихПечатныхФорм(ВнешниеПечатныеФормы, ПолноеИмяОбъектаМетаданных);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВнешниеПечатныеФормы;
	
КонецФункции

// Возвращает список команд печати для указанной формы.
//
// Параметры:
//  Форма - УправляемаяФорма, Строка - форма или полное имя формы, для которой необходимо получить список команд печати.
//  СписокОбъектов - Массив - коллекция объектов метаданных, команды печати которых необходимо использовать при составлении
//                            списка команд печати для указанной формы.
// Возвращаемое значение:
//  ТаблицаЗначений - описание см. в СоздатьКоллекциюКомандПечати().
//
Функция КомандыПечатиФормы(Форма, СписокОбъектов = Неопределено) Экспорт
	
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
		ИмяФормы = Форма.ИмяФормы;
	Иначе
		ИмяФормы = Форма;
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяФормы);
	Если ОбъектМетаданных <> Неопределено И Не Метаданные.ОбщиеФормы.Содержит(ОбъектМетаданных) Тогда
		ОбъектМетаданных = ОбъектМетаданных.Родитель();
	Иначе
		ОбъектМетаданных = Неопределено;
	КонецЕсли;

	Если ОбъектМетаданных <> Неопределено Тогда
		СсылкаОМ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
	КонецЕсли;
	
	КомандыПечати = СоздатьКоллекциюКомандПечати();
	
	СтандартнаяОбработка = Истина;
	УправлениеПечатьюПереопределяемый.ПередДобавлениемКомандПечати(ИмяФормы, КомандыПечати, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Если СписокОбъектов <> Неопределено Тогда
			ЗаполнитьКомандыПечатиДляСпискаОбъектов(СписокОбъектов, КомандыПечати);
		ИначеЕсли ОбъектМетаданных = Неопределено Тогда
			Возврат КомандыПечати;
		Иначе
			ЭтоЖурналДокументов = ОбщегоНазначения.ЭтоЖурналДокументов(ОбъектМетаданных);
			НастройкиСписка = Новый Структура;
			НастройкиСписка.Вставить("МенеджерКомандПечати", ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя()));
			НастройкиСписка.Вставить("АвтоматическоеЗаполнение", ЭтоЖурналДокументов);
			Если ЭтоЖурналДокументов Тогда
				УправлениеПечатьюПереопределяемый.ПриПолученииНастроекСпискаКомандПечати(НастройкиСписка);
			КонецЕсли;
			
			Если НастройкиСписка.АвтоматическоеЗаполнение Тогда
				Если ЭтоЖурналДокументов Тогда
					ЗаполнитьКомандыПечатиДляСпискаОбъектов(ОбъектМетаданных.РегистрируемыеДокументы, КомандыПечати);
				КонецЕсли;
			Иначе
				МенеджерПечати = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
				ДобавляемыеКомандыПечати = СоздатьКоллекциюКомандПечати();
				МенеджерПечати.ДобавитьКомандыПечати(ДобавляемыеКомандыПечати);
				
				Для Каждого КомандаПечати Из ДобавляемыеКомандыПечати Цикл
					Если КомандаПечати.МенеджерПечати = Неопределено Тогда
						КомандаПечати.МенеджерПечати = ОбъектМетаданных.ПолноеИмя();
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(КомандыПечати.Добавить(), КомандаПечати);
				КонецЦикла;
				
				Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
					МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
					МодульДополнительныеОтчетыИОбработки.ПриПолученииКомандПечати(КомандыПечати, ОбъектМетаданных.ПолноеИмя());
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектМетаданных <> Неопределено Тогда
		ПодключенныеОтчетыИОбработки = ПодключаемыеКоманды.ПодключенныеОбъекты(СсылкаОМ);
		Найденные = ПодключенныеОтчетыИОбработки.НайтиСтроки(Новый Структура("ДобавитьКомандыПечати", Истина));
		Для Каждого ПодключенныйОбъект Из Найденные Цикл
			ПодключенныйОбъект.Менеджер.ДобавитьКомандыПечати(КомандыПечати);
			ДобавленныеКоманды = КомандыПечати.НайтиСтроки(Новый Структура("МенеджерПечати", Неопределено));
			Для Каждого Команда Из ДобавленныеКоманды Цикл
				Команда.МенеджерПечати = ПодключенныйОбъект.ПолноеИмя;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		Если КомандаПечати.Порядок = 0 Тогда
			КомандаПечати.Порядок = 50;
		КонецЕсли;
		КомандаПечати.ДополнительныеПараметры.Вставить("ДополнитьКомплектВнешнимиПечатнымиФормами", КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами);
	КонецЦикла;
	
	Если ОбъектМетаданных <> Неопределено Тогда
		УстановитьНастройкиКомандПечати(КомандыПечати, СсылкаОМ);
	КонецЕсли;
	
	КомандыПечати.Сортировать("Порядок Возр, Представление Возр");
	
	ЧастиИмени = СтрРазделить(ИмяФормы, ".");
	КраткоеИмяФормы = ЧастиИмени[ЧастиИмени.Количество()-1];
	
	// фильтр по именам форм
	Для НомерСтроки = -КомандыПечати.Количество() + 1 По 0 Цикл
		КомандаПечати = КомандыПечати[-НомерСтроки];
		СписокФорм = СтрРазделить(КомандаПечати.СписокФорм, ",", Ложь);
		Если СписокФорм.Количество() > 0 И СписокФорм.Найти(КраткоеИмяФормы) = Неопределено Тогда
			КомандыПечати.Удалить(КомандаПечати);
		КонецЕсли;
	КонецЦикла;
	
	ОпределитьВидимостьКомандПечатиПоФункциональнымОпциям(КомандыПечати, Форма);
	
	Возврат КомандыПечати;
	
КонецФункции

// Создает пустую таблицу с описанием команд печати.
// Таблица команд печати передается в процедуры ДобавитьКомандыПечати, 
// размещенные в модулях менеджеров объектов конфигурации, которые перечислены в процедуре
// УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - описание команд печати:
//
//  * Идентификатор - Строка - Идентификатор команды печати, по которому менеджер печати определяет печатную
//                             форму, которую необходимо сформировать.
//                             Пример: "СчетЗаказ".
//
//                                        Для печати нескольких печатных форм можно указывать одновременно несколько их
//                                        идентификаторов (строкой, через запятую, либо массивом строк), например:
//                                         "СчетЗаказ,ГарантийноеПисьмо".
//
//                                        Если необходимо задать количество копий печати для печатной формы, то ее
//                                        идентификатор нужно продублировать столько раз, сколько копий необходимо
//                                        сформировать. При этом следует учитывать, что порядок следования печатных
//                                        форм в комплекте будет соответствовать порядку идентификаторов печатных форм,
//                                        указанных в этом параметре. Пример (2 счета на оплату + 1 гарантийное письмо):
//                                        "СчетЗаказ,СчетЗаказ,ГарантийноеПисьмо".
//
//                                        Идентификатор печатной формы может содержать в себе и альтернативный менеджер
//                                        печати, если он отличается от указанного в параметре МенеджерПечати,
//                                         например: "СчетЗаказ,Обработка.ПечатнаяФорма.ГарантийноеПисьмо".
//
//                                        В этом примере ГарантийноеПисьмо формируется в менеджере печати.
//                                        Обработка.ПечатнаяФорма, а СчетЗаказ - в менеджере печати, указанном в
//                                        параметре МенеджерПечати.
//
//                  - Массив - список идентификаторов команд печати.
//
//  * Представление - Строка            - Представление команды в меню Печать. 
//                                         Пример: "Счет на оплату".
//
//  * МенеджерПечати - Строка           - (необязательный) Имя объекта, в модуле менеджера которого располагается
//                                        процедура Печать, формирующая табличные документы для этой команды.
//                                        Значение по умолчанию: имя модуля менеджера объекта.
//                                         Пример: "Документ.СчетНаОплатуПокупателю".
//  * ТипыОбъектовПечати - Массив       - (необязательный) список типов объектов, для которых предназначена команда
//                                        печати. Параметр предназначен для команд печати в журналах документов, где
//                                        требуется проверка передаваемого типа объекта перед вызовом менеджера печати.
//                                        Если список не заполнен, то при автоматическом создании списка команд печати
//                                        в журнале документов он заполняется типом объекта, из которого была
//                                        импортирована команда печати.
//
//  * Обработчик    - Строка            - (необязательный) Клиентский обработчик команды, в который необходимо передать
//                                        управление вместо стандартного обработчика команды печать. Используется,
//                                        например, когда печатная форма формируется на клиенте.
//                                        Формат "<ИмяОбщегоМодуля>.<ИмяПроцедуры>" используется когда процедура размещена
//                                        в общем модуле.
//                                        Формат "<ИмяПроцедуры>" используется когда процедура размещена
//                                        в модуле основной формы отчета или обработки, указанной в МенеджерПечати.
//                                        Пример:
//                                          КомандаПечати.Обработчик = "_ДемоСтандартныеПодсистемыКлиент.ПечатьСчетовНаОплатуПокупателю";
//                                        Пример обработчика в модуле формы:
//                                          // Формирует печатную форму <представление печатной формы>.
//                                          //
//                                          // Параметры:
//                                          //   ПараметрыПечати - Структура - Сведения о печатной форме.
//                                          //       * ОбъектыПечати - Массив - Массив ссылок выбранных объектов.
//                                          //       * Форма - УправляемаяФорма - Форма, из которой вызвана команда печати.
//                                          //       * ДополнительныеПараметры - Структура - Дополнительные параметры печати.
//                                          //       Прочие ключи структуры соответствуют колонкам таблицы КомандыПечати,
//                                          //       подробнее см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//                                          //
//                                          &НаКлиенте
//                                          Функция <ИмяФункции>(ПараметрыПечати) Экспорт
//                                          	// Обработчик печати.
//                                          КонецФункции
//                                        Следует иметь в виду, что обработчик вызывается при помощи метода Вычислить,
//                                        поэтому в качестве обработчика может выступать только функция.
//                                        При этом возвращаемое значение функции никак в дальнейшем не используется подсистемой.
//
//  * Порядок       - Число             - (необязательный) Значение от 1 до 100, указывающее порядок размещения команды
//                                        по отношению к другим командам. Сортировка команд меню Печать осуществляется
//                                        сначала по полю Порядок, затем по представлению.
//                                        Значение по умолчанию: 50.
//
//  * Картинка      - Картинка          - (необязательный) Картинка, которая отображается возле команды в меню Печать.
//                                         Пример: БиблиотекаКартинок.ФорматPDF.
//
//  * СписокФорм    - Строка            - (необязательный) Имена форм через запятую, в которых должна отображаться
//                                        команда. Если параметр не указан, то команда печати будет отображаться во
//                                        всех формах объекта, где встроена подсистема Печать.
//                                         Пример: "ФормаДокумента".
//
//  * МестоРазмещения - Строка          - (необязательный) Имя командной панели формы, в которую необходимо разместить
//                                        команду печати. Параметр необходимо использовать только в случае, когда на
//                                        форме размещается более одного подменю "Печать". В остальных случаях место
//                                        размещения необходимо задавать в модуле формы при вызове метода.
//                                        УправлениеПечатью.ПриСозданииНаСервере.
//                                        
//  * ЗаголовокФормы  - Строка          - (необязательный) Произвольная строка, переопределяющая стандартных заголовок
//                                        формы «Печать документов».
//                                         Пример: "Настраиваемый комплект".
//
//  * ФункциональныеОпции - Строка      - (необязательный) Имена функциональных опций через запятую, от которых зависит
//                                        доступность команды печати.
//
//  * УсловияВидимости - Массив         - (необязательный) Коллекция условий видимости команды в зависимости от
//                                        контекста. Условия видимости команды задаются при помощи процедуры 
//                                        ДобавитьУсловиеВидимостиКоманды.
//                                        Если параметр не задан, команда видна вне зависимости от контекста.
//                                        
//  * ПроверкаПроведенияПередПечатью    - Булево - (необязательный) Признак необходимости проверки проведенности
//                                        документов перед печатью. Если выбран хотя бы один непроведенный документ, то
//                                        перед выполнением команды печати возникает диалог проведения.
//                                        Для непроведенных документов команда печати не выполняется.
//                                        Если параметр не указан, то проверка проведенности не выполняется.
//
//  * СразуНаПринтер - Булево           - (необязательный) Признак необходимости печати документов без предварительного
//                                        просмотра, сразу на принтер. Если параметр не указан, то при выборе команды
//                                        печати открывается форма предварительного просмотра «Печать документов».
//
//  * ФорматСохранения - ТипФайлаТабличногоДокумента - (необязательный) Применяется для быстрого сохранения печатной
//                                        формы (без дополнительных действий) в различные форматы, отличные от mxl.
//                                        Если параметр не указан, то формируется обычный mxl.
//                                         Пример: ТипФайлаТабличногоДокумента.PDF.
//
//                                        При выборе команды печати сразу открывается сформированный в формате pdf
//                                        документ.
//
//  * ПереопределитьПользовательскиеНастройкиКоличества - Булево - (необязательный) Признак необходимости отключения в
//                                        форме ПечатьДокументов механизма сохранения/восстановления выбранного
//                                        пользователем количества экземпляров на печать. Если параметр не указан, то
//                                        механизм сохранения/восстановления настроек будет работать при открытии формы.
//                                        ПечатьДокументов.
//
//  * ДополнитьКомплектВнешнимиПечатнымиФормами - Булево - (необязательный) Признак необходимости дополнить комплект
//                                        документов всеми подключенными к объекту внешними печатными формами
//                                        (подсистема ДополнительныеОтчетыИОбработки). Если параметр не указан, внешние
//                                        печатные формы не добавляются в комплект.
//
//  * ФиксированныйКомплект - Булево    - (необязательный) Признак необходимости блокировки от изменения пользователем
//                                        состава комплекта документов. Если параметр не указан, то пользователь сможет
//                                        исключать отдельные печатные формы из комплекта в форме ПечатьДокументов, а
//                                        также изменять их количество.
//
//  * ДополнительныеПараметры - Структура - (необязательный) - произвольные параметры для передачи в менеджер печати.
//
//  * НеВыполнятьЗаписьВФорме - Булево  - (необязательный) Признак необходимости отключения механизма записи объекта
//                                        перед выполнением команды печати. Используется в исключительных случаях. Если
//                                        параметр не указан, производится запись объекта в случае, если в форме
//                                        объекта установлен признак модифицированности.
//
//  * ТребуетсяРасширениеРаботыСФайлами - Булево - (необязательный) Признак необходимости подключения расширения работы
//                                        с файлами перед выполнением команды. Если параметр не указан, подключение
//                                        расширения работы с файлами выполняться не будет.
//
// Пример:
//
Функция СоздатьКоллекциюКомандПечати() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	// описание
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	//////////
	// Опции (необязательные параметры).
	
	// менеджер печати
	Результат.Колонки.Добавить("МенеджерПечати", Неопределено);
	Результат.Колонки.Добавить("ТипыОбъектовПечати", Новый ОписаниеТипов("Массив"));
	
	// Альтернативный обработчик команды.
	Результат.Колонки.Добавить("Обработчик", Новый ОписаниеТипов("Строка"));
	
	// представление
	Результат.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
	// Имена форм для размещения команд, разделитель - запятая.
	Результат.Колонки.Добавить("СписокФорм", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("МестоРазмещения", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЗаголовокФормы", Новый ОписаниеТипов("Строка"));
	// Имена функциональных опций, влияющих на видимость команды, разделитель - запятая.
	Результат.Колонки.Добавить("ФункциональныеОпции", Новый ОписаниеТипов("Строка"));
	
	// Динамические условия видимости.
	Результат.Колонки.Добавить("УсловияВидимости", Новый ОписаниеТипов("Массив"));
	
	// проверка проведения
	Результат.Колонки.Добавить("ПроверкаПроведенияПередПечатью", Новый ОписаниеТипов("Булево"));
	
	// вывод
	Результат.Колонки.Добавить("СразуНаПринтер", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ФорматСохранения"); // ТипФайлаТабличногоДокумента
	
	// настройки комплектов
	Результат.Колонки.Добавить("ПереопределитьПользовательскиеНастройкиКоличества", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ДополнитьКомплектВнешнимиПечатнымиФормами", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ФиксированныйКомплект", Новый ОписаниеТипов("Булево")); // запрет изменения комплекта
	
	// дополнительные параметры
	Результат.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
	
	// Специальный режим выполнения команды
	// по умолчанию выполняется запись модифицированного объекта перед выполнением команды.
	Результат.Колонки.Добавить("НеВыполнятьЗаписьВФорме", Новый ОписаниеТипов("Булево"));
	
	// Для использования макетов офисных документов в веб-клиенте.
	Результат.Колонки.Добавить("ТребуетсяРасширениеРаботыСФайлами", Новый ОписаниеТипов("Булево"));
	
	// Для служебного использования.
	Результат.Колонки.Добавить("СкрытаФункциональнымиОпциями", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Отключена", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ИмяКомандыНаФорме", Новый ОписаниеТипов("Строка"));
	
	Возврат Результат;
	
КонецФункции

// Задает условия видимости команды печати на форме в зависимости от контекста.
//
// Параметры:
//  КомандаПечати  - СтрокаТаблицыЗначений - элемент коллекции КомандыПечати в процедуре ДобавитьКомандыПечати,
//                                           описание см. в функции СоздатьКоллекциюКомандПечати.
//  Реквизит       - Строка                - имя реквизита объекта;
//  Значение       - Произвольный          - значение реквизита объекта;
//  МетодСравнения - ВидСравнения          - вид сравнения значений. Допустимые для использования виды: 
//                                           Равно, НеРавно, Больше, БольшеИлиРавно, Меньше, МеньшеИлиРавно, ВСписке, НеВСписке.
//                                           Значение по умолчанию: Равно.
//
Процедура ДобавитьУсловиеВидимостиКоманды(КомандаПечати, Реквизит, Значение, Знач МетодСравнения = Неопределено) Экспорт
	Если МетодСравнения = Неопределено Тогда
		МетодСравнения = ВидСравнения.Равно;
	КонецЕсли;
	УсловиеВидимости = Новый Структура;
	УсловиеВидимости.Вставить("Реквизит", Реквизит);
	УсловиеВидимости.Вставить("ВидСравнения", МетодСравнения);
	УсловиеВидимости.Вставить("Значение", Значение);
	КомандаПечати.УсловияВидимости.Добавить(УсловиеВидимости);
КонецПроцедуры

// Используется при переносе макета (объекта метаданных) печатной формы в другой объект.
// Предназначена для вызова в процедуре заполнения данных обновления (для "отложенного" обработчика).
// Регистрирует новый адрес макета для обработки.
//
// Параметры:
//  ИмяМакета   - Строка - Новое имя макета в формате
//                         "Документ.<ИмяДокумента>.<ИмяМакета>"
//                         "Обработка.<ИмяОбработки>.<ИмяМакета>"
//                         "ОбщийМакет.<ИмяМакета>":
//  Параметры - Структура - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке.
//
Процедура ЗарегистрироватьНовоеИмяМакета(ИмяМакета, Параметры) Экспорт
	ЧастиИмениМакета = ЧастиИмениМакета(ИмяМакета);
	
	НаборЗаписей = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИмяМакета.Установить(ЧастиИмениМакета.ИмяМакета);
	НаборЗаписей.Отбор.Объект.Установить(ЧастиИмениМакета.ИмяОбъекта);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, НаборЗаписей);
КонецПроцедуры

// Используется при переносе макета (объекта метаданных) печатной формы в другой объект.
// Предназначена для вызова в "отложенном" обработчике обновления.
// Переносит пользовательские данные, относящиеся макету на новый адрес.
//
// Параметры:
//  Макеты     - Соответствие - Сведения о прежних и новых именах макетов в формате
//                              "Документ.<ИмяДокумента>.<ИмяМакета>"
//                              "Обработка.<ИмяОбработки>.<ИмяМакета>"
//                              "ОбщийМакет.<ИмяМакета>":
//   * Ключ     - Строка - Новое имя макета.
//   * Значение - Строка - Прежнее имя макета.
//
//  Параметры - Структура - параметры, передаваемые в "отложенный" обработчик обновления.
//
Процедура ПеренестиПользовательскиеМакеты(Макеты, Параметры) Экспорт
	
	ДанныеДляОбработки = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(Параметры.Очередь, "РегистрСведений.ПользовательскиеМакетыПечати");
	Пока ДанныеДляОбработки.Следующий() Цикл
		НовоеИмяМакета = ДанныеДляОбработки.Объект + "." + ДанныеДляОбработки.ИмяМакета;
		ПрежнееИмяМакета = Макеты[НовоеИмяМакета];
		ЧастиИмениМакета = ЧастиИмениМакета(ПрежнееИмяМакета);
		
		МенеджерЗаписи = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИмяМакета = ЧастиИмениМакета.ИмяМакета;
		МенеджерЗаписи.Объект = ЧастиИмениМакета.ИмяОбъекта;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			НаборЗаписей = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИмяМакета.Установить(ДанныеДляОбработки.ИмяМакета);
			НаборЗаписей.Отбор.Объект.Установить(ДанныеДляОбработки.Объект);
			Запись = НаборЗаписей.Добавить();
			Запись.ИмяМакета = ДанныеДляОбработки.ИмяМакета;
			Запись.Объект = ДанныеДляОбработки.Объект;
			ЗаполнитьЗначенияСвойств(Запись, МенеджерЗаписи, , "ИмяМакета,Объект");
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			МенеджерЗаписи.Удалить();
		КонецЕсли;
	КонецЦикла;
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, "РегистрСведений.ПользовательскиеМакетыПечати");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с шаблонами офисных документов.

// Добавляет к параметру НаборОбластей новую запись об области.
//
// Параметры:
//   ОбластиМакетаОфисногоДокумента - Массив - набор областей (массив структур) макета офисного документа.
//   ИмяОбласти                     - Строка - имя добавляемой области.
//   ТипОбласти                     - Строка - тип области:
//			ВерхнийКолонтитул
//			НижнийКолонтитул
//			Общая
//			СтрокаТаблицы
//			Список
//
// Пример:
//	Функция ОбластиМакетаОфисногоДокумента()
//	
//		Области = Новый Структура;
//	
//		УправлениеПечатью.ДобавитьОписаниеОбласти(Области, "ВерхнийКолонтитул",	"ВерхнийКолонтитул");
//		УправлениеПечатью.ДобавитьОписаниеОбласти(Области, "НижнийКолонтитул",	"НижнийКолонтитул");
//		УправлениеПечатью.ДобавитьОписаниеОбласти(Области, "Заголовок",			"Общая");
//	
//		Возврат Области;
//	
//	КонецФункции
//
Процедура ДобавитьОписаниеОбласти(ОбластиМакетаОфисногоДокумента, Знач ИмяОбласти, Знач ТипОбласти) Экспорт
	
	НоваяОбласть = Новый Структура;
	
	НоваяОбласть.Вставить("ИмяОбласти", ИмяОбласти);
	НоваяОбласть.Вставить("ТипОбласти", ТипОбласти);
	
	ОбластиМакетаОфисногоДокумента.Вставить(ИмяОбласти, НоваяОбласть);
	
КонецПроцедуры

// Получает за один вызов всю необходимую информацию для печати: данные объектов по макетам, двоичные
// данные макетов, описание областей макетов.
// Для вызова из клиентских модулей печати форм по макетам офисных документов.
//
// Параметры:
//   ИмяМенеджераПечати - Строка - имя для обращения к менеджеру объекта, например "Документ.<Имя документа>".
//   ИменаМакетов       - Строка - имена макетов, по которым будут формироваться печатные формы.
//   СоставДокументов   - Массив - ссылки на объекты информационной базы (должны быть одного типа).
//
// Возвращаемое значение:
//  Соответствие - коллекция ссылок на объекты и их данные:
//   * Ключ - ЛюбаяСсылка - ссылка на объект информационной базы;
//   * Значение - Структура - макет и данные:
//       ** Ключ - Строка - имя макета;
//       ** Значение - Структура - данные объекта.
//
Функция МакетыИДанныеОбъектовДляПечати(Знач ИмяМенеджераПечати, Знач ИменаМакетов, Знач СоставДокументов) Экспорт
	
	МассивИменМакетов = СтрРазделить(ИменаМакетов, ", ", Ложь);
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМенеджераПечати);
	МакетыИДанные = МенеджерОбъекта.ПолучитьДанныеПечати(СоставДокументов, МассивИменМакетов);
	МакетыИДанные.Вставить("ЛокальныйКаталогФайловПечати", Неопределено); // Для обратной совместимости.
	
	Возврат МакетыИДанные;
	
КонецФункции

// Возвращает макет печатной формы по полному пути к макету.
//
// Параметры:
//  ПолныйПутьКМакету - Строка - полный путь к макету в формате:
//								"Документ.<ИмяДокумента>.<ИмяМакета>"
//								"Обработка.<ИмяОбработки>.<ИмяМакета>"
//								"ОбщийМакет.<ИмяМакета>".
// Возвращаемое значение:
//   ТабличныйДокумент - для макета типа MXL.
//	 ДвоичныеДанные    - для макетов DOC и ODT.
//
Функция МакетПечатнойФормы(ПолныйПутьКМакету) Экспорт
	
	ЧастиПути = СтрЗаменить(ПолныйПутьКМакету, ".", Символы.ПС);
	
	Если СтрЧислоСтрок(ЧастиПути) = 3 Тогда
		ПутьКМетаданным = СтрПолучитьСтроку(ЧастиПути, 1) + "." + СтрПолучитьСтроку(ЧастиПути, 2);
		ПутьКОбъектуМетаданных = СтрПолучитьСтроку(ЧастиПути, 3);
	ИначеЕсли СтрЧислоСтрок(ЧастиПути) = 2 Тогда
		ПутьКМетаданным = СтрПолучитьСтроку(ЧастиПути, 1);
		ПутьКОбъектуМетаданных = СтрПолучитьСтроку(ЧастиПути, 2);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Макет ""%1"" не найден. Операция прервана.'"), ПолныйПутьКМакету);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ Макет КАК Макет, Использование КАК Использование
					|ИЗ
					|	РегистрСведений.ПользовательскиеМакетыПечати
					|ГДЕ
					|	Объект=&Объект
					|	И	ИмяМакета=&ИмяМакета
					|	И	Использование";
	
	Запрос.Параметры.Вставить("Объект", ПутьКМетаданным);
	Запрос.Параметры.Вставить("ИмяМакета", ПутьКОбъектуМетаданных);
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	Результат = Неопределено;
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Макет.Получить();
	Иначе
		Если СтрЧислоСтрок(ЧастиПути) = 3 Тогда
			Результат = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПутьКМетаданным).ПолучитьМакет(ПутьКОбъектуМетаданных);
		Иначе
			Результат = ПолучитьОбщийМакет(ПутьКОбъектуМетаданных);
		КонецЕсли;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Макет ""%1"" не найден. Операция прервана.'"), ПолныйПутьКМакету);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Возвращает табличный документ по двоичным данным табличного документа.
//
// Параметры:
//  ДвоичныеДанныеДокумента - ДвоичныеДанные - двоичные данные табличного документа.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ.
//
Функция ТабличныйДокументПоДвоичнымДанным(ДвоичныеДанныеДокумента) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеДокумента.Записать(ИмяВременногоФайла);
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ИмяВременногоФайла);
	
	УстановленБезопасныйРежим = БезопасныйРежим();
	Если ТипЗнч(УстановленБезопасныйРежим) = Тип("Строка") Тогда
		УстановленБезопасныйРежим = Истина;
	КонецЕсли;
	
	Если Не УстановленБезопасныйРежим Тогда
		УдалитьФайлы(ИмяВременногоФайла);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Возвращает двоичные данные для формирования QR кода.
//
// Параметры:
//  QRСтрока         - Строка - данные, которые необходимо разместить в QR-коде.
//
//  УровеньКоррекции - Число - уровень погрешности изображения при котором данный QR-код все еще возможно 100%
//                             распознать.
//                     Параметр должен иметь тип целого и принимать одно из 4 допустимых значений:
//                     0(7% погрешности), 1(15% погрешности), 2(25% погрешности), 3(35% погрешности).
//
//  Размер           - Число - определяет длину стороны выходного изображения в пикселях.
//                     Если минимально возможный размер изображения больше этого параметра - код сформирован не будет.
//
// Возвращаемое значение:
//  ДвоичныеДанные  - буфер, содержащий байты PNG-изображения QR-кода.
// 
// Пример:
//  
//  // Выводим на печать QR-код, содержащий в себе информацию зашифрованную по УФЭБС.
//
//  QRСтрока = УправлениеПечатью.ФорматнаяСтрокаУФЭБС(РеквизитыПлатежа);
//  ТекстОшибки = "";
//  ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRСтрока, 0, 190, ТекстОшибки);
//  Если Не ПустаяСтрока(ТекстОшибки)
//      ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
//  КонецЕсли;
//
//  КартинкаQRКода = Новый Картинка(ДанныеQRКода);
//  ОбластьМакета.Рисунки.QRКод.Картинка = КартинкаQRКода;
//
Функция ДанныеQRКода(QRСтрока, УровеньКоррекции, Размер) Экспорт
	
	Отказ = Ложь;
	
	ГенераторQRКода = КомпонентаФормированияQRКода(Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанныеКартинки = ГенераторQRКода.GenerateQRCode(QRСтрока, УровеньКоррекции, Размер);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Формирование QR-кода'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ДвоичныеДанныеКартинки;
	
КонецФункции

// Формирует форматную строку согласно "Унифицированному формату электронных банковских сообщений" для ее отображения в
// виде QR-кода.
//
// Параметры:
//  ДанныеДокумента  - Структура - содержит значения полей документа.
//    Данные документа будут закодированы согласно стандарту 
//    "СТАНДАРТЫ ФИНАНСОВЫХ ОПЕРАЦИЙ Символы двумерного штрихового кода для осуществления платежей физических лиц".
//    ДанныеДокумента должны содержать информацию в полях, описанных ниже.
//    Обязательные поля структуры:
//     * ТекстПолучателя             - Наименование получателя платежа         - Макс. 160 символов;
//     * НомерСчетаПолучателя        - Номер счета получателя платежа          - Макс. 20 символов;
//     * НаименованиеБанкаПолучателя - Наименование банка получателя платежа   - Макс. 45 символов;
//     * БИКБанкаПолучателя          - БИК                                     - Макс. 9 символов;
//     * СчетБанкаПолучателя         - Номер к/с банка получателя платежа - Макс. 20 символов;
//    Дополнительные поля структуры:
//     * СуммаЧислом         - Сумма платежа, в рублях                 - Макс. 16 символов.
//     * НазначениеПлатежа   - Наименование платежа (назначение)       - Макс. 210 символов;
//     * ИННПолучателя       - ИНН получателя платежа                  - Макс. 12 символов;
//     * ИННПлательщика      - ИНН плательщика                         - Макс. 12 символов;
//     * СтатусСоставителя   - Статус составителя платежного документа - Макс. 2 символа;
//     * КПППолучателя       - КПП получателя платежа                  - Макс. 9 символов.
//     * КодБК               - КБК                                     - Макс. 20 символов;
//     * КодОКТМО            - Код КодОКТМО                            - Макс. 11 символов;
//     * ПоказательОснования - Основание налогового платежа            - Макс. 2 символа;
//     * ПоказательПериода   - Налоговый период                        - Макс. 10 символов;
//     * ПоказательНомера    - Номер документа                         - Макс. 15 символов;
//     * ПоказательДаты      - Дата документа                          - Макс. 10 символ.
//     * ПоказательТипа      - Тип платежа                             - Макс. 2 символа.
//    Прочие дополнительные  поля.
//     * ФамилияПлательщика               - Фамилия плательщика.
//     * ИмяПлательщика                   - Имя плательщика.
//     * ОтчествоПлательщика              - Отчество плательщика.
//     * АдресПлательщика                 - Адрес плательщика.
//     * ЛицевойСчетБюджетногоПолучателя  - Лицевой счет бюджетного получателя.
//     * ИндексПлатежногоДокумента        - Индекс платежного документа.
//     * СНИЛС                            - № лицевого счета в системе персонифицированного учета в ПФР - СНИЛС.
//     * НомерДоговора                    - Номер договора.
//     * НомерЛицевогоСчетаПлательщика    - Номер лицевого счета плательщика в организации (в системе учета ПУ).
//     * НомерКвартиры                    - Номер квартиры.
//     * НомерТелефона                    - Номер телефона.
//     * ВидПлательщика                   - Вид ДУЛ плательщика.
//     * НомерПлательщик                  - Номер ДУЛ плательщика.
//     * ФИОРебенка                       - Ф.И.О. ребенка/учащегося.
//     * ДатаРождения                     - Дата рождения.
//     * СрокПлатежа                      - Срок платежа/дата выставления счета.
//     * ПериодОплаты                     - Период оплаты.
//     * ВидПлатежа                       - Вид платежа.
//     * КодУслуги                        - Код услуги/название прибора учета.
//     * НомерПрибораУчета                - Номер прибора учета.
//     * ПоказаниеПрибораУчета            - Показание прибора учета.
//     * НомерИзвещения                   - Номер извещения, начисления, счета.
//     * ДатаИзвещения                    - Дата извещения/начисления/счета/постановления (для ГИБДД).
//     * НомерУчреждения                  - Номер учреждения (образовательного, медицинского).
//     * НомерГруппы                      - Номер группы детсада/класса школы.
//     * ФИОПреподавателя                 - ФИО преподавателя, специалиста, оказывающего услугу.
//     * СуммаСтраховки                   - Сумма страховки/дополнительной услуги/Сумма пени (в копейках).
//     * НомерПостановления               - Номер постановления (для ГИБДД).
//     * НомерИсполнительногоПроизводства - Номер исполнительного производства.
//     * КодВидаПлатежа                   - Код вида платежа (например, для платежей в адрес Росреестра).
//     * ИдентификаторНачисления          - Уникальный идентификатор начисления.
//     * ТехническийКод                   - Технический код, рекомендуемый для заполнения поставщиком услуг.
//                                          Может использоваться принимающей организацией для вызова соответствующей
//                                          обрабатывающей ИТ-системы.
//                                          Перечень значений кода представлен ниже.
//
//       Код назначения     Наименование назначения платежа
//       платежа.
//       
//          01              Мобильная связь, стационарный телефон.
//          02              Коммунальные услуги, ЖКХ.
//          03              ГИБДД, налоги, пошлины, бюджетные платежи.
//          04              Охранные услуги
//          05              Услуги, оказываемые УФМС.
//          06              ПФР
//          07              Погашение кредитов
//          08              Образовательные учреждения.
//          09              Интернет и ТВ
//          10              Электронные деньги
//          11              Отдых и путешествия.
//          12              Инвестиции и страхование.
//          13              Спорт и здоровье
//          14              Благотворительные и общественные организации.
//          15              Прочие услуги.
//
// Возвращаемое значение:
//   Строка - строка данных в формате УФЭБС.
//
Функция ФорматнаяСтрокаУФЭБС(ДанныеДокумента) Экспорт
	
	ТекстОшибки = "";
	СтрокаОбязательныхРеквизитов = СтрокаОбязательныхРеквизитов(ДанныеДокумента, ТекстОшибки);
	
	Если ПустаяСтрока(СтрокаОбязательныхРеквизитов) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , ,);
		Возврат "";
	КонецЕсли;
	
	СтруктураПредставленийИРеквизитов = СтруктураПредставленийИРеквизитов();
	СтрокаДополнительныхРеквизитов = "";
	ДополнительныеРеквизиты = Новый Структура;
	ДобавитьДополнительныеРеквизиты(ДополнительныеРеквизиты);
	
	Для Каждого Элемент Из ДополнительныеРеквизиты Цикл
		
		Если Не ДанныеДокумента.Свойство(Элемент.Ключ) Тогда
			ДанныеДокумента.Вставить(Элемент.Ключ, "");
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДокумента[Элемент.Ключ]) Тогда
			Если Элемент.Ключ = "СуммаЧислом" Тогда
				ЗначениеСтрокой = Формат(ДанныеДокумента.СуммаЧислом * 100, "ЧГ=");
			Иначе
				ЗначениеСтрокой = СтрЗаменить(СокрЛП(Строка(ДанныеДокумента[Элемент.Ключ])), "|", "");
			КонецЕсли;
			СтрокаДополнительныхРеквизитов = СтрокаДополнительныхРеквизитов + СтруктураПредставленийИРеквизитов[Элемент.Ключ]
			                                 + "=" + ЗначениеСтрокой + "|";
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаДополнительныхРеквизитов) Тогда
		ДлинаСтроки = СтрДлина(СтрокаДополнительныхРеквизитов);
		СтрокаДополнительныхРеквизитов = Сред(СтрокаДополнительныхРеквизитов, 1, ДлинаСтроки - 1);
	КонецЕсли;

	ПрочиеДополнительныеРеквизиты = Новый Структура;
	ДобавитьПрочиеДополнительныеРеквизиты(ПрочиеДополнительныеРеквизиты);
	СтрокаПрочихДополнительныхРеквизитов = "";
	
	Для Каждого Элемент Из ПрочиеДополнительныеРеквизиты Цикл
		
		Если Не ДанныеДокумента.Свойство(Элемент.Ключ) Тогда
			ДанныеДокумента.Вставить(Элемент.Ключ, "");
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДокумента[Элемент.Ключ]) Тогда
			ЗначениеСтрокой = СтрЗаменить(СокрЛП(Строка(ДанныеДокумента[Элемент.Ключ])), "|", "");
			СтрокаПрочихДополнительныхРеквизитов = СтрокаПрочихДополнительныхРеквизитов
			                                       + СтруктураПредставленийИРеквизитов[Элемент.Ключ] + "=" + ЗначениеСтрокой
			                                       + "|";
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаПрочихДополнительныхРеквизитов) Тогда
		ДлинаСтроки = СтрДлина(СтрокаПрочихДополнительныхРеквизитов);
		СтрокаПрочихДополнительныхРеквизитов = Сред(СтрокаПрочихДополнительныхРеквизитов, 1, ДлинаСтроки - 1);
	КонецЕсли;
	
	ИтоговаяСтрока = СтрокаОбязательныхРеквизитов
	                 + ?(ПустаяСтрока(СтрокаДополнительныхРеквизитов), "", "|" + СтрокаДополнительныхРеквизитов)
	                 + ?(ПустаяСтрока(СтрокаПрочихДополнительныхРеквизитов), "", "|" + СтрокаПрочихДополнительныхРеквизитов);
	
	Возврат ИтоговаяСтрока;
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ПодключаемыеКоманды.ПриСозданииНаСервере.
// Размещает команды печати на форме.
//
// Параметры:
//   Форма                            - УправляемаяФорма - форма, в которой необходимо разместить подменю Печать.
//   МестоРазмещенияКомандПоУмолчанию - ЭлементФормы - группа, в которую необходимо разместить подменю Печать,
//                                                     по умолчанию размещается в командную панель формы.
//   ОбъектыПечати                    - Массив - список объектов метаданных, для которых необходимо сформировать
//                                               объединенное подменю Печать.
Процедура ПриСозданииНаСервере(Форма, МестоРазмещенияКомандПоУмолчанию = Неопределено, ОбъектыПечати = Неопределено) Экспорт
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	Если ТипЗнч(МестоРазмещенияКомандПоУмолчанию) = Тип("ГруппаФормы") Тогда
		Если МестоРазмещенияКомандПоУмолчанию.Вид = ВидГруппыФормы.Подменю
			Или МестоРазмещенияКомандПоУмолчанию.Заголовок = НСтр("ru = 'Печать'")
			Или МестоРазмещенияКомандПоУмолчанию.Имя = "ПодменюПечать" Тогда
			Родитель = МестоРазмещенияКомандПоУмолчанию.Родитель;
			Если ТипЗнч(Родитель) = Тип("ГруппаФормы") Тогда
				ПараметрыРазмещения.КоманднаяПанель = Родитель;
			КонецЕсли;
		Иначе
			ПараметрыРазмещения.КоманднаяПанель = МестоРазмещенияКомандПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(ОбъектыПечати) = Тип("Массив") Тогда
		ПараметрыРазмещения.Источники = ОбъектыПечати;
	КонецЕсли;
	ПодключаемыеКоманды.ПриСозданииНаСервере(Форма, ПараметрыРазмещения);
КонецПроцедуры

// Устарела. Настройка ЛокальныйКаталогФайловПечати больше не используется.
// Возвращает путь к каталогу, используемому при печати.
//
// Возвращаемое значение:
//  Строка - полный путь к каталогу временных файлов печати.
//
Функция ПолучитьЛокальныйКаталогФайловПечати() Экспорт
	Возврат "";
КонецФункции

#КонецОбласти

#Область РаботаСПечатямиПодписями

// Процедура готовит область факсимиле в печатных формах,
// которые сформированы на экране.
//
// Параметры:
//  ОбластьМакета      - УправляемаяФорма.
//  СведенияОДокументе - Строка таблицы значений, выборка из запроса.
//  ОбъектыПечати      - Список значений.
//  ПараметрыПечати    - Структура, дополнительные праметры печати
//						 хранит в частности адрес факсимиле во временном хранилище 
//
Процедура ДополнитьДокументПодписьюИПечатью(ОбластьМакета, СведенияОДокументе, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	КлючевыеДанные = Новый Структура("Документ, Организация,
			|Предприниматель, Руководитель, ГлавныйБухгалтер,
			|ОтветственныйЗаОформление, Исполнитель");
	
	// Заполняем по данным печатной формы
	КлючевыеДанные.Документ = СведенияОДокументе.Ссылка;
	КлючевыеДанные.Организация = СведенияОДокументе.Ссылка.Организация;
	КлючевыеДанные.Руководитель = СведенияОДокументе.Ссылка.Организация.ФИОРуководителя;
	КлючевыеДанные.ГлавныйБухгалтер = СведенияОДокументе.Ссылка.Организация.ФИОБухгалтера;
	КлючевыеДанные.Исполнитель = СведенияОДокументе.Ссылка.Автор;
	// Предприниматель - он же руководитель
	КлючевыеДанные.Предприниматель = СведенияОДокументе.Ссылка.Организация.ФИОРуководителя;
	
	Если НЕ ЗначениеЗаполнено(КлючевыеДанные.Организация)
		ИЛИ ТипЗнч(КлючевыеДанные.Организация) <> Тип("СправочникСсылка.Организации") Тогда
		УдалитьВсеОбластиФаксимиле(ОбластьМакета);
		Возврат;
	КонецЕсли;
	
	ДанныеОбласти      = ОбъектыПечати.НайтиПоЗначению(КлючевыеДанные.Документ);
	ОбластьВладелец    = ДанныеОбласти.Представление;
	ПозицияРазделителя = СтрНайти(ОбластьВладелец, ";", НаправлениеПоиска.СКонца);
	Если ПозицияРазделителя <> 0 Тогда
		ОбластьВладелец = СокрЛП(Прав(ОбластьВладелец, СтрДлина(ОбластьВладелец) - ПозицияРазделителя));
		ДанныеОбласти.Представление = ОбластьВладелец;
	КонецЕсли;
	
	СоответствиеФаксимиле          = Новый Соответствие;
	МассивИменПоказателей          = Новый Массив;
	МассивУдаляемыхИменПоказателей = Новый Массив;
	ОрганизацияЮридическоеЛицо     = Истина;
	
	ПолучитьДанныеФаксимиле(СоответствиеФаксимиле,
		МассивИменПоказателей,
		МассивУдаляемыхИменПоказателей,
		ОрганизацияЮридическоеЛицо,
		КлючевыеДанные.Организация,
		ПараметрыПечати);
	
	// Удаляем заведомо лишние картинки из табличного документа
	Для Каждого ЗначениеПоказателя ИЗ МассивУдаляемыхИменПоказателей Цикл
		ОчиститьОбластьФаксимиле(ОбластьМакета, ЗначениеПоказателя, ОбластьВладелец);
	КонецЦикла;
	
	// В некоторых случаях на форме есть взаимоисключающие реквизиты.
	// Например, подпись руководителя и подпись предпринимателя в счете-фактуре
	Если ОрганизацияЮридическоеЛицо Тогда
		ОчиститьОбластьФаксимиле(ОбластьМакета, "ФаксимилеПредприниматель", ОбластьВладелец);
	Иначе
		ОбластьФаксимиле = ОбластьМакета.Области.Найти("ФаксимилеПредприниматель" + "_" + ОбластьВладелец);
		Если ОбластьФаксимиле <> Неопределено Тогда
			ОчиститьОбластьФаксимиле(ОбластьМакета, "ФаксимилеРуководитель", ОбластьВладелец);
		КонецЕсли;
	КонецЕсли;
	
	РасшифровкаФаксимилеМакета = Новый Структура();
	
	Для Каждого ЗначениеПоказателя ИЗ МассивИменПоказателей Цикл
		
		// Печать нельзя привязать к ответственному лицу
		Если СтрНайти(ЗначениеПоказателя, "ФаксимилеПечать") > 0
			ИЛИ СтрНайти(ЗначениеПоказателя, "ФаксимильнаяПечать") > 0 Тогда
			КлючСоответствия = "Организация";
		Иначе
			КлючСоответствия = СтрЗаменить(ЗначениеПоказателя, "Факсимиле", "");
			КлючСоответствия = СтрЗаменить(КлючСоответствия,   "Накладная", "");
			КлючСоответствия = СтрЗаменить(КлючСоответствия,   "Услуги",    "");
			КлючСоответствия = СтрЗаменить(КлючСоответствия,   "Материалы", "");
		КонецЕсли;
		
		ОбработатьОбластьФаксимиле(РасшифровкаФаксимилеМакета,
			ОбластьВладелец,
			ОбластьМакета,
			ЗначениеПоказателя,
			КлючевыеДанные,
			КлючСоответствия,
			СоответствиеФаксимиле);
			
	КонецЦикла;
	
	// Измененный макет, не содержащий области факсимиле
	Если РасшифровкаФаксимилеМакета.Количество() = 0 Тогда
		УдалитьВсеОбластиФаксимиле(ОбластьМакета);
		Возврат;
	КонецЕсли;
	
	// Расшифровка в первой колонке последней строки
	АдресПараметровРасшифровки = ПоместитьВоВременноеХранилище(РасшифровкаФаксимилеМакета, Новый УникальныйИдентификатор);
	
	ОбластьРасшифровки = ОбластьМакета.Область("R" + Формат(ОбластьМакета.Области[ОбластьВладелец].Низ, "ЧГ=")
		 + "C1:R" + Формат(ОбластьМакета.Области[ОбластьВладелец].Низ, "ЧГ=") + "C1");
		
	ОбластьРасшифровки.Имя = "РасшифровкаФаксимилеМакета_" + ОбластьВладелец;
	ОбластьРасшифровки.Расшифровка = АдресПараметровРасшифровки;
	ОбластьРасшифровки.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
	
КонецПроцедуры

Процедура УдалитьВсеОбластиФаксимиле(ОбластьМакета) Экспорт
	
	МассивИменПоказателей = МассивИменПоказателейФаксимиле();
	Для Каждого ЗначениеПоказателя ИЗ МассивИменПоказателей Цикл
		ОчиститьОбластьФаксимиле(ОбластьМакета, ЗначениеПоказателя);
	КонецЦикла;
	
КонецПроцедуры

Функция МассивИменПоказателейФаксимиле()
	
	МассивИменПоказателей = Новый Массив;
	МассивИменПоказателей.Добавить("ФаксимилеПечать");
	МассивИменПоказателей.Добавить("ФаксимилеПечатьПредприниматель");
	МассивИменПоказателей.Добавить("ФаксимилеРуководитель");
	МассивИменПоказателей.Добавить("ФаксимилеРуководительНакладная");
	МассивИменПоказателей.Добавить("ФаксимилеПредприниматель");
	МассивИменПоказателей.Добавить("ФаксимилеГлавныйБухгалтер");
	МассивИменПоказателей.Добавить("ФаксимилеОтветственныйЗаОформление");
	МассивИменПоказателей.Добавить("ФаксимилеИсполнитель");
	МассивИменПоказателей.Добавить("ФаксимилеИсполнительНакладнаяУслуги");
	МассивИменПоказателей.Добавить("ФаксимилеИсполнительНакладнаяМатериалы");
	МассивИменПоказателей.Добавить("ФаксимилеКладовщик");
	// для совместимости - подвал Счета
	МассивИменПоказателей.Добавить("ФаксимильнаяПечать");
	МассивИменПоказателей.Добавить("ФаксимильнаяПечатьПредприниматель");
	
	Возврат МассивИменПоказателей;
	
КонецФункции

Процедура ОчиститьОбластьФаксимиле(ОбластьМакета, ИмяОбласти, ОбластьВладелец = Неопределено) Экспорт
	
	ИмяОбластиДляОчистки = ?(ЗначениеЗаполнено(ОбластьВладелец), ИмяОбласти + "_" + ОбластьВладелец, ИмяОбласти);
	
	ОбластьФаксимиле = ОбластьМакета.Области.Найти(ИмяОбластиДляОчистки);
	Если ОбластьФаксимиле <> Неопределено Тогда
		ОбластьМакета.Рисунки.Удалить(ОбластьФаксимиле.Имя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеФаксимиле(СоответствиеФаксимиле,
								МассивИменПоказателей,
								МассивУдаляемыхИменПоказателей,
								ОрганизацияЮридическоеЛицо,
								Организация,
								ПараметрыПечати)
								
	ДанныеФаксимиле = Неопределено;							
	АдресВременногоХранилищаФаксимиле = "";
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
		Если ПараметрыПечати.Свойство("АдресВременногоХранилищаФаксимиле", АдресВременногоХранилищаФаксимиле) Тогда
			ДанныеФаксимиле = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФаксимиле);
			Если ЗначениеЗаполнено(ДанныеФаксимиле) Тогда
				ДанныеФаксимилеОрганизации = ДанныеФаксимиле.Получить(Организация);
				Если ДанныеФаксимилеОрганизации <> Неопределено Тогда
					СоответствиеФаксимиле          = ДанныеФаксимилеОрганизации.СоответствиеФаксимиле;
					МассивИменПоказателей          = ДанныеФаксимилеОрганизации.МассивИменПоказателей;
					МассивУдаляемыхИменПоказателей = ДанныеФаксимилеОрганизации.МассивУдаляемыхИменПоказателей;
					ОрганизацияЮридическоеЛицо     = ДанныеФаксимилеОрганизации.ОрганизацияЮридическоеЛицо;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(АдресВременногоХранилищаФаксимиле) Тогда
		АдресВременногоХранилищаФаксимиле = ПоместитьВоВременноеХранилище("", Новый УникальныйИдентификатор);
	КонецЕсли;
	
	НастройкиВыводаФаксимиле = ХранилищеОбщихНастроек.Загрузить("УправлениеФаксимиле", "НастройкиВыводаФаксимиле");
	Если ТипЗнч(НастройкиВыводаФаксимиле) = Тип("Структура")
		И НастройкиВыводаФаксимиле.Свойство("ФаксимилеДоступноДляВывода") Тогда
		ФаксимилеДоступноДляВывода = НастройкиВыводаФаксимиле.ФаксимилеДоступноДляВывода;
	Иначе
		ФаксимилеДоступноДляВывода = Истина;
	КонецЕсли;	
	
	ОрганизацияЮридическоеЛицо = ЭтоЮрЛицо(Организация);
	
	МассивИменПоказателей = МассивИменПоказателейФаксимиле();
	
	ДвоичныеДанныеПечати                    = Неопределено;
	ДвоичныеДанныеПодписьРуководителя       = Неопределено;
	ДвоичныеДанныеПодписьГлавногоБухгалтера = Неопределено;
	ДвоичныеДанныеФаксимиле                 = Неопределено;
	Попытка
		ПредставлениеРеквизита = НСтр("ru = 'Печать'");
		ДвоичныеДанныеПечати = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(
			Организация, "ФайлПечать");
			
		ПроверитьРазмерФаксимиле(ДвоичныеДанныеПечати, ПредставлениеРеквизита, Организация, ФаксимилеДоступноДляВывода);
			
		Если ОрганизацияЮридическоеЛицо Тогда
			ПредставлениеРеквизита = НСтр("ru = 'Подпись руководителя'");	
		Иначе
			ПредставлениеРеквизита = НСтр("ru = 'Подпись'");
		КонецЕсли;
		ДвоичныеДанныеПодписьРуководителя = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(
			Организация, "ФайлПодписьРуководителя");
			
		ПроверитьРазмерФаксимиле(ДвоичныеДанныеПодписьРуководителя, ПредставлениеРеквизита, Организация, ФаксимилеДоступноДляВывода);
			
		Если ОрганизацияЮридическоеЛицо Тогда
			ПредставлениеРеквизита = НСтр("ru = 'Подпись главного бухгалтера'");	
			ДвоичныеДанныеПодписьГлавногоБухгалтера = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(
				Организация, "ФайлПодписьГлавногоБухгалтера");
				
			ПроверитьРазмерФаксимиле(ДвоичныеДанныеПодписьГлавногоБухгалтера, ПредставлениеРеквизита, Организация, ФаксимилеДоступноДляВывода);
		КонецЕсли;
			
		ПредставлениеРеквизита = НСтр("ru = 'Факсимильная подпись и печать'");	
		ДвоичныеДанныеФаксимиле = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(
			Организация, "ФайлФаксимильнаяПечать");
			
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Организация'"), УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Организации, Организация,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		Если ХранилищеОбщихНастроек.Загрузить("УправлениеФаксимиле", "ВыводитьФаксимиле") = Истина Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка получения картинки ""%1"" для организации %2. Подробности в журнале регистрации.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				ПредставлениеРеквизита, Организация));
		КонецЕсли;
	КонецПопытки;

	СоответствиеФаксимиле = Новый Соответствие;
	Если ЗначениеЗаполнено(Организация.ФИОРуководителя) Тогда
		СоответствиеФаксимиле.Вставить(Организация.ФИОРуководителя,
			ПоместитьВоВременноеХранилище(Новый Картинка(ДвоичныеДанныеПодписьРуководителя), Новый УникальныйИдентификатор));
	КонецЕсли;
	Если ОрганизацияЮридическоеЛицо
		И Организация.ФИОБухгалтера <> Организация.ФИОРуководителя И ЗначениеЗаполнено(Организация.ФИОБухгалтера) Тогда	
		СоответствиеФаксимиле.Вставить(Организация.ФИОБухгалтера, 
			ПоместитьВоВременноеХранилище(Новый Картинка(ДвоичныеДанныеПодписьГлавногоБухгалтера), Новый УникальныйИдентификатор));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДвоичныеДанныеФаксимиле)
		И НЕ ЗначениеЗаполнено(ДвоичныеДанныеПечати)
		И НЕ ЗначениеЗаполнено(ДвоичныеДанныеПодписьРуководителя)
		И НЕ ЗначениеЗаполнено(ДвоичныеДанныеПодписьГлавногоБухгалтера) Тогда
		СоответствиеФаксимиле.Вставить(Организация,
			ПоместитьВоВременноеХранилище(Новый Картинка(ДвоичныеДанныеФаксимиле), Новый УникальныйИдентификатор));
		ИмяПоказателя = "ФаксимилеПечать";
		МассивИменПоказателей.Удалить(МассивИменПоказателей.Найти(ИмяПоказателя));
		МассивУдаляемыхИменПоказателей.Добавить(ИмяПоказателя);
		ИмяПоказателя = "ФаксимилеПечатьПредприниматель";
		МассивИменПоказателей.Удалить(МассивИменПоказателей.Найти(ИмяПоказателя));
		МассивУдаляемыхИменПоказателей.Добавить(ИмяПоказателя);
	Иначе
		СоответствиеФаксимиле.Вставить(Организация,
			ПоместитьВоВременноеХранилище(Новый Картинка(ДвоичныеДанныеПечати), Новый УникальныйИдентификатор));
		ИмяПоказателя = "ФаксимильнаяПечать";
		МассивИменПоказателей.Удалить(МассивИменПоказателей.Найти(ИмяПоказателя));
		МассивУдаляемыхИменПоказателей.Добавить(ИмяПоказателя);
		ИмяПоказателя = "ФаксимильнаяПечатьПредприниматель";
		МассивИменПоказателей.Удалить(МассивИменПоказателей.Найти(ИмяПоказателя));
		МассивУдаляемыхИменПоказателей.Добавить(ИмяПоказателя);
	КонецЕсли;

	ДанныеФаксимилеОрганизации = Новый Структура("СоответствиеФаксимиле, МассивИменПоказателей, МассивУдаляемыхИменПоказателей, ОрганизацияЮридическоеЛицо",
												СоответствиеФаксимиле, МассивИменПоказателей, МассивУдаляемыхИменПоказателей, ОрганизацияЮридическоеЛицо);
	
	Если НЕ ЗначениеЗаполнено(ДанныеФаксимиле) Тогда
		ДанныеФаксимиле = Новый Соответствие;
	КонецЕсли;
	ДанныеФаксимиле.Вставить(Организация, ДанныеФаксимилеОрганизации);
	
	АдресВременногоХранилищаФаксимиле = ПоместитьВоВременноеХранилище(ДанныеФаксимиле, АдресВременногоХранилищаФаксимиле);
	ПараметрыПечати.Вставить("АдресВременногоХранилищаФаксимиле", АдресВременногоХранилищаФаксимиле);
	
	НастройкиВыводаФаксимиле = ХранилищеОбщихНастроек.Загрузить("УправлениеФаксимиле", "НастройкиВыводаФаксимиле");
	Если НастройкиВыводаФаксимиле = Неопределено Тогда
		НастройкиВыводаФаксимиле = Новый Структура;
	КонецЕсли;	
	НастройкиВыводаФаксимиле.Вставить("ФаксимилеДоступноДляВывода", ФаксимилеДоступноДляВывода);
	ХранилищеОбщихНастроек.Сохранить("УправлениеФаксимиле", "НастройкиВыводаФаксимиле", НастройкиВыводаФаксимиле);
	
КонецПроцедуры

Функция ЭтоЮрЛицо(Организация) Экспорт
	ДлинаИНН = СтрДлина(Организация.ИНН);
	Возврат ДлинаИНН = 10 ИЛИ ДлинаИНН = 0;
КонецФункции

Процедура ОбработатьОбластьФаксимиле(РасшифровкаФаксимилеМакета,
				ОбластьВладелец,
				ОбластьМакета,
				ИмяОбласти,
				КлючевыеДанные,
				ИмяДанных,
				СоответствиеФаксимиле)
	
	ОбластьФаксимиле = ОбластьМакета.Области.Найти(ИмяОбласти + "_" + ОбластьВладелец);
	Если ОбластьФаксимиле <> Неопределено Тогда
		РасшифровкаФаксимилеМакета.Вставить(ИмяОбласти,
			ДополнитьРасшифровкуФаксимиле(КлючевыеДанные.Документ,
					ПолучитьДанныеКартинки(КлючевыеДанные[ИмяДанных], СоответствиеФаксимиле),
					ОбластьВладелец,
					ОбластьФаксимиле));
		ОбластьМакета.Рисунки.Удалить(ОбластьФаксимиле.Имя);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеКартинки(КлючевойПоказатель, СоответствиеФаксимиле)
	
	ДанныеКартинки  = "";
	Если ЗначениеЗаполнено(КлючевойПоказатель) Тогда
		ДанныеКартинки = СоответствиеФаксимиле.Получить(КлючевойПоказатель);
	КонецЕсли;
	
	Возврат ДанныеКартинки;
	
КонецФункции

Функция ДополнитьРасшифровкуФаксимиле(ДанныеДокумента, ДанныеКартинки, ОбластьВладелец, ОбластьФаксимиле)
	
	РасшифровкаМакета = Новый Структура();
	РасшифровкаМакета.Вставить("Документ",         ДанныеДокумента);
	РасшифровкаМакета.Вставить("ДанныеКартинки",   ДанныеКартинки);
	РасшифровкаМакета.Вставить("Высота",           ОбластьФаксимиле.Высота);
	РасшифровкаМакета.Вставить("Ширина",           ОбластьФаксимиле.Ширина);
	РасшифровкаМакета.Вставить("Верх",             ОбластьФаксимиле.Верх);
	РасшифровкаМакета.Вставить("Лево",             ОбластьФаксимиле.Лево);
	РасшифровкаМакета.Вставить("ОбластьВладелец",  ОбластьВладелец);
	
	Возврат РасшифровкаМакета;
	
КонецФункции

#Область НаличиеФаксимиле

// Собирает данные для проверки заполнения необходимых реквизитов пред печатью с факсимильной подписью.
//
// Параметры:
//  МассивДокументов - Массив - массив ссылок на документы одного типа.
//
// Возвращаемое значение:
//  Структура:
//    * НужноЗаполнить - Булево- нужно заполнить реквизиты.
//    * Организация - СправочникСсылка.Организации - организация документов.
//    * ПредложитьНастроить - Булево - у пользователя достаточно прав для настройки.
//
Функция ПроверитьЗаполнениеПечатиПодписейОрганизации(МассивДокументов, ФаксимилеДоступноДляВывода)
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	РезультатПроверки.Вставить("НужноЗаполнить", Ложь);
	РезультатПроверки.Вставить("ПредложитьНастроить", Ложь);
	РезультатПроверки.Вставить("ФаксимилеДоступноДляВывода", ФаксимилеДоступноДляВывода);
	
	НужноЗаполнить = НЕ ФаксимилеДоступноДляВывода;
		
	ОрганизацииДокументов = ОрганизацииДокументовДляПечати(МассивДокументов);
	Если ОрганизацииДокументов.Количество() = 1 Тогда
		
		Организация = ОрганизацииДокументов[0];
		
		РезультатПроверки.Организация = Организация;
		
		Если ФаксимилеДоступноДляВывода Тогда
			ПроверяемыеРеквизиты = Новый Массив;
			ПроверяемыеРеквизиты.Добавить("ФайлПодписьРуководителя");
			ПроверяемыеРеквизиты.Добавить("ФайлПечать");
			ПроверяемыеРеквизиты.Добавить("ФайлПодписьГлавногоБухгалтера");
			
			НужноЗаполнить = Не ЗаполненыПечатьИПодписи(Организация, ПроверяемыеРеквизиты);
		
			Если НужноЗаполнить Тогда
				НужноЗаполнить = Не ЗаполненыПечатьИПодписи(Организация,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ФайлФаксимильнаяПечать"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатПроверки.НужноЗаполнить      = НужноЗаполнить;
	РезультатПроверки.ПредложитьНастроить = НужноЗаполнить 
											И ПравоДоступа("Редактирование", Метаданные.Справочники.Организации);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ОрганизацииДокументовДляПечати(МассивДокументов)
	
	Организации = Новый Массив;
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат Организации;
	КонецЕсли;
	
	МетаданныеДокумента = МассивДокументов[0].Метаданные();
	Если НЕ Метаданные.Документы.Содержит(МетаданныеДокумента) Тогда
		Возврат Организации;
	КонецЕсли;
		
	МетаданныеИмя = МетаданныеДокумента.ПолноеИмя();
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ОрганизацияПолучатель", МетаданныеДокумента) Тогда
		ИмяРеквизита = "ОрганизацияПолучатель";
	Иначе
		ИмяРеквизита = "Организация";
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	ПакетЗапроса = СхемаЗапроса.ПакетЗапросов[0];
	Оператор = ПакетЗапроса.Операторы[0];
	Оператор.Источники.Добавить(МетаданныеИмя, "Документ");
	Оператор.ВыбиратьРазличные = Истина;
	Оператор.ВыбираемыеПоля.Добавить("Документ." + ИмяРеквизита);
	ПакетЗапроса.Колонки[0].Псевдоним = "Организация";
	Оператор.Отбор.Добавить("Документ.Ссылка В(&Документы)");
	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("Документы", МассивДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Организации.Добавить(Выборка.Организация);
	КонецЦикла;
	
	Возврат Организации;
	
КонецФункции

Функция ЗаполненыПечатьИПодписи(Организация, ПроверяемыеРеквизиты)
	
	РеквизитыЗаполнены = Ложь;
	
	Если ЗначениеЗаполнено(Организация) И ПроверяемыеРеквизиты.Количество() <> 0 Тогда
		
		ЗначенияРеквизитовОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Организация,
			Новый ФиксированныйМассив(ПроверяемыеРеквизиты));
		
		Для Каждого Реквизит Из ЗначенияРеквизитовОрганизации Цикл
			Если НЕ Реквизит.Значение.Пустая() Тогда
				РеквизитыЗаполнены = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РеквизитыЗаполнены;
	
КонецФункции

Процедура ПроверитьРазмерФаксимиле(ДвоичныеДанныеФаксимиле, ПредставлениеРеквизита, Организация, ФаксимилеДоступноДляВывода)
	
	Если НЕ ФаксимилеДоступноДляВывода Тогда
		ДвоичныеДанныеФаксимиле = Неопределено;
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДвоичныеДанныеФаксимиле) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДопустимыйРазмерКартинки(ДвоичныеДанныеФаксимиле.Размер(), ПредставлениеРеквизита, Организация) Тогда
		
		ФаксимилеДоступноДляВывода = Ложь;
		ДвоичныеДанныеФаксимиле    = Неопределено;
				
	КонецЕсли;
	
КонецПроцедуры

Функция ДопустимыйРазмерКартинки(РазмерКартинки, ПредставлениеКартинки, ВладелецКартинки, ОповеститьПользователя = Ложь) Экспорт
	
	ДопустимыйРазмерКартинки = РазмерКартинки <= 512000;
	
	Если НЕ ДопустимыйРазмерКартинки Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Размер картинки ""%1"" слишком велик.
				|Рекомендуется использовать файл формата *.png размером не более 500 Кб.'"),
				ПредставлениеКартинки);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Организация'"), УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Организации, ВладелецКартинки,
			ТекстОшибки);
			
		Если ОповеститьПользователя Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВладелецКартинки);
		КонецЕсли;
			
		Возврат Ложь;			
	КонецЕсли;
	
	Возврат ДопустимыйРазмерКартинки;
	
КонецФункции

#КонецОбласти

Функция ПрефиксыИменОбластейСПодписьюИПечатью() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Печать");
	Результат.Добавить("Подпись");
	Результат.Добавить("Факсимиле");
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСписокДокументов(НастройкаПечатныхФорм)
	
	СписокДокументов = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(НастройкаПечатныхФорм.ИмяФайлаПечатнойФормы) Тогда
		СоответствиеДокументов = ОбщегоНазначения.ЗначениеИзСтрокиXML(НастройкаПечатныхФорм.ИмяФайлаПечатнойФормы);
		Если ТипЗнч(СоответствиеДокументов) = Тип("Соответствие") Тогда
			Для Каждого ЗначениеСоответствия Из СоответствиеДокументов Цикл
				СписокДокументов.Добавить(ЗначениеСоответствия.Ключ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокДокументов;
	
КонецФункции

Функция МожноВывестиФаксимиле(ПроверяемоеЗначение)
	
	// Факсимиле добавляется только для документов,
	// у которых есть реквизит Организация
	
	Можно = Истина;
	
	Если НЕ ЗначениеЗаполнено(ПроверяемоеЗначение) Тогда
		Можно = Ложь;
	КонецЕсли;
	ПроверяемыеМетаданные = ПроверяемоеЗначение.Метаданные();
	Если НЕ Метаданные.Документы.Содержит(ПроверяемыеМетаданные) Тогда
		Можно = Ложь;
	КонецЕсли;
	Если ПроверяемыеМетаданные.Реквизиты.Найти("Организация") = Неопределено Тогда
		Можно = Ложь;
	КонецЕсли;
	
	Возврат Можно;
	
КонецФункции

Процедура УправлениеКартинкойФаксимиле(РабочаяПечатнаяФорма, МассивИменПоказателей, Добавить = Истина)
	
	МассивИменОбластей = Новый Массив;
	Для Каждого ОбластьМакета ИЗ РабочаяПечатнаяФорма.Области Цикл
		Если СтрНайти(ОбластьМакета.Имя, "РасшифровкаФаксимилеМакета") <> 0 Тогда
			МассивИменОбластей.Добавить(ОбластьМакета.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ЦветФонаБелый = Новый Цвет(255,255,255);
	ЦветФонаАвто  = Новый Цвет();
	
	Для Каждого ИмяОбластиМакета ИЗ МассивИменОбластей Цикл
		
		ОбластьМакета = РабочаяПечатнаяФорма.Области[ИмяОбластиМакета];
		Если НЕ ЭтоАдресВременногоХранилища(ОбластьМакета.Расшифровка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеФаксимиле = ПолучитьИзВременногоХранилища(ОбластьМакета.Расшифровка);
		Если ТипЗнч(ДанныеФаксимиле) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ЗначениеПоказателя ИЗ МассивИменПоказателей Цикл
			
			Если НЕ ДанныеФаксимиле.Свойство(ЗначениеПоказателя) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураЗначений = ДанныеФаксимиле[ЗначениеПоказателя];
			
			ИмяОбластиФаксимиле = ЗначениеПоказателя + "_" + СтруктураЗначений.ОбластьВладелец;
			
			АдресКартинки = СтруктураЗначений.ДанныеКартинки;
			
			Если Добавить И ЗначениеЗаполнено(АдресКартинки) Тогда
				
				ОбластьКартинки = РабочаяПечатнаяФорма.Области[СтруктураЗначений.ОбластьВладелец];
				
				РисунокТабличногоДокумента = РабочаяПечатнаяФорма.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
				РисунокТабличногоДокумента.Имя = ИмяОбластиФаксимиле;
				РисунокТабличногоДокумента.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
				РисунокТабличногоДокумента.РазмерКартинки = РазмерКартинки.Пропорционально;
				РабочаяПечатнаяФорма.Рисунки[РисунокТабличногоДокумента.Имя].Картинка = ПолучитьИзВременногоХранилища(АдресКартинки);
				РабочаяПечатнаяФорма.Рисунки[РисунокТабличногоДокумента.Имя].Расположить(ОбластьКартинки);
				РабочаяПечатнаяФорма.Рисунки[РисунокТабличногоДокумента.Имя].Верх           = СтруктураЗначений.Верх;
				РабочаяПечатнаяФорма.Рисунки[РисунокТабличногоДокумента.Имя].Лево           = СтруктураЗначений.Лево;
				РабочаяПечатнаяФорма.Рисунки[РисунокТабличногоДокумента.Имя].Высота         = СтруктураЗначений.Высота;
				РабочаяПечатнаяФорма.Рисунки[РисунокТабличногоДокумента.Имя].Ширина         = СтруктураЗначений.Ширина;
				Если СтрНайти(РисунокТабличногоДокумента.Имя, "ФаксимильнаяПечать") > 0 Тогда
					РабочаяПечатнаяФорма.Рисунки[РисунокТабличногоДокумента.Имя].ЦветФона   = ЦветФонаБелый;
				Иначе
					РабочаяПечатнаяФорма.Рисунки[РисунокТабличногоДокумента.Имя].ЦветФона   = ЦветФонаАвто;
				КонецЕсли;
			Иначе
				
				Если РабочаяПечатнаяФорма.Области.Найти(ИмяОбластиФаксимиле) <> Неопределено Тогда
					РабочаяПечатнаяФорма.Рисунки.Удалить(ИмяОбластиФаксимиле);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла
		
	КонецЦикла;
	
КонецПроцедуры

#Область ДобавлениеФаксимиле

Процедура ПриПолученииПодписейИПечатей(СписокДокументов, ПодписиИПечати) Экспорт
	
	КомплектыПодписейИПечатей = Новый Соответствие;
	
	ДокументыПоТипам = ДокументыПоТипам(СписокДокументов);
	
	Для Каждого ДокументыПоТипу Из ДокументыПоТипам Цикл
		
		ТипДокумента = ДокументыПоТипу.Ключ;
		Если ВДокументеЕстьОрганизация(ТипДокумента) Тогда
			ОрганизацииВДокументах = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДокументыПоТипу.Значение, "Организация");
			Для Каждого ОрганизацияВДокументе Из ОрганизацииВДокументах Цикл
				Документ = ОрганизацияВДокументе.Ключ;
				Организация = ОрганизацияВДокументе.Значение;
				КомплектПодписейИПечатей = КомплектыПодписейИПечатей[Организация];
				Если КомплектПодписейИПечатей = Неопределено Тогда
					КомплектПодписейИПечатей = Справочники.Организации.ПодписиИПечатиОрганизации(Организация);
					КомплектыПодписейИПечатей.Вставить(Организация, КомплектПодписейИПечатей);
				КонецЕсли;
				ПодписиИПечати.Вставить(Документ, КомплектПодписейИПечатей);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДокументыПоТипам(СписокДокументов)
	
	ДокументыПоТипам = Новый Соответствие;
	Для Каждого Документ Из СписокДокументов Цикл
		ТипДокумента = ТипЗнч(Документ);
		Если ДокументыПоТипам[ТипДокумента] = Неопределено Тогда
			ДокументыПоТипам[ТипДокумента] = Новый Массив;
		КонецЕсли;
		ДокументыПоТипам[ТипДокумента].Добавить(Документ);
	КонецЦикла;
	
	Возврат ДокументыПоТипам;
	
КонецФункции

Функция ВДокументеЕстьОрганизация(ТипДокумента)
	
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипДокумента);
	Возврат ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеДокумента);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Скрывает команды печати из подменю "Печать".
Процедура ОтключитьКомандыПечати(СписокОбъектов, СписокКоманд) Экспорт
	НаборЗаписей = РегистрыСведений.НастройкиКомандПечати.СоздатьНаборЗаписей();
	Для Каждого Объект Из СписокОбъектов Цикл
		КомандыПечатиОбъекта = СтандартныеКомандыПечатиОбъекта(Объект);
		Для Каждого ИдентификаторЗаменяемойКоманды Из СписокКоманд Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("Идентификатор", ИдентификаторЗаменяемойКоманды);
			Отбор.Вставить("ФорматСохранения");
			Отбор.Вставить("СразуНаПринтер", Ложь);
			Отбор.Вставить("Отключена", Ложь);
			
			СписокЗаменяемыхКоманд = КомандыПечатиОбъекта.НайтиСтроки(Отбор);
			Для Каждого ЗаменяемаяКоманда Из СписокЗаменяемыхКоманд Цикл
				НаборЗаписей.Отбор.Владелец.Установить(Объект);
				НаборЗаписей.Отбор.УникальныйИдентификатор.Установить(ЗаменяемаяКоманда.УникальныйИдентификатор);
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				Если НаборЗаписей.Количество() = 0 Тогда
					Запись = НаборЗаписей.Добавить();
				Иначе
					Запись = НаборЗаписей[0];
				КонецЕсли;
				Запись.Владелец = Объект;
				Запись.УникальныйИдентификатор = ЗаменяемаяКоманда.УникальныйИдентификатор;
				Запись.Видимость = Ложь;
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Возвращает список поставляемых команд печати объекта.
//
// Параметры:
//  Объект - СправочникСсылка.ИдентификаторыОбъектовМетаданных;
Функция СтандартныеКомандыПечатиОбъекта(Объект) Экспорт
	КомандыПечатиОбъекта = КомандыПечатиОбъекта(
		ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Объект));
		
	ВнешниеКомандыПечати = КомандыПечатиОбъекта.НайтиСтроки(Новый Структура("МенеджерПечати", "СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки"));
	Для Каждого КомандаПечати Из ВнешниеКомандыПечати Цикл
		КомандыПечатиОбъекта.Удалить(КомандаПечати);
	КонецЦикла;
	
	Возврат КомандыПечатиОбъекта;
КонецФункции

// Возвращает список объектов метаданных, в которых внедрена подсистема Печать.
//
// Возвращаемое значение:
//  Массив - список из элементов типа ОбъектМетаданных.
Функция ИсточникиКомандПечати() Экспорт
	ОбъектыСКомандамиПечати = Новый Массив;
	
	СписокОбъектов = Новый Массив;
	ИнтеграцияСтандартныхПодсистем.ПриОпределенииОбъектовСКомандамиПечати(ОбъектыСКомандамиПечати);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыСКомандамиПечати, СписокОбъектов, Истина);
	
	СписокОбъектов = Новый Массив;
	УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыСКомандамиПечати, СписокОбъектов, Истина);
	
	Результат = Новый Массив;
	Для Каждого ОбъектМенеджер Из ОбъектыСКомандамиПечати Цикл
		Результат.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(ОбъектМенеджер)));
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Подготовить коллекцию печатных форм - таблицу значений используемые при формировании печатных форм.
//
Функция ПодготовитьКоллекциюПечатныхФорм(Знач ИменаМакетов) Экспорт
	
	Макеты = Новый ТаблицаЗначений;
	Макеты.Колонки.Добавить("ИмяМакета");
	Макеты.Колонки.Добавить("ИмяВРЕГ");
	Макеты.Колонки.Добавить("СинонимМакета");
	Макеты.Колонки.Добавить("ТабличныйДокумент");
	Макеты.Колонки.Добавить("Экземпляров");
	Макеты.Колонки.Добавить("Картинка");
	Макеты.Колонки.Добавить("ПолныйПутьКМакету");
	Макеты.Колонки.Добавить("ИмяФайлаПечатнойФормы");
	
	Если ТипЗнч(ИменаМакетов) = Тип("Строка") Тогда
		ИменаМакетов = СтрРазделить(ИменаМакетов, ",");
	КонецЕсли;
	
	Для Каждого ИмяМакета Из ИменаМакетов Цикл
		Макет = Макеты.Найти(ИмяМакета, "ИмяМакета");
		Если Макет = Неопределено Тогда
			Макет = Макеты.Добавить();
			Макет.ИмяМакета = ИмяМакета;
			Макет.ИмяВРЕГ = ВРег(ИмяМакета);
			Макет.Экземпляров = 1;
		Иначе
			Макет.Экземпляров = Макет.Экземпляров + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Макеты;
	
КонецФункции

// Подготовить структуру параметров вывода для менеджера объекта формирующего печатные формы.
//
Функция ПодготовитьСтруктуруПараметровВывода() Экспорт
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ДоступнаПечатьПоКомплектно", Ложь); // не используется
	
	СтруктураПараметровПисьма = Новый Структура("Получатель,Тема,Текст", Неопределено, "", "");
	ПараметрыВывода.Вставить("ПараметрыОтправки", СтруктураПараметровПисьма);
	
	Возврат ПараметрыВывода;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений.

// Подготавливает печатные формы для шаблонов сообщений
//
Функция ПодготовитьПечатныеФормы(Знач ИмяМенеджераПечати, Знач ИменаМакетов, Знач МассивОбъектов, Знач ПараметрыПечати, 
	ДопустимыеТипыОбъектовПечати = Неопределено) Экспорт
	Возврат СформироватьПечатныеФормы(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати, ДопустимыеТипыОбъектовПечати);
КонецФункции

// Возвращает допустимые для сохранения форматы печатных форм для шаблонов сообщений.
//
Функция ФорматыСохраненияТабличногоДокумента() Экспорт
	Возврат НастройкиФорматовСохраненияТабличногоДокумента();
КонецФункции

Функция КомандыПечатиОбъектаДоступныеДляВложений(ОбъектМетаданных) Экспорт
	Возврат КомандыПечатиОбъекта(ОбъектМетаданных);
КонецФункции

// Формирует печатную форму по внешнему источнику.
//
// Параметры:
//   ДополнительнаяОбработкаСсылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - внешняя обработка.
//   ПараметрыИсточника            - Структура - структура со свойствами:
//       * ИдентификаторКоманды - Строка - список макетов, перечисленных через запятую.
//       * ОбъектыНазначения    - Массив
//   КоллекцияПечатныхФорм - ТаблицаЗначений - см. описание процедуры Печать() в документации.
//   ОбъектыПечати         - СписокЗначений  - см. описание процедуры Печать() в документации.
//   ПараметрыВывода       - Структура       - см. описание процедуры Печать() в документации.
//
Процедура ПечатьПоВнешнемуИсточнику(ДополнительнаяОбработкаСсылка, ПараметрыИсточника, КоллекцияПечатныхФорм,
	ОбъектыПечати, ПараметрыВывода) Экспорт
	
	МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
	ВнешняяОбработкаОбъект = МодульДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(ДополнительнаяОбработкаСсылка);
	Если ВнешняяОбработкаОбъект = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Внешняя обработка ""%1"" (тип ""%2"") не обслуживается.'"),
			Строка(ДополнительнаяОбработкаСсылка),
			Строка(ТипЗнч(ДополнительнаяОбработкаСсылка)));
	КонецЕсли;
	
	КоллекцияПечатныхФорм = ПодготовитьКоллекциюПечатныхФорм(ПараметрыИсточника.ИдентификаторКоманды);
	ПараметрыВывода = ПодготовитьСтруктуруПараметровВывода();
	ПараметрыВывода.Вставить("ДополнительнаяОбработкаСсылка", ДополнительнаяОбработкаСсылка);
	
	ВнешняяОбработкаОбъект.Печать(
		ПараметрыИсточника.ОбъектыНазначения,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
	
	// Проверим, все ли макеты были сформированы.
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		Если ПечатнаяФорма.ТабличныйДокумент = Неопределено Тогда
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В обработчике печати не был сформирован табличный документ для: %1'"),
				ПечатнаяФорма.ИмяМакета);
			ВызватьИсключение(ТекстСообщенияОбОшибке);
		КонецЕсли;
		
		ПечатнаяФорма.ТабличныйДокумент.КоличествоЭкземпляров = ПечатнаяФорма.Экземпляров;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем конфигурации.

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииСоставаНастроекПодключаемыхОбъектов.
Процедура ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса) Экспорт
	Настройка = НастройкиПрограммногоИнтерфейса.Добавить();
	Настройка.Ключ          = "ДобавитьКомандыПечати";
	Настройка.ОписаниеТипов = Новый ОписаниеТипов("Булево");
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд.
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя         = "Печать";
	Вид.ИмяПодменю  = "ПодменюПечать";
	Вид.Заголовок   = НСтр("ru = 'Печать'");
	Вид.Порядок     = 40;
	Вид.Картинка    = БиблиотекаКартинок.Печать;
	Вид.Отображение = ОтображениеКнопки.КартинкаИТекст;
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	КомандыПечати = СоздатьКоллекциюКомандПечати();
	КомандыПечати.Колонки.Добавить("Обработана", Новый ОписаниеТипов("Булево"));
	ИсточникиКомандПечати = ИсточникиКомандПечати();
	Отключенные = Неопределено;
	ЕстьФильтрПоОтключенным = Ложь;
	
	СтандартнаяОбработка = Истина;
	УправлениеПечатьюПереопределяемый.ПередДобавлениемКомандПечати(НастройкиФормы.ИмяФормы, КомандыПечати, СтандартнаяОбработка);
	КомандыПечати.ЗаполнитьЗначения(Истина, "Обработана");
	Если СтандартнаяОбработка Тогда
		Для Каждого Источник Из Источники.Строки Цикл
			НастройкиСписка = Новый Структура;
			НастройкиСписка.Вставить("МенеджерКомандПечати", Источник.Менеджер);
			НастройкиСписка.Вставить("АвтоматическоеЗаполнение", Источник.Строки.Количество() > 0);
			УправлениеПечатьюПереопределяемый.ПриПолученииНастроекСпискаКомандПечати(НастройкиСписка);
			Если НастройкиСписка.АвтоматическоеЗаполнение Тогда
				Для Каждого ДокументРегистратор Из Источник.Строки Цикл
					Если ИсточникиКомандПечати.Найти(ДокументРегистратор.Метаданные) <> Неопределено Тогда
						ПриПолученииКомандПечатиОбъекта(КомандыПечати, ДокументРегистратор, Истина);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ИсточникиКомандПечати.Найти(Источник.Метаданные) <> Неопределено Тогда
				ПриПолученииКомандПечатиОбъекта(КомандыПечати, Источник, Истина);
			КонецЕсли;
			
			ОтключенныеКомандыПечати = ОтключенныеКомандыПечати(Источник.СсылкаМетаданных);
			Если ОтключенныеКомандыПечати.Количество() > 0 Тогда
				ЕстьФильтрПоОтключенным = Истина;
				Если Отключенные = Неопределено Тогда
					Отключенные = ОтключенныеКомандыПечати;
				Иначе
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Отключенные, ОтключенныеКомандыПечати);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Найденные = ПодключенныеОтчетыИОбработки.НайтиСтроки(Новый Структура("ДобавитьКомандыПечати", Истина));
	Для Каждого ПодключенныйОбъект Из Найденные Цикл
		ПриПолученииКомандПечатиОбъекта(КомандыПечати, ПодключенныйОбъект, Ложь);
	КонецЦикла;
	
	КлючиПараметровОбработчика = "Обработчик, МенеджерПечати, ЗаголовокФормы, СразуНаПринтер, ФорматСохранения,
	|ПереопределитьПользовательскиеНастройкиКоличества, ДополнитьКомплектВнешнимиПечатнымиФормами,
	|ФиксированныйКомплект, ДополнительныеПараметры";
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		КомандаПечати.ДополнительныеПараметры.Вставить("ДополнитьКомплектВнешнимиПечатнымиФормами", КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами);
		Если ЕстьФильтрПоОтключенным Тогда
			КомандаПечати.УникальныйИдентификатор = УникальныйИдентификаторКомандыПечати(КомандаПечати);
			Если Отключенные.Найти(КомандаПечати.УникальныйИдентификатор) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Команда = Команды.Добавить();
		ЗаполнитьЗначенияСвойств(Команда, КомандаПечати, , "Обработчик");
		Команда.Вид = "Печать";
		Если Команда.Порядок = 0 Тогда
			Команда.Порядок = 50;
		КонецЕсли;
		Команда.Подменю = КомандаПечати.МестоРазмещения;
		Команда.МножественныйВыбор = Истина;
		Если ТипЗнч(КомандаПечати.ТипыОбъектовПечати) = Тип("Массив") И КомандаПечати.ТипыОбъектовПечати.Количество() > 0 Тогда
			Команда.ТипПараметра = Новый ОписаниеТипов(КомандаПечати.ТипыОбъектовПечати);
		КонецЕсли;
		Команда.ВидимостьВФормах = КомандаПечати.СписокФорм;
		Если КомандаПечати.НеВыполнятьЗаписьВФорме Тогда
			Команда.РежимЗаписи = "НеЗаписывать";
		ИначеЕсли КомандаПечати.ПроверкаПроведенияПередПечатью Тогда
			Команда.РежимЗаписи = "Проводить";
		Иначе
			Команда.РежимЗаписи = "Записывать";
		КонецЕсли;
		Команда.ТребуетсяРаботаСФайлами = КомандаПечати.ТребуетсяРасширениеРаботыСФайлами;
		
		Команда.Обработчик = "УправлениеПечатьюСлужебныйКлиент.ОбработчикКоманды";
		Команда.ДополнительныеПараметры = Новый Структура(КлючиПараметровОбработчика);
		ЗаполнитьЗначенияСвойств(Команда.ДополнительныеПараметры, КомандаПечати);
	КонецЦикла;
КонецПроцедуры

// См. ПользователиПереопределяемый.ПриОпределенииНазначенияРолей.
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
	// ТолькоДляПользователейСистемы.
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(
		Метаданные.Роли.РедактированиеПечатныхФорм.Имя);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииПоставляемыхПрофилейГруппДоступа.
Процедура ПриЗаполненииПоставляемыхПрофилейГруппДоступа(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
	ОписаниеПрофиля = МодульУправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();;
	ОписаниеПрофиля.Идентификатор = "70179f20-2315-11e6-9bff-d850e648b60c";
	ОписаниеПрофиля.Наименование = НСтр("ru = 'Редактирование, отправка по почте, сохранение в файл печатных форм (дополнительно)'",
		Метаданные.ОсновнойЯзык.КодЯзыка);
	ОписаниеПрофиля.Описание = НСтр("ru = 'Дополнительно назначается пользователям, которым должна быть доступна возможность редактирования,
		|перед печатью, отправка по почте и сохранение в файл сформированных печатных форм.'", Метаданные.ОсновнойЯзык.КодЯзыка);
	ОписаниеПрофиля.Роли.Добавить("РедактированиеПечатныхФорм");
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.5";
	Обработчик.Процедура = "УправлениеПечатью.СброситьПользовательскиеНастройкиФормыПечатьДокументов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.3.22";
	Обработчик.Процедура = "УправлениеПечатью.ПреобразоватьДвоичныеДанныеПользовательскихМакетовMXLВТабличныеДокументы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.1.1";
	Обработчик.Процедура = "УправлениеПечатью.ДобавитьРольРедактированиеПечатныхФормВПрофилиСБазовымиПравами";
	Обработчик.РежимВыполнения = "Оперативно";
	
КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	
	Разрешения = Новый Массив;
	Разрешения.Добавить(МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеВнешнейКомпоненты(
		"ОбщийМакет.КомпонентаПечатиQRКода", НСтр("ru = 'Печать QR кодов.'")));
	ЗапросыРазрешений.Добавить(
		МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения));
	
КонецПроцедуры

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если Не ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.ПользовательскиеМакетыПечати)
		Или МодульТекущиеДелаСервер.ДелоОтключено("МакетыПечатныхФорм") Тогда
		Возврат;
	КонецЕсли;
	
	// Если нет раздела администрирование, дело не добавляется.
	Подсистема = Метаданные.Подсистемы.Найти("Администрирование");
	Если Подсистема = Неопределено
		Или Не ПравоДоступа("Просмотр", Подсистема)
		Или Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Подсистема) Тогда
		Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта("РегистрСведений.ПользовательскиеМакетыПечати");
	Иначе
		Разделы = Новый Массив;
		Разделы.Добавить(Подсистема);
	КонецЕсли;
	
	ВывестиДело = Истина;
	ПровереноНаВерсию = ХранилищеОбщихНастроек.Загрузить("ТекущиеДела", "ПечатныеФормы");
	Если ПровереноНаВерсию <> Неопределено Тогда
		ВерсияМассив  = СтрРазделить(Метаданные.Версия, ".");
		ТекущаяВерсия = ВерсияМассив[0] + ВерсияМассив[1] + ВерсияМассив[2];
		Если ПровереноНаВерсию = ТекущаяВерсия Тогда
			ВывестиДело = Ложь; // Печатные формы проверены на текущей версии.
		КонецЕсли;
	КонецЕсли;
	
	КоличествоПользовательскихМакетов = КоличествоИспользуемыхПользовательскихМакетов();
	
	Для Каждого Раздел Из Разделы Цикл
		ИдентификаторРаздела = "ПроверитьСовместимостьСТекущейВерсией" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "");
		
		// Добавление дела.
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор = "МакетыПечатныхФорм";
		Дело.ЕстьДела      = ВывестиДело И КоличествоПользовательскихМакетов > 0;
		Дело.Представление = НСтр("ru = 'Макеты печатных форм'");
		Дело.Количество    = КоличествоПользовательскихМакетов;
		Дело.Форма         = "РегистрСведений.ПользовательскиеМакетыПечати.Форма.ПроверкаПечатныхФорм";
		Дело.Владелец      = ИдентификаторРаздела;
		
		// Проверка наличия группы дела. Если группа отсутствует - добавляем.
		ГруппаДела = ТекущиеДела.Найти(ИдентификаторРаздела, "Идентификатор");
		Если ГруппаДела = Неопределено Тогда
			ГруппаДела = ТекущиеДела.Добавить();
			ГруппаДела.Идентификатор = ИдентификаторРаздела;
			ГруппаДела.ЕстьДела      = Дело.ЕстьДела;
			ГруппаДела.Представление = НСтр("ru = 'Проверить совместимость'");
			Если Дело.ЕстьДела Тогда
				ГруппаДела.Количество = Дело.Количество;
			КонецЕсли;
			ГруппаДела.Владелец = Раздел;
		Иначе
			Если Не ГруппаДела.ЕстьДела Тогда
				ГруппаДела.ЕстьДела = Дело.ЕстьДела;
			КонецЕсли;
			
			Если Дело.ЕстьДела Тогда
				ГруппаДела.Количество = ГруппаДела.Количество + Дело.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Сбрасывает пользовательские настройки количества печатных форм и порядка.
Процедура СброситьПользовательскиеНастройкиФормыПечатьДокументов() Экспорт
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить("НастройкиПечатныхФорм", Неопределено, Неопределено);
КонецПроцедуры

// Преобразует пользовательские макеты MXL, хранящиеся в виде двоичных данных в табличные документы.
Процедура ПреобразоватьДвоичныеДанныеПользовательскихМакетовMXLВТабличныеДокументы() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПользовательскиеМакетыПечати.ИмяМакета,
	|	ПользовательскиеМакетыПечати.Объект,
	|	ПользовательскиеМакетыПечати.Макет,
	|	ПользовательскиеМакетыПечати.Использование
	|ИЗ
	|	РегистрСведений.ПользовательскиеМакетыПечати КАК ПользовательскиеМакетыПечати";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ВыборкаМакетов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаМакетов.Следующий() Цикл
		Если СтрНачинаетсяС(ВыборкаМакетов.ИмяМакета, "ПФ_MXL") Тогда
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			
			ДвоичныеДанныеМакета = ВыборкаМакетов.Макет.Получить();
			Если ТипЗнч(ДвоичныеДанныеМакета) <> Тип("ДвоичныеДанные") Тогда
				Продолжить;
			КонецЕсли;
			
			ДвоичныеДанныеМакета.Записать(ИмяВременногоФайла);
			
			ТабличныйДокументПрочитан = Истина;
			ТабличныйДокумент = Новый ТабличныйДокумент;
			Попытка
				ТабличныйДокумент.Прочитать(ИмяВременногоФайла);
			Исключение
				ТабличныйДокументПрочитан = Ложь; // Файл оказался не табличным документом, удаляем.
			КонецПопытки;
			
			Запись = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаМакетов, , "Макет");
			
			Если ТабличныйДокументПрочитан Тогда
				Запись.Макет = Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9));
				Запись.Записать();
			Иначе
				Запись.Удалить();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет роль РедактированиеПечатныхФорм во все профили, в которые входит роль БазовыеПрава.
Процедура ДобавитьРольРедактированиеПечатныхФормВПрофилиСБазовымиПравами() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
	
	НовыеРоли = Новый Массив;
	НовыеРоли.Добавить(Метаданные.Роли.БазовыеПрава.Имя);
	НовыеРоли.Добавить(Метаданные.Роли.РедактированиеПечатныхФорм.Имя);
	
	ЗаменяемыеРоли = Новый Соответствие;
	ЗаменяемыеРоли.Вставить(Метаданные.Роли.БазовыеПрава.Имя, НовыеРоли);
	
	МодульУправлениеДоступом.ЗаменитьРолиВПрофилях(ЗаменяемыеРоли);
	
КонецПроцедуры

// Возвращает ссылку на объект-источник внешней печатной формы.
//
// Параметры:
//  Идентификатор              - Строка - идентификатор формы;
//  ПолноеИмяОбъектаМетаданных - Строка - полное имя объекта метаданных, для которого требуется получить ссылку
//                                        на источник внешней печатной формы.
//
// Возвращаемое значение:
//  Ссылка.
Функция СсылкаДополнительнойПечатнойФормы(Идентификатор, ПолноеИмяОбъектаМетаданных)
	ВнешняяПечатнаяФормаСсылка = Неопределено;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		МодульДополнительныеОтчетыИОбработки.ПриПолученииВнешнейПечатнойФормы(Идентификатор, ПолноеИмяОбъектаМетаданных, ВнешняяПечатнаяФормаСсылка);
	КонецЕсли;
	
	Возврат ВнешняяПечатнаяФормаСсылка;
КонецФункции

// Сформировать печатные формы.
Функция СформироватьПечатныеФормы(Знач ИмяМенеджераПечати, Знач ИменаМакетов, Знач МассивОбъектов, Знач ПараметрыПечати, 
	ДопустимыеТипыОбъектовПечати = Неопределено) Экспорт
	
	КоллекцияПечатныхФорм = ПодготовитьКоллекциюПечатныхФорм(Новый Массив);
	ОбъектыПечати = Новый СписокЗначений;
	ПараметрыВывода = ПодготовитьСтруктуруПараметровВывода();
	
	Если ТипЗнч(ИменаМакетов) = Тип("Строка") Тогда
		ИменаМакетов = СтрРазделить(ИменаМакетов, ",");
	Иначе // Тип("Массив")
		ИменаМакетов = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИменаМакетов);
	КонецЕсли;
	
	ПрефиксВнешнихПечатныхФорм = "ВнешняяПечатнаяФорма.";
	
	ИсточникВнешнихПечатныхФорм = ИмяМенеджераПечати;
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(МассивОбъектов)) Тогда
		ИсточникВнешнихПечатныхФорм = МассивОбъектов.Метаданные().ПолноеИмя();
	Иначе
		Если МассивОбъектов.Количество() > 0 Тогда
			ИсточникВнешнихПечатныхФорм = МассивОбъектов[0].Метаданные().ПолноеИмя();
		КонецЕсли;
	КонецЕсли;
	ВнешниеПечатныеФормы = СписокПечатныхФормИзВнешнихИсточников(ИсточникВнешнихПечатныхФорм);
	
	// Добавление внешних печатных форм в комплект.
	ДобавленныеВнешниеПечатныеФормы = Новый Массив;
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") 
		И ПараметрыПечати.Свойство("ДополнитьКомплектВнешнимиПечатнымиФормами") 
		И ПараметрыПечати.ДополнитьКомплектВнешнимиПечатнымиФормами Тогда 
		
		ИдентификаторыВнешнихПечатныхФорм = ВнешниеПечатныеФормы.ВыгрузитьЗначения();
		Для Каждого Идентификатор Из ИдентификаторыВнешнихПечатныхФорм Цикл
			ИменаМакетов.Добавить(ПрефиксВнешнихПечатныхФорм + Идентификатор);
			ДобавленныеВнешниеПечатныеФормы.Добавить(ПрефиксВнешнихПечатныхФорм + Идентификатор);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ИмяМакета Из ИменаМакетов Цикл
		// Проверка наличия уже напечатанной формы.
		НайденнаяПечатнаяФорма = КоллекцияПечатныхФорм.Найти(ИмяМакета, "ИмяМакета");
		Если НайденнаяПечатнаяФорма <> Неопределено Тогда
			ПоследняяДобавленнаяПечатнаяФорма = КоллекцияПечатныхФорм[КоллекцияПечатныхФорм.Количество() - 1];
			Если ПоследняяДобавленнаяПечатнаяФорма.ИмяМакета = НайденнаяПечатнаяФорма.ИмяМакета Тогда
				ПоследняяДобавленнаяПечатнаяФорма.Экземпляров = ПоследняяДобавленнаяПечатнаяФорма.Экземпляров + 1;
			Иначе
				КопияПечатнойФормы = КоллекцияПечатныхФорм.Добавить();
				ЗаполнитьЗначенияСвойств(КопияПечатнойФормы, НайденнаяПечатнаяФорма);
				КопияПечатнойФормы.Экземпляров = 1;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// Поиск указания дополнительного менеджера печати в имени печатной формы.
		ИмяДополнительногоМенеджераПечати = "";
		Идентификатор = ИмяМакета;
		ВнешняяПечатнаяФорма = Неопределено;
		Если СтрНайти(Идентификатор, ПрефиксВнешнихПечатныхФорм) > 0 Тогда // это внешняя печатная форма
			Идентификатор = Сред(Идентификатор, СтрДлина(ПрефиксВнешнихПечатныхФорм) + 1);
			ВнешняяПечатнаяФорма = ВнешниеПечатныеФормы.НайтиПоЗначению(Идентификатор);
		ИначеЕсли СтрНайти(Идентификатор, ".") > 0 Тогда // Указан дополнительный менеджер печати.
			Позиция = СтрНайти(Идентификатор, ".", НаправлениеПоиска.СКонца);
			ИмяДополнительногоМенеджераПечати = Лев(Идентификатор, Позиция - 1);
			Идентификатор = Сред(Идентификатор, Позиция + 1);
		КонецЕсли;
		
		// Определение внутреннего менеджера печати.
		ИспользуемыйМенеджерПечати = ИмяДополнительногоМенеджераПечати;
		Если ПустаяСтрока(ИспользуемыйМенеджерПечати) Тогда
			ИспользуемыйМенеджерПечати = ИмяМенеджераПечати;
		КонецЕсли;
		
		// Проверка соответствия печатаемых объектов выбранной печатной форме.
		ОжидаемыйТипОбъекта = Неопределено;
		
		ОбъектыСоответствующиеПечатнойФорме = МассивОбъектов;
		Если ДопустимыеТипыОбъектовПечати <> Неопределено И ДопустимыеТипыОбъектовПечати.Количество() > 0 Тогда
			Если ТипЗнч(МассивОбъектов) = Тип("Массив") Тогда
				ОбъектыСоответствующиеПечатнойФорме = Новый Массив;
				Для Каждого Объект Из МассивОбъектов Цикл
					Если ДопустимыеТипыОбъектовПечати.Найти(ТипЗнч(Объект)) = Неопределено Тогда
						СообщитьПечатнаяФормаНедоступна(Объект);
					Иначе
						ОбъектыСоответствующиеПечатнойФорме.Добавить(Объект);
					КонецЕсли;
				КонецЦикла;
				Если ОбъектыСоответствующиеПечатнойФорме.Количество() = 0 Тогда
					ОбъектыСоответствующиеПечатнойФорме = Неопределено;
				КонецЕсли;
			ИначеЕсли ОбщегоНазначения.ЗначениеСсылочногоТипа(МассивОбъектов) Тогда // передан не массив
				Если ДопустимыеТипыОбъектовПечати.Найти(ТипЗнч(МассивОбъектов)) = Неопределено Тогда
					СообщитьПечатнаяФормаНедоступна(МассивОбъектов);
					ОбъектыСоответствующиеПечатнойФорме = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ВременнаяКоллекцияДляОднойПечатнойФормы = ПодготовитьКоллекциюПечатныхФорм(Идентификатор);
		
		// Вызов процедуры Печать из менеджера печати.
		Если ВнешняяПечатнаяФорма <> Неопределено Тогда
			// Менеджер печати во внешней печатной форме.
			ПечатьПоВнешнемуИсточнику(
				СсылкаДополнительнойПечатнойФормы(ВнешняяПечатнаяФорма.Значение, ИсточникВнешнихПечатныхФорм),
				Новый Структура("ИдентификаторКоманды, ОбъектыНазначения", ВнешняяПечатнаяФорма.Значение, ОбъектыСоответствующиеПечатнойФорме),
				ВременнаяКоллекцияДляОднойПечатнойФормы,
				ОбъектыПечати,
				ПараметрыВывода);
		Иначе
			Если Не ПустаяСтрока(ИспользуемыйМенеджерПечати) Тогда
				МенеджерПечати = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИспользуемыйМенеджерПечати);
				// Печать внутренней печатной формы.
				Если ОбъектыСоответствующиеПечатнойФорме <> Неопределено Тогда
					МенеджерПечати.Печать(ОбъектыСоответствующиеПечатнойФорме, ПараметрыПечати, ВременнаяКоллекцияДляОднойПечатнойФормы, 
						ОбъектыПечати, ПараметрыВывода);
				Иначе
					ВременнаяКоллекцияДляОднойПечатнойФормы[0].ТабличныйДокумент = Новый ТабличныйДокумент;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Проверка корректности заполнения коллекции печатных форм, полученной из менеджера печати.
		Для Каждого ОписаниеПечатнойФормы Из ВременнаяКоллекцияДляОднойПечатнойФормы Цикл
			ОбщегоНазначенияКлиентСервер.Проверить(
				ТипЗнч(ОписаниеПечатнойФормы.Экземпляров) = Тип("Число") И ОписаниеПечатнойФормы.Экземпляров > 0,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не задано количество экземпляров для печатной формы ""%1"".'"),
				?(ПустаяСтрока(ОписаниеПечатнойФормы.СинонимМакета), ОписаниеПечатнойФормы.ИмяМакета, ОписаниеПечатнойФормы.СинонимМакета)));
		КонецЦикла;
				
		// обновление коллекции
		Отказ = ВременнаяКоллекцияДляОднойПечатнойФормы.Количество() = 0;
		// Предполагается одна печатная форма, но для обратной совместимости принимается вся коллекция.
		Для Каждого ВременнаяПечатнаяФорма Из ВременнаяКоллекцияДляОднойПечатнойФормы Цикл 
			Если ВременнаяПечатнаяФорма.ТабличныйДокумент <> Неопределено Тогда
				ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
				ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ВременнаяПечатнаяФорма);
				Если ВременнаяКоллекцияДляОднойПечатнойФормы.Количество() = 1 Тогда
					ПечатнаяФорма.ИмяМакета = ИмяМакета;
					ПечатнаяФорма.ИмяВРЕГ = ВРег(ИмяМакета);
				КонецЕсли;
			Иначе
				// Возникла ошибка при формировании печатной формы.
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Вызов исключения при возникновении ошибки.
		Если Отказ Тогда
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'При формировании печатной формы ""%1"" возникла ошибка. Обратитесь к администратору.'"), ИмяМакета);
			ВызватьИсключение ТекстСообщенияОбОшибке;
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеПечатьюПереопределяемый.ПриПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
	// Установка количества экземпляров табличным документам, проверка областей.
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		ПроверитьРазметкуТабличногоДокументаПоОбъектамПечати(ПечатнаяФорма.ТабличныйДокумент, 
			ОбъектыПечати, ИмяМенеджераПечати, ПечатнаяФорма.ИмяМакета);
		Если ДобавленныеВнешниеПечатныеФормы.Найти(ПечатнаяФорма.ИмяМакета) <> Неопределено Тогда
			ПечатнаяФорма.Экземпляров = 0; // Для автоматически добавленных форм.
		КонецЕсли;
		Если ПечатнаяФорма.ТабличныйДокумент <> Неопределено Тогда
			ПечатнаяФорма.ТабличныйДокумент.КоличествоЭкземпляров = ПечатнаяФорма.Экземпляров;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("КоллекцияПечатныхФорм", КоллекцияПечатныхФорм);
	Результат.Вставить("ОбъектыПечати", ОбъектыПечати);
	Результат.Вставить("ПараметрыВывода", ПараметрыВывода);
	Возврат Результат;
	
КонецФункции

// Сформировать печатные формы для непосредственного вывода на принтер.
//
Функция СформироватьПечатныеФормыДляБыстройПечати(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТабличныеДокументы");
	Результат.Вставить("ОбъектыПечати");
	Результат.Вставить("ПараметрыВывода");
	Результат.Вставить("Отказ", Ложь);
		
	Если НЕ ПравоДоступа("Вывод", Метаданные) Тогда
		Результат.Отказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ПечатныеФормы = СформироватьПечатныеФормы(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати);
		
	ТабличныеДокументы = Новый СписокЗначений;
	Для Каждого ПечатнаяФорма Из ПечатныеФормы.КоллекцияПечатныхФорм Цикл
		Если (ТипЗнч(ПечатнаяФорма.ТабличныйДокумент) = Тип("ТабличныйДокумент")) И (ПечатнаяФорма.ТабличныйДокумент.ВысотаТаблицы <> 0) Тогда
			ТабличныеДокументы.Добавить(ПечатнаяФорма.ТабличныйДокумент, ПечатнаяФорма.СинонимМакета);
		КонецЕсли;
	КонецЦикла;
	
	Результат.ТабличныеДокументы = ТабличныеДокументы;
	Результат.ОбъектыПечати      = ПечатныеФормы.ОбъектыПечати;
	Результат.ПараметрыВывода    = ПечатныеФормы.ПараметрыВывода;
	Возврат Результат;
	
КонецФункции

// Сформировать печатные формы для непосредственного вывода на принтер
// в серверном режиме в обычном приложении.
//
Функция СформироватьПечатныеФормыДляБыстройПечатиОбычноеПриложение(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Адрес");
	Результат.Вставить("ОбъектыПечати");
	Результат.Вставить("ПараметрыВывода");
	Результат.Вставить("Отказ", Ложь);
	
	ПечатныеФормы = СформироватьПечатныеФормыДляБыстройПечати(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати);
	
	Если ПечатныеФормы.Отказ Тогда
		Результат.Отказ = ПечатныеФормы.Отказ;
		Возврат Результат;
	КонецЕсли;
	
	Результат.ОбъектыПечати = Новый Соответствие;
	
	Для Каждого ОбъектПечати Из ПечатныеФормы.ОбъектыПечати Цикл
		Результат.ОбъектыПечати.Вставить(ОбъектПечати.Представление, ОбъектПечати.Значение);
	КонецЦикла;
	
	Результат.Адрес = ПоместитьВоВременноеХранилище(ПечатныеФормы.ТабличныеДокументы);
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу возможных форматов для сохранения табличного документа.
//
// Возвращаемое значение
//  ТаблицаЗначений:
//                   ТипФайлаТабличногоДокумента - ТипФайлаТабличногоДокумента                 - значение в платформе,
//                                                                                               соответствующее
//                                                                                               формату;
//                   Ссылка                      - ПеречислениеСсылка.ФорматыСохраненияОтчетов - ссылка на метаданные,
//                                                                                               где хранится
//                                                                                               представление;
//                   Представление               - Строка -                                    - представление типа
//                                                          файла (заполняется из перечисления);
//                   Расширение                  - Строка -                                    - тип файла для
//                                                          операционной системы;
//                   Картинка                    - Картинка                                    - значок формата.
//
// Примечание: таблица форматов может быть переопределена в процедуре
// УправлениеПечатьюПереопределяемый.ПриЗаполненииНастроекФорматовСохранения().
//
Функция НастройкиФорматовСохраненияТабличногоДокумента() Экспорт
	
	ТаблицаФорматов = СтандартныеПодсистемыСервер.НастройкиФорматовСохраненияТабличногоДокумента();

	// Дополнительные форматы / изменение списка текущих.
	УправлениеПечатьюПереопределяемый.ПриЗаполненииНастроекФорматовСохраненияТабличногоДокумента(ТаблицаФорматов);
	
	Для Каждого ФорматСохранения Из ТаблицаФорматов Цикл
		ФорматСохранения.Представление = Строка(ФорматСохранения.Ссылка);
	КонецЦикла;
		
	Возврат ТаблицаФорматов;
	
КонецФункции

// Фильтрует список команд печати в соответствии с установленными функциональными опциями.
Процедура ОпределитьВидимостьКомандПечатиПоФункциональнымОпциям(КомандыПечати, Форма = Неопределено)
	Для НомерКоманды = -КомандыПечати.Количество() + 1 По 0 Цикл
		ОписаниеКомандыПечати = КомандыПечати[-НомерКоманды];
		ФункциональныеОпцииКомандыПечати = СтрРазделить(ОписаниеКомандыПечати.ФункциональныеОпции, ", ", Ложь);
		ВидимостьКоманды = ФункциональныеОпцииКомандыПечати.Количество() = 0;
		Для Каждого ФункциональнаяОпция Из ФункциональныеОпцииКомандыПечати Цикл
			Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
				ВидимостьКоманды = ВидимостьКоманды Или Форма.ПолучитьФункциональнуюОпциюФормы(ФункциональнаяОпция);
			Иначе
				ВидимостьКоманды = ВидимостьКоманды Или ПолучитьФункциональнуюОпцию(ФункциональнаяОпция);
			КонецЕсли;
			
			Если ВидимостьКоманды Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ОписаниеКомандыПечати.СкрытаФункциональнымиОпциями = Не ВидимостьКоманды;
	КонецЦикла;
КонецПроцедуры

// Сохраняет пользовательский макет печати в информационной базе.
Процедура ЗаписатьМакет(ИмяОбъектаМетаданныхМакета, АдресМакетаВоВременномХранилище) Экспорт
	Макет = ПолучитьИзВременногоХранилища(АдресМакетаВоВременномХранилище);
	
	ЧастиИмени = СтрРазделить(ИмяОбъектаМетаданныхМакета, ".");
	ИмяМакета = ЧастиИмени[ЧастиИмени.ВГраница()];
	
	ИмяВладельца = "";
	Для НомерЧасти = 0 По ЧастиИмени.ВГраница()-1 Цикл
		Если Не ПустаяСтрока(ИмяВладельца) Тогда
			ИмяВладельца = ИмяВладельца + ".";
		КонецЕсли;
		ИмяВладельца = ИмяВладельца + ЧастиИмени[НомерЧасти];
	КонецЦикла;
	
	Запись = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьМенеджерЗаписи();
	Запись.Объект = ИмяВладельца;
	Запись.ИмяМакета = ИмяМакета;
	Запись.Использование = Истина;
	Запись.Макет = Новый ХранилищеЗначения(Макет, Новый СжатиеДанных(9));
	Запись.Записать();
КонецПроцедуры

Функция СтрокаОбязательныхРеквизитов(ДанныеДокумента, ТекстСообщения)
	
	ОбязательныеРеквизиты = Новый Структура();
	СтруктураПредставленийИРеквизитов = СтруктураПредставленийИРеквизитов();
	ДобавитьОбязательныеРеквизиты(ОбязательныеРеквизиты);
	
	Если Не ЗначениеЗаполнено(ДанныеДокумента.СчетБанкаПолучателя) Тогда
		ДанныеДокумента.СчетБанкаПолучателя = "0";
	КонецЕсли;
	
	СлужебныеДанные = "ST00012";
	ОбязательныеДанные = "";
	
	Для Каждого Элемент Из ОбязательныеРеквизиты Цикл
		Если Не ЗначениеЗаполнено(ДанныеДокумента[Элемент.Ключ]) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнен обязательный реквизит: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Элемент.Ключ);
			Возврат "";
		КонецЕсли;
		
		ЗначениеСтрокой = СтрЗаменить(СокрЛП(Строка(ДанныеДокумента[Элемент.Ключ])), "|", "");
		
		ОбязательныеДанные = ОбязательныеДанные + "|" + СтруктураПредставленийИРеквизитов[Элемент.Ключ] + "="
		                     + ЗначениеСтрокой;
		
	КонецЦикла;
	
	Если СтрДлина(ОбязательныеДанные) > 300 Тогда
		Шаблон = НСтр("ru = 'Невозможно создать QR-код для документа %1
			|Строка обязательных реквизитов должна быть меньше 300 символов:
			|""%2""'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ДанныеДокумента.Ссылка, ОбязательныеДанные);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат "";
	КонецЕсли;
	
	Возврат СлужебныеДанные + ОбязательныеДанные;
	
КонецФункции

Функция СтруктураПредставленийИРеквизитов()
	
	СтруктураВозврата = Новый Структура();
	
	СтруктураВозврата.Вставить("ТекстПолучателя",             "Name");
	СтруктураВозврата.Вставить("НомерСчетаПолучателя",        "PersonalAcc");
	СтруктураВозврата.Вставить("НаименованиеБанкаПолучателя", "BankName");
	СтруктураВозврата.Вставить("БИКБанкаПолучателя",          "BIC");
	СтруктураВозврата.Вставить("СчетБанкаПолучателя",         "CorrespAcc");
	
	СтруктураВозврата.Вставить("СуммаЧислом",         "Sum");
	СтруктураВозврата.Вставить("НазначениеПлатежа",   "Purpose");
	СтруктураВозврата.Вставить("ИННПолучателя",       "PayeeINN");
	СтруктураВозврата.Вставить("ИННПлательщика",      "PayerINN");
	СтруктураВозврата.Вставить("СтатусСоставителя",   "DrawerStatus");
	СтруктураВозврата.Вставить("КПППолучателя",       "KPP");
	СтруктураВозврата.Вставить("КодБК",               "CBC");
	СтруктураВозврата.Вставить("КодОКТМО",            "OKTMO");
	СтруктураВозврата.Вставить("ПоказательОснования", "PaytReason");
	СтруктураВозврата.Вставить("ПоказательПериода",   "TaxPeriod");
	СтруктураВозврата.Вставить("ПоказательНомера",    "DocNo");
	СтруктураВозврата.Вставить("ПоказательДаты",      "DocDate");
	СтруктураВозврата.Вставить("ПоказательТипа",      "TaxPaytKind");
	
	СтруктураВозврата.Вставить("ФамилияПлательщика",               "lastName");
	СтруктураВозврата.Вставить("ИмяПлательщика",                   "firstName");
	СтруктураВозврата.Вставить("ОтчествоПлательщика",              "middleName");
	СтруктураВозврата.Вставить("АдресПлательщика",                 "payerAddress");
	СтруктураВозврата.Вставить("ЛицевойСчетБюджетногоПолучателя",  "personalAccount");
	СтруктураВозврата.Вставить("ИндексПлатежногоДокумента",        "docIdx");
	СтруктураВозврата.Вставить("СНИЛС",                            "pensAcc");
	СтруктураВозврата.Вставить("НомерДоговора",                    "contract");
	СтруктураВозврата.Вставить("НомерЛицевогоСчетаПлательщика",    "persAcc");
	СтруктураВозврата.Вставить("НомерКвартиры",                    "flat");
	СтруктураВозврата.Вставить("НомерТелефона",                    "phone");
	СтруктураВозврата.Вставить("ВидПлательщика",                   "payerIdType");
	СтруктураВозврата.Вставить("НомерПлательщика",                 "payerIdNum");
	СтруктураВозврата.Вставить("ФИОРебенка",                       "childFio");
	СтруктураВозврата.Вставить("ДатаРождения",                     "birthDate");
	СтруктураВозврата.Вставить("СрокПлатежа",                      "paymTerm");
	СтруктураВозврата.Вставить("ПериодОплаты",                     "paymPeriod");
	СтруктураВозврата.Вставить("ВидПлатежа",                       "category");
	СтруктураВозврата.Вставить("КодУслуги",                        "serviceName");
	СтруктураВозврата.Вставить("НомерПрибораУчета",                "counterId");
	СтруктураВозврата.Вставить("ПоказаниеПрибораУчета",            "counterVal");
	СтруктураВозврата.Вставить("НомерИзвещения",                   "quittId");
	СтруктураВозврата.Вставить("ДатаИзвещения",                    "quittDate");
	СтруктураВозврата.Вставить("НомерУчреждения",                  "instNum");
	СтруктураВозврата.Вставить("НомерГруппы",                      "classNum");
	СтруктураВозврата.Вставить("ФИОПреподавателя",                 "specFio");
	СтруктураВозврата.Вставить("СуммаСтраховки",                   "addAmount");
	СтруктураВозврата.Вставить("НомерПостановления",               "ruleId");
	СтруктураВозврата.Вставить("НомерИсполнительногоПроизводства", "execId");
	СтруктураВозврата.Вставить("КодВидаПлатежа",                   "regType");
	СтруктураВозврата.Вставить("ИдентификаторНачисления",          "uin");
	СтруктураВозврата.Вставить("ТехническийКод",                   "TechCode");
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция КомпонентаФормированияQRКода(Отказ)
	
	ТекстОшибки = НСтр("ru = 'Не удалось подключить внешнюю компоненту для генерации QR-кода. Подробности в журнале регистрации.'");
	
	QRCodeGenerator = ОбщегоНазначения.ПодключитьКомпонентуИзМакета("QRCodeExtension", "ОбщийМакет.КомпонентаПечатиQRКода");
		
	Если QRCodeGenerator = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
	КонецЕсли;
	
	Возврат QRCodeGenerator;
	
КонецФункции

Процедура ДобавитьОбязательныеРеквизиты(СтруктураДанных)
	
	СтруктураДанных.Вставить("ТекстПолучателя");
	СтруктураДанных.Вставить("НомерСчетаПолучателя");
	СтруктураДанных.Вставить("НаименованиеБанкаПолучателя");
	СтруктураДанных.Вставить("БИКБанкаПолучателя");
	СтруктураДанных.Вставить("СчетБанкаПолучателя");
	
КонецПроцедуры

Процедура ДобавитьДополнительныеРеквизиты(СтруктураДанных)
	
	СтруктураДанных.Вставить("СуммаЧислом");
	СтруктураДанных.Вставить("НазначениеПлатежа");
	СтруктураДанных.Вставить("ИННПолучателя");
	СтруктураДанных.Вставить("ИННПлательщика");
	СтруктураДанных.Вставить("СтатусСоставителя");
	СтруктураДанных.Вставить("КПППолучателя");
	СтруктураДанных.Вставить("КодБК");
	СтруктураДанных.Вставить("КодОКТМО");
	СтруктураДанных.Вставить("ПоказательОснования");
	СтруктураДанных.Вставить("ПоказательПериода");
	СтруктураДанных.Вставить("ПоказательНомера");
	СтруктураДанных.Вставить("ПоказательДаты");
	СтруктураДанных.Вставить("ПоказательТипа");
	
КонецПроцедуры

Процедура ДобавитьПрочиеДополнительныеРеквизиты(СтруктураДанных)
	
	СтруктураДанных.Вставить("ФамилияПлательщика");
	СтруктураДанных.Вставить("ИмяПлательщика");
	СтруктураДанных.Вставить("ОтчествоПлательщика");
	СтруктураДанных.Вставить("АдресПлательщика");
	СтруктураДанных.Вставить("ЛицевойСчетБюджетногоПолучателя");
	СтруктураДанных.Вставить("ИндексПлатежногоДокумента");
	СтруктураДанных.Вставить("СНИЛС");
	СтруктураДанных.Вставить("НомерДоговора");
	СтруктураДанных.Вставить("НомерЛицевогоСчетаПлательщика");
	СтруктураДанных.Вставить("НомерКвартиры");
	СтруктураДанных.Вставить("НомерТелефона");
	СтруктураДанных.Вставить("ВидПлательщика");
	СтруктураДанных.Вставить("НомерПлательщика");
	СтруктураДанных.Вставить("ФИОРебенка");
	СтруктураДанных.Вставить("ДатаРождения");
	СтруктураДанных.Вставить("СрокПлатежа");
	СтруктураДанных.Вставить("ПериодОплаты");
	СтруктураДанных.Вставить("ВидПлатежа");
	СтруктураДанных.Вставить("КодУслуги");
	СтруктураДанных.Вставить("НомерПрибораУчета");
	СтруктураДанных.Вставить("ПоказаниеПрибораУчета");
	СтруктураДанных.Вставить("НомерИзвещения");
	СтруктураДанных.Вставить("ДатаИзвещения");
	СтруктураДанных.Вставить("НомерУчреждения");
	СтруктураДанных.Вставить("НомерГруппы");
	СтруктураДанных.Вставить("ФИОПреподавателя");
	СтруктураДанных.Вставить("СуммаСтраховки");
	СтруктураДанных.Вставить("НомерПостановления");
	СтруктураДанных.Вставить("НомерИсполнительногоПроизводства");
	СтруктураДанных.Вставить("КодВидаПлатежа");
	СтруктураДанных.Вставить("ИдентификаторНачисления");
	СтруктураДанных.Вставить("ТехническийКод");
	
КонецПроцедуры

// Возвращает истину, если есть право проведения хотя бы для одного документа.
Функция ДоступноПравоПроведения(СписокДокументов) Экспорт
	ТипыДокументов = Новый Массив;
	Для Каждого Документ Из СписокДокументов Цикл
		ТипДокумента = ТипЗнч(Документ);
		Если ТипыДокументов.Найти(ТипДокумента) <> Неопределено Тогда
			Продолжить;
		Иначе
			ТипыДокументов.Добавить(ТипДокумента);
		КонецЕсли;
		Если ПравоДоступа("Проведение", Метаданные.НайтиПоТипу(ТипДокумента)) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Процедура СообщитьПечатнаяФормаНедоступна(Объект)
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Печать %1 не выполнена: выбранная печатная форма недоступна.'"), Объект);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект);
КонецПроцедуры

// Формирует пакет документов для отправки на принтер.
Функция ПакетДокументов(ТабличныеДокументы, ОбъектыПечати, ПечататьКомплектами, КоличествоЭкземпляров = 1) Экспорт
	
	ПакетОтображаемыхДокументов = Новый ПакетОтображаемыхДокументов;
	ПакетОтображаемыхДокументов.РазборПоКопиям = Истина;
	КоллекцияПечатныхФорм = ТабличныеДокументы.ВыгрузитьЗначения();
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		ПечататьКомплектами = ПечататьКомплектами Или ПечатнаяФорма.ДвусторонняяПечать <> ТипДвустороннейПечати.Нет;
	КонецЦикла;
	
	Если ПечататьКомплектами И ОбъектыПечати.Количество() > 0 Тогда 
		Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
			ИмяОбласти = ОбъектПечати.Представление;
			Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
				Область = ПечатнаяФорма.Области.Найти(ИмяОбласти);
				Если Область = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТабличныйДокумент = ПечатнаяФорма.ПолучитьОбласть(Область.Верх, , Область.Низ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ПечатнаяФорма, КопируемыеСвойстваТабличногоДокумента());
				
				ПакетОтображаемыхДокументов.Состав.Добавить().Данные = ПакетСОднимТабличнымДокументом(ТабличныйДокумент);
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
			ТабличныйДокумент = Новый ТабличныйДокумент;
			ТабличныйДокумент.Вывести(ПечатнаяФорма);
			ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ПечатнаяФорма, КопируемыеСвойстваТабличногоДокумента());
			ПакетОтображаемыхДокументов.Состав.Добавить().Данные = ПакетСОднимТабличнымДокументом(ТабличныйДокумент);
		КонецЦикла;
	КонецЕсли;
	
	ПакетКомплектов = Новый ПакетОтображаемыхДокументов;
	ПакетКомплектов.РазборПоКопиям = Истина;
	Для Номер = 1 По КоличествоЭкземпляров Цикл
		ПакетКомплектов.Состав.Добавить().Данные = ПакетОтображаемыхДокументов;
	КонецЦикла;
	
	Возврат ПакетКомплектов;
	
КонецФункции

// Заворачивает табличный документ в пакет отображаемых документов.
Функция ПакетСОднимТабличнымДокументом(ТабличныйДокумент)
	АдресТабличногоДокументаВоВременномХранилище = ПоместитьВоВременноеХранилище(ТабличныйДокумент);
	ПакетСОднимДокументом = Новый ПакетОтображаемыхДокументов;
	ПакетСОднимДокументом.РазборПоКопиям = Истина;
	ПакетСОднимДокументом.Состав.Добавить(АдресТабличногоДокументаВоВременномХранилище);
	ЗаполнитьЗначенияСвойств(ПакетСОднимДокументом, ТабличныйДокумент, "Вывод, ДвусторонняяПечать, ИмяПринтера, КоличествоЭкземпляров, ТочностьПечати");
	Если ТабличныйДокумент.РазборПоКопиям <> Неопределено Тогда
		ПакетСОднимДокументом.РазборПоКопиям = ТабличныйДокумент.РазборПоКопиям;
	КонецЕсли;
	Возврат ПакетСОднимДокументом;
КонецФункции

// Собирает список команд печати из нескольких объектов.
Процедура ЗаполнитьКомандыПечатиДляСпискаОбъектов(СписокОбъектов, КомандыПечати)
	Для Каждого ОбъектМетаданных Из СписокОбъектов Цикл
		ИсточникиКомандПечати = ИсточникиКомандПечати();
		Если ИсточникиКомандПечати.Найти(ОбъектМетаданных) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КомандыПечатиФормы = КомандыПечатиОбъекта(ОбъектМетаданных);
		
		Для Каждого ДобавляемаяКомандаПечати Из КомандыПечатиФормы Цикл
			// Поиск аналогичной ранее добавленной команды печати.
			НайденныеКоманды = Новый Массив;
			Для Каждого ИмеющаясяКомандаПечати Из КомандыПечати Цикл
				Если УникальныйИдентификаторКомандыПечати(ИмеющаясяКомандаПечати) = ДобавляемаяКомандаПечати.УникальныйИдентификатор Тогда
					НайденныеКоманды.Добавить(ИмеющаясяКомандаПечати);
				КонецЕсли;
			КонецЦикла;
			
			Если НайденныеКоманды.Количество() > 0 Тогда
				Для Каждого ИмеющаясяКомандаПечати Из НайденныеКоманды Цикл
					// Если уже есть такая команда, дополняем список типов объектов, для которых она предназначена.
					ТипОбъекта = Тип(СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".", "Ссылка."));
					Если ИмеющаясяКомандаПечати.ТипыОбъектовПечати.Найти(ТипОбъекта) = Неопределено Тогда
						ИмеющаясяКомандаПечати.ТипыОбъектовПечати.Добавить(ТипОбъекта);
					КонецЕсли;
					// Очистим МенеджерПечати в случае, если у имеющейся команды он отличается.
					Если ИмеющаясяКомандаПечати.МенеджерПечати <> ДобавляемаяКомандаПечати.МенеджерПечати Тогда
						ИмеющаясяКомандаПечати.МенеджерПечати = "";
					КонецЕсли;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			Если ДобавляемаяКомандаПечати.ТипыОбъектовПечати.Количество() = 0 Тогда
				ДобавляемаяКомандаПечати.ТипыОбъектовПечати.Добавить(Тип(СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".", "Ссылка.")));
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(КомандыПечати.Добавить(), ДобавляемаяКомандаПечати, , "МестоРазмещения");
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Только для внутреннего использования.
//
Функция КоличествоИспользуемыхПользовательскихМакетов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПользовательскиеМакетыПечати.ИмяМакета
	|ИЗ
	|	РегистрСведений.ПользовательскиеМакетыПечати КАК ПользовательскиеМакетыПечати
	|ГДЕ
	|	ПользовательскиеМакетыПечати.Использование = ИСТИНА";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат.Количество();
	
КонецФункции

Процедура УстановитьНастройкиКомандПечати(КомандыПечати, Владелец)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НастройкиКомандПечати.УникальныйИдентификатор
	|ИЗ
	|	РегистрСведений.НастройкиКомандПечати КАК НастройкиКомандПечати
	|ГДЕ
	|	НастройкиКомандПечати.Владелец = &Владелец
	|	И НастройкиКомандПечати.Видимость = ЛОЖЬ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	СписокОтключенных = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УникальныйИдентификатор");
	
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		КомандаПечати.УникальныйИдентификатор = УникальныйИдентификаторКомандыПечати(КомандаПечати);
		Если СписокОтключенных.Найти(КомандаПечати.УникальныйИдентификатор) <> Неопределено Тогда
			КомандаПечати.Отключена = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция УникальныйИдентификаторКомандыПечати(КомандаПечати)
	
	Параметры = Новый Массив;
	Параметры.Добавить("Идентификатор");
	Параметры.Добавить("МенеджерПечати");
	Параметры.Добавить("Обработчик");
	Параметры.Добавить("СразуНаПринтер");
	Параметры.Добавить("ФорматСохранения");
	Параметры.Добавить("ФиксированныйКомплект");
	Параметры.Добавить("ДополнительныеПараметры");
	
	СтруктураПараметров = Новый Структура(СтрСоединить(Параметры, ","));
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, КомандаПечати);
	
	Возврат ОбщегоНазначения.КонтрольнаяСуммаСтрокой(СтруктураПараметров);
	
КонецФункции

Функция КомандыПечатиОбъекта(ОбъектМетаданных) Экспорт
	КомандыПечати = СоздатьКоллекциюКомандПечати();
	
	Источники = ПодключаемыеКоманды.ДеревоИсточниковКоманд();
	НастройкиAPI = ПодключаемыеКоманды.НастройкиПрограммногоИнтерфейсаПодключаемыхОбъектов();
	ПодключенныеОтчетыИОбработки = ПодключаемыеКоманды.ТаблицаПодключаемыхОбъектов(НастройкиAPI);
	Источник = ПодключаемыеКоманды.ЗарегистрироватьИсточник(ОбъектМетаданных, Источники, ПодключенныеОтчетыИОбработки, НастройкиAPI);
	Если Источник.Менеджер = Неопределено Тогда
		Возврат КомандыПечати;
	КонецЕсли;
	
	ДобавляемыеКомандыПечати = СоздатьКоллекциюКомандПечати();
	Источник.Менеджер.ДобавитьКомандыПечати(ДобавляемыеКомандыПечати);
	Для Каждого КомандаПечати Из ДобавляемыеКомандыПечати Цикл
		Если КомандаПечати.МенеджерПечати = Неопределено Тогда
			КомандаПечати.МенеджерПечати = Источник.ПолноеИмя;
		КонецЕсли;
		Если КомандаПечати.Порядок = 0 Тогда
			КомандаПечати.Порядок = 50;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(КомандыПечати.Добавить(), КомандаПечати);
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		МодульДополнительныеОтчетыИОбработки.ПриПолученииКомандПечати(КомандыПечати, Источник.ПолноеИмя);
	КонецЕсли;
	
	Найденные = ПодключенныеОтчетыИОбработки.НайтиСтроки(Новый Структура("ДобавитьКомандыПечати", Истина));
	Для Каждого ПодключенныйОбъект Из Найденные Цикл
		ПодключенныйОбъект.Менеджер.ДобавитьКомандыПечати(КомандыПечати);
		ДобавленныеКоманды = КомандыПечати.НайтиСтроки(Новый Структура("МенеджерПечати", Неопределено));
		Для Каждого Команда Из ДобавленныеКоманды Цикл
			Команда.МенеджерПечати = ПодключенныйОбъект.ПолноеИмя;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого КомандаПечати Из КомандыПечати Цикл
		КомандаПечати.ДополнительныеПараметры.Вставить("ДополнитьКомплектВнешнимиПечатнымиФормами", КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами);
	КонецЦикла;
	
	КомандыПечати.Сортировать("Порядок Возр, Представление Возр");
	УстановитьНастройкиКомандПечати(КомандыПечати, Источник.СсылкаМетаданных);
	ОпределитьВидимостьКомандПечатиПоФункциональнымОпциям(КомандыПечати);
	
	Возврат КомандыПечати;
КонецФункции

Функция ОтключенныеКомандыПечати(СсылкаОбъектаМетаданных)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиКомандПечати.УникальныйИдентификатор
	|ИЗ
	|	РегистрСведений.НастройкиКомандПечати КАК НастройкиКомандПечати
	|ГДЕ
	|	НастройкиКомандПечати.Владелец = &Владелец
	|	И НастройкиКомандПечати.Видимость = ЛОЖЬ";
	Запрос.УстановитьПараметр("Владелец", СсылкаОбъектаМетаданных);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УникальныйИдентификатор");
КонецФункции

// Вызывается из ПриОпределенииКомандПодключенныхКОбъекту().
Процедура ПриПолученииКомандПечатиОбъекта(КомандыПечати, СведенияОбОбъекте, ДобавлятьДополнительные)
	СведенияОбОбъекте.Менеджер.ДобавитьКомандыПечати(КомандыПечати);
	Если ДобавлятьДополнительные И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		МодульДополнительныеОтчетыИОбработки.ПриПолученииКомандПечати(КомандыПечати, СведенияОбОбъекте.ПолноеИмя);
	КонецЕсли;
	ДобавленныеКоманды = КомандыПечати.НайтиСтроки(Новый Структура("Обработана", Ложь));
	Для Каждого Команда Из ДобавленныеКоманды Цикл
		Если Не ЗначениеЗаполнено(Команда.МенеджерПечати) Тогда
			Команда.МенеджерПечати = СведенияОбОбъекте.ПолноеИмя;
		КонецЕсли;
		Если Команда.ТипыОбъектовПечати.Количество() = 0 Тогда
			Если ТипЗнч(СведенияОбОбъекте.ТипСсылкиДанных) = Тип("ОписаниеТипов") Тогда
				Команда.ТипыОбъектовПечати = СведенияОбОбъекте.ТипСсылкиДанных.Типы();
			ИначеЕсли ТипЗнч(СведенияОбОбъекте.ТипСсылкиДанных) = Тип("Тип") Тогда
				Команда.ТипыОбъектовПечати.Добавить(СведенияОбОбъекте.ТипСсылкиДанных);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьРазметкуТабличногоДокументаПоОбъектамПечати(ТабличныйДокумент, ОбъектыПечати, Знач МенеджерПечати, Знач Идентификатор)
	
	Если ТабличныйДокумент.ВысотаТаблицы = 0 Или ОбъектыПечати.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьРазметкаПоОбъектамПечати = Ложь;
	Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			Если Область.Имя = ОбъектПечати.Представление Тогда
				ЕстьРазметкаПоОбъектамПечати = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если СтрНайти(Идентификатор, ".") > 0 Тогда
		Позиция = СтрНайти(Идентификатор, ".", НаправлениеПоиска.СКонца);
		МенеджерПечати = Лев(Идентификатор, Позиция - 1);
		Идентификатор = Сред(Идентификатор, Позиция + 1);
	КонецЕсли;
	
	ТекстОшибкиРазметки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Отсутствует разметка табличного документа ""%1"" по объектам печати.
		|Необходимо использовать процедуру УправлениеПечатью.ЗадатьОбластьПечатиДокумента()
		|при формировании табличного документа'"), Идентификатор);
	ОбщегоНазначенияКлиентСервер.Проверить(ЕстьРазметкаПоОбъектамПечати, ТекстОшибкиРазметки, МенеджерПечати + "." + "Печать()");
	
КонецПроцедуры

Функция ЧастиИмениМакета(ПолноеИмяМакета)
	ЧастиСтроки = СтрРазделить(ПолноеИмяМакета, ".");
	ИндексПоследнегоЭлемента = ЧастиСтроки.ВГраница();
	ИмяМакета = ЧастиСтроки[ИндексПоследнегоЭлемента];
	ЧастиСтроки.Удалить(ИндексПоследнегоЭлемента);
	ИмяОбъекта = СтрСоединить(ЧастиСтроки, ".");
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяМакета", ИмяМакета);
	Результат.Вставить("ИмяОбъекта", ИмяОбъекта);
	
	Возврат Результат;
КонецФункции

Функция КопируемыеСвойстваТабличногоДокумента() Экспорт
	Возврат "АвтоМасштаб,Вывод,ВысотаСтраницы,ДвусторонняяПечать,Защита,ИмяПринтера,КодЯзыка,КоличествоЭкземпляров,МасштабПечати,ОриентацияСтраницы,ПолеСверху,ПолеСлева,ПолеСнизу,ПолеСправа,РазборПоКопиям,РазмерКолонтитулаСверху,РазмерКолонтитулаСнизу,РазмерСтраницы,ТочностьПечати,ФоноваяКартинка,ЧерноБелаяПечать,ШиринаСтраницы,ЭкземпляровНаСтранице";
КонецФункции
#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С СОХРАНЕНИЕМ И ОТПРАВКОЙ ДОКУМЕНТОВ ПО ЭЛ.ПОЧТЕ

// Процедура формирует имя сохраняемого файла путем формирования представления документа и удаления из него символов "точка"
Процедура УстановитьИмяСохраняемогоФайла(ОбъектыПечати, КоллекцияПечатныхФорм)
	
	Если НЕ КоллекцияПечатныхФорм.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПечатнаяФорма = КоллекцияПечатныхФорм[0];
	Если ЗначениеЗаполнено(ПечатнаяФорма.ИмяФайлаПечатнойФормы) Тогда
		// Имя файла уже задано ранее, не меняем его.
		Возврат;
	КонецЕсли;
	
	ИмяФайлаПечатнойФормы = Новый Соответствие;
	
	Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
		ПредставлениеДокументаДляПечатнойФормы = ОбщегоНазначенияСУЗВызовСервера.СформироватьЗаголовокДокумента(
			ОбъектПечати.Значение, ПечатнаяФорма.СинонимМакета);
		ПредставлениеДокументаДляПечатнойФормы = СтрЗаменить(ПредставлениеДокументаДляПечатнойФормы, ".", "");
		ИмяФайлаПечатнойФормы.Вставить(ОбъектПечати.Значение, ПредставлениеДокументаДляПечатнойФормы);
	КонецЦикла;
	
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = ИмяФайлаПечатнойФормы;
	
КонецПроцедуры

// Устанавливает имя сохраняемого файла.
//
// Параметры:
//  МассивОбъектов - Массив - Массив объектов печати.
//  КоллекцияПечатныхФорм - Массив - Коллекция печатных форм.
//  ОбъектыПечати - Массив - Массив объектов печати.
//  ПараметрыВывода - Структура - Параметры вывода печатной формы.
//
Процедура ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати,
			ПараметрыВывода = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыВывода) = Тип("Структура") И ПараметрыВывода.Свойство("НеПереопределятьИмяФайла") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьИмяСохраняемогоФайла(ОбъектыПечати, КоллекцияПечатныхФорм);
	
	//Вывод факсимиле
	ДобавитьФаксимилеВКоллекциюПечатныхФорм(КоллекцияПечатныхФорм, ОбъектыПечати);
	
КонецПроцедуры

Процедура ДобавитьФаксимилеВКоллекциюПечатныхФорм(КоллекцияПечатныхФорм, ОбъектыПечати)
	
	Если ОбъектыПечати.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ МожноВывестиФаксимиле(ОбъектыПечати[0].Значение) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменПоказателей = МассивИменПоказателейФаксимиле();
	
	Для Каждого СтрокаМассива ИЗ КоллекцияПечатныхФорм Цикл
		УправлениеКартинкойФаксимиле(СтрокаМассива.ТабличныйДокумент, МассивИменПоказателей);
	КонецЦикла;
	
КонецПроцедуры