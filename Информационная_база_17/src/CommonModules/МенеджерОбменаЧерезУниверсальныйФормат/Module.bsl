// Конвертация СУЗ 1.1 от 13.11.2021 1:38:34
#Область ПрограммныйИнтерфейс

// Процедура, выполняемая перед началом конвертации данных.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт

	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	ПараметрыКонвертации.Вставить("ТекущаяВерсияФорматаЧислом", ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена));
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
	
		// Заполнение параметров из узла обмена.
		РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			КомпонентыОбмена.УзелКорреспондента,
			"ИспользоватьОтборПоОрганизациям");
	
		ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям = РеквизитыУзлаОбмена.ИспользоватьОтборПоОрганизациям;
	
		СписокОрганизаций = Новый СписокЗначений;
		СписокОрганизаций.ЗагрузитьЗначения(КомпонентыОбмена.УзелКорреспондента.Организации.ВыгрузитьКолонку("Организация"));
		ПараметрыКонвертации.Вставить("Организации", СписокОрганизаций);
	
	Иначе
	
		Если ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям = Неопределено Тогда
			ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	ПараметрыКонвертации.Вставить("МассивБанковскихСчетов", Новый Массив);
	ПараметрыКонвертации.Вставить("МассивУслуг", Новый Массив);
	ПараметрыКонвертации.Вставить("МассивЕдиницИзмерения", Новый Массив);
	ПараметрыКонвертации.Вставить("МассивРеализаций", Новый Массив);
КонецПроцедуры


// Процедура, выполняемая после выполнения конвертации данных.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт

	//Отправка файлов трудозатрат
	Для Каждого Реализация Из КомпонентыОбмена.ПараметрыКонвертации.МассивРеализаций Цикл
		СтруктураДанныеТрудозатрат = Новый Структура("ВладелецФайла", Реализация);
		ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_ФайлТрудозатрат_Отправка", "Имя");
		Если Не ПравилоОбработки = Неопределено Тогда
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтруктураДанныеТрудозатрат, ПравилоОбработки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


// Процедура, выполняемая перед началом отложенного заполнения объектов.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт

	
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Строка - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - Строка - "Отправка" либо "Получение".
//  ПравилаОбработкиДанных - ТаблицаЗначений - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт

	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_Трудозатраты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюта_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Договоры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Заказчики_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФайлТрудозатрат_Отправка(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - Строка - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт


	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_ТрудозатратыРеализацияУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Банки_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Валюты_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЕдиницыИзмерения_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЗаказчикиКонтрагенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ОрганизацииДоговоры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФайлыРеализаций_ИзСтруктуры(ПравилаКонвертации);
	КонецЕсли;
КонецПроцедуры
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - Строка - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
КонецПроцедуры

// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - Структура - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ИспользоватьОтборПоОрганизациям");
	ПараметрыКонвертации.Вставить("Организации");
	ПараметрыКонвертации.Вставить("ТекущаяВерсияФорматаЧислом");
	ПараметрыКонвертации.Вставить("МассивБанковскихСчетов");
	ПараметрыКонвертации.Вставить("МассивУслуг");
	ПараметрыКонвертации.Вставить("МассивЕдиницИзмерения");
	ПараметрыКонвертации.Вставить("МассивРеализаций");
КонецПроцедуры

// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - Строка - имя процедуры этого модуля.
//  Параметры - Структура - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_Трудозатраты_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_Трудозатраты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Организации_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Организации_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТрудозатратыРеализацияУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ТрудозатратыРеализацияУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_ИзСтруктуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_ИзСтруктуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмерения_ИзСтруктуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЕдиницыИзмерения_ИзСтруктуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЗаказчикиКонтрагенты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЗаказчикиКонтрагенты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_ИзСтруктуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_ИзСтруктуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ОрганизацииДоговоры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ОрганизацииДоговоры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФайлыРеализаций_ИзСтруктуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ФайлыРеализаций_ИзСтруктуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти
#Область СлужебныеПроцедурыИФункции
#Область Отправка
Процедура ДобавитьПОД_Документ_Трудозатраты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_Трудозатраты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.Трудозатраты;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_Трудозатраты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ТрудозатратыРеализацияУслуг_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки_ИзСтруктуры");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчета_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_ИзСтруктуры");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Валюта_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюта_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты_ИзСтруктуры");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Договоры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Договоры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ОрганизацииДоговоры_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЕдиницыИзмерения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения_ИзСтруктуры");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Заказчики_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Заказчики_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Заказчики;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗаказчикиКонтрагенты_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_ИзСтруктуры");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Организации_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
КонецПроцедуры

Процедура ДобавитьПОД_Справочник_ФайлТрудозатрат_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФайлТрудозатрат_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФайлыРеализаций_ИзСтруктуры");
КонецПроцедуры


#КонецОбласти
Процедура ДобавитьПКО_Документ_ТрудозатратыРеализацияУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ТрудозатратыРеализацияУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.Трудозатраты;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ТрудозатратыРеализацияУслуг_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",            "БанковскийСчетОрганизации", 1, "Справочник_БанковскиеСчета_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",            "Валюта", 1, "Справочник_Валюты_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",            "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",            "СуммаВключаетНДС", 1);
	ДобавитьПКС(СвойстваШапки, "",            "Договор", 1, "Справочник_ОрганизацииДоговоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Заказчик",    "Контрагент", , "Справочник_ЗаказчикиКонтрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Комментарий", "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Сумма",       "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Банки_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Банки_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Банки";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "", "КоррСчет", 1);
	ДобавитьПКС(СвойстваШапки, "", "БИК", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_БанковскиеСчета_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_БанковскиеСчета_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчета_ИзСтруктуры_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВалютаДенежныхСредств", 1, "Справочник_Валюты_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "", "Банк", 1, "Справочник_Банки_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "", "БанкДляРасчетов", 1, "Справочник_Банки_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "", "Владелец", 1);
	ДобавитьПКС(СвойстваШапки, "", "НомерСчета", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Валюты_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Валюты_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Валюты";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "НаименованиеПолное", 1);
	ДобавитьПКС(СвойстваШапки, "", "Код", 1);
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЕдиницыИзмерения_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЕдиницыИзмерения_ИзСтруктуры_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "НаименованиеПолное", 1);
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "", "Код", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ЗаказчикиКонтрагенты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЗаказчикиКонтрагенты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Заказчики;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЗаказчикиКонтрагенты_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ДополнительнаяИнформация", 1);
	ДобавитьПКС(СвойстваШапки, "", "Группа", 1);
	ДобавитьПКС(СвойстваШапки, "", "ИНН", 1);
	ДобавитьПКС(СвойстваШапки, "", "КПП", 1);
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "", "НаименованиеПолное", 1);
	ДобавитьПКС(СвойстваШапки, "", "ЮридическоеФизическоеЛицо", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Номенклатура_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Номенклатура_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_ИзСтруктуры_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "", "ТипНоменклатуры", 1);
	ДобавитьПКС(СвойстваШапки, "", "Артикул", 1);
	ДобавитьПКС(СвойстваШапки, "", "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "", "Группа", 1);
	ДобавитьПКС(СвойстваШапки, "", "КодВПрограмме", 1);
	ДобавитьПКС(СвойстваШапки, "", "ИдентификаторСервиса1СНоменклатура", 1);
	ДобавитьПКС(СвойстваШапки, "", "НаименованиеПолное", 1);
	ДобавитьПКС(СвойстваШапки, "", "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваШапки, "", "Ссылка", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                        "ЮридическоеФизическоеЛицо", 1);
	ДобавитьПКС(СвойстваШапки, "ИНН",                     "ИНН", 1);
	ДобавитьПКС(СвойстваШапки, "КПП",                     "КПП", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",            "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",      "НаименованиеПолное", 1);
	ДобавитьПКС(СвойстваШапки, "НаименованиеСокращенное", "НаименованиеСокращенное", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ОрганизацииДоговоры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ОрганизацииДоговоры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Договоры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ОрганизацииДоговоры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "", "ВидДоговора", 1);
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Контрагент", 1, "Справочник_ЗаказчикиКонтрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "", "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "", "Ссылка", 1);

КонецПроцедуры

Процедура ДобавитьПКО_Справочник_ФайлыРеализаций_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ФайлыРеализаций_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Файлы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ФайлыРеализаций_ИзСтруктуры_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Описание", 1);
	ДобавитьПКС(СвойстваШапки, "", "Расширение", 1);
	ДобавитьПКС(СвойстваШапки, "", "ХранимыйФайл", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВладелецФайла", 1);
	ДобавитьПКС(СвойстваШапки, "", "Имя", 1);

КонецПроцедуры



Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

#Область ОбработчикиКонвертации
#Область Отправка
Процедура ПОД_Документ_Трудозатраты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	//Для отправки файла трудозатрат
	КомпонентыОбмена.ПараметрыКонвертации.МассивРеализаций.Добавить(ДанныеИБ.Ссылка);
КонецПроцедуры
Процедура ПОД_Справочник_Организации_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	//УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	//Если ДанныеИБ.СобственнаяОрганизация Тогда
	//	ИспользованиеПКО.Справочник_Организации_Отправка = Истина;
	//Иначе
	//	ИспользованиеПКО.Справочник_ОрганизацииКонтрагенты_Отправка = Истина;
	//КонецЕсли;
КонецПроцедуры

#КонецОбласти
Процедура ПКО_Документ_ТрудозатратыРеализацияУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПриОтправкеТрудозатрат(ДанныеXDTO, КомпонентыОбмена, ДанныеИБ);
	
	//ДанныеXDTO.Вставить("Руководитель", "");
	//ДанныеXDTO.Вставить("ГлавныйБухгалтер", "");
КонецПроцедуры
Процедура ПКО_Справочник_БанковскиеСчета_ИзСтруктуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ВалютаДенежныхСредств", ВалютаРубли(КомпонентыОбмена));
	ДанныеXDTO.Вставить("Наименование", ДанныеИБ.НомерСчета);
КонецПроцедуры
Процедура ПКО_Справочник_ЕдиницыИзмерения_ИзСтруктуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование", ДанныеXDTO.Код);
	ДанныеXDTO.Вставить("НаименованиеПолное", ДанныеXDTO.Код);
КонецПроцедуры
Процедура ПКО_Справочник_ЗаказчикиКонтрагенты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("ИНН", ДанныеИБ.Ссылка.Организация.ИНН);
	ДанныеXDTO.КлючевыеСвойства.Вставить("КПП", ДанныеИБ.Ссылка.Организация.КПП);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование", ДанныеИБ.Ссылка.Организация.Наименование);
	ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Ссылка.Организация.НаименованиеПолное);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Группа", Неопределено);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ЮридическоеФизическоеЛицо", ?(СтрДлина(ДанныеИБ.Ссылка.Организация.ИНН)=12, "ФизическоеЛицо", "ЮридическоеЛицо"));
	ДанныеXDTO.Вставить("ДополнительнаяИнформация", ДанныеИБ.Ссылка.Организация.ПредставлениеПолное);
КонецПроцедуры
Процедура ПКО_Справочник_Номенклатура_ИзСтруктуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ТипНоменклатуры", "Услуга");
	ДанныеXDTO.КлючевыеСвойства.Вставить("Артикул", "");
	ДанныеXDTO.КлючевыеСвойства.Вставить("Группа", Неопределено);
	ДанныеXDTO.КлючевыеСвойства.Вставить("КодВПрограмме", Неопределено);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ИдентификаторСервиса1СНоменклатура", Неопределено);
	ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
КонецПроцедуры
Процедура ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("ЮридическоеФизическоеЛицо", ?(СтрДлина(ДанныеИБ.ИНН)=12, "ФизическоеЛицо", "ЮридическоеЛицо"));
	Если ПустаяСтрока(ДанныеИБ.Ссылка.КПП) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("КПП", "");
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ОрганизацииДоговоры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДоговора", "СПокупателем");
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВалютаВзаиморасчетов", ВалютаРубли(КомпонентыОбмена));
	//Предполагаем, что наименование договора будет в формате "Договор № <Номер> от <Дата>"
	СтрокаРазбора = СтрЗаменить(ДанныеИБ.Ссылка.ДоговорОснование, "Договор", "");
	СтрокаРазбора = СтрЗаменить(СтрокаРазбора, "№", "");
	НомерВхожденияОт = СтрНайти(СтрокаРазбора, "от");
	Если НомерВхожденияОт > 0 Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", СокрЛП(Лев(СтрокаРазбора, НомерВхожденияОт - 1)));
		СтрокаДата = СокрЛП(Сред(СтрокаРазбора, НомерВхожденияОт + 2));
		ДанныеXDTO.КлючевыеСвойства.Вставить("Дата", СтроковыеФункцииКлиентСервер.СтрокаВДату(СтрокаДата, ЧастиДаты.Дата));
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_Справочник_ФайлыРеализаций_ИзСтруктуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	//Формирование файла трудозатрат
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	
	//Получение табличной формы
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(ДанныеИБ.ВладелецФайла);
	ОбъектыПечати = Новый СписокЗначений;
	ОбъектыПечати.Добавить(ДанныеИБ.ВладелецФайла);
	ПечатнаяФорма = Документы.Трудозатраты.ПечатьТрудозатраты(МассивДокументов, ОбъектыПечати);
	ИмяФайла = СтрШаблон("Трудозатраты № %1 от %2", ДанныеИБ.ВладелецФайла.Номер, Формат(ДанныеИБ.ВладелецФайла.Дата, "ДФ=dd_MM_yyyy"));
	
	ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла + ".pdf";
	ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	
	ХранимыйФайл = Новый ДвоичныеДанные(ПолноеИмяФайла);
	УдалитьФайлы(ИмяВременнойПапки);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВладелецФайла", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ВладелецФайла, "Документ_ТрудозатратыРеализацияУслуг_Отправка"));
	ДанныеXDTO.КлючевыеСвойства.Вставить("Имя", ИмяФайла);
	ДанныеXDTO.Вставить("Расширение", "pdf");
	Если ХранимыйФайл <> Неопределено Тогда
		ДанныеXDTO.Вставить("ХранимыйФайл", ХранимыйФайл);
	Иначе
		ДанныеXDTO = Неопределено;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Функция ВалютаРубли(КомпонентыОбмена)
	СтруктураДанныеВалюты = Новый Структура("Код, Наименование, НаименованиеПолное", "643", "RUB", "Российский рубль");
	Валюта = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюты_ИзСтруктуры");
	//ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_Валюта_Отправка", "Имя");
	//Если Не ПравилоОбработки = Неопределено Тогда
	//	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтруктураДанныеВалюты, ПравилоОбработки);
	//КонецЕсли;
	Возврат Валюта;
КонецФункции
Функция ВерсияФорматаЧислом(СтрокаВерсии)
	Если Не ЗначениеЗаполнено(СтрокаВерсии) Или СтрокаВерсии = "1.0.beta" Тогда
		Возврат 0;
	КонецЕсли;
	
	ВерсияФорматаЧислом = 0;
	
	РазрядыВерсии = СтрРазделить(СтрокаВерсии, ".");
	Если РазрядыВерсии.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии);
	КонецЕсли;
	
	МножительРазряда = 10000;
	Для ИндексРазрядаОбратный = 0 По 1 Цикл
		ВерсияФорматаЧислом = ВерсияФорматаЧислом + Число(РазрядыВерсии[ИндексРазрядаОбратный])*МножительРазряда;
		МножительРазряда = МножительРазряда / 100;
	КонецЦикла;
	Возврат ВерсияФорматаЧислом;
КонецФункции
Функция ВыгрузитьУслугиТрудозатрат(Документ, КомпонентыОбмена)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТрудозатратыРаботы.Ссылка КАК Ссылка,
	|	ТрудозатратыРаботы.Проект КАК Проект,
	|	ТрудозатратыРаботы.Цена КАК Цена,
	|	СУММА(ТрудозатратыРаботы.Количество) КАК Количество,
	|	СУММА(ТрудозатратыРаботы.Сумма) КАК Сумма,
	|	СУММА(ТрудозатратыРаботы.Сумма * ТрудозатратыРаботы.Ссылка.Организация.СтавкаНДСОказанияУслуг / 100) КАК СуммаНДС,
	|	ТрудозатратыРаботы.Ссылка.Организация.СтавкаНДСОказанияУслуг КАК СтавкаНДСЧисло,
	|	ВЫБОР
	|		КОГДА ТрудозатратыРаботы.Ссылка.Заказчик.Организация.ОписаниеУслуги = """"
	|			ТОГДА ТрудозатратыРаботы.Ссылка.Организация.ОписаниеУслуги
	|		ИНАЧЕ ТрудозатратыРаботы.Ссылка.Заказчик.Организация.ОписаниеУслуги
	|	КОНЕЦ КАК НоменклатураНаименование
	|ИЗ
	|	Документ.Трудозатраты.Работы КАК ТрудозатратыРаботы
	|ГДЕ
	|	ТрудозатратыРаботы.Ссылка = &Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТрудозатратыРаботы.Цена,
	|	ТрудозатратыРаботы.Проект,
	|	ТрудозатратыРаботы.Ссылка,
	|	ТрудозатратыРаботы.Ссылка.Организация.СтавкаНДСОказанияУслуг,
	|	ВЫБОР
	|		КОГДА ТрудозатратыРаботы.Ссылка.Заказчик.Организация.ОписаниеУслуги = """"
	|			ТОГДА ТрудозатратыРаботы.Ссылка.Организация.ОписаниеУслуги
	|		ИНАЧЕ ТрудозатратыРаботы.Ссылка.Заказчик.Организация.ОписаниеУслуги
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проект";
	
	ТабУслуги = Запрос.Выполнить().Выгрузить();
	ТабУслуги.Колонки.Добавить("Номенклатура");
	ТабУслуги.Колонки.Добавить("Содержание");
	ТабУслуги.Колонки.Добавить("СтавкаНДС");
	Для Каждого СтрокаУслуг Из ТабУслуги Цикл
		НаименованиеУслуги = "";
		СтрокаУслуг.Содержание = Документы.Трудозатраты.ПолучитьОписаниеУслуги(Документ, СтрокаУслуг.Проект, НаименованиеУслуги);
	    
	    Если ПустаяСтрока(Документ.Заказчик.Организация.ОписаниеУслуги) Тогда
	    	КодЕдИзм = Документ.Организация.ЕдиницаИзмеренияУслуги;
	    	СсылкаДляУслуги = Документ.Организация;
	    Иначе
	    	КодЕдИзм = Документ.Заказчик.Организация.ЕдиницаИзмеренияУслуги;
	    	СсылкаДляУслуги = Документ.Заказчик.Организация;
	    КонецЕсли;
	    
		//Ед. измерения
		СтруктураДанныхЕдИзм = Новый Структура("Код", КодЕдИзм);
		ЕдИзмСтруктура = Новый Структура("Значение, ИмяПКО", СтруктураДанныхЕдИзм, "Справочник_ЕдиницыИзмерения_ИзСтруктуры");
		
		Если КомпонентыОбмена.ПараметрыКонвертации.МассивЕдиницИзмерения.Найти(КодЕдИзм) = Неопределено Тогда
			КомпонентыОбмена.ПараметрыКонвертации.МассивЕдиницИзмерения.Добавить(КодЕдИзм);
	
			ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_ЕдиницыИзмерения_Отправка", "Имя");
			Если Не ПравилоОбработки = Неопределено Тогда
				ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтруктураДанныхЕдИзм, ПравилоОбработки);
			КонецЕсли;
		КонецЕсли;
	
		СтавкаНДС = ?(СтрокаУслуг.СтавкаНДСЧисло = 20, "НДС20", "БезНДС");
		СтруктураДанныхУслуги = Новый Структура("Ссылка, Наименование, ЕдиницаИзмерения, СтавкаНДС", 
			СсылкаДляУслуги, НаименованиеУслуги, ЕдИзмСтруктура, СтавкаНДС);
		НоменклатураСтруктура = Новый Структура("Значение, ИмяПКО", СтруктураДанныхУслуги, "Справочник_Номенклатура_ИзСтруктуры");
		СтрокаУслуг.Номенклатура = НоменклатураСтруктура;
	
		Если КомпонентыОбмена.ПараметрыКонвертации.МассивУслуг.Найти(НаименованиеУслуги) = Неопределено Тогда
			КомпонентыОбмена.ПараметрыКонвертации.МассивУслуг.Добавить(НаименованиеУслуги);
	
			ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_Номенклатура_Отправка", "Имя");
			Если Не ПравилоОбработки = Неопределено Тогда
				ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтруктураДанныхУслуги, ПравилоОбработки);
			КонецЕсли;
		КонецЕсли;
	
		СтрокаУслуг.СтавкаНДС = СтавкаНДС;
	КонецЦикла;
	
	Возврат ТабУслуги;
КонецФункции
Функция ВыгрузкаБанковскогоСчета(Организация, КомпонентыОбмена)
	//СтруктураБанк = Новый Структура("Значение, ИмяПКО", 
	//	Новый Структура("Наименование, КоррСчет, БИК", Организация.ПредставлениеБанка, Организация.КоррСчетБанка, Организация.БИКБанка),
	//	"Справочник_Банки_ИзСтруктуры");
	СтруктураБанк = Новый Структура("Наименование, КоррСчет, БИК", Организация.ПредставлениеБанка, Организация.КоррСчетБанка, Организация.БИКБанка);
	
	СтруктураБанковскийСчет = Новый Структура("Владелец, НомерСчета, Банк", 
				Новый Структура("Значение, ИмяПКО", Организация, "Справочник_Организации_Отправка"),
				Организация.СчетБанка,
				СтруктураБанк
	);
	Если КомпонентыОбмена.ПараметрыКонвертации.МассивБанковскихСчетов.Найти(Организация.СчетБанка) = Неопределено Тогда
		КомпонентыОбмена.ПараметрыКонвертации.МассивБанковскихСчетов.Добавить(Организация.СчетБанка);
	
		ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_Банки_Отправка", "Имя");
		Если Не ПравилоОбработки = Неопределено Тогда
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтруктураБанк, ПравилоОбработки);
		КонецЕсли;
	
		ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_БанковскиеСчета_Отправка", "Имя");
		Если Не ПравилоОбработки = Неопределено Тогда
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтруктураБанковскийСчет, ПравилоОбработки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Значение, ИмяПКО", СтруктураБанковскийСчет, "Справочник_БанковскиеСчета_ИзСтруктуры");
КонецФункции
Процедура ПриОтправкеТрудозатрат(ДанныеXDTO, КомпонентыОбмена, ДанныеИБ)
	ДанныеВзаиморасчетов = Новый Структура("КурсВзаиморасчетов, КратностьВзаиморасчетов, РасчетыВУсловныхЕдиницах", 1, 1, Ложь);
	СтруктураВалюта = Новый Структура("Код, Наименование, НаименованиеПолное", "643", "RUB", "Российский рубль");
	ДанныеВзаиморасчетов.Вставить("ВалютаВзаиморасчетов", СтруктураВалюта);
	
	ДанныеXDTO.Вставить("СуммаВключаетНДС", Истина);
	ДанныеXDTO.Вставить("ВидОперации", "РеализацияКлиенту");
	
	//Валюта
	ВалютаРубли = ВалютаРубли(КомпонентыОбмена);
	ДанныеXDTO.Вставить("Валюта", ВалютаРубли);
	
	//Банковский счет
	Если Не ПустаяСтрока(ДанныеИБ.Организация.СчетБанка) Тогда
		ДанныеXDTO.Вставить("БанковскийСчетОрганизации", ВыгрузкаБанковскогоСчета(ДанныеИБ.Организация, КомпонентыОбмена));
	КонецЕсли;
	
	//Контрагент
	СтруктураКонтрагент = Новый Структура("ИНН, КПП, Наименование, НаименованиеПолное, Группа, ЮридическоеФизическоеЛицо, Ссылка");
	ЗаполнитьЗначенияСвойств(СтруктураКонтрагент, ДанныеИБ.Заказчик.Организация);
	СтруктураКонтрагент.ЮридическоеФизическоеЛицо = ?(СтрДлина(ДанныеИБ.Заказчик.Организация.ИНН)=12, "ФизическоеЛицо", "ЮридическоеЛицо");
	СтруктураКонтрагент.Ссылка = ДанныеИБ.Заказчик;
	ДанныеXDTO.Вставить("Контрагент", СтруктураКонтрагент);
	//КонтрагентЗначение = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Заказчик, "Справочник_ЗаказчикиКонтрагенты_Отправка");
	//ДанныеXDTO.Вставить("Контрагент", КонтрагентЗначение);
	
	//Договор
	Если Не ПустаяСтрока(ДанныеИБ.Заказчик.Организация.ДоговорОснование) Тогда
		
		СтруктураОрганизация = Новый Структура("ИНН, КПП, Наименование, НаименованиеПолное, НаименованиеСокращенное, ЮридическоеФизическоеЛицо, Ссылка");
		ЗаполнитьЗначенияСвойств(СтруктураОрганизация, ДанныеИБ.Организация);
		СтруктураОрганизация.ЮридическоеФизическоеЛицо = ?(СтрДлина(ДанныеИБ.Организация.ИНН)=12, "ФизическоеЛицо", "ЮридическоеЛицо");
		СтруктураОрганизация.Ссылка = ДанныеИБ.Организация;
		
		//Поля: Контрагент, Организация, ВалютаВзаиморасчетов, ВидДоговора, Наименование, Дата, Номер
		СтруктураДанныеДоговора = Новый Структура("Контрагент, Организация, ВалютаВзаиморасчетов, Наименование, ВидДоговора, Ссылка");
		СтруктураДанныеДоговора.Контрагент = СтруктураКонтрагент;
		СтруктураДанныеДоговора.Организация = СтруктураОрганизация;
		СтруктураДанныеДоговора.Наименование = ДанныеИБ.Заказчик.Организация.ДоговорОснование;
		СтруктураДанныеДоговора.ВидДоговора = "СПокупателем";
		СтруктураДанныеДоговора.ВалютаВзаиморасчетов = СтруктураВалюта;
		СтруктураДанныеДоговора.Ссылка = ДанныеИБ.Заказчик.Организация;
			
		//Договор = Новый Структура("Значение, ИмяПКО", СтруктураДанныеДоговора, "Справочник_Договоры_ИзСтруктуры");
		ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_Договоры_Отправка", "Имя");
		Если Не ПравилоОбработки = Неопределено Тогда
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтруктураДанныеДоговора, ПравилоОбработки);
		КонецЕсли;
		ДанныеВзаиморасчетов.Вставить("Договор", СтруктураДанныеДоговора);
	КонецЕсли;
	
	//ТЧ Услуги
	ДанныеXDTO.Вставить("Услуги", ВыгрузитьУслугиТрудозатрат(ДанныеИБ.Ссылка, КомпонентыОбмена));
	
	ДанныеXDTO.Вставить("ДанныеВзаиморасчетов", ДанныеВзаиморасчетов);
КонецПроцедуры
Процедура УстановитьИспользованиеПКО(ИспользованиеПКО, Режим)
	Для Каждого Правило Из ИспользованиеПКО Цикл
		ИспользованиеПКО[Правило.Ключ] = Режим;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
#КонецОбласти
