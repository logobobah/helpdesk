#Область ПрограммныйИнтерфейс

// Запускает периодическую проверку текущих напоминаний пользователя.
Процедура Включить() Экспорт
	ПроверитьТекущиеНапоминания();
КонецПроцедуры

// Отключает периодическую проверку текущих напоминаний пользователя.
Процедура Выключить() Экспорт
	ОтключитьОбработчикОжидания("ПроверитьТекущиеНапоминания");
КонецПроцедуры

// Создает новое напоминание на указанное время.
//
// Параметры:
//  Текст - Строка - текст напоминания;
//  Время - Дата - дата и время напоминания;
//  Предмет - ЛюбаяСсылка - предмет напоминания.
//
Процедура НапомнитьВУказанноеВремя(Текст, Время, Предмет = Неопределено) Экспорт
	
	Напоминание = НапоминанияПользователяВызовСервера.ПодключитьНапоминание(
		Текст, Время, , Предмет);
		
	ОбновитьЗаписьВКэшеОповещений(Напоминание);
	СброситьТаймерПроверкиТекущихОповещений();
	
КонецПроцедуры

// Создает новое напоминание на время, рассчитанное относительно времени в предмете.
//
// Параметры:
//  Текст - Строка - текст напоминания;
//  Интервал - Число - время в секундах, за которое необходимо напомнить относительно даты в реквизите предмета;
//  Предмет - ЛюбаяСсылка - предмет напоминания;
//  ИмяРеквизита - Строка - имя реквизита предмета, относительно которого устанавливается срок напоминания.
Процедура НапомнитьДоВремениПредмета(Текст, Интервал, Предмет, ИмяРеквизита) Экспорт
	
	Напоминание = НапоминанияПользователяВызовСервера.ПодключитьНапоминаниеДоВремениПредмета(
		Текст, Интервал, Предмет, ИмяРеквизита, Ложь);
		
	ОбновитьЗаписьВКэшеОповещений(Напоминание);
	СброситьТаймерПроверкиТекущихОповещений();
	
КонецПроцедуры

// Создает напоминание с произвольным временем или расписанием выполнения.
//
// Параметры:
//  Текст - Строка - текст напоминания;
//  ВремяСобытия - Дата - дата и время события, о котором надо напомнить;
//               - РасписаниеРегламентногоЗадания - расписание периодического события.
//               - Строка - имя реквизита Предмета, в котором содержится время наступления события.
//  ИнтервалДоСобытия - Число - время в секундах, за которое необходимо напомнить относительно времени события;
//  Предмет - ЛюбаяСсылка - предмет напоминания;
//  Идентификатор - Строка - уточняет предмет напоминания, например, "ДеньРождения".
//
Процедура Напомнить(Текст, ВремяСобытия, ИнтервалДоСобытия = 0, Предмет = Неопределено, Идентификатор = Неопределено) Экспорт
	
	Напоминание = НапоминанияПользователяВызовСервера.ПодключитьНапоминание(
		Текст, ВремяСобытия, ИнтервалДоСобытия, Предмет, Идентификатор);
		
	ОбновитьЗаписьВКэшеОповещений(Напоминание);
	СброситьТаймерПроверкиТекущихОповещений();
	
КонецПроцедуры

// Создает ежегодное напоминание на дату предмета.
//
// Параметры:
//  Текст - Строка - текст напоминания;
//  Интервал - Число - время в секундах, за которое необходимо напомнить относительно даты в реквизите предмета;
//  Предмет - ЛюбаяСсылка - предмет напоминания;
//  ИмяРеквизита - Строка - имя реквизита предмета, относительно которого устанавливается срок напоминания.
//
Процедура НапомнитьОЕжегодномСобытииПредмета(Текст, Интервал, Предмет, ИмяРеквизита) Экспорт
	
	Напоминание = НапоминанияПользователяВызовСервера.ПодключитьНапоминаниеДоВремениПредмета(
		Текст, Интервал, Предмет, ИмяРеквизита, Истина);
		
	ОбновитьЗаписьВКэшеОповещений(Напоминание);
	СброситьТаймерПроверкиТекущихОповещений();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем конфигурации.

// См. ОбщегоНазначенияКлиентПереопределяемый.ПослеНачалаРаботыСистемы.
Процедура ПослеНачалаРаботыСистемы() Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	Если НЕ ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыРаботыКлиента.НастройкиНапоминаний.ИспользоватьНапоминания Тогда
		ПодключитьОбработчикОжидания("ПроверитьТекущиеНапоминания", 60, Истина); // Через 60 секунд после запуска клиента.
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Сбрасывает таймер проверки текущих напоминаний и выполняет проверку немедленно.
Процедура СброситьТаймерПроверкиТекущихОповещений() Экспорт
	ОтключитьОбработчикОжидания("ПроверитьТекущиеНапоминания");
	ПроверитьТекущиеНапоминания();
КонецПроцедуры

// Открывает форму оповещения
Процедура ОткрытьФормуОповещения() Экспорт
	
	Если НапоминанияПользователяКлиентПовтИсп.ПолучитьИспользоватьЦентрОповещенияДляНапоминаний() Тогда
		
		//Вместо типового вывода формы оповещения будет выводиться типовой инструмен оповещения
		МассивОповещений = ПолучитьТекущиеОповещения();
		Для Каждого Оповещение Из МассивОповещений Цикл
			
			ПредставлениеВремени = НСтр("ru = 'срок не определен'");
			
			Если ЗначениеЗаполнено(Оповещение.ВремяСобытия) Тогда
				ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
				Время = ТекущаяДата - Оповещение.ВремяСобытия;
				Если Оповещение.ВремяСобытия - НачалоДня(Оповещение.ВремяСобытия) < 60 // События "на весь день".
					И НачалоДня(Оповещение.ВремяСобытия) = НачалоДня(ТекущаяДата) Тогда
						ПредставлениеВремени = НСтр("ru = 'сегодня'");
				Иначе
					Если МодульЧисла(Время) > 60*60*24 Тогда
						Время = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) - НачалоДня(Оповещение.ВремяСобытия);
					КонецЕсли;
					ПредставлениеВремени = ПредставлениеИнтервалаВремени(Время);
				КонецЕсли;
			КонецЕсли;
			
			ПоказатьОповещениеПользователя(
					Оповещение.Описание,
					Новый ОписаниеОповещения("ОткрытьФормуДействийСОповещением",ЭтотОбъект, Оповещение),//ПолучитьНавигационнуюСсылку(Оповещение.Источник),
					ПредставлениеВремени,
					,//Картинка
					СтатусОповещенияПользователя.Важное,
					Оповещение.Источник.УникальныйИдентификатор()
			);
		КонецЦикла;
	Иначе
		// Хранение формы в переменной требуется для предотвращения открытия дублей формы,
		// а также для уменьшения количества серверных вызовов.
		ИмяПараметра = "СтандартныеПодсистемы.ФормаОповещения";
		Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
			ИмяФормыОповещения = "РегистрСведений.НапоминанияПользователя.Форма.ФормаОповещения";
			ПараметрыПриложения.Вставить(ИмяПараметра, ПолучитьФорму(ИмяФормыОповещения));
		КонецЕсли;
		ФормаОповещения = ПараметрыПриложения[ИмяПараметра];
		ФормаОповещения.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Функция МодульЧисла(Число)
	Если Число >= 0 Тогда
		Возврат Число;
	Иначе
		Возврат -Число;
	КонецЕсли;
КонецФункции

Функция ПредставлениеИнтервалаВремени(Знач КоличествоВремени)
	Результат = "";
	
	ПредставлениеНедель = НСтр("ru = ';%1 неделю;;%1 недели;%1 недель;%1 недели'");
	ПредставлениеДней   = НСтр("ru = ';%1 день;;%1 дня;%1 дней;%1 дня'");
	ПредставлениеЧасов  = НСтр("ru = ';%1 час;;%1 часа;%1 часов;%1 часа'");
	ПредставлениеМинут  = НСтр("ru = ';%1 минуту;;%1 минуты;%1 минут;%1 минуты'");
	
	КоличествоВремени = Число(КоличествоВремени);
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	СобытиеНаступило = Истина;
	СобытиеСегодня = НачалоДня(ТекущаяДата - КоличествоВремени) = НачалоДня(ТекущаяДата);
	ШаблонПредставления = НСтр("ru = '%1 назад'");
	Если КоличествоВремени < 0 Тогда
		ШаблонПредставления = НСтр("ru = 'через %1'");
		КоличествоВремени = -КоличествоВремени;
		СобытиеНаступило = Ложь;
	КонецЕсли;
	
	КоличествоНедель = Цел(КоличествоВремени / 60/60/24/7);
	КоличествоДней   = Цел(КоличествоВремени / 60/60/24);
	КоличествоЧасов  = Цел(КоличествоВремени / 60/60);
	КоличествоМинут  = Цел(КоличествоВремени / 60);
	КоличествоСекунд = Цел(КоличествоВремени);
	
	КоличествоСекунд = КоличествоСекунд - КоличествоМинут * 60;
	КоличествоМинут  = КоличествоМинут - КоличествоЧасов * 60;
	КоличествоЧасов  = КоличествоЧасов - КоличествоДней * 24;
	КоличествоДней   = КоличествоДней - КоличествоНедель * 7;
	
	Если КоличествоНедель > 4 Тогда
		Если СобытиеНаступило Тогда
			Возврат НСтр("ru = 'очень давно'");
		Иначе
			Возврат НСтр("ru = 'еще не скоро'");
		КонецЕсли;
		
	ИначеЕсли КоличествоНедель > 1 Тогда
		Результат = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеНедель, КоличествоНедель);
	ИначеЕсли КоличествоНедель > 0 Тогда
		Результат = НСтр("ru = 'неделю'");
		
	ИначеЕсли КоличествоДней > 1 Тогда
		Если НачалоДня(ТекущаяДата) - НачалоДня(ТекущаяДата - КоличествоВремени) = 60*60*24 * 2 Тогда
			Если СобытиеНаступило Тогда
				Возврат НСтр("ru = 'позавчера'");
			Иначе
				Возврат НСтр("ru = 'послезавтра'");
			КонецЕсли;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеДней, КоличествоДней);
		КонецЕсли;
	ИначеЕсли КоличествоЧасов + КоличествоДней * 24 > 3 И Не СобытиеСегодня Тогда
			Если СобытиеНаступило Тогда
				Возврат НСтр("ru = 'вчера'");
			Иначе
				Возврат НСтр("ru = 'завтра'");
			КонецЕсли;
	ИначеЕсли КоличествоДней > 0 Тогда
		Результат = НСтр("ru = 'день'");
	ИначеЕсли КоличествоЧасов > 1 Тогда
		Результат = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеЧасов, КоличествоЧасов);
	ИначеЕсли КоличествоЧасов > 0 Тогда
		Результат = НСтр("ru = 'час'");
		
	ИначеЕсли КоличествоМинут > 1 Тогда
		Результат = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеМинут, КоличествоМинут);
	ИначеЕсли КоличествоМинут > 0 Тогда
		Результат = НСтр("ru = 'минуту'");
		
	Иначе
		Возврат НСтр("ru = 'сейчас'");
	КонецЕсли;
	
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, Результат);
	
	Возврат Результат;
КонецФункции

//Водные параметры: 
//Оповещение - тип Структура с полями: Пользователь, ВремяСобытия, Источник, 
//СрокНапоминания, Описание, Идентификатор, СпособУстановкиВремениНапоминания, 
//ИнтервалВремениНапоминания, ИмяРеквизитаИсточника, Расписание, ИндексКартинки, ПовторятьЕжегодно
Процедура ОткрытьФормуДействийСОповещением(Оповещение) Экспорт
	ФормаОповещения = ПолучитьФорму("РегистрСведений.НапоминанияПользователя.Форма.Оповещение",Оповещение);
	ФормаОповещения.Открыть();
КонецПроцедуры

// Возвращает кэшированные оповещения текущего пользователя, исключив из результата ненаступившие оповещения.
//
// Параметры:
//  ВремяБлижайшего - Дата - в этот параметр возвращается время ближайшего будущего напоминания. Если
//                           ближайшее напоминание за пределами выборки кэша, то возвращается Неопределено.
Функция ПолучитьТекущиеОповещения(ВремяБлижайшего = Неопределено) Экспорт
	
	ТаблицаОповещений = НапоминанияПользователяКлиентПовтИсп.ПолучитьНапоминанияТекущегоПользователя();
	Результат = Новый Массив;
	
	ВремяБлижайшего = Неопределено;
	
	Для Каждого Оповещение Из ТаблицаОповещений Цикл
		Если Оповещение.СрокНапоминания <= ОбщегоНазначенияКлиент.ДатаСеанса() Тогда
			Результат.Добавить(Оповещение);
		Иначе                                                           
			Если ВремяБлижайшего = Неопределено Тогда
				ВремяБлижайшего = Оповещение.СрокНапоминания;
			Иначе
				ВремяБлижайшего = Мин(ВремяБлижайшего, Оповещение.СрокНапоминания);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;		
	
	Возврат Результат;
	
КонецФункции

// Обновляет запись в кэше результата выполнения функции ПолучитьНапоминанияТекущегоПользователя().
Процедура ОбновитьЗаписьВКэшеОповещений(ПараметрыОповещения) Экспорт
	КэшОповещений = НапоминанияПользователяКлиентПовтИсп.ПолучитьНапоминанияТекущегоПользователя();
	Запись = НайтиЗаписьВКэшеОповещений(КэшОповещений, ПараметрыОповещения);
	Если Запись <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Запись, ПараметрыОповещения);
	Иначе
		КэшОповещений.Добавить(ПараметрыОповещения);
	КонецЕсли;
КонецПроцедуры

// Удаляет запись из кэша результата выполнения функции ПолучитьНапоминанияТекущегоПользователя().
Процедура УдалитьЗаписьИзКэшаОповещений(ПараметрыОповещения) Экспорт
	КэшОповещений = НапоминанияПользователяКлиентПовтИсп.ПолучитьНапоминанияТекущегоПользователя();
	Запись = НайтиЗаписьВКэшеОповещений(КэшОповещений, ПараметрыОповещения);
	Если Запись <> Неопределено Тогда
		КэшОповещений.Удалить(КэшОповещений.Найти(Запись));
	КонецЕсли;
КонецПроцедуры

// Возвращает запись из кэша результата выполнения функции ПолучитьНапоминанияТекущегоПользователя().
Функция НайтиЗаписьВКэшеОповещений(КэшОповещений, ПараметрыОповещения)
	Для Каждого Запись Из КэшОповещений Цикл
		Если Запись.Источник = ПараметрыОповещения.Источник
		   И Запись.ВремяСобытия = ПараметрыОповещения.ВремяСобытия Тогда
			Возврат Запись;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

#КонецОбласти
