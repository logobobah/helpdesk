#Область СлужебныйПрограммныйИнтерфейс

// Возвращает значение перечисления тип вида контактной информации.
//
//  Параметры:
//    ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - источник данных.
//
Функция ТипВидаКонтактнойИнформации(Знач ВидИнформации) Экспорт
	Результат = Неопределено;
	
	Тип = ТипЗнч(ВидИнформации);
	Если Тип = Тип("ПеречислениеСсылка.ТипыКонтактнойИнформации") Тогда
		Результат = ВидИнформации;
	ИначеЕсли Тип = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		Результат = ВидИнформации.Тип;
	ИначеЕсли ВидИнформации <> Неопределено Тогда
		Данные = Новый Структура("Тип");
		ЗаполнитьЗначенияСвойств(Данные, ВидИнформации);
		Результат = Данные.Тип;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Получить первое значение определенного вида контактной информации у объекта.
//
// Параметры:
//     Ссылка                  - ЛюбаяСсылка - ссылка на объект-владелец контактной информации (организация,
//                                             контрагент, партнер и т.д.).
//     ТипКонтактнойИнформации - Перечисление.ТипыКонтактнойИнформации - параметры обработки.
//
// Возвращаемое значение:
//     Строка - строковое представление значения.
//
Функция ПервоеЗначениеКонтактнойИнформацииОбъектаПоТипу(Ссылка, ТипКонтактнойИнформации) Экспорт

	Результат = "";
	ПолноеИмя = Ссылка.Метаданные().ПолноеИмя();

	Если СтрНачинаетсяС(ПолноеИмя , НСтр("ru = 'Справочник'")) Тогда
		ИмяГруппыКонтактнойИнформации = НСтр("ru = 'Справочник'") + Ссылка.Метаданные().Имя;
	ИначеЕсли СтрНачинаетсяС(ПолноеИмя , НСтр("ru = 'Документ'")) Тогда
		ИмяГруппыКонтактнойИнформации = НСтр("ru = 'Документ'") + Ссылка.Метаданные().Имя;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных КАК Наименование
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.ЭтоГруппа = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		Если РезультатЗапроса.Наименование = ИмяГруппыКонтактнойИнформации Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВидыКонтактнойИнформацииПодчиненный.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформацииПодчиненный
				|		ПО (ВидыКонтактнойИнформацииПодчиненный.Родитель = ВидыКонтактнойИнформации.Ссылка)
				|ГДЕ
				|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных
				|	И ВидыКонтактнойИнформации.ЭтоГруппа = ИСТИНА
				|	И ВидыКонтактнойИнформацииПодчиненный.Тип = &Тип";
			
			Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", ИмяГруппыКонтактнойИнформации);
			Запрос.УстановитьПараметр("Тип", ТипКонтактнойИнформации);
			
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			Если РезультатЗапроса.Следующий() Тогда
				Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
					Ссылка, РезультатЗапроса.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;

КонецФункции

Функция ПроверитьАдресВXML(АдресВXML, ПараметрыПроверкиАдреса = Неопределено) Экспорт
	
	РезультатПроверки = Новый Структура("Результат, СписокОшибок");
	РезультатПроверки.СписокОшибок = Новый СписокЗначений;
	
	Если НЕ ЭтоСтрокаXML(АдресВXML) Тогда
		РезультатПроверки.Результат = "СодержитОшибки";
		РезультатПроверки.СписокОшибок.Добавить("ФорматАдреса", НСтр("ru = 'Некорректный формат адреса'"));
		Возврат РезультатПроверки;
	КонецЕсли;

	Если Метаданные.Обработки.Найти("РасширенныйВводКонтактнойИнформации") <> Неопределено Тогда
		Обработки["РасширенныйВводКонтактнойИнформации"].ПроверитьАдресВXML(АдресВXML, РезультатПроверки, ПараметрыПроверкиАдреса);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем конфигурации.

// См. ВерсионированиеОбъектовПереопределяемый.ПриПодготовкеДанныхОбъекта.
Процедура ПриПодготовкеДанныхОбъекта(Объект, ДополнительныеРеквизиты) Экспорт 
	
	Если Объект.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация") <> Неопределено Тогда
		Для Каждого Контакт Из УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Ссылка,, ТекущаяДатаСеанса(), Ложь) Цикл
			Если ЗначениеЗаполнено(Контакт.Вид) Тогда
				Реквизит = ДополнительныеРеквизиты.Добавить();
				Реквизит.Наименование = Контакт.Вид.Наименование;
				Реквизит.Значение = Контакт.Представление;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// См. ЗагрузкаДанныхИзФайлаПереопределяемый.ПриОпределенииСправочниковДляЗагрузкиДанных.
Процедура ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт
	
	// Загрузка в классификатор стран мира запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.СтраныМира.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Процедура ПриОпределенииОбъектовСЗаблокированнымиРеквизитами(Объекты) Экспорт
	
	Объекты.Вставить(Метаданные.Справочники.ВидыКонтактнойИнформации.ПолноеИмя(), "");
	
КонецПроцедуры

// См. ГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами.
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.Справочники.ВидыКонтактнойИнформации.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Разделение стран мира
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия    = "2.1.4.8";
		Обработчик.Процедура = "УправлениеКонтактнойИнформациейСлужебный.ПодготовкаЭталонаРазделенныхСтранМира";
		Обработчик.МонопольныйРежим = Истина;
		Обработчик.ОбщиеДанные      = Истина;
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия    = "2.1.4.8";
		Обработчик.Процедура = "УправлениеКонтактнойИнформациейСлужебный.ОбновлениеПоЭталонуРазделенныхСтранМира";
		Обработчик.МонопольныйРежим = Истина;
		Обработчик.ОбщиеДанные      = Ложь;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.2.3.34";
	Обработчик.Процедура = "УправлениеКонтактнойИнформациейСлужебный.ОбновитьСуществующиеСтраныМира";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.ОбщиеДанные      = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.2.39";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f663ee3c-68b7-45db-bd6c-eebe6665fc7c");
	Обработчик.Процедура = "УправлениеКонтактнойИнформациейСлужебный.УдалитьАдресаСТекстомЗаполнить";
	Обработчик.Комментарий = НСтр("ru = 'Обновление сведений контактной информации.
		|До завершения обработки некоторая контактная информация может отображаться некорректно.'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.2.156";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("143e1eb1-4fce-4cd2-b307-56f759d144d4");
	Обработчик.Процедура = "УправлениеКонтактнойИнформациейСлужебный.ИсправитьДатуДействияУАдресов";
	Обработчик.Комментарий = НСтр("ru = 'Обновление сведений контактной информации содержащих адреса с историей.
		|До завершения обработки некоторая контактная информация может отображаться некорректно.'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.3.1.8";
	Обработчик.Процедура = "УправлениеКонтактнойИнформациейСлужебный.ОбновитьНастройкуДобавочногоНомераТелефона";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.ОбщиеДанные      = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.3.1.15";
	Обработчик.Процедура = "УправлениеКонтактнойИнформациейСлужебный.УстановитьЗначениеПризнакаИспользуется";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.ОбщиеДанные      = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "2.3.3.15";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("72f43d1a-9c4f-4789-81a9-e610cd56f8b2");
	Обработчик.Процедура       = "Справочники.ВидыКонтактнойИнформации.ЗаполнитьВидыКонтактнойИнформации";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ВидыКонтактнойИнформации.ЗаполнитьВидыКонтактнойИнформацииСПолемДругоеКОбработке";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ЧитаемыеОбъекты      = "Справочник.ВидыКонтактнойИнформации";
	Обработчик.ИзменяемыеОбъекты    = "Справочник.ВидыКонтактнойИнформации";
	Обработчик.БлокируемыеОбъекты   = "Справочник.ВидыКонтактнойИнформации";
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	Обработчик.ПроцедураПроверки    = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение значения поля ""Другое"" у видов контактной информации.
		|До завершения обработки данные документов будут отображаться некорректно.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "2.4.1.72";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("dfc6a0fa-7c7b-4096-9d04-2c67d5eb17a4");
	Обработчик.Процедура       = "Справочники.СтраныМира.ОбновитьСтраныМираПоОКСМ";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.СтраныМира.ЗаполнитьСписокСтранКОбработке";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ЧитаемыеОбъекты    = "Справочник.СтраныМира";
	Обработчик.ИзменяемыеОбъекты  = "Справочник.СтраныМира";
	Обработчик.БлокируемыеОбъекты = "Справочник.СтраныМира";
	Обработчик.ПроцедураПроверки  = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновление сведений о странах мирах в соответствии с общероссийским классификатором стран мира.
		|До завершения обработки данные документов будут отображаться некорректно.'");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Неразделенный монопольный обработчик для копирования стран мира из нулевой области.
// Сохраняет эталон и список областей данных - адресатов.
//
Процедура ПодготовкаЭталонаРазделенныхСтранМира() Экспорт
	
КонецПроцедуры

// Разделенный  обработчик для копирования стран мира из нулевой области.
// Используется эталон, подготовленный на предыдущем шаге.
//
Процедура ОбновлениеПоЭталонуРазделенныхСтранМира() Экспорт
	
КонецПроцедуры

// Обновляем только существующие элементы стран мира по классификатору.
Процедура ОбновитьСуществующиеСтраныМира() Экспорт
	
	ВсеОшибки = "";
	Добавлять = Ложь;
	
	Фильтр = Новый Структура("Код");
	
	// Сравнивать в запросе нельзя из-за возможной регистронезависимости базы данных.
	Для Каждого СтрокаКлассификатора Из УправлениеКонтактнойИнформацией.ТаблицаКлассификатора() Цикл
		Фильтр.Код = СтрокаКлассификатора.Код;
		Выборка = Справочники.СтраныМира.Выбрать(,, Фильтр);
		СтранаНайдена = Выборка.Следующий();
		Если Не СтранаНайдена И Добавлять Тогда
			// Добавление страны
			Страна = Справочники.СтраныМира.СоздатьЭлемент();
		ИначеЕсли СтранаНайдена И (
			Выборка.Наименование <> СтрокаКлассификатора.Наименование
			Или Выборка.КодАльфа2 <> СтрокаКлассификатора.КодАльфа2
			Или Выборка.КодАльфа3 <> СтрокаКлассификатора.КодАльфа3
			Или Выборка.НаименованиеПолное <> СтрокаКлассификатора.НаименованиеПолное) Тогда
			// Изменение страны
			Страна = Выборка.ПолучитьОбъект();
		Иначе
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			Если Не Страна.ЭтоНовый() Тогда
				ЗаблокироватьДанныеДляРедактирования(Страна.Ссылка);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Страна, СтрокаКлассификатора, "Код, Наименование, КодАльфа2, КодАльфа3, НаименованиеПолное");		
			Страна.ДополнительныеСвойства.Вставить("НеПроверятьУникальность");
			Страна.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			Инфо = ИнформацияОбОшибке();
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка записи страны мира %1 (код %2) при обновлении классификатора, %3'"),
				Выборка.Код, Выборка.Наименование, КраткоеПредставлениеОшибки(Инфо));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(Инфо));
			ВсеОшибки = ВсеОшибки + Символы.ПС + ТекстОшибки;
			ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ВсеОшибки) Тогда
		ВызватьИсключение СокрЛП(ВсеОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьАдресаСТекстомЗаполнить(Параметры, РазмерПорции = 1000) Экспорт
	
	ОбъектыСАдресом = Неопределено;
	Параметры.Свойство("ОбъектыСАдресом", ОбъектыСАдресом);
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		// получение адресов для обработки
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			| ВидыКонтактнойИнформации.Родитель.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
			|ИЗ
			| Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
			|ГДЕ
			| ВидыКонтактнойИнформации.Тип = &Тип
			| И ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге = &РедактированиеТолькоВДиалоге";
		Запрос.УстановитьПараметр("РедактированиеТолькоВДиалоге", Истина);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ТекстЗапроса = "";
		Разделитель = "";
		ШаблонЗапроса = "ВЫБРАТЬ
			| ТаблицаСКонтактнойИнформацией.Ссылка КАК Ссылка
			|ИЗ
			| %1.%2.КонтактнаяИнформация КАК ТаблицаСКонтактнойИнформацией
			|ГДЕ
			| ТаблицаСКонтактнойИнформацией.Представление = &Заполнить
			|
			|СГРУППИРОВАТЬ ПО
			| ТаблицаСКонтактнойИнформацией.Ссылка";
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если СтрНачинаетсяС(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных, "Справочник") Тогда
				ИмяОбъекта = Сред(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных, 11);
				Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
					ТекстЗапроса = ТекстЗапроса + Разделитель + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса, "Справочник", ИмяОбъекта);
					Разделитель = " ОБЪЕДИНИТЬ ВСЕ ";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ПустаяСтрока(ТекстЗапроса) Тогда
			Возврат;
		КонецЕсли;
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.Параметры.Вставить("Заполнить", УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки());
		ОбъектыСАдресом = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = ОбъектыСАдресом.Количество();
		Параметры.Вставить("ОбъектыСАдресом", ОбъектыСАдресом);
	КонецЕсли;
	
	Если ОбъектыСАдресом = Неопределено ИЛИ ОбъектыСАдресом.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Позиция = ОбъектыСАдресом.Количество() - 1;
	КоличествоОбработанных = 0;
	
	Пока Позиция >= 0 И КоличествоОбработанных < РазмерПорции Цикл
		ОбъектКонтактнойИнформации = ОбъектыСАдресом.Получить(Позиция).ПолучитьОбъект();
		КонтактнаяИнформация = ОбъектКонтактнойИнформации.КонтактнаяИнформация;
		МассивДляУдаления = Новый Массив;
		Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
			Если СтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
				И СтрокаКонтактнойИнформации.Представление = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
				МассивДляУдаления.Добавить(СтрокаКонтактнойИнформации);
			КонецЕсли;
		КонецЦикла;
		Для каждого СтрокаКонтактнойИнформации Из МассивДляУдаления Цикл
			КонтактнаяИнформация.Удалить(СтрокаКонтактнойИнформации);
		КонецЦикла;
		ОбъектКонтактнойИнформации.Записать();
		ОбъектыСАдресом.Удалить(Позиция);
		Позиция = Позиция - 1;
		КоличествоОбработанных = КоличествоОбработанных + 1;
	КонецЦикла;
	Если ОбъектыСАдресом.Количество() > 0 Тогда
		Параметры.ОбработкаЗавершена = Ложь;
	КонецЕсли;
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + КоличествоОбработанных;
	Параметры.Вставить("ОбъектыСАдресом", ОбъектыСАдресом);
	
КонецПроцедуры

Процедура ИсправитьДатуДействияУАдресов(Параметры, РазмерПорции = 1000) Экспорт
	
	ОбъектыСАдресом = Неопределено;
	Параметры.Свойство("ОбъектыСАдресом", ОбъектыСАдресом);
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		// получение адресов для обработки (первый проход)
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			| ВидыКонтактнойИнформации.Родитель.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
			|ИЗ
			| Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
			|ГДЕ
			| ВидыКонтактнойИнформации.ХранитьИсториюИзменений = ИСТИНА";
			
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		
		ТекстЗапроса = "";
		Разделитель = "";
		
		ШаблонЗапроса = "ВЫБРАТЬ
			|	ТаблицаСКонтактнойИнформацией.Ссылка КАК Ссылка
			|ИЗ
			|	%1.%2.КонтактнаяИнформация КАК ТаблицаСКонтактнойИнформацией
			|ГДЕ
			|	ТаблицаСКонтактнойИнформацией.Вид.ХранитьИсториюИзменений = ИСТИНА
			|	И ТаблицаСКонтактнойИнформацией.ДействуетС <> ДАТАВРЕМЯ(1, 1, 1)
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаСКонтактнойИнформацией.Вид,
			|	ТаблицаСКонтактнойИнформацией.Ссылка";
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если СтрНачинаетсяС(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных, "Справочник") Тогда
				ИмяОбъекта = Сред(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных, 11);
				Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
					ТекстЗапроса = ТекстЗапроса + Разделитель + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса, "Справочник", ИмяОбъекта);
					Разделитель = " ОБЪЕДИНИТЬ ВСЕ ";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ПустаяСтрока(ТекстЗапроса) Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		ОбъектыСАдресом = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = ОбъектыСАдресом.Количество();
		Параметры.Вставить("ОбъектыСАдресом", ОбъектыСАдресом);
		
	КонецЕсли;
	
	Если ОбъектыСАдресом = Неопределено ИЛИ ОбъектыСАдресом.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Позиция = ОбъектыСАдресом.Количество() - 1;
	КоличествоОбработанных = 0;
	
	Пока Позиция >= 0 И КоличествоОбработанных < РазмерПорции Цикл
		
		ОбъектКонтактнойИнформации = ОбъектыСАдресом.Получить(Позиция).ПолучитьОбъект();
		КонтактнаяИнформация = ОбъектКонтактнойИнформации.КонтактнаяИнформация;
		ВидыКонтактнойИнформации = КонтактнаяИнформация.Выгрузить(, "Вид");
		ВидыКонтактнойИнформации.Свернуть("Вид");
		
		ТребуетсяЗаписьОбъекта = Ложь;
		
		Для каждого ВидКонтактнойИнформации Из ВидыКонтактнойИнформации  Цикл
			Если НЕ ЗначениеЗаполнено(ВидКонтактнойИнформации.Вид)
				ИЛИ НЕ ВидКонтактнойИнформации.Вид.ХранитьИсториюИзменений Тогда
					Продолжить;
			КонецЕсли;
			Отбор = Новый Структура("Вид", ВидКонтактнойИнформации.Вид);
			НайденныеСтроки = КонтактнаяИнформация.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() = 1 Тогда
				Если ЗначениеЗаполнено(НайденныеСтроки[0].ДействуетС) Тогда
					НайденныеСтроки[0].ДействуетС = Дата(1, 1, 1);
					ТребуетсяЗаписьОбъекта = Истина;
				КонецЕсли;
			ИначеЕсли НайденныеСтроки.Количество() > 0 Тогда
				
				СтрокаДляИзменения = НайденныеСтроки[0];
				Если НЕ ЗначениеЗаполнено(СтрокаДляИзменения.ДействуетС) Тогда
					СтрокаДляИзменения = Неопределено;
				Иначе
					Для Индекс = 1 По НайденныеСтроки.Количество() - 1 Цикл
						Если НЕ ЗначениеЗаполнено(НайденныеСтроки[Индекс].ДействуетС) Тогда
							СтрокаДляИзменения = Неопределено;
							Прервать;
						ИначеЕсли НайденныеСтроки[Индекс].ДействуетС < СтрокаДляИзменения.ДействуетС Тогда
							СтрокаДляИзменения = НайденныеСтроки[Индекс];
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если СтрокаДляИзменения <> Неопределено Тогда
					СтрокаДляИзменения.ДействуетС = Дата(1, 1, 1);
					ТребуетсяЗаписьОбъекта = Истина;
				КонецЕсли;
			КонецЕсли;
		
		КонецЦикла;
		
		Если ТребуетсяЗаписьОбъекта Тогда
			ОбъектКонтактнойИнформации.Записать();
		КонецЕсли;
		
		ОбъектыСАдресом.Удалить(Позиция);
		Позиция = Позиция - 1;
		КоличествоОбработанных = КоличествоОбработанных + 1;
	КонецЦикла;
	
	Если ОбъектыСАдресом.Количество() > 0 Тогда
		Параметры.ОбработкаЗавершена = Ложь;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + КоличествоОбработанных;
	Параметры.Вставить("ОбъектыСАдресом", ОбъектыСАдресом);
	
КонецПроцедуры

Процедура ОбновитьНастройкуДобавочногоНомераТелефона() Экспорт
	
	// Устанавливает флаг ТелефонCДобавочнымНомером для обратной совместимости.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Тип =  Значение(Перечисление.ТипыКонтактнойИнформации.Телефон)";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		ВидКонтактнойИнформации = РезультатЗапроса.Ссылка.ПолучитьОбъект();
		ВидКонтактнойИнформации.ТелефонCДобавочнымНомером = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидКонтактнойИнформации);
	КонецЦикла;
	
КонецПроцедуры

// Инициализирует значение реквизита Используется справочника ВидыКонтактнойИнформации.
//
Процедура УстановитьЗначениеПризнакаИспользуется() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	НЕ ВидыКонтактнойИнформации.Используется";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВидКонтактнойИнформацииОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВидКонтактнойИнформацииОбъект.Используется = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидКонтактнойИнформацииОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеСлужебныеПроцедурыИФункции

// Возвращает список значений
Функция ДоступныеДляКопированияАдреса(Знач ЗначенияПолейДляАнализа, Знач ВидАдреса) Экспорт
	
	ТолькоНациональныйАдрес = ВидАдреса.ТолькоНациональныйАдрес;
	
	Результат = Новый СписокЗначений;
	
	Для Каждого Адрес Из ЗначенияПолейДляАнализа Цикл
		ДопустимыйИсточник = Истина;
		
		Представление = Адрес.Представление;
		Если ПустаяСтрока(Представление) Тогда
			// Не пустое представление
			ДопустимыйИсточник = Ложь;
		Иначе
			Если ТолькоНациональныйАдрес Тогда
				// В адрес, ограниченный Россией, нельзя копировать иностранный адрес.
				XMLАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(Адрес.ЗначениеПолей, Представление, ВидАдреса);
				XDTOАдрес = КонтактнаяИнформацияИзXML(XMLАдрес, ВидАдреса);
				Если Не ЭтоНациональныйАдрес(XDTOАдрес) Тогда
					ДопустимыйИсточник = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ДопустимыйИсточник Тогда
			Результат.Добавить(Адрес.Идентификатор, Строка(Адрес.ВидАдреса) + ": " + Представление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Контактная информация'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Преобразует контактную информацию XDTO в XML.
//
//  Параметры:
//      ОбъектXDTOИнформации - ОбъектXDTO - контактная информация.
//
// Возвращаемое значение:
//      Строка - результат преобразования в формате XML.
//
Функция КонтактнаяИнформацияXDTOВXML(ОбъектXDTOИнформации) Экспорт
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(Новый ПараметрыЗаписиXML(, , Ложь, Ложь, ""));
	
	Если ОбъектXDTOИнформации <> Неопределено Тогда
		ФабрикаXDTO.ЗаписатьXML(Запись, ОбъектXDTOИнформации);
	КонецЕсли;
	
	Результат = СтрЗаменить(Запись.Закрыть(), Символы.ПС, "&#10;");
	Результат = СтрЗаменить(Результат, "<ВнутригРайон/>", "");// Совместимость с КЛАДР
	
	Если Метаданные.ОбщиеМодули.Найти("РаботаСАдресами") <> Неопределено Тогда
		МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
		Результат = МодульРаботаСАдресами.ПередЗаписьюXDTOКонтактнаяИнформация(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Преобразует XML в объект XDTO контактной информации.
//
//  Параметры:
//      Текст            - Строка - строка XML контактной информации.
//      ОжидаемыйВид     - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура
//      РезультатПреобразования - Структура - если задана, то в свойства записываются сведения:
//        * ТекстОшибки - Строка - описание ошибок чтения. При этом возвращаемое значение функции будет 
//                                 корректного типа, но не заполнен.
//
// Возвращаемое значение:
//      ОбъектXDTO - контактная информация, соответствующая XDTO-пакету КонтактнаяИнформация.
//   
Функция КонтактнаяИнформацияИзXML(Знач Текст, Знач ОжидаемыйВид = Неопределено, РезультатПреобразования = Неопределено) Экспорт
	
	ОжидаемыйТип = ТипВидаКонтактнойИнформации(ОжидаемыйВид);
	
	ПеречислениеАдрес                 = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ПеречислениеАдресЭлектроннойПочты = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ПеречислениеSkype                 = Перечисления.ТипыКонтактнойИнформации.Skype;
	ПеречислениеВебСтраница           = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	ПеречислениеТелефон               = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ПеречислениеФакс                  = Перечисления.ТипыКонтактнойИнформации.Факс;
	ПеречислениеДругое                = Перечисления.ТипыКонтактнойИнформации.Другое;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Текст) Тогда
		ЧтениеXML = Новый ЧтениеXML;
		
		Если Метаданные.ОбщиеМодули.Найти("РаботаСАдресами") <> Неопределено Тогда
			МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
			Текст = МодульРаботаСАдресами.ПередЧтениемXDTOКонтактнаяИнформация(Текст);
		КонецЕсли;
		
		ЧтениеXML.УстановитьСтроку(Текст);
		
		ТекстОшибки = Неопределено;
		Попытка
			Результат = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
		Исключение
			// Некорректный формат XML
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, , Текст, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Если ТипЗнч(ОжидаемыйВид) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Некорректный формат XML контактной информации для ""%1"", значения полей были очищены.'"),
					Строка(ОжидаемыйВид));
			Иначе
				ТекстОшибки = НСтр("ru = 'Некорректный формат XML контактной информации, значения полей были очищены.'");
			КонецЕсли;
		КонецПопытки;
		
		Если ТекстОшибки = Неопределено Тогда
			// Контролируем соответствие типов.
			НайденТип = ?(Результат.Состав = Неопределено, Неопределено, Результат.Состав.Тип());
			Если ОжидаемыйТип = ПеречислениеАдрес И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается адрес'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеАдресЭлектроннойПочты И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается адрес электронной почты'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеВебСтраница И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается веб-страница'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеТелефон И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается телефон'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеФакс И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается телефон'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеSkype И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "Skype") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается Skype'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеДругое И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "Прочее") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается ""другое""'");
			КонецЕсли;
		КонецЕсли;
		
		Если ТекстОшибки = Неопределено Тогда
			// Успешно прочитано
			Возврат Результат;
		КонецЕсли;
		
		// Проверим ошибку и вернем расширенную информацию.
		Если РезультатПреобразования = Неопределено Тогда
			ВызватьИсключение ТекстОшибки;
		ИначеЕсли ТипЗнч(РезультатПреобразования) <> Тип("Структура") Тогда
			РезультатПреобразования = Новый Структура;
		КонецЕсли;
		РезультатПреобразования.Вставить("ТекстОшибки", ТекстОшибки);
		
		// Будет возвращен пустой объект.
		Текст = "";
	КонецЕсли;
	
	Если ТипЗнч(Текст) = Тип("СписокЗначений") Тогда
		Представление = "";
		ЭтоНовый = Текст.Количество() = 0;
	Иначе
		Представление = Строка(Текст);
		ЭтоНовый = ПустаяСтрока(Текст);
	КонецЕсли;
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	
	// Разбор
	Если ОжидаемыйТип = ПеречислениеАдрес Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
		Иначе
			Результат = АдресXMLВXDTO(Текст, Представление, ОжидаемыйТип);
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип = ПеречислениеТелефон Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
		Иначе
			Результат = ДесериализацияТелефона(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип = ПеречислениеФакс Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса"));
		Иначе
			Результат = ДесериализацияФакса(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип = ПеречислениеАдресЭлектроннойПочты Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта"));
		Иначе
			Результат = ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
	ИначеЕсли ОжидаемыйТип = ПеречислениеSkype Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Skype"));
		Иначе
			Результат = ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
	ИначеЕсли ОжидаемыйТип = ПеречислениеВебСтраница Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт"));
		Иначе
			Результат = ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип = ПеречислениеДругое Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Прочее"));
		Иначе
			Результат = ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)    
		КонецЕсли;
		
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Сведения о виде контактной информации %1 были повреждены или некорректно заполнены,
								|т.к. обязательное поле тип не заполнено.'");
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ?(ЗначениеЗаполнено(ОжидаемыйВид), """" + ОжидаемыйВид.Наименование + """", ""));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции


// Разбирает представление КИ и возвращает XDTO.
//
//  Параметры:
//      Текст        - Строка  - XML
//      ОжидаемыйВид - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура.
//
// Возвращаемое значение:
//      ОбъектXDTO - контактная информация.
//
Функция КонтактнаяИнформацияXDTOПоПредставлению(Текст, ОжидаемыйВид) Экспорт
	
	ОжидаемыйТип = ТипВидаКонтактнойИнформации(ОжидаемыйВид);
	
	Если ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат АдресXMLВXDTO("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Возврат ДесериализацияПрочейКонтактнойИнформации("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Возврат ДесериализацияПрочейКонтактнойИнформации("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат ДесериализацияТелефона("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат ДесериализацияФакса("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Skype Тогда
		Возврат ДесериализацияПрочейКонтактнойИнформации("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Возврат ДесериализацияПрочейКонтактнойИнформации("", Текст, ОжидаемыйТип);
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Преобразует строку в XDTO контактную информацию адреса.
//
//  Параметры:
//      ЗначенияПолей - Строка - сериализованная информация, значения полей.
//      Представление - Строка - представление старший-младший, используется для попытки разбора, если ЗначенияПолей
//                               пусто.
//      ОжидаемыйТип  - ПеречислениеСсылка.ТипыКонтактнойИнформации - необязательный тип для контроля.
//
//  Возвращаемое значение:
//      ОбъектXDTO  - контактной информации.
//
Функция АдресXMLВXDTO(Знач ЗначенияПолей, Знач Представление = "", Знач ОжидаемыйТип = Неопределено) Экспорт
	
	Если Метаданные.Обработки.Найти("РасширенныйВводКонтактнойИнформации") <> Неопределено Тогда
		Возврат Обработки["РасширенныйВводКонтактнойИнформации"].АдресXMLВXDTO(ЗначенияПолей, Представление, ОжидаемыйТип);
	КонецЕсли;
	
	// Пустой объект с представлением.
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	Результат.Состав.Состав = Представление;
	Результат.Представление = Представление;
	Возврат Результат;
	
КонецФункции

// Преобразует строку в XDTO контактную информацию телефона.
//
//      ЗначенияПолей - Строка - сериализованная информация, значения полей.
//      Представление - Строка - представление старший-младший, используется для попытки разбора, если ЗначенияПолей
//                               пусто.
//      ОжидаемыйТип  - ПеречислениеСсылка.ТипыКонтактнойИнформации - необязательный тип для контроля.
//
//  Возвращаемое значение:
//      ОбъектXDTO  - контактной информации.
//
Функция ДесериализацияТелефона(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено) Экспорт
	Возврат ДесериализацияТелефонаФакса(ЗначенияПолей, Представление, ОжидаемыйТип);
КонецФункции

// Преобразует строку в XDTO контактную информацию Факса.
//
//      ЗначенияПолей - Строка - сериализованная информация, значения полей.
//      Представление - Строка - представление старший-младший, используется для попытки разбора, если ЗначенияПолей
//                               пусто.
//      ОжидаемыйТип  - ПеречислениеСсылка.ТипыКонтактнойИнформации - необязательный тип для контроля.
//
//  Возвращаемое значение:
//      ОбъектXDTO  - контактной информации.
//
Функция ДесериализацияФакса(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено) Экспорт
	Возврат ДесериализацияТелефонаФакса(ЗначенияПолей, Представление, ОжидаемыйТип);
КонецФункции

// Преобразует строку в XDTO прочую контактную информацию.
//
// Параметры:
//   ЗначенияПолей - Строка - сериализованная информация, значения полей.
//   Представление - Строка - представление старший-младший, используется для попытки разбора, если ЗначенияПолей пусто.
//   ОжидаемыйТип  - ПеречислениеСсылка.ТипыКонтактнойИнформации - необязательный тип для контроля.
//
// Возвращаемое значение:
//   ОбъектXDTO  - контактной информации.
//
Функция ДесериализацияПрочейКонтактнойИнформации(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено)
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей) Тогда
		// Общий формат контактной информации.
		Возврат КонтактнаяИнформацияИзXML(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Представление = Представление;
	
	Если ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта"));
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт"));
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Skype Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Skype"));
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Прочее"));
		
	ИначеЕсли ОжидаемыйТип <> Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка десериализации контактной информации, ожидается другой тип'");
		
	КонецЕсли;
	
	Результат.Состав.Значение = Представление;
	
	Возврат Результат;
	
КонецФункции

// Возвращает представление контактной информации, сформированное из адреса в формате XML.
//
// Параметры:
//   XMLСтрока    -  Строка - Адрес в формат XML .
//   ФорматКонтактнойИнформации  - Строка             - если указано "КЛАДР", то в представление адреса 
//                                        не включаются округ и внутригородской район.
//    ВидКонтактнойИнформации - Структура - дополнительные параметры формирования представления для адресов:
//      * Тип - Строка - Тип контактной информации;
//      * ВключатьСтрануВПредставление - Булево - в представление будет включена страна адреса;
//      * ФорматАдреса                 - Строка - если указано "КЛАДР", то в представление адреса 
//                                                не включаются округ и внутригородской район.
// Возвращаемое значение:
//      Строка - сформированное представление.
//
Функция ПредставлениеКонтактнойИнформации(Знач XMLСтрока, Знач ФорматКонтактнойИнформации) Экспорт
	
	ЭтоСтрока = ТипЗнч(XMLСтрока) = Тип("Строка");
	Если ЭтоСтрока И Не УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(XMLСтрока) Тогда
		// Предыдущий формат значений полей, возвращаем саму строку.
		Возврат XMLСтрока;
	КонецЕсли;
	
	Вид = Новый Структура("Тип,ВключатьСтрануВПредставление,ФорматАдреса", "", Ложь, "КЛАДР");
	Если ФорматКонтактнойИнформации = Неопределено Тогда
		Вид.Тип = ТипКонтактнойИнформации(?(ЭтоСтрока, XMLСтрока, КонтактнаяИнформацияИзXML(XMLСтрока)));
	Иначе
		ЗаполнитьЗначенияСвойств(Вид, ФорматКонтактнойИнформации);
	КонецЕсли;
	
	ОбъектXDTO = ?(ЭтоСтрока, КонтактнаяИнформацияИзXML(XMLСтрока), XMLСтрока);
	Если Не ПустаяСтрока(ОбъектXDTO.Представление) Тогда
		Возврат ОбъектXDTO.Представление; // Возвращаем ранее сформированное представление.
	КонецЕсли;
	
	Возврат СформироватьПредставлениеКонтактнойИнформации(ОбъектXDTO, Вид);
	
КонецФункции

// Вычисляет и устанавливает флаг того, что адрес был введен в свободной форме.
//  В качестве флага используется не пустота значения поля "Адрес_по_документу".
//
//  Параметры:
//      XDTOИнформация - ОбъектXDTO, Строка - Контактная информация.
//      НовоеЗначение  - Булево - необязательное устанавливаемое новое значение.
//
//  Возвращаемое значение:
//      Булево - новое значение.
//
Функция АдресВведенВСвободнойФорме(XDTOИнформация, НовоеЗначение = Неопределено) Экспорт
	НадоСериализовать = ТипЗнч(XDTOИнформация) = Тип("Строка");
	Если НадоСериализовать И Не УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(XDTOИнформация) Тогда
		// Старая версия значений полей, не поддерживается.
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектXDTO = ?(НадоСериализовать, КонтактнаяИнформацияИзXML(XDTOИнформация), XDTOИнформация);
	Если Не ЭтоНациональныйАдрес(ОбъектXDTO) Тогда
		// Не поддерживаем
		Возврат Ложь;
	КонецЕсли;
	
	АдресРФ = ОбъектXDTO.Состав.Состав;
	Если ТипЗнч(НовоеЗначение) <> Тип("Булево") Тогда
		// Читаем
		Возврат Не ПустаяСтрока(АдресРФ.Адрес_по_документу);
	КонецЕсли;
		
	// Устанавливаем
	Если НовоеЗначение Тогда
		АдресРФ.Адрес_по_документу = ОбъектXDTO.Представление;
	Иначе
		АдресРФ.Сбросить("Адрес_по_документу");
	КонецЕсли;
	
	Если НадоСериализовать Тогда
		XDTOИнформация = КонтактнаяИнформацияXDTOВXML(ОбъектXDTO);
	КонецЕсли;
	Возврат НовоеЗначение;
КонецФункции

// Формирует и возвращает представление контактной информации.
//
// Параметры:
//   Информация    - ОбъектXDTO, Строка - контактная информация.
//   ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - параметры для формирования представления.
//   ФорматАдреса  - Строка             - если указано "КЛАДР", то в представление адреса 
//                                        не включаются округ и внутригородской район.
//
// Возвращаемое значение:
//      Строка - сформированное представление.
//
Функция СформироватьПредставлениеКонтактнойИнформации(Информация, ВидИнформации) Экспорт
	
	Если ТипЗнч(Информация) = Тип("ОбъектXDTO") Тогда
		Если Информация.Состав = Неопределено Тогда
			Возврат Информация.Представление;
		КонецЕсли;
		
		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		ТипИнформации    = Информация.Состав.Тип();
		Если ТипИнформации = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
			Возврат ПредставлениеАдреса(Информация.Состав, ВидИнформации);
			
		ИначеЕсли ТипИнформации = ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
			ПредставлениеТелефона = ПредставлениеТелефона(Информация.Состав);
			Возврат ?(ПустаяСтрока(ПредставлениеТелефона), Информация.Представление, ПредставлениеТелефона);
			
		ИначеЕсли ТипИнформации = ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса") Тогда
			ПредставлениеФакса = ПредставлениеТелефона(Информация.Состав);
			Возврат ?(ПустаяСтрока(ПредставлениеТелефона), Информация.Представление, ПредставлениеФакса);
			
		ИначеЕсли ТипИнформации = ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта") Тогда
			Возврат Строка(Информация.Состав.Значение);
		КонецЕсли;
		
		//// Заглушка на другие типы
		Возврат Строка(Информация.Состав.Значение);
	КонецЕсли;
	
	// Старый формат или новый десериализованный.
	Если ВидИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		НоваяИнфо = АдресXMLВXDTO(Информация,,Перечисления.ТипыКонтактнойИнформации.Адрес);
		Возврат СформироватьПредставлениеКонтактнойИнформации(НоваяИнфо, ВидИнформации);
	КонецЕсли;
	
	Возврат СокрЛП(Информация);
КонецФункции

//  Возвращает флаг того, что переданный адрес - российский.
//
//  Параметры:
//      XDTOАдрес - ОбъектXDTO - Контактная информация или XDTO адреса.
//
//  Возвращаемое значение:
//      Булево - результат проверки.
//
Функция ЭтоНациональныйАдрес(XDTOАдрес) Экспорт
	Если Метаданные.Обработки.Найти("РасширенныйВводКонтактнойИнформации") <> Неопределено Тогда
		Возврат Обработки["РасширенныйВводКонтактнойИнформации"].НациональныйАдрес(XDTOАдрес) <> Неопределено;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Формирует представление для адреса по правилу:
// 1) Страна, если надо.
// 2) Индекс, субъект рф, округ, район, город, внутригородской район, населенный пункт, улица.
// 3) Здания, помещения.
//
Функция ПредставлениеАдреса(Знач XDTOАдрес, Знач ВидИнформации) Экспорт
	
	ПространствоИмен  = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	НациональныйАдрес = XDTOАдрес.Состав;
	Страна            = СокрЛП(XDTOАдрес.Страна);
	
	Если Метаданные.Обработки.Найти("РасширенныйВводКонтактнойИнформации") <> Неопределено Тогда
		ЭтоНациональныйАдрес = Обработки["РасширенныйВводКонтактнойИнформации"].ЭтоНациональныйАдрес(НациональныйАдрес);
	Иначе
		ЭтоНациональныйАдрес = Ложь;
	КонецЕсли;
	
	Если ЭтоНациональныйАдрес Тогда
		Представление = Обработки["РасширенныйВводКонтактнойИнформации"].ПредставлениеАдреса(ВидИнформации, НациональныйАдрес, Страна);
	Иначе
		// Это иностранный адрес
		Представление = СокрЛП(НациональныйАдрес);
		
		Если СтрЧислоВхождений(Представление, ",") = 9 Тогда
			// Удаляем пустые значения и страну.
			ПредставлениеМассивом = СтрРазделить(Представление, ",", Ложь);
			Если ПредставлениеМассивом.Количество() > 0 Тогда
				Для Индекс = 0 По ПредставлениеМассивом.ВГраница() Цикл
					ПредставлениеМассивом[Индекс] = СокрЛП(ПредставлениеМассивом[Индекс]);
				КонецЦикла;
				ПредставлениеМассивом.Удалить(0); // удаляем страну
				Представление = СтрСоединить(ПредставлениеМассивом, ", ");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидИнформации.ВключатьСтрануВПредставление Тогда
		ДобавлениеСтраны = Новый Массив;
		ДобавлениеСтраны.Добавить(Страна);
		ДобавлениеСтраны.Добавить(Представление);
		Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПолноеНаименование(ДобавлениеСтраны);
	КонецЕсли;
	Возврат Представление;
	
КонецФункции

Функция ПредставлениеТелефона(XDTOДанные) Экспорт
	
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
		СократитьНеЦифры(XDTOДанные.КодСтраны), 
		XDTOДанные.КодГорода,
		XDTOДанные.Номер,
		XDTOДанные.Добавочный,
		"");
		
КонецФункции

//  Возвращает представление факса.
//
//  Параметры:
//      XDTOДанные    - ОбъектXDTO - контактная информация.
//      ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - ссылка на соответствующий вид контактной информации.
//
// Возвращаемое значение:
//      Строка - представление.
//
Функция ПредставлениеФакса(XDTOДанные, ВидИнформации = Неопределено) Экспорт
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
		СократитьНеЦифры(XDTOДанные.КодСтраны), 
		XDTOДанные.КодГорода,
		XDTOДанные.Номер,
		XDTOДанные.Добавочный,
		"");
КонецФункции    

// Конструктор структуры, совместимой по полям со справочникам видов КИ.
//
// Параметры:
//     Источник - СправочникСсылка.ВидыКонтактнойИнформации - необязательный источник данных для заполнения.
//
// Возвращаемое значение:
//     Структура - совместимая по полям со справочникам видов КИ.
//
Функция СтруктураВидаКонтактнойИнформации(Знач Источник = Неопределено) Экспорт
	
	МетаданныеРеквизитов = Метаданные.Справочники.ВидыКонтактнойИнформации.Реквизиты;
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		Реквизиты = "Наименование";
		Для Каждого МетаданныеРеквизита Из МетаданныеРеквизитов Цикл
			Реквизиты = Реквизиты + "," + МетаданныеРеквизита.Имя;
		КонецЦикла;
		
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, Реквизиты);
	Иначе
		Результат = Новый Структура("Наименование", "");
		Для Каждого МетаданныеРеквизита Из МетаданныеРеквизитов Цикл
			Результат.Вставить(МетаданныеРеквизита.Имя, МетаданныеРеквизита.Тип.ПривестиЗначение());
		КонецЦикла;
		Если Источник <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Результат, Источник);
		КонецЕсли;
	КонецЕсли;
	Результат.Вставить("Ссылка", Источник);
	
	Возврат Результат;
	
КонецФункции

// Обновляет агрегатное поле ВидДляСписка контактной информацию у объекта.
//
// Параметры:
//  Объект - СправочникОбъект - Объект с табличной часть КонтактнаяИнформация.
//
Процедура ОбновитьКонтактнуюИнформациюДляСписковДляОбъекта(Объект) Экспорт
	
	КонтактнаяИнформация = Объект.КонтактнаяИнформация;
	
	Если КонтактнаяИнформация.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = КонтактнаяИнформация.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Если НЕ ЗначениеЗаполнено(КонтактнаяИнформация[Индекс].Вид) Тогда
			КонтактнаяИнформация.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс -1;
	КонецЦикла;
	
	КолонкаДействуетСОтсутствует = (Объект.Метаданные().ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ДействуетС") = Неопределено);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	КонтактнаяИнформация.Вид КАК Вид" + ?(КолонкаДействуетСОтсутствует, "", ", КонтактнаяИнформация.ДействуетС КАК ДействуетС") + "
		|ПОМЕСТИТЬ КонтактнаяИнформация
		|ИЗ
		|	&КонтактнаяИнформация КАК КонтактнаяИнформация
		|;");
	
	Если КолонкаДействуетСОтсутствует Тогда
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	КОЛИЧЕСТВО(КонтактнаяИнформация.Вид) КАК Количество
		|ИЗ
		|	КонтактнаяИнформация КАК КонтактнаяИнформация
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтактнаяИнформация.Вид,
		|	КонтактнаяИнформация.Представление ИТОГИ ПО Вид";
	Иначе
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	МАКСИМУМ(КонтактнаяИнформация.ДействуетС) КАК ДействуетС
		|ПОМЕСТИТЬ АктуальнаяКонтактнаяИнформация
		|ИЗ
		|	КонтактнаяИнформация КАК КонтактнаяИнформация
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтактнаяИнформация.Вид
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	КонтактнаяИнформация.ДействуетС КАК ДействуетС,
		|	КОЛИЧЕСТВО(КонтактнаяИнформация.Вид) КАК Количество
		|ИЗ
		|	АктуальнаяКонтактнаяИнформация КАК АктуальнаяКонтактнаяИнформация
		|		ЛЕВОЕ СОЕДИНЕНИЕ КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО АктуальнаяКонтактнаяИнформация.ДействуетС = КонтактнаяИнформация.ДействуетС
		|			И АктуальнаяКонтактнаяИнформация.Вид = КонтактнаяИнформация.Вид
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтактнаяИнформация.Вид,
		|	КонтактнаяИнформация.Представление,
		| КонтактнаяИнформация.ДействуетС
		|ИТОГИ ПО
		|	Вид, ДействуетС"; 
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КонтактнаяИнформация", КонтактнаяИнформация);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаВид = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВид.Следующий() Цикл
		ВыборкаДетальныеЗаписи = ВыборкаВид.Выбрать();
		Если ВыборкаВид.Количество = 1 Тогда
			Если КолонкаДействуетСОтсутствует Тогда
				СтрокаТаблиц = КонтактнаяИнформация.Найти(ВыборкаВид.Вид, "Вид");
				СтрокаТаблиц.ВидДляСписка = ВыборкаВид.Вид;
			Иначе
				ДействуетС = Дата(1,1,1);
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ЗначениеЗаполнено(ВыборкаВид.ДействуетС) Тогда
						ДействуетС = ВыборкаВид.ДействуетС;
					КонецЕсли;
				КонецЦикла;
				Для каждого СтрокаСКонтактнойИнформацией Из КонтактнаяИнформация Цикл
					Если СтрокаСКонтактнойИнформацией.Вид = ВыборкаВид.Вид 
						И СтрокаСКонтактнойИнформацией.ДействуетС = ДействуетС Тогда
						СтрокаСКонтактнойИнформацией.ВидДляСписка = ВыборкаВид.Вид;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ВыборкаВид.Количество > 1 Тогда
			СтрокаТаблиц = КонтактнаяИнформация.Добавить();
			СтрокаТаблиц.ВидДляСписка = ВыборкаВид.Вид;
			Разделитель = "";
			Представление = "";
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Представление = Представление +Разделитель + ВыборкаДетальныеЗаписи.Представление;
				Разделитель = ", ";
			КонецЦикла;
			СтрокаТаблиц.Представление = Представление;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обновляет агрегатное поле ВидДляСписка в табличных частях КонтактнаяИнформация у всех объекта.
//
Процедура ОбновитьКонтактнуюИнформациюДляСписков() Экспорт
	
	ОбъектыСКолонкойВидДляСписка = ОбъектыСодержащиеВидДляСписка();
	
	Для каждого ОбъектСсылка Из ОбъектыСКолонкойВидДляСписка Цикл
		Объект = ОбъектСсылка.ПолучитьОбъект();
		КонтактнаяИнформация = Объект.КонтактнаяИнформация;
		
		Отбор = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.ПустаяСсылка());
		СтрокиДляУдаления = КонтактнаяИнформация.НайтиСтроки(Отбор);
		Для каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			КонтактнаяИнформация.Удалить(СтрокаДляУдаления);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление КАК Представление,
			|	КонтактнаяИнформация.Вид КАК Вид
			|ПОМЕСТИТЬ КонтактнаяИнформация
			|ИЗ
			|	&КонтактнаяИнформация КАК КонтактнаяИнформация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление КАК Представление,
			|	КонтактнаяИнформация.Вид КАК Вид,
			|	КОЛИЧЕСТВО(КонтактнаяИнформация.Вид) КАК Количество
			|ИЗ
			|	КонтактнаяИнформация КАК КонтактнаяИнформация
			|
			|СГРУППИРОВАТЬ ПО
			|	КонтактнаяИнформация.Вид,
			|	КонтактнаяИнформация.Представление ИТОГИ ПО Вид";
		
		Запрос.УстановитьПараметр("КонтактнаяИнформация", КонтактнаяИнформация);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаВид = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаВид.Следующий() Цикл
			ВыборкаДетальныеЗаписи = ВыборкаВид.Выбрать();
			Если ВыборкаВид.Количество = 1 Тогда
				СтрокаТаблиц = КонтактнаяИнформация.Найти(ВыборкаВид.Вид, "Вид");
				СтрокаТаблиц.ВидДляСписка = ВыборкаВид.Вид;
			ИначеЕсли ВыборкаВид.Количество > 1 Тогда
				СтрокаТаблиц = КонтактнаяИнформация.Добавить();
				СтрокаТаблиц.ВидДляСписка = ВыборкаВид.Вид;
				Разделитель = "";
				Представление = "";
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Представление = Представление +Разделитель + ВыборкаДетальныеЗаписи.Представление;
					Разделитель = ", ";
				КонецЦикла;
				СтрокаТаблиц.Представление = Представление;
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;

КонецПроцедуры

Функция ОбъектыСодержащиеВидДляСписка()
	
	ОбъектыМетаданных = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.ЭтоГруппа = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если СтрНачинаетсяС(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных, "Справочник") Тогда
			ИмяОбъекта = Сред(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных, 11);
			Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда 
				КонтактнаяИнформация = Метаданные.Справочники[ИмяОбъекта].ТабличныеЧасти.КонтактнаяИнформация;
				Если КонтактнаяИнформация.Реквизиты.Найти("ВидДляСписка") <> Неопределено Тогда
					ОбъектыМетаданных.Добавить(Справочники[ИмяОбъекта].ПустаяСсылка());
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрНачинаетсяС(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных, "Документ") Тогда
			ИмяОбъекта = Сред(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных, 9);
			Если Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда
				КонтактнаяИнформация = Метаданные.Документы[ИмяОбъекта].ТабличныеЧасти.КонтактнаяИнформация;
				Если КонтактнаяИнформация.Реквизиты.Найти("ВидДляСписка") <> Неопределено Тогда
					ОбъектыМетаданных.Добавить(Документы[ИмяОбъекта].ПустаяСсылка());
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Разделитель = "";
	ТекстЗапроса = "";
	Для каждого Объект Из ОбъектыМетаданных Цикл
		ТекстЗапроса = ТекстЗапроса + Разделитель + " ВЫБРАТЬ
		|	КонтактнаяИнформация.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник." + Объект.Метаданные().Имя + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтактнаяИнформация.Ссылка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(КонтактнаяИнформация.Вид) > 0 ";
		Разделитель = " ОБЪЕДИНИТЬ ВСЕ ";
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Возврат РезультатЗапроса;

КонецФункции

// Проверяет корректность параметров вида контактной информации.
//
// Параметры:
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - Проверяемый вид контактной информации.
//
// Возвращаемое значение:
//  Структура - Результат проверки вида контактной информации.
//   * ЕстьОшибки    - Булево - признак наличия ошибок в виде контактной информации.
//   * ТекстОшибки   - Строка - информация об ошибке.
Функция ПроверитьПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформации) Экспорт
	
	Результат = Новый Структура("ЕстьОшибки, ТекстОшибки", Ложь, "");
	
	Если НЕ ЗначениеЗаполнено(ВидКонтактнойИнформации.Тип) Тогда
		Результат.ЕстьОшибки = Истина;
		Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполонено обязательное поле тип у вида контактной информации ""%1"".'"),
			Строка(ВидКонтактнойИнформации.Наименование));
		Возврат Результат;
	КонецЕсли;
	
	Разделитель = "";
	Если ВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		
		Если НЕ ВидКонтактнойИнформации.ТолькоНациональныйАдрес
			И (ВидКонтактнойИнформации.ПроверятьКорректность
			ИЛИ ВидКонтактнойИнформации.СкрыватьНеактуальныеАдреса) Тогда
				Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Некорректно заполнены настройки проверки адреса у вида контактной информации %1.
					| Проверка корректности адреса доступна только для российских адресов'"), Строка(ВидКонтактнойИнформации.Наименование));
					Разделитель = Символы.ПС;
			КонецЕсли;
			
		Если ВидКонтактнойИнформации.РазрешитьВводНесколькихЗначений
			И ВидКонтактнойИнформации.ХранитьИсториюИзменений Тогда
				Результат.ТекстОшибки = Результат.ТекстОшибки + Разделитель + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Некорректно заполнены настройки адреса у вида контактной информации %1.
					| Не допускается возможность ввода нескольких значений контактной информации при включенной истории хранения изменений.'"),
						Строка(ВидКонтактнойИнформации.Наименование));
		КонецЕсли;
	КонецЕсли;
	
	Результат.ЕстьОшибки = ЗначениеЗаполнено(Результат.ТекстОшибки);
	Возврат Результат;
	
КонецФункции

Функция НомерТелефонаВСтарыйСписокПолей(XDTOТелефон) Экспорт
	Результат = Новый СписокЗначений;
	
	Результат.Добавить(XDTOТелефон.КодСтраны,  "КодСтраны");
	Результат.Добавить(XDTOТелефон.КодГорода,  "КодГорода");
	Результат.Добавить(XDTOТелефон.Номер,      "НомерТелефона");
	Результат.Добавить(XDTOТелефон.Добавочный, "Добавочный");
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииДляСовместимости

// Возвращает флаг того, что переданных объект КИ содержит данные.
//
// Параметры:
//     XDTOДанные - ОбъектXDTO - проверяемые данные контактной информации.
//
// Возвращаемое значение:
//     Булево - флаг наличия данных.
//
Функция XDTOКонтактнаяИнформацияЗаполнена(Знач XDTOДанные) Экспорт
	
	Возврат ЕстьЗаполненныеСвойстваXDTOКонтактнойИнформации(XDTOДанные);
	
КонецФункции

// Параметры: Владелец - ОбъектXDTO, Неопределено
//
Функция ЕстьЗаполненныеСвойстваXDTOКонтактнойИнформации(Знач Владелец)
	
	Если Владелец = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Список игнорируемых при сравнении свойств текущего владельца - особенности контактной информации.
	Игнорируемые = Новый Соответствие;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	ТипВладельца     = Владелец.Тип();
	
	Если ТипВладельца = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		// Страна не влияет на заполнение при остальных пустых. Игнорируем.
		Игнорируемые.Вставить(Владелец.Свойства().Получить("Страна"), Истина);
		
	Иначе
		Если Метаданные.Обработки.Найти("РасширенныйВводКонтактнойИнформации") <> Неопределено Тогда
			МодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресами");
			Обработки["РасширенныйВводКонтактнойИнформации"].ЗаполнитьСвойстваXDTOКонтактнойИнформацииДляРасширенныхАдресов(Владелец, 
				Игнорируемые, МодульРаботаСАдресами.ПространствоИмен(), ТипВладельца);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Свойство Из Владелец.Свойства() Цикл
		
		Если Не Владелец.Установлено(Свойство) Или Игнорируемые[Свойство] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Свойство.ВерхняяГраница > 1 Или Свойство.ВерхняяГраница < 0 Тогда
			Список = Владелец.ПолучитьСписок(Свойство);
			
			Если Список <> Неопределено Тогда
				Для Каждого ЭлементСписка Из Список Цикл
					Если Игнорируемые[ЭлементСписка] = Неопределено 
						И ЕстьЗаполненныеСвойстваXDTOКонтактнойИнформации(ЭлементСписка) Тогда
						Возврат Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Значение = Владелец.Получить(Свойство);
		Если ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
			Если ЕстьЗаполненныеСвойстваXDTOКонтактнойИнформации(Значение) Тогда
				Возврат Истина;
			КонецЕсли;
			
		ИначеЕсли Не ПустаяСтрока(Значение) Тогда
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Ложь;
КонецФункции

Процедура ЗаменитьВСтруктуреНеопределеноНаПустуюСтроку(СтруктураДляОбхода) Экспорт
	
	Для каждого КлючЗначение Из СтруктураДляОбхода Цикл
		Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура")Тогда
			ЗаменитьВСтруктуреНеопределеноНаПустуюСтроку(СтруктураДляОбхода[КлючЗначение.Ключ]);
		ИначеЕсли КлючЗначение.Значение = Неопределено Тогда
			СтруктураДляОбхода[КлючЗначение.Ключ] = "";
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ДесериализацияТелефонаФакса(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено)
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей) Тогда
		// Общий формат контактной информации.
		Возврат КонтактнаяИнформацияИзXML(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	
	Если ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
		
	ИначеЕсли ОжидаемыйТип=Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса"));
		
	ИначеЕсли ОжидаемыйТип=Неопределено Тогда
		// Считаем телефоном
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
		
	Иначе
		ВызватьИсключение НСтр("ru='Ошибка десериализации контактной информации, ожидается телефон или факс'");
	КонецЕсли;
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Состав        = Данные;
	
	// Из пар ключ-значение
	СписокЗначенийПолей = Неопределено;
	Если ТипЗнч(ЗначенияПолей)=Тип("СписокЗначений") Тогда
		СписокЗначенийПолей = ЗначенияПолей;
	ИначеЕсли Не ПустаяСтрока(ЗначенияПолей) Тогда
		СписокЗначенийПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(ЗначенияПолей);
	КонецЕсли;
	
	ПолеПредставления = "";
	Если СписокЗначенийПолей <> Неопределено Тогда
		Для Каждого ЗначениеПоля Из СписокЗначенийПолей Цикл
			Поле = ВРег(ЗначениеПоля.Представление);
			
			Если Поле = "КОДСТРАНЫ" Тогда
				Данные.КодСтраны = ЗначениеПоля.Значение;
				
			ИначеЕсли Поле = "КОДГОРОДА" Тогда
				Данные.КодГорода = ЗначениеПоля.Значение;
				
			ИначеЕсли Поле = "НОМЕРТЕЛЕФОНА" Тогда
				Данные.Номер = ЗначениеПоля.Значение;
				
			ИначеЕсли Поле = "ДОБАВОЧНЫЙ" Тогда
				Данные.Добавочный = ЗначениеПоля.Значение;
				
			ИначеЕсли Поле = "ПРЕДСТАВЛЕНИЕ" Тогда
				ПолеПредставления = СокрЛП(ЗначениеПоля.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Представление с приоритетами.
		Если Не ПустаяСтрока(Представление) Тогда
			Результат.Представление = Представление;
		ИначеЕсли ЗначениеЗаполнено(ПолеПредставления) Тогда
			Результат.Представление = ПолеПредставления;
		Иначе
			Результат.Представление = ПредставлениеТелефона(Данные);
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	// Разбираем из представления.
	
	// Группы цифр, разделенные символами - не цифрами: страна, город, номер, добавочный. 
	// Добавочный включает в себя непробельные символы слева и справа.
	Позиция = 1;
	Данные.КодСтраны  = НайтиПодстрокуЦифр(Представление, Позиция);
	НачалоГорода = Позиция;
	
	Данные.КодГорода  = НайтиПодстрокуЦифр(Представление, Позиция);
	Данные.Номер      = НайтиПодстрокуЦифр(Представление, Позиция, " -");
	
	Добавочный = СокрЛП(Сред(Представление, Позиция));
	Если СтрНачинаетсяС(Добавочный, ",") Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 2));
	КонецЕсли;
	Если ВРег(Лев(Добавочный, 3 ))= "ДОБ" Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 4));
	КонецЕсли;
	Если ВРег(Лев(Добавочный, 1 ))= "." Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 2));
	КонецЕсли;
	Данные.Добавочный = СокрЛП(Добавочный);
	
	// Корректируем возможные ошибки.
	Если ПустаяСтрока(Данные.Номер) Тогда
		Если СтрНачинаетсяС(СокрЛ(Представление), "+") Тогда
			// Была попытка явно указать код страны, оставляем страну в покое.
			Данные.КодГорода  = "";
			Данные.Номер      = СократитьНеЦифры(Сред(Представление, НачалоГорода));
			Данные.Добавочный = "";
		Иначе
			Данные.КодСтраны  = "";
			Данные.КодГорода  = "";
			Данные.Номер      = Представление;
			Данные.Добавочный = "";
		КонецЕсли;
	КонецЕсли;
	
	Результат.Представление = Представление;
	Возврат Результат;
КонецФункции  

// Возвращает первую подстроку из цифр в строке. Параметр ПозицияНачала изменяется на первую не цифру.
//
Функция НайтиПодстрокуЦифр(Текст, ПозицияНачала = Неопределено, ДопустимоКромеЦифр = "")
	
	Если ПозицияНачала = Неопределено Тогда
		ПозицияНачала = 1;
	КонецЕсли;
	
	Результат = "";
	ПозицияКонца = СтрДлина(Текст);
	ПоискНачала  = Истина;
	
	Пока ПозицияНачала <= ПозицияКонца Цикл
		Символ = Сред(Текст, ПозицияНачала, 1);
		ЭтоЦифра = Символ >= "0" И Символ <= "9";
		
		Если ПоискНачала Тогда
			Если ЭтоЦифра Тогда
				Результат = Результат + Символ;
				ПоискНачала = Ложь;
			КонецЕсли;
		Иначе
			Если ЭтоЦифра Или СтрНайти(ДопустимоКромеЦифр, Символ) > 0 Тогда
				Результат = Результат + Символ;    
			Иначе
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		ПозицияНачала = ПозицияНачала + 1;
	КонецЦикла;
	
	// Убираем возможные висящие разделители справа.
	Возврат СократитьНеЦифры(Результат, ДопустимоКромеЦифр, Ложь);
	
КонецФункции

Функция СократитьНеЦифры(Текст, ДопустимоКромеЦифр = "", Направление = Истина)
	
	Длина = СтрДлина(Текст);
	Если Направление Тогда
		// Сокращение слева
		Индекс = 1;
		Конец  = 1 + Длина;
		Шаг    = 1;
	Иначе
		// Сокращение справа    
		Индекс = Длина;
		Конец  = 0;
		Шаг    = -1;
	КонецЕсли;
	
	Пока Индекс <> Конец Цикл
		Символ = Сред(Текст, Индекс, 1);
		ЭтоЦифра = (Символ >= "0" И Символ <= "9") Или СтрНайти(ДопустимоКромеЦифр, Символ) = 0;
		Если ЭтоЦифра Тогда
			Прервать;
		КонецЕсли;
		Индекс = Индекс + Шаг;
	КонецЦикла;
	
	Если Направление Тогда
		// Сокращение слева
		Возврат Прав(Текст, Длина - Индекс + 1);
	КонецЕсли;
	
	// Сокращение справа
	Возврат Лев(Текст, Индекс);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииПоРаботеСXML

// Возвращает соответствующее значение перечисления "ТипыКонтактнойИнформации" по строке XML.
//
// Параметры:
//    XMLСтрока - Строка, описывающая контактную информацию.
//
// Возвращаемое значение:
//     ПеречислениеСсылка.ТипыКонтактнойИнформации - результат.
//
Функция ТипКонтактнойИнформации(Знач XMLСтрока) Экспорт
	Возврат ЗначениеИзСтрокиXML( XSLT_ТипКонтактнойИнформацииПоСтрокеXML(XMLСтрока) );
КонецФункции

// Читает строку состава из значения контактной информации.
// Если значение состава сложного типа, то возвращает неопределено.
//
// Параметры:
//    Текст  Строка - XML строка контактной информации. Может быть модифицирован.
//
// Возвращаемое значение:
//    Строка       - XML значение состава.
//    Неопределено - Свойство "Состав" не найдено.
//
Функция СтрокаСоставаКонтактнойИнформации(Знач Текст, Знач НовоеЗначение = Неопределено) Экспорт
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Текст);
	ОбъектXDTO= ФабрикаXDTO.ПрочитатьXML(Чтение, 
		ФабрикаXDTO.Тип(УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен(), "КонтактнаяИнформация"));
	
	Состав = ОбъектXDTO.Состав;
	Если Состав <> Неопределено 
		И Состав.Свойства().Получить("Значение") <> Неопределено
		И ТипЗнч(Состав.Значение) = Тип("Строка") Тогда
		Возврат Состав.Значение;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Сравнивает два экземпляра контактной информации.
//
// Параметры:
//    Данные1 - ОбъектXTDO - объект с контактной информацией.
//            - Строка     - контактная информация в формате XML.
//            - Структура  - описание контактной информацию. Ожидаются поля:
//                 * ЗначенияПолей - Строка, Структура, СписокЗначений, Соответствие - поля контактной информации.
//                 * Представление - Строка - Представление. Используется в случае, если не удалось вычислить 
//                                            представление из ЗначенияПолей (отсутствие в них поля Представление).
//                 * Комментарий - Строка - комментарий. Используется в случае, если не удалось вычислить комментарий
//                                          из ЗначенияПолей.
//                 * ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,
//                                             ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура -
//                                             Используется в случае, если не удалось вычислить тип из ЗначенияПолей.
//    Данные2 - ОбъектXTDO, Строка, Структура - аналогично Данные1.
//
// Возвращаемое значение:
//     ТаблицаЗначений: - таблица отличающихся полей со следующими колонками:
//        * Путь      - Строка - XPath, идентифицирующий различающееся значение. Значение "ТипКонтактнойИнформации"
//                               означает, что переданные экземпляры контактной информации различаются типом.
//        * Описание  - Строка - описание отличающегося реквизита в терминах предметной области.
//        * Значение1 - Строка - значение, соответствующая объекту, переданному в параметре Данные1.
//        * Значение2 - Строка - значение, соответствующая объекту, переданному в параметре Данные2.
//
Функция РазличияКонтактнойИнформации(Знач Данные1, Знач Данные2) Экспорт
	ДанныеКИ1 = ПривестиКонтактнуюИнформациюXML(Данные1);
	ДанныеКИ2 = ПривестиКонтактнуюИнформациюXML(Данные2);
	
	ТипКонтактнойИнформации = ДанныеКИ1.ТипКонтактнойИнформации;
	Если ТипКонтактнойИнформации <> ДанныеКИ2.ТипКонтактнойИнформации Тогда
		// Различные типы, дальше не сравниваем.
		Результат = Новый ТаблицаЗначений;
		Колонки   = Результат.Колонки;
		СтрокаРезультата = Результат.Добавить();
		СтрокаРезультата[Колонки.Добавить("Путь").Имя]      = "ТипКонтактнойИнформации";
		СтрокаРезультата[Колонки.Добавить("Значение1").Имя] = ДанныеКИ1.ТипКонтактнойИнформации;
		СтрокаРезультата[Колонки.Добавить("Значение2").Имя] = ДанныеКИ2.ТипКонтактнойИнформации;
		СтрокаРезультата[Колонки.Добавить("Описание").Имя]  = НСтр("ru = 'Различные типы контактной информации'");
		Возврат Результат;
	КонецЕсли;
	
	ТекстРазличияXML = XSLT_ТаблицаЗначенийРазличияXML(ДанныеКИ1.ДанныеXML, ДанныеКИ2.ДанныеXML);
	
	// Отдаем интерпретацию в зависимости от типа.
	Возврат ЗначениеИзСтрокиXML( XSLT_ИнтерпретацияРазличияXMLКонтактнойИнформации(
			ТекстРазличияXML, ТипКонтактнойИнформации));
	
КонецФункции

// Преобразует контактную информацию в вид XML.
//
// Параметры:
//    Данные - Строка     - описание контактной информации.
//           - ОбъектXTDO - описание контактной информации.
//           - Структура  - описание контактной информации. Ожидаются поля:
//                 * ЗначенияПолей - Строка, Структура, СписокЗначений, Соответствие - поля контактной информации.
//                 * Представление - Строка - Представление. Используется в случае, если не удалось вычислить 
//                                            представление из ЗначенияПолей (отсутствие в них поля Представление).
//                 * Комментарий - Строка - комментарий. Используется в случае, если не удалось вычислить комментарий
//                                          из ЗначенияПолей.
//                 * ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,
//                                             ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура
//                                             Используется в случае, если не удалось вычислить тип из ЗначенияПолей.
//
// Возвращаемое значение:
//     Структура - содержит поля:
//        * ТипКонтактнойИнформации - Перечисление.ТипыКонтактнойИнформации
//        * ДанныеXML               - Строка - текст XML.
//
Функция ПривестиКонтактнуюИнформациюXML(Знач Данные) Экспорт
	Если ЭтоСтрокаXML(Данные) Тогда
		Возврат Новый Структура("ДанныеXML, ТипКонтактнойИнформации",
			Данные, ЗначениеИзСтрокиXML( XSLT_ТипКонтактнойИнформацииПоСтрокеXML(Данные) ));
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ОбъектXDTO") Тогда
		ДанныеXML = КонтактнаяИнформацияXDTOВXML(Данные);
		Возврат Новый Структура("ДанныеXML, ТипКонтактнойИнформации",
			ДанныеXML, ЗначениеИзСтрокиXML( XSLT_ТипКонтактнойИнформацииПоСтрокеXML(ДанныеXML) ));
		
	КонецЕсли;
		
	// Ожидаем структуру
	Комментарий = Неопределено;
	Данные.Свойство("Комментарий", Комментарий);
	
	ЗначенияПолей = Данные.ЗначенияПолей;
	Если ЭтоСтрокаXML(ЗначенияПолей) Тогда 
		// Возможно необходимо переопределить комментарий.
		Если Не ПустаяСтрока(Комментарий) Тогда
			УправлениеКонтактнойИнформацией.УстановитьКомментарийКонтактнойИнформации(ЗначенияПолей, Комментарий);
		КонецЕсли;
		
		Возврат Новый Структура("ДанныеXML, ТипКонтактнойИнформации",
			ЗначенияПолей, ЗначениеИзСтрокиXML( XSLT_ТипКонтактнойИнформацииПоСтрокеXML(ЗначенияПолей) ));
		
	КонецЕсли;
	
	// Разбираем по ЗначенияПолей, ВидКонтактнойИнформации, Представление.
	ТипЗначенийПолей = ТипЗнч(ЗначенияПолей);
	Если ТипЗначенийПолей = Тип("Строка") Тогда
		// Текст из пар ключ-значение
		СтрокаXMLСтруктуры = XSLT_СтрокаКлючЗначениеВСтруктуру(ЗначенияПолей)
		
	ИначеЕсли ТипЗначенийПолей = Тип("СписокЗначений") Тогда
		// Список значений
		СтрокаXMLСтруктуры = XSLT_СписокЗначенийВСтруктуру( ЗначениеВСтрокуXML(ЗначенияПолей) );
		
	ИначеЕсли ТипЗначенийПолей = Тип("Соответствие") Тогда
		// Соответствие
		СтрокаXMLСтруктуры = XSLT_СоответствиеВСтруктуру( ЗначениеВСтрокуXML(ЗначенияПолей) );
		
	ИначеЕсли ТипЗначенийПолей = Тип("ОбъектXDTO") Тогда
		// Ожидаем структуру
		Если ЗначенияПолей.Состав.Страна = Неопределено Тогда
			ЗначенияПолей.Состав.Страна = "";
		КонецЕсли;
		Если ЗначенияПолей.Состав.Состав = Неопределено Тогда
			ЗначенияПолей.Состав.Состав = "";
		КонецЕсли;
		
		СтрокаXMLСтруктуры = ЗначениеВСтрокуXML(ЗначенияПолей);
	Иначе
		// Ожидаем структуру
		СтрокаXMLСтруктуры = ЗначениеВСтрокуXML(ЗначенияПолей);
		
	КонецЕсли;
	
	// Разбираем по ВидКонтактнойИнформации.
	ТипКонтактнойИнформации = ТипВидаКонтактнойИнформации(Данные.ВидКонтактнойИнформации);
	
	Результат = Новый Структура("ТипКонтактнойИнформации, ДанныеXML", ТипКонтактнойИнформации);
	
	ВсеТипы = Перечисления.ТипыКонтактнойИнформации;
	Если ТипКонтактнойИнформации = ВсеТипы.Адрес Тогда
		Результат.ДанныеXML = XSLT_СтруктураВАдрес(СтрокаXMLСтруктуры, Данные.Представление, Комментарий);
		
	ИначеЕсли ТипКонтактнойИнформации = ВсеТипы.АдресЭлектроннойПочты Тогда
		Результат.ДанныеXML = XSLT_СтруктураВАдресЭлектроннойПочты(СтрокаXMLСтруктуры, Данные.Представление, Комментарий);
		
	ИначеЕсли ТипКонтактнойИнформации = ВсеТипы.ВебСтраница Тогда
		Результат.ДанныеXML = XSLT_СтруктураВВебСтраницу(СтрокаXMLСтруктуры, Данные.Представление, Комментарий);
		
	ИначеЕсли ТипКонтактнойИнформации = ВсеТипы.Телефон Тогда
		Результат.ДанныеXML = XSLT_СтруктураВТелефон(СтрокаXMLСтруктуры, Данные.Представление, Комментарий);
		
	ИначеЕсли ТипКонтактнойИнформации = ВсеТипы.Факс Тогда
		Результат.ДанныеXML = XSLT_СтруктураВФакс(СтрокаXMLСтруктуры, Данные.Представление, Комментарий);
		
	ИначеЕсли ТипКонтактнойИнформации = ВсеТипы.Другое Тогда
		Результат.ДанныеXML = XSLT_СтруктураВДругое(СтрокаXMLСтруктуры, Данные.Представление, Комментарий);
		
	ИначеЕсли ТипКонтактнойИнформации = ВсеТипы.Skype Тогда
		Результат.ДанныеXML = XSLT_СтруктураВДругое(СтрокаXMLСтруктуры, Данные.Представление, Комментарий);
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Ошибка параметров преобразования, не определен тип контактной информации'");
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииПоРаботеСXSLT

// Производит сравнение двух строк XML.
// Проверяются только строки и атрибуты, без пробельных, CDATA и т.п. Порядок важен.
//
// Параметры:
//    Текст1 - Строка - Строка XML.
//    Текст2 - Строка - Строка XML.
//
// Возвращаемое значение:
//    Строка - сериализованый ValueTable (http://v8.1c.ru/8.1/data/core), в котором три колонки:
//       * Путь      - Строка - путь к месту различия.
//       * Значение1 - Строка - значение в XML из параметра Текст1.
//       * Значение2 - Строка - значение в XML из параметра Текст2.
//
Функция XSLT_ТаблицаЗначенийРазличияXML(Текст1, Текст2)
	
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_ТаблицаЗначенийРазличияXML();
	
	Построитель = Новый ТекстовыйДокумент;
	Построитель.ДобавитьСтроку("<dn><f>");
	Построитель.ДобавитьСтроку( XSLT_УдалитьОписаниеXML(Текст1) );
	Построитель.ДобавитьСтроку("</f><s>");
	Построитель.ДобавитьСтроку( XSLT_УдалитьОписаниеXML(Текст2) );
	Построитель.ДобавитьСтроку("</s></dn>");
	
	Возврат Преобразователь.ПреобразоватьИзСтроки(Построитель.ПолучитьТекст());
	
КонецФункции

// Преобразует текст с парами Ключ = Значение, разделенных переносами строк (см формат адреса) в XML.
// В случае повторных ключей все включаются в результат, но при десериализации будет использован 
// последний (особенность работы сериализатора платформы).
//
// Параметры:
//    Текст - Строка - пары Ключ = Значение.
//
// Возвращаемое значение:
//     Строка  - XML сериализованной структуры.
//
Функция XSLT_СтрокаКлючЗначениеВСтруктуру(Знач Текст) 
	
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_СтрокаКлючЗначениеВСтруктуру();
	Возврат Преобразователь.ПреобразоватьИзСтроки(XSLT_УзелСтрокиПараметра(Текст));
	
КонецФункции

// Преобразует список значений в структуру. Представление преобразуется в ключ.
//
// Параметры:
//    Текст - Строка - сериализованная список значений.
//
// Возвращаемое значение:
//    Строка - результат преобразования.
//
Функция XSLT_СписокЗначенийВСтруктуру(Текст)
	
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_СписокЗначенийВСтруктуру();
	Возврат Преобразователь.ПреобразоватьИзСтроки(Текст);
	
КонецФункции

// Преобразует соответствие в структуру. Ключ преобразуется в ключ, значение - в значение.
//
// Параметры:
//    Текст - Строка - сериализованное соответствие.
//
// Возвращаемое значение:
//    Строка - результат преобразования.
//
Функция XSLT_СоответствиеВСтруктуру(Текст)
	
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_СоответствиеВСтруктуру();
	Возврат Преобразователь.ПреобразоватьИзСтроки(Текст);
	
КонецФункции

// Анализирует таблицу Путь-Значение1-Значение2 для указанного вида контактной информации.
//
// Параметры:
//    Текст                   - Строка - строка XML с ValueTable из результата сравнения XML.
//    ТипКонтактнойИнформации - ПеречислениеСсылка.ТипыКонтактнойИнформации  - значение перечисления типа.
//
// Возвращаемое значение:
//    Строка - сериализованную таблицу значений отличающихся полей.
//
Функция XSLT_ИнтерпретацияРазличияXMLКонтактнойИнформации(Знач Текст, Знач ТипКонтактнойИнформации) 
	
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_ИнтерпретацияРазличияXMLКонтактнойИнформации(
		ТипКонтактнойИнформации);
	Возврат Преобразователь.ПреобразоватьИзСтроки(Текст);
	
КонецФункции

// Преобразует структуру в XML контактной информации.
//
// Параметры:
//    Текст         - Строка - сериализованная структура.
//    Представление - Строка - необязательное представление. Используется, только если в структуре нет поля
//                             представления.
//    Комментарий   - Строка - необязательный комментарий. Используется, только если в структуре нет поля комментария.
//
// Возвращаемое значение:
//    Строка - XML контактной информации.
//
Функция XSLT_СтруктураВАдрес(Знач Текст, Знач Представление = Неопределено, Знач Комментарий = Неопределено)
	
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_ПреобразованиеXSL();
	Возврат XSLT_КонтрольПредставленияИКомментария(
		Преобразователь.ПреобразоватьИзСтроки(Текст),
		Представление, Комментарий);
		
КонецФункции

// Преобразует структуру в XML контактной информации.
//
// Параметры:
//    Текст         - Строка - сериализованная структура.
//    Представление - Строка - необязательное представление. Используется, только если в структуре нет поля
//                             представления.
//    Комментарий   - Строка - необязательный комментарий. Используется, только если в структуре нет поля комментария.
//
// Возвращаемое значение:
//    Строка - XML контактной информации.
//
Функция XSLT_СтруктураВАдресЭлектроннойПочты(Знач Текст, Знач Представление = Неопределено, Знач Комментарий = Неопределено)
	
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_СтруктураВАдресЭлектроннойПочты();
	Возврат XSLT_КонтрольПредставленияИКомментария(
		XSLT_КонтрольСтроковогоЗначенияПростогоТипа(Преобразователь.ПреобразоватьИзСтроки(Текст), Представление), 
		Представление, Комментарий);
		
КонецФункции

// Преобразует структуру в XML контактной информации.
//
// Параметры:
//    Текст         - Строка - сериализованная структура.
//    Представление - Строка - необязательное представление. Используется, только если в структуре нет поля
//                             представления.
//    Комментарий   - Строка - необязательный комментарий. Используется, только если в структуре нет поля комментария.
//
// Возвращаемое значение:
//    Строка - XML контактной информации.
//
Функция XSLT_СтруктураВВебСтраницу(Знач Текст, Знач Представление = Неопределено, Знач Комментарий = Неопределено)
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_СтруктураВВебСтраницу();
	
	Возврат XSLT_КонтрольПредставленияИКомментария(
		XSLT_КонтрольСтроковогоЗначенияПростогоТипа( Преобразователь.ПреобразоватьИзСтроки(Текст), Представление),
		Представление, Комментарий);
		
КонецФункции

// Преобразует структуру в XML контактной информации.
//
// Параметры:
//    Текст         - Строка - сериализованная структура.
//    Представление - Строка - необязательное представление. Используется, только если в структуре нет поля
//                             представления.
//    Комментарий   - Строка - необязательный комментарий. Используется, только если в структуре нет поля комментария.
//
// Возвращаемое значение:
//    Строка - XML контактной информации.
//
Функция XSLT_СтруктураВТелефон(Знач Текст, Знач Представление = Неопределено, Знач Комментарий = Неопределено)
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_СтруктураВТелефон();
	Возврат XSLT_КонтрольПредставленияИКомментария(
		Преобразователь.ПреобразоватьИзСтроки(Текст),
		Представление, Комментарий);
КонецФункции

// Преобразует структуру в XML контактной информации.
//
// Параметры:
//    Текст         - Строка - сериализованная структура.
//    Представление - Строка - необязательное представление. Используется, только если в структуре нет поля
//                             представления.
//    Комментарий   - Строка - необязательный комментарий. Используется, только если в структуре нет поля комментария.
//
// Возвращаемое значение:
//    Строка - XML контактной информации.
//
Функция XSLT_СтруктураВФакс(Знач Текст, Знач Представление = Неопределено, Знач Комментарий = Неопределено)
	
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_СтруктураВФакс();
	Возврат XSLT_КонтрольПредставленияИКомментария(
		Преобразователь.ПреобразоватьИзСтроки(Текст),
		Представление, Комментарий);
		
КонецФункции

// Преобразует структуру в XML контактной информации.
//
// Параметры:
//    Текст         - Строка - сериализованная структура.
//    Представление - Строка - необязательное представление. Используется, только если в структуре нет поля
//                             представления.
//    Комментарий   - Строка - необязательный комментарий. Используется, только если в структуре нет поля комментария.
//
// Возвращаемое значение:
//    Строка - XML контактной информации.
//
Функция XSLT_СтруктураВДругое(Знач Текст, Знач Представление = Неопределено, Знач Комментарий = Неопределено)
	
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_СтруктураВДругое();
	Возврат XSLT_КонтрольПредставленияИКомментария(
		XSLT_КонтрольСтроковогоЗначенияПростогоТипа( Преобразователь.ПреобразоватьИзСтроки(Текст), Представление),
		Представление, Комментарий);
		
КонецФункции

// Устанавливает в контактной информации представление и комментарий, если они не заполнены.
//
// Параметры:
//    Текст         - Строка - сериализованная структура.
//    Представление - Строка - необязательное представление. Используется, только если в структуре нет поля
//                             представления.
//    Комментарий   - Строка - необязательный комментарий. Используется, только если в структуре нет поля комментария.
//
// Возвращаемое значение:
//    Строка - XML контактной информации.
//
Функция XSLT_КонтрольПредставленияИКомментария(Знач Текст, Знач Представление = Неопределено, Знач Комментарий = Неопределено)
	
	Если Представление = Неопределено И Комментарий = Неопределено Тогда
		Возврат Текст;
	КонецЕсли;
	
	XSLT_Текст = Новый ТекстовыйДокумент;
	XSLT_Текст.ДобавитьСтроку("
		|<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform""
		|  xmlns:tns=""http://www.v8.1c.ru/ssl/contactinfo""
		|  xmlns=""http://www.v8.1c.ru/ssl/contactinfo"" 
		|>
		|  <xsl:output method=""xml"" omit-xml-declaration=""yes"" indent=""yes"" encoding=""utf-8""/>
		|
		|  <xsl:template match=""node() | @*"">
		|    <xsl:copy>
		|      <xsl:apply-templates select=""node() | @*"" />
		|    </xsl:copy>
		|  </xsl:template>
		|");
		
	Если Представление <> Неопределено Тогда
		XSLT_Текст.ДобавитьСтроку("
		|  <xsl:template match=""tns:КонтактнаяИнформация/@Представление"">
		|    <xsl:attribute name=""Представление"">
		|      <xsl:choose>
		|        <xsl:when test="".=''"">" + НормализованнаяСтрокаXML(Представление) + "</xsl:when>
		|        <xsl:otherwise>
		|          <xsl:value-of select="".""/>
		|        </xsl:otherwise>
		|      </xsl:choose>
		|    </xsl:attribute>
		|  </xsl:template>
		|");
	КонецЕсли;
	
	Если Комментарий <> Неопределено Тогда
		XSLT_Текст.ДобавитьСтроку("
		|  <xsl:template match=""tns:КонтактнаяИнформация/tns:Комментарий"">
		|    <xsl:element name=""Комментарий"">
		|      <xsl:choose>
		|        <xsl:when test="".=''"">" + НормализованнаяСтрокаXML(Комментарий) + "</xsl:when>
		|        <xsl:otherwise>
		|          <xsl:value-of select="".""/>
		|        </xsl:otherwise>
		|      </xsl:choose>
		|    </xsl:element>
		|  </xsl:template>
		|");
	КонецЕсли;
		XSLT_Текст.ДобавитьСтроку("
		|</xsl:stylesheet>
		|");
		
	Преобразователь = Новый ПреобразованиеXSL;
	Преобразователь.ЗагрузитьТаблицуСтилейXSLИзСтроки(XSLT_Текст.ПолучитьТекст());
	
	Возврат Преобразователь.ПреобразоватьИзСтроки(Текст);
КонецФункции

// Устанавливает в контактной информации Состав.Значение на переданное представление.
// Если Представление равно неопределено, то никаких действий не производит. Иначе проверяет на пустоту.
// Состав. Если там ничего нет и атрибут "Состав.Значение" пуст, то ставим в состав значение представления.
//
// Параметры:
//    Текст         - Строка - XML контактной информации.
//    Представление - Строка - устанавливаемое представление.
//
// Возвращаемое значение:
//    Строка - XML контактной информации.
//
Функция XSLT_КонтрольСтроковогоЗначенияПростогоТипа(Знач Текст, Знач Представление)
	
	Если Представление = Неопределено Тогда
		Возврат Текст;
	КонецЕсли;
	
	Преобразователь = Новый ПреобразованиеXSL;
	Преобразователь.ЗагрузитьТаблицуСтилейXSLИзСтроки("
		|<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform""
		|  xmlns:tns=""http://www.v8.1c.ru/ssl/contactinfo""
		|>
		|  <xsl:output method=""xml"" omit-xml-declaration=""yes"" indent=""yes"" encoding=""utf-8""/>
		|  
		|  <xsl:template match=""node() | @*"">
		|    <xsl:copy>
		|      <xsl:apply-templates select=""node() | @*"" />
		|    </xsl:copy>
		|  </xsl:template>
		|  
		|  <xsl:template match=""tns:КонтактнаяИнформация/tns:Состав/@Значение"">
		|    <xsl:attribute name=""Значение"">
		|      <xsl:choose>
		|        <xsl:when test="".=''"">" + НормализованнаяСтрокаXML(Представление) + "</xsl:when>
		|        <xsl:otherwise>
		|          <xsl:value-of select="".""/>
		|        </xsl:otherwise>
		|      </xsl:choose>
		|    </xsl:attribute>
		|  </xsl:template>
		|
		|</xsl:stylesheet>
		|");
	
	Возврат Преобразователь.ПреобразоватьИзСтроки(Текст);
КонецФункции

// Возвращает фрагмент XML для подстановки строки в виде <Узел>Строка<Узел>.
//
// Параметры:
//    Текст       - Строка - вставка в XML.
//    ИмяЭлемента - Строка - необязательное имя для внешнего узла.
//
// Возвращаемое значение:
//    Строка - результирующий XML.
//
Функция XSLT_УзелСтрокиПараметра(Знач Текст, Знач ИмяЭлемента = "ExternalParamNode")
	
	// Через запись xml для маскировки спецсимволов.
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	Запись.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	Запись.ЗаписатьТекст(Текст);
	Запись.ЗаписатьКонецЭлемента();
	Возврат Запись.Закрыть();
	
КонецФункции

// Возвращает XML без описания <?xml...> для включения внутрь другого XML.
//
// Параметры:
//    Текст - Строка - исходный XML.
//
// Возвращаемое значение:
//    Строка - результирующий XML.
//
Функция XSLT_УдалитьОписаниеXML(Знач Текст)
	
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_УдалитьОписаниеXML();
	Возврат Преобразователь.ПреобразоватьИзСтроки(СокрЛ(Текст));
	
КонецФункции

// Преобразует текст XML контактной информации в перечисление типа.
//
// Параметры:
//    Текст - Строка - исходный XML.
//
// Возвращаемое значение:
//    Строка - сериализованное значение перечисления ТипыКонтактнойИнформации.
//
Функция XSLT_ТипКонтактнойИнформацииПоСтрокеXML(Знач Текст)
	
	Преобразователь = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.XSLT_ТипКонтактнойИнформацииПоСтрокеXML();
	Возврат Преобразователь.ПреобразоватьИзСтроки(СокрЛ(Текст));
	
КонецФункции

//  Возвращает признак того, является ли текст XML.
//
//  Параметры:
//      Текст - Строка - проверяемый текст.
//
// Возвращаемое значение:
//      Булево - результат проверки.
//
Функция ЭтоСтрокаXML(Текст)
	
	Возврат ТипЗнч(Текст) = Тип("Строка") И Лев(СокрЛ(Текст),1) = "<";
	
КонецФункции

// Десериализатор известных платформе типов.
Функция ЗначениеИзСтрокиXML(Знач Текст)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Текст);
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	
КонецФункции

// Сериализатор известных платформе типов.
Функция ЗначениеВСтрокуXML(Знач Значение)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(Новый ПараметрыЗаписиXML(, , Ложь, Ложь, ""));
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	// Платформенный сериализатор позволяет записать в значение атрибутов перенос строки.
	Возврат СтрЗаменить(ЗаписьXML.Закрыть(), Символы.ПС, "&#10;");
	
КонецФункции

// Для работы с атрибутами содержащими переносы строк.
//
// Параметры:
//     Текст - Строка - Корректируемая строка XML.
//
// Возвращаемое значение:
//     Строка - Нормализованная строка.
//
Функция МногострочнаяСтрокаXML(Знач Текст)
	
	Возврат СтрЗаменить(Текст, Символы.ПС, "&#10;");
	
КонецФункции

// Подготавливает строку для включения в текст XML, убирая спецсимволы.
//
// Параметры:
//     Текст - Строка - Корректируемая строка XML.
//
// Возвращаемое значение:
//     Строка - Нормализованная строка.
//
Функция НормализованнаяСтрокаXML(Знач Текст)
	
	Результат = СтрЗаменить(Текст,     """", "&quot;");
	Результат = СтрЗаменить(Результат, "&",  "&amp;");
	Результат = СтрЗаменить(Результат, "'",  "&apos;");
	Результат = СтрЗаменить(Результат, "<",  "&lt;");
	Результат = СтрЗаменить(Результат, ">",  "&gt;");
	Возврат МногострочнаяСтрокаXML(Результат);
	
КонецФункции

Функция КонтактнаяИнформацияВСтаруюСтруктуру(XDTOКонтактнаяИнформация) Экспорт
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(XDTOКонтактнаяИнформация) Тогда
		XDTOКонтактная = КонтактнаяИнформацияИзXML(XDTOКонтактнаяИнформация);
	Иначе
		XDTOКонтактная = XDTOКонтактнаяИнформация
	КонецЕсли;
	
	Результат = Новый Структура("Представление, ЗначенияПолей", XDTOКонтактная.Представление, Новый СписокЗначений);
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Состав = XDTOКонтактная.Состав;
	
	Если Состав = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Тип = Состав.Тип();
	Если Тип = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		Результат.ЗначенияПолей = АдресВСписокПолей(Состав);
		Результат.ЗначенияПолей.Добавить(Результат.Представление, "Представление");
		
	ИначеЕсли Тип = ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
		Результат.ЗначенияПолей = НомерТелефонаВСтарыйСписокПолей(Состав);
		Результат.ЗначенияПолей.Добавить(XDTOКонтактная.Комментарий, "Комментарий");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Преобразует адрес формата XDTO в старый список полей типа СписокЗначений.
//
// Параметры:
//     XDTOАдрес               - ОбъектXDTO, Строка - контактная информация или строка XML.
//     РасширенныйСоставПолей - Булево - необязательный флаг того, что состав полей будет сокращен для совместимости
//                                     с обменом БСП 2.1.2.
//
//  Возвращаемое значение:
//     СписокЗначений 
//
Функция АдресВСписокПолей(XDTOАдрес)
	Список = Новый СписокЗначений;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	XDTOТип = XDTOАдрес.Тип();
	Если XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		
		// Страна с кодом
		ДобавитьЗначение(Список, "Страна", XDTOАдрес.Страна);
		Если ПустаяСтрока(XDTOАдрес.Страна) Тогда
			КодСтраны = "";
		Иначе
			Страна = Справочники.СтраныМира.НайтиПоНаименованию(XDTOАдрес.Страна, Истина);
			КодСтраны = СокрЛП(Страна.Код);
		КонецЕсли;
		ДобавитьЗначение(Список, "КодСтраны", КодСтраны);
	КонецЕсли;
	Возврат Список;
	
КонецФункции

Процедура ДобавитьЗначение(Список, ИмяПоля, Значение, РазрешитьДубли = Ложь)
	
	Если Не РазрешитьДубли Тогда
		Для Каждого Элемент Из Список Цикл
			Если Элемент.Представление = ИмяПоля Тогда
				Элемент.Значение = Строка(Значение);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Список.Добавить(Строка(Значение), ИмяПоля);
КонецПроцедуры


#КонецОбласти

#КонецОбласти
