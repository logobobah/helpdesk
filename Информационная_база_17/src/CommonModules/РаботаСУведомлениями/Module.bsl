////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с уведомлениями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует структуру данных уведомления.
//
// Возвращаемое значение:
//  Структура - Данные уведомления.
//   * ТемаУведомления - Тема уведомления.
//   * ТекстУведомления - Текст уведомления.
//   * Файлы - Файлы уведомления.
//
Функция ДанныеУведомления() Экспорт
	
	ДанныеУведомления = Новый Структура("ТемаУведомления, ТекстУведомления, Файлы");
	
	Возврат ДанныеУведомления;
	
КонецФункции

// Формирует данные уведомления событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Структура - Данные уведомления.
//   * ТемаУведомления - Тема уведомления.
//   * ТекстУведомления - Текст уведомления.
//   * Файлы - Файлы уведомления.
//
Функция ДанныеУведомленияПоОбъектам(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания) Экспорт
	
	ДанныеУведомления = ДанныеУведомления();
	
	ДанныеУведомления.ТемаУведомления = СформироватьТемуУведомленияПоОбъектамУведомления(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектыУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительныеОписания);
	
	ДанныеУведомления.ТекстУведомления = СформироватьТекстУведомленияПоОбъектамУведомления(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектыУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительныеОписания);
	
	ДанныеУведомления.Файлы = СформироватьФайлыУведомленияПоОбъектамУведомления(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектыУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительныеОписания);
	
	Возврат ДанныеУведомления;
	
КонецФункции

// Формирует данные уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Структура - Данные уведомления.
//   * ТемаУведомления - Тема уведомления.
//   * ТекстУведомления - Текст уведомления.
//   * Файлы - Файлы уведомления.
//
Функция ДанныеУведомленияПоСобытию(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание) Экспорт
	
	ДанныеУведомления = ДанныеУведомления();
	
	ДанныеУведомления.ТемаУведомления = СформироватьТемуУведомленияПоСобытию(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание);
	
	ДанныеУведомления.ТекстУведомления = СформироватьТекстУведомленияПоСобытию(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание);
	
	ДанныеУведомления.Файлы = СформироватьФайлыУведомленияПоСобытию(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание);
	
	Возврат ДанныеУведомления;
	
КонецФункции

// Добавить представление реквизита к строке.
//
// Параметры:
//  Строка - Строка - Обрабатываемая строка.
//  ИмяРеквизита - Строка - Имя реквизита.
//  Значение - Строка - Значение реквизита.
//  ДополнительноеЗначение - Строка - Дополнительное значение реквизита.
//
Процедура ДобавитьРеквизитКСтроке(Строка, ИмяРеквизита, Значение, ДополнительноеЗначение = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеРеквизита = Новый Массив;
	Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
		ПредставлениеРеквизита.Добавить(СтрШаблон("<b>%1:</b>", ИмяРеквизита));
	КонецЕсли;
	ПредставлениеРеквизита.Добавить(Значение);
	Если ЗначениеЗаполнено(ДополнительноеЗначение) Тогда
		ПредставлениеРеквизита.Добавить(СтрШаблон("(%1)", ДополнительноеЗначение));
	КонецЕсли;
	ПредставлениеРеквизита = СтрСоединить(ПредставлениеРеквизита, " ");
	
	ДобавитьЗначениеКСтрокеЧерезРазделитель(
		Строка,
		Символы.ПС,
		ПредставлениеРеквизита);
	
КонецПроцедуры

// Добавляет строку табличной части с уведомлением в массив уведомлений в специальную структуру.
Процедура ДобавитьУведомлениеВМассив(МассивУведомлений, СтрокаУведомления) Экспорт
	
	Уведомление = Новый Структура;
	Уведомление.Вставить("Объект", СтрокаУведомления.Объект);
	Уведомление.Вставить("Пользователь", СтрокаУведомления.Пользователь);
	Уведомление.Вставить("СпособУведомления", СтрокаУведомления.СпособУведомления);
	Уведомление.Вставить("ВидСобытия", СтрокаУведомления.ВидСобытия);
	Уведомление.Вставить("ОбъектПодписки", СтрокаУведомления.ОбъектПодписки);
	
	МассивУведомлений.Добавить(Уведомление);
	
КонецПроцедуры

// Возвращает дополнительные виды событий по виду события.
//
// Параметры:
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события.
//
// Возвращаемое значение:
//  Массив - Дополнительные виды событий.
//
Функция ДополнительныеВидыСобытий(ВидСобытия) Экспорт
	
	ДополнительныеВидыСобытий = Новый Массив;
	
	Для Каждого Уведомление Из ДоступныеУведомления() Цикл
		Если Уведомление.ОсновноеСобытие = ВидСобытия Тогда
			ДополнительныеВидыСобытий.Добавить(Уведомление.ВидСобытия);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДополнительныеВидыСобытий;
	
КонецФункции

// Возвращает таблицу доступных уведомлений с учетом функциональных опций.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Доступные уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений
//                 - Вид события.
//   * ОсновноеСобытие - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений
//                 - Основное событие.
//   * Представление - Строка - Текстовое представление уведомления.
//   * ДоступнаПодписка - Булево - Доступность подписки на уведомление.
//   * ДоступнаЧастота - Булево - Доступность настройки частоты уведомления.
//   * ДоступенСрок - Булево - Доступность настройки срока уведомления.
//   * ДополнительныеНастройки - Массив - Массив структур дополнительных настроек.
//
Функция ДоступныеУведомления() Экспорт
	
	ДоступныеУведомления = Новый ТаблицаЗначений;
	ДоступныеУведомления.Колонки.Добавить("ВидСобытия",
		Новый ОписаниеТипов("СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений"));
	ДоступныеУведомления.Колонки.Добавить("ОсновноеСобытие",
		Новый ОписаниеТипов("СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений"));
	ДоступныеУведомления.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка"));
	ДоступныеУведомления.Колонки.Добавить("ДоступнаПодписка",
		Новый ОписаниеТипов("Булево"));
	ДоступныеУведомления.Колонки.Добавить("ДоступнаЧастота",
		Новый ОписаниеТипов("Булево"));
	ДоступныеУведомления.Колонки.Добавить("ДоступенСрок",
		Новый ОписаниеТипов("Булево"));
	ДоступныеУведомления.Колонки.Добавить("ДополнительныеНастройки",
		Новый ОписаниеТипов("Массив"));
	
	СтруктураДополнительнойНастройки = Новый ФиксированнаяСтруктура("Настройка, Представление");
	
	// Ход выполнения процесса
	//СтрокаУведомления = ДоступныеУведомления.Добавить();
	//СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи;
	//СтрокаУведомления.Представление = НСтр("ru = 'Ход выполнения задачи'");
	//СтрокаУведомления.ДоступнаПодписка = Истина;
	//СтрокаУведомления.ДоступнаЧастота = Ложь;
	//СтрокаУведомления.ДоступенСрок = Ложь;
		
	// Поступление новой задачи
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи;
	СтрокаУведомления.Представление = НСтр("ru = 'Поступление новой задачи'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;
		
	// Отмена выполнения задачи
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи;
	СтрокаУведомления.Представление = НСтр("ru = 'Отмена выполнения задачи'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;
		
	// Контроль просроченных задач
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача;
	СтрокаУведомления.Представление = НСтр("ru = 'Контроль просроченных задач'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Истина;
	СтрокаУведомления.ДоступенСрок = Ложь;
		
	// Контроль просроченных задач автором
	//СтрокаУведомления = ДоступныеУведомления.Добавить();
	//СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора;
	//СтрокаУведомления.ОсновноеСобытие = Перечисления.СобытияУведомлений.ПросроченаЗадача;
	//СтрокаУведомления.Представление = НСтр("ru = 'Контроль просроченных задач (автор)'");
	//СтрокаУведомления.ДоступнаПодписка = Истина;
	//СтрокаУведомления.ДоступнаЧастота = Ложь;
	//СтрокаУведомления.ДоступенСрок = Ложь;
		
	// Приближение сроков выполнения задач
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи;
	СтрокаУведомления.Представление = НСтр("ru = 'Приближение сроков выполнения задач'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Истина;
	СтрокаУведомления.ДоступенСрок = Истина;
	
	// Назначение ответственным за документ.
	//СтрокаУведомления = ДоступныеУведомления.Добавить();
	//СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.НазначениеОтветственного;
	//СтрокаУведомления.Представление = НСтр("ru = 'Назначение ответственным за задачу'");
	//СтрокаУведомления.ДоступнаПодписка = Истина;
	
	РаботаСУведомлениямиПереопределяемый.ДоступныеУведомления(ДоступныеУведомления);
	
	Для Каждого СтрокаУведомления Из ДоступныеУведомления Цикл
		Если СтрокаУведомления.ОсновноеСобытие = Неопределено Тогда
			СтрокаУведомления.ОсновноеСобытие = СтрокаУведомления.ВидСобытия;
		КонецЕсли;
	КонецЦикла;
	
	ДоступныеУведомления.Сортировать("Представление");
	
	Возврат ДоступныеУведомления;
	
КонецФункции

// Обрабатывает регламентное задание контроля срока задач
Процедура КонтрольСрокаЗадача() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.КонтрольСрокаЗадач);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	// Уведомление о подходе сроков задач
	АктивныеЗадачиСПодписчиками = ВыбратьАктивныеЗадачиСПодписчиками(ТекущаяДата);
	
	ТаблицаПодписчики = АктивныеЗадачиСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчики = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленийОЗадачах(МассивПодписчики);
	
	Для Каждого СтрокаАктивныеЗадачиСПодписчиками Из АктивныеЗадачиСПодписчиками Цикл
		
		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаАктивныеЗадачиСПодписчиками.Подписчик, "Пользователь");
		СрокЗадачи = ПолучитьОсталосьДней(СтрокаАктивныеЗадачиСПодписчиками.СрокИсполнения, ТекущаяДата,
			СтрокаАктивныеЗадачиСПодписчиками.Подписчик);
		
		Если СрокЗадачи > НастройкаПодписчика.СрокУведомления Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаАктивныеЗадачиСПодписчиками.ДатаОбработки <> Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаПриближениеСрока) Тогда
				
				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(СтрокаАктивныеЗадачиСПодписчиками.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60*60*24);
				
				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаПриближениеСрока Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСостоянию(
			СтрокаАктивныеЗадачиСПодписчиками.Подписчик,
			Перечисления.СобытияУведомлений.ПодошелСрокЗадачи,
			СтрокаАктивныеЗадачиСПодписчиками.Задача,
			СтрокаАктивныеЗадачиСПодписчиками.ОбъектПодписки);
		
	КонецЦикла;
	
	// Уведомление о просроченных задачах
	ПросроченныеЗадачиСПодписчиками = ВыбратьПросроченныеЗадачиСПодписчиками(ТекущаяДата);
	
	ТаблицаПодписчики = ПросроченныеЗадачиСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчики = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленийОЗадачах(МассивПодписчики);
	
	Для Каждого СтрокаПросроченныеЗадачиСПодписчиками Из ПросроченныеЗадачиСПодписчиками Цикл
		
		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаПросроченныеЗадачиСПодписчиками.Подписчик, "Пользователь");
		
		Если СтрокаПросроченныеЗадачиСПодписчиками.ДатаОбработки <> Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаПросроченныеЗадачи) Тогда
				
				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(СтрокаПросроченныеЗадачиСПодписчиками.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60*60*24);
				
				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаПросроченныеЗадачи Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСостоянию(
			СтрокаПросроченныеЗадачиСПодписчиками.Подписчик,
			СтрокаПросроченныеЗадачиСПодписчиками.ВидСобытия,
			СтрокаПросроченныеЗадачиСПодписчиками.Задача,
			СтрокаПросроченныеЗадачиСПодписчиками.ОбъектПодписки);
		
	КонецЦикла;
	
КонецПроцедуры

// Предназначена для обработки произошедших бизнес-событий
Процедура ОбработатьБизнесСобытие(ПроизошедшееСобытие) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУведомленияПользователя") Тогда
		Возврат;
	КонецЕсли;
	
	ВидСобытия = ПроизошедшееСобытие.ВидСобытия;
	Объект = ПроизошедшееСобытие.Источник;
	
	ДобавитьУведомлениеПоОбъекту(ПроизошедшееСобытие, Объект, ВидСобытия, Объект);
	
КонецПроцедуры

// Предназначена для обработки произошедших событий уведомлений.
Процедура ОбработатьСобытиеУведомления(Источник, ВидСобытия, Автор = Неопределено, КонтекстСобытия = Неопределено) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУведомленияПользователя") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Автор = Неопределено Тогда
		Автор = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Если КонтекстСобытия = Неопределено Тогда
		КонтекстСобытия = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
	ПроизошедшееСобытие = Новый Структура;
	ПроизошедшееСобытие.Вставить("ВидСобытия", ВидСобытия);
	ПроизошедшееСобытие.Вставить("Источник", Источник);
	ПроизошедшееСобытие.Вставить("Автор", Автор);
	ПроизошедшееСобытие.Вставить("КонтекстСобытия", КонтекстСобытия);
	
	ОбработатьБизнесСобытие(ПроизошедшееСобытие);
	
КонецПроцедуры

// Предназначена для обработки уведомления программы.
//
// Параметры:
//  Описание - Строка - Описание уведомления.
//  ВидУведомления - ПеречислениеСсылка.ВидыУведомленийПрограммы - Вид уведомления.
//  Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//  Объект - ЛюбаяСсылка - Объект уведомления.
//
Процедура ОбработатьУведомлениеПрограммы(Описание, Пользователь, Объект = Неопределено) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУведомленияПользователя") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
		Пользователь,
		Перечисления.СобытияУведомлений.УведомлениеПрограммы,
		Объект,
		Объект,
		Описание);
	
КонецПроцедуры

// Обработка уведомлений в очереди уведомлений
Процедура ОбработатьУведомленияВОчередиУведомлений() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УведомлениеПользователейОСобытиях);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начато регламентное уведомление о новых событиях'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	СформированныеУведомления = СформироватьУведомленияДляОтправки();
	ОтправитьУведомления(СформированныеУведомления);
	
	//Создание писем по шаблонам
	СозданиеПисемПоШаблонам();
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Завершено регламентное уведомление о новых событиях'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры

// Формирует навигационную ссылку.
//
Функция ПолучитьНавигационнуюСсылкуУведомления(Объект) Экспорт
	
	АдресПубликацииНаВебСервере = Константы.АдресПубликацииНаВебСервере.Получить();
	Если ЗначениеЗаполнено(АдресПубликацииНаВебСервере) Тогда
		Если Прав(АдресПубликацииНаВебСервере, 2) = "/#" Или  Прав(АдресПубликацииНаВебСервере, 1) = "#" Тогда
			// Адрес уже корректный
		ИначеЕсли Прав(АдресПубликацииНаВебСервере, 1) = "/" Тогда
			АдресПубликацииНаВебСервере = АдресПубликацииНаВебСервере + "#";
		Иначе
			АдресПубликацииНаВебСервере = АдресПубликацииНаВебСервере + "/#";
		КонецЕсли;
		НавигационнаяСсылка = АдресПубликацииНаВебСервере + ПолучитьНавигационнуюСсылку(Объект);
		НавигационнаяСсылкаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<a href=%1>%2</a>",
			КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
			НавигационнаяСсылка);
		Возврат НавигационнаяСсылкаУведомления;
	Иначе
		Возврат ПолучитьНавигационнуюСсылку(Объект);
	КонецЕсли;
	
КонецФункции

// Формирует представление срока с учетом использования графика работ
Функция ПолучитьПредставлениеСрока(
	Исполнитель,
	СрокИсполненияОбъекта,
	ВидСобытия,
	КНачалуДня = Ложь) Экспорт
	
	ПримерныйСрок = Ложь;
	СрокЗадачи = ПолучитьОсталосьДней(СрокИсполненияОбъекта, , Исполнитель, ПримерныйСрок, КНачалуДня);
	
	ПредставлениеСрока = "";
	ПодписьДней = ДелопроизводствоКлиентСервер.ПолучитьПодписьДней(СрокЗадачи);
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи Тогда
		
		Если ПодписьДней = НСтр("ru = 'день'") Тогда
			
			ПодписьНачало = НСтр("ru = 'Остался'");
			
		Иначе
			
			ПодписьНачало = НСтр("ru = 'Осталось'");
			
		КонецЕсли;
		
		ПредставлениеСрока =
			ПодписьНачало + " "
			+ Строка(СрокЗадачи) + " "
			+ ПодписьДней + " "
			+ НСтр("ru = 'на задачу'");
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача Тогда
		
		Если СрокЗадачи = 0 Тогда
			
			ПредставлениеСрока = НСтр("ru = 'Задача просрочена'");
			
		Иначе
			
			ПредставлениеСрока =
				НСтр("ru = 'Задача просрочена на'") + " "
				+ Строка(СрокЗадачи) + " "
				+ ПодписьДней;
			
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора Тогда
		
		Если СрокЗадачи = 0 Тогда
			
			ПредставлениеСрока = НСтр("ru = 'Задача от меня просрочена'");
			
		Иначе
			
			ПредставлениеСрока =
				НСтр("ru = 'Задача от меня просрочена на'") + " "
				+ Строка(СрокЗадачи) + " "
				+ ПодписьДней;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПримерныйСрок Тогда
		ТекстПримерныйСрок = НСтр("ru = 'Срок примерный'");
		ПредставлениеСрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 (%2)", ПредставлениеСрока, ТекстПримерныйСрок);
	КонецЕсли;
	
	Возврат ПредставлениеСрока;
	
КонецФункции

// Возвращает строку для события журнала регистрации
Функция СобытиеЖурналаРегистрации() Экспорт
	
	СобытиеЖурналаРегистрации = НСтр("ru = 'Уведомление о новых событиях'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Возврат СобытиеЖурналаРегистрации;
	
КонецФункции

// Формирует текстовое представление задачи
Функция СформироватьПредставлениеЗадачи(
	Задача,
	ВидСобытия,
	ДополнительноеОписание) Экспорт
	
	ИспользоватьДатуИВремяВСрокахЗадач = Ложь;//ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	НадписьНеУказанСрок = НСтр("ru = 'не указан'");
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматДаты = СтрШаблон("ДЛФ=DDT; ДП='%1'", НадписьНеУказанСрок);
	Иначе
		ФорматДаты = СтрШаблон("ДЛФ=DD; ДП='%1'", НадписьНеУказанСрок);
	КонецЕсли;
	
	ПредставлениеЗадачи = "";
	
	ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Задача'"),
		Задача.Ссылка);
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора Тогда
		
		ПредставлениеСрока = ПолучитьПредставлениеСрока(
			Задача.Исполнитель,
			Задача.СрокИсполнения,
			ВидСобытия);
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ПредставлениеЗадачи,
			Символы.ПС,
			ПредставлениеСрока);
		
	КонецЕсли;
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
		
		Если ЗначениеЗаполнено(ДополнительноеОписание) Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				ПредставлениеЗадачи,
				Символы.ПС,
				ДополнительноеОписание);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидСобытия <> Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
		ДобавитьРеквизитКСтроке(
			ПредставлениеЗадачи,
			НСтр("ru = 'Описание'"),
			Задача.Описание);
	КонецЕсли;
	
	ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Крайний срок'"),
		Формат(Задача.Срок, ФорматДаты));
	ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Исполнитель'"),
		Задача.Исполнитель);
	ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Роль'"),
		Задача.Исполнитель.Роль);
	
	Если ЗначениеЗаполнено(Задача.ДатаСтатуса) И Задача.Статус = Перечисления.СтатусыЗадач.Завершена Тогда
		ДобавитьРеквизитКСтроке(
			ПредставлениеЗадачи,
			НСтр("ru = 'Выполнено'"),
			Формат(Задача.ДатаСтатуса, ФорматДаты));
	КонецЕсли;
	
	ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Комментарий'"),
		Задача.РезультатВыполнения);
	//ДобавитьРеквизитКСтроке(
	//	ПредставлениеЗадачи,
	//	НСтр("ru = 'Автор'"),
	//	Задача.Автор);
	ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Контактное лицо'"),
		Задача.КонтактноеЛицоЗаказчика);
	
	ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Ссылка'"),
		ПолучитьНавигационнуюСсылкуУведомления(Задача));
	
	Возврат ПредставлениеЗадачи;
	
КонецФункции

// Формирует текстовое представление объекта.
//
// Параметры:
//  Объект - СправочникСсылка, ДокументСсылка - Объект, по которому формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление объекта.
//
Функция СформироватьПредставлениеОбъекта(Объект, ВидСобытия, ПолучательУведомления, ДополнительноеОписание) Экспорт
	
	ПредставлениеОбъекта = РаботаСУведомлениямиПереопределяемый.СформироватьПредставлениеОбъекта(
		Объект,
		ВидСобытия,
		ПолучательУведомления,
		ДополнительноеОписание);
	Если ЗначениеЗаполнено(ПредставлениеОбъекта) Тогда
		Возврат ПредставлениеОбъекта;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеФайла(
			Объект,
			ВидСобытия,
			ДополнительноеОписание);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.Задачи") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеЗадачи(
			Объект,
			ВидСобытия,
			ДополнительноеОписание);
		
	Иначе
		
		ПредставлениеТипа = Строка(Объект.Ссылка);
		ДобавитьРеквизитКСтроке(
			ПредставлениеОбъекта,
			ПредставлениеТипа,
			Объект.Ссылка);
		ДобавитьРеквизитКСтроке(
			ПредставлениеОбъекта,
			НСтр("ru = 'Ссылка'"),
			ПолучитьНавигационнуюСсылкуУведомления(Объект));
		
	КонецЕсли;
	
	Возврат ПредставлениеОбъекта;
	
КонецФункции

// Формирует уведомления по событию с группировкой по объекту подписки.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназанчено увдеомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
Процедура СформироватьУведомленияГруппировкаПоОбъектуПодписки(
	ПолучательУведомления,
	СпособУведомления,
	ВидСобытия,
	Уведомления,
	СформированныеУведомления) Экспорт
	
	Отбор = Новый Структура();
	Отбор.Вставить("Пользователь", ПолучательУведомления);
	Отбор.Вставить("СпособУведомления", СпособУведомления);
	Отбор.Вставить("ВидСобытия", ВидСобытия);
	УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
	
	УведомленияПодписки = Новый Массив;
	ДополнительныеОписания = Новый Соответствие;
	ОбъектыПодписки = Новый Массив;
	Для Каждого Уведомление Из УведомленияПользователя Цикл
		
		Если ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
			ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
		КонецЕсли;
		
		ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
		
	КонецЦикла;
	
	Для Каждого ОбъектПодписки Из ОбъектыПодписки Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("Пользователь", ПолучательУведомления);
		Отбор.Вставить("СпособУведомления", СпособУведомления);
		Отбор.Вставить("ВидСобытия", ВидСобытия);
		Отбор.Вставить("ОбъектПодписки", ОбъектПодписки);
		УведомленияПользователяПоВидуИПоОбъектуПодписки = Уведомления.НайтиСтроки(Отбор);
		
		ОбъектыУведомления = Новый Массив;
		Для Каждого Уведомление Из УведомленияПользователяПоВидуИПоОбъектуПодписки Цикл
			Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
				ОбъектыУведомления.Добавить(Уведомление.Объект);
			КонецЕсли;
		КонецЦикла;
		
		Если ОбъектыУведомления.Количество() > 0 Тогда
			ДанныеУведомления = ДанныеУведомленияПоОбъектам(
				ОбъектПодписки,
				ВидСобытия,
				ОбъектыУведомления,
				ПолучательУведомления,
				СпособУведомления,
				ДополнительныеОписания);
			СформированноеУведомление = СформированныеУведомления.Добавить();
			ЗаполнитьЗначенияСвойств(СформированноеУведомление, ДанныеУведомления);
			СформированноеУведомление.Пользователь = ПолучательУведомления;
			СформированноеУведомление.СпособУведомления = СпособУведомления;
			СформированноеУведомление.ВидСобытия = ВидСобытия;
			СформированноеУведомление.Уведомления = УведомленияПодписки;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СформированноеУведомление.ОбъектыУведомления,
				ОбъектыУведомления);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует уведомления по событию с группировкой по событию.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназанчено увдеомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
Процедура СформироватьУведомленияГруппировкаПоСобытию(
	ПолучательУведомления,
	СпособУведомления,
	ВидСобытия,
	Уведомления,
	СформированныеУведомления) Экспорт
	
	Отбор = Новый Структура();
	Отбор.Вставить("Пользователь", ПолучательУведомления);
	Отбор.Вставить("СпособУведомления", СпособУведомления);
	Отбор.Вставить("ВидСобытия", ВидСобытия);
	УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
	
	УведомленияПодписки = Новый Массив;
	ДополнительныеОписания = Новый Соответствие;
	ОбъектыУведомления = Новый Массив;
	
	Для Каждого Уведомление Из УведомленияПользователя Цикл
		
		Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
			ОбъектыУведомления.Добавить(Уведомление.Объект);
			ДополнительныеОписания.Вставить(Уведомление.Объект, Уведомление.ДополнительноеОписание);
		КонецЕсли;
		
		ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
		
	КонецЦикла;
	
	Если ОбъектыУведомления.Количество() > 0 Тогда
		ДанныеУведомления = ДанныеУведомленияПоОбъектам(
			Неопределено,
			ВидСобытия,
			ОбъектыУведомления,
			ПолучательУведомления,
			СпособУведомления,
			ДополнительныеОписания);
		СформированноеУведомление = СформированныеУведомления.Добавить();
		ЗаполнитьЗначенияСвойств(СформированноеУведомление, ДанныеУведомления);
		СформированноеУведомление.Пользователь = ПолучательУведомления;
		СформированноеУведомление.СпособУведомления = СпособУведомления;
		СформированноеУведомление.ВидСобытия = ВидСобытия;
		СформированноеУведомление.Уведомления = УведомленияПодписки;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СформированноеУведомление.ОбъектыУведомления,
			ОбъектыУведомления);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Фомирует список событий, по которым необходимо группировать уведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователь - Получатель уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ уведомления.
//
// Возвращаемое значение:
//  Массив - Виды бизнес-событий для группировки.
//
Функция ВидыСобытийДляГруппировки(ПолучательУведомления, СпособУведомления)
	
	ВидыСобытий = Новый Массив;
	
	Если СпособУведомления = Перечисления.СпособыУведомления.ПоПочте Тогда
		
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеЗадачи);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеФайла);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаЗадача);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора);
		
	ИначеЕсли СпособУведомления = Перечисления.СпособыУведомления.Окном Тогда
		
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаЗадача);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора);
		
	КонецЕсли;
	
	РаботаСУведомлениямиПереопределяемый.ВидыСобытийДляГруппировки(ВидыСобытий, ПолучательУведомления, СпособУведомления);
	
	Возврат ВидыСобытий;
	
КонецФункции

// Считывает задачи активные на указанную дату с подписчиками
Функция ВыбратьАктивныеЗадачиСПодписчиками(АктивныеНаДату)
	
	//МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//ПоместитьПодписчиковВоВременнуюТаблицу(
	//	МенеджерВременныхТаблиц,
	//	Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
		|	ЗадачаИсполнителя.Срок КАК СрокИсполнения
		|ПОМЕСТИТЬ АктивныеЗадачи
		|ИЗ
		|	Документ.Задачи КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.Срок > &Дата
		|	И ЗадачаИсполнителя.Срок <> ДАТАВРЕМЯ(1, 1, 1)
		|	И (ЗадачаИсполнителя.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗадач.Завершена)
		|			И ЗадачаИсполнителя.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗадач.Отменена))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиУведомлений.Объект КАК ОбъектПодписки,
		|	НастройкиУведомлений.Пользователь КАК Подписчик
		|ПОМЕСТИТЬ ОбъектыСПодпиской
		|ИЗ
		|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
		|ГДЕ
		|	НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
		|	И НастройкиУведомлений.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗадачи)
		|	И НастройкиУведомлений.Значение = ИСТИНА
		|	И НастройкиУведомлений.Объект <> НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктивныеЗадачи.Ссылка КАК Задача,
		//|	Подписчики.ПолучательУведомления КАК Подписчик,
		|	АктивныеЗадачи.Исполнитель КАК Подписчик,
		|	АктивныеЗадачи.СрокИсполнения КАК СрокИсполнения,
		|	АктивныеЗадачи.Ссылка КАК ОбъектПодписки
		|ПОМЕСТИТЬ АктивныеЗадачиСПодпиской
		|ИЗ
		|	АктивныеЗадачи КАК АктивныеЗадачи
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
		//|		ПО АктивныеЗадачи.Исполнитель = Подписчики.Подписчик
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АктивныеЗадачи.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	АктивныеЗадачи.СрокИсполнения,
		|	АктивныеЗадачи.Ссылка
		|ИЗ
		|	АктивныеЗадачи КАК АктивныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО АктивныеЗадачи.Ссылка = ОбъектыСПодпиской.ОбъектПодписки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АктивныеЗадачи.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	АктивныеЗадачи.СрокИсполнения,
		|	АктивныеЗадачи.Исполнитель
		|ИЗ
		|	АктивныеЗадачи КАК АктивныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО АктивныеЗадачи.Исполнитель = ОбъектыСПодпиской.ОбъектПодписки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктивныеЗадачиСПодпиской.Задача КАК Задача,
		|	АктивныеЗадачиСПодпиской.Подписчик КАК Подписчик,
		|	АктивныеЗадачиСПодпиской.СрокИсполнения КАК СрокИсполнения,
		|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
		|	АктивныеЗадачиСПодпиской.ОбъектПодписки КАК ОбъектПодписки
		|ИЗ
		|	АктивныеЗадачиСПодпиской КАК АктивныеЗадачиСПодпиской
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗадачи))
		|			И АктивныеЗадачиСПодпиской.Задача = ОбработанныеУведомления.ОбъектУведомления
		|			И АктивныеЗадачиСПодпиской.Подписчик = ОбработанныеУведомления.Пользователь";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", АктивныеНаДату);
	//Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗадачиСПодписчиками = Запрос.Выполнить().Выгрузить();
	//МенеджерВременныхТаблиц.Закрыть();
	
	Возврат ЗадачиСПодписчиками;
	
КонецФункции

// Считывает задачи просроченные на указанную дату
Функция ВыбратьПросроченныеЗадачиСПодписчиками(СрокИсполнения)
	
	//МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//ПоместитьПодписчиковВоВременнуюТаблицу(
	//	МенеджерВременныхТаблиц,
	//	Перечисления.СобытияУведомлений.ПросроченаЗадача);
	//ПоместитьПодписчиковВоВременнуюТаблицу(
	//	МенеджерВременныхТаблиц,
	//	Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора,
	//	"ПодписчикиАвторы");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
		//|	ЗадачаИсполнителя.Автор КАК Автор,
		|	ЗадачаИсполнителя.Срок КАК СрокИсполнения
		|ПОМЕСТИТЬ ПросроченныеЗадачи
		|ИЗ
		|	Документ.Задачи КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.Срок <= &Дата
		|	И ЗадачаИсполнителя.Срок <> ДАТАВРЕМЯ(1, 1, 1)
		|	И (ЗадачаИсполнителя.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗадач.Завершена)
		|			И ЗадачаИсполнителя.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗадач.Отменена))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиУведомлений.Объект КАК ОбъектПодписки,
		|	НастройкиУведомлений.Пользователь КАК Подписчик
		|ПОМЕСТИТЬ ОбъектыСПодпиской
		|ИЗ
		|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
		|ГДЕ
		|	НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
		|	И НастройкиУведомлений.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача)
		|	И НастройкиУведомлений.Значение = ИСТИНА
		|	И НастройкиУведомлений.Объект <> НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	НастройкиУведомлений.Объект КАК ОбъектПодписки,
		//|	НастройкиУведомлений.Пользователь КАК Подписчик
		//|ПОМЕСТИТЬ ОбъектыСПодпискойАвтор
		//|ИЗ
		//|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
		//|ГДЕ
		//|	НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
		//|	И НастройкиУведомлений.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадачаАвтора)
		//|	И НастройкиУведомлений.Значение = ИСТИНА
		//|	И НастройкиУведомлений.Объект <> НЕОПРЕДЕЛЕНО
		//|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПросроченныеЗадачи.Ссылка КАК Задача,
		|	ПросроченныеЗадачи.Исполнитель КАК Подписчик,
		|	ПросроченныеЗадачи.СрокИсполнения КАК СрокИсполнения,
		|	ПросроченныеЗадачи.Ссылка КАК ОбъектПодписки,
		|	ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача) КАК ВидСобытия
		|ПОМЕСТИТЬ ПросроченныеЗадачиСПодпиской
		|ИЗ
		|	ПросроченныеЗадачи КАК ПросроченныеЗадачи
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Подписчики КАК Подписчики
		//|		ПО ПросроченныеЗадачи.Исполнитель = Подписчики.Подписчик
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеЗадачи.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	ПросроченныеЗадачи.СрокИсполнения,
		|	ПросроченныеЗадачи.Ссылка,
		|	ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача)
		|ИЗ
		|	ПросроченныеЗадачи КАК ПросроченныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО ПросроченныеЗадачи.Ссылка = ОбъектыСПодпиской.ОбъектПодписки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеЗадачи.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	ПросроченныеЗадачи.СрокИсполнения,
		|	ПросроченныеЗадачи.Исполнитель,
		|	ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача)
		|ИЗ
		|	ПросроченныеЗадачи КАК ПросроченныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО ПросроченныеЗадачи.Исполнитель = ОбъектыСПодпиской.ОбъектПодписки
		|
		//|ОБЪЕДИНИТЬ
		//|
		//|ВЫБРАТЬ
		//|	ПросроченныеЗадачи.Ссылка,
		//|	ПодписчикиАвторы.ПолучательУведомления,
		//|	ПросроченныеЗадачи.СрокИсполнения,
		//|	ПросроченныеЗадачи.Ссылка,
		//|	ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадачаАвтора)
		//|ИЗ
		//|	ПросроченныеЗадачи КАК ПросроченныеЗадачи
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодписчикиАвторы КАК ПодписчикиАвторы
		//|		ПО ПросроченныеЗадачи.Автор = ПодписчикиАвторы.Подписчик
		//|ОБЪЕДИНИТЬ
		//|
		//|ВЫБРАТЬ
		//|	ПросроченныеЗадачи.Ссылка,
		//|	ОбъектыСПодпискойАвтор.Подписчик,
		//|	ПросроченныеЗадачи.СрокИсполнения,
		//|	ПросроченныеЗадачи.Автор,
		//|	ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадачаАвтора)
		//|ИЗ
		//|	ПросроченныеЗадачи КАК ПросроченныеЗадачи
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпискойАвтор КАК ОбъектыСПодпискойАвтор
		//|		ПО ПросроченныеЗадачи.Автор = ОбъектыСПодпискойАвтор.ОбъектПодписки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПросроченныеЗадачиСПодпиской.Задача КАК Задача,
		|	ПросроченныеЗадачиСПодпиской.Подписчик КАК Подписчик,
		|	ПросроченныеЗадачиСПодпиской.СрокИсполнения КАК СрокИсполнения,
		|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
		|	ПросроченныеЗадачиСПодпиской.ОбъектПодписки КАК ОбъектПодписки,
		|	ПросроченныеЗадачиСПодпиской.ВидСобытия КАК ВидСобытия
		|ИЗ
		|	ПросроченныеЗадачиСПодпиской КАК ПросроченныеЗадачиСПодпиской
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|		ПО ПросроченныеЗадачиСПодпиской.ВидСобытия = ОбработанныеУведомления.ВидСобытия
		|			И ПросроченныеЗадачиСПодпиской.Задача = ОбработанныеУведомления.ОбъектУведомления
		|			И ПросроченныеЗадачиСПодпиской.Подписчик = ОбработанныеУведомления.Пользователь";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", СрокИсполнения);
	//Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ПросроченныеЗадачи = Запрос.Выполнить().Выгрузить();
	//МенеджерВременныхТаблиц.Закрыть();
	
	Возврат ПросроченныеЗадачи;
	
КонецФункции

// Добавляет бизнес-процесс в массив и заполняет таблицу родителей
Процедура ДобавитьВМассивСЗаполнениемРодителей(
	ОбъектПодписки,
	ОбъектыПодписки,
	БизнесПроцессыРодители,
	ОтказыОтПодписки)
	
	ОбъектыПодписки.Добавить(ОбъектПодписки);
	
КонецПроцедуры

// Добавляет бизнес-процесс в массив с проверкой подписки, дочерних и ведущих процессов.
// Если в массиве уже есть дочерние бизнес-процессы с подпиской, то удаляет их.
// Если в массиве уже есть ведущий бизнес-процесс с подпиской, то не добавляет.
Процедура ДобавитьВМассивСПроверкойПодписки(
	ОбъектУведомления,
	ОбъектПодписки,
	ОбъектыПодписки,
	БизнесПроцессыРодители,
	ОтказыОтПодписки,
	ОбъектыУведомленияСПодпиской,
	ОбъектыУведомленияСОтказом)
	
	Если ЕстьОтказОтПодпискиВИерархии(ОбъектУведомления, ОбъектПодписки, ОтказыОтПодписки) Тогда
		
		Если ОбъектыУведомленияСПодпиской.Найти(ОбъектУведомления) = Неопределено Тогда
			ДобавитьЗначениеВМассив(ОбъектУведомления, ОбъектыУведомленияСОтказом);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЯвляетсяПотомкомОбъектовПодписки(ОбъектПодписки, ОбъектыПодписки, ОтказыОтПодписки) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Родитель", ОбъектПодписки);
	НайденныеПроцессыПотомки = БизнесПроцессыРодители.НайтиСтроки(Отбор);
	Для Каждого СтрокаНайденныйПроцессПотомок Из НайденныеПроцессыПотомки Цикл
		
		ПроцессПотомок = СтрокаНайденныйПроцессПотомок.ОбъектПодписки;
		
		ИндексПотомкаВМассиве = ОбъектыПодписки.Найти(ПроцессПотомок);
		Если ИндексПотомкаВМассиве <> Неопределено Тогда
			ОбъектыПодписки.Удалить(ИндексПотомкаВМассиве);
		КонецЕсли;
		
		Отбор = Новый Структура();
		Отбор.Вставить("ОбъектПодписки", ПроцессПотомок);
		СтрокиПроцессаПотомка = БизнесПроцессыРодители.НайтиСтроки(Отбор);
		Для Каждого СтрокаПроцессаПотомка Из СтрокиПроцессаПотомка Цикл
			БизнесПроцессыРодители.Удалить(СтрокаПроцессаПотомка);
		КонецЦикла;
		
	КонецЦикла;
	
	ИндексВМассивеОтказов = ОбъектыУведомленияСОтказом.Найти(ОбъектУведомления);
	Если ИндексВМассивеОтказов <> Неопределено Тогда
		ОбъектыУведомленияСОтказом.Удалить(ИндексВМассивеОтказов);
	КонецЕсли;
	
	ДобавитьЗначениеВМассив(ОбъектУведомления, ОбъектыУведомленияСПодпиской);
	
	ДобавитьВМассивСЗаполнениемРодителей(
		ОбъектПодписки,
		ОбъектыПодписки,
		БизнесПроцессыРодители,
		ОтказыОтПодписки);
	
КонецПроцедуры

// Добавляет значение в массив, если такого значения в нем еще нет
Процедура ДобавитьЗначениеВМассив(Значение, Массив, ДобавленоЗначениеВМассив = Ложь)
	
	Если Массив.Найти(Значение) = Неопределено Тогда
		Массив.Добавить(Значение);
		ДобавленоЗначениеВМассив = Истина;
	Иначе
		ДобавленоЗначениеВМассив = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Определяет тип объекта и вызывает соответствующее добавление уведомления
Процедура ДобавитьУведомлениеПоОбъекту(
	ПроизошедшееСобытие,
	ОбъектПодписки,
	ВидСобытия,
	Объект,
	ОбработанныеОбъекты = Неопределено)
	
	Если Объект = Неопределено Тогда
		
		Объект = ОбъектПодписки;
		
	КонецЕсли;
	
	Если ОбработанныеОбъекты = Неопределено Тогда
		ОбработанныеОбъекты = Новый Массив;
	КонецЕсли;
	Если ОбработанныеОбъекты.Найти(ОбъектПодписки) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбработанныеОбъекты.Добавить(ОбъектПодписки);
	
	Если ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
		
		ДобавитьУведомленияПоСообщению(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
		
		ДобавитьУведомленияПоТеме(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Проекты") Тогда
		
		ДобавитьУведомленияПоПроекту(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("ДокументСсылка.Задачи") Тогда
		
		ДобавитьУведомленияПоЗадачеИсполнителя(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект, ОбработанныеОбъекты);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Файлы") Тогда
		
		ДобавитьУведомленияПоФайлу(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		
		ДобавитьУведомленияПоПапкеФайлов(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Пользователи") Тогда
		
		ДобавитьУведомленияПоПользователю(ПроизошедшееСобытие, ОбъектПодписки, ВидСобытия, Объект);
		
	Иначе
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(ВидСобытия, Объект, ОбъектПодписки);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по задаче исполнителя
Процедура ДобавитьУведомленияПоЗадачеИсполнителя(
	ПроизошедшееСобытие,
	ЗадачаИсполнителя,
	ВидСобытия,
	Объект,
	ОбработанныеОбъекты)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи Тогда
		
		Если Документы.Задачи.ЗадачаЗакрыта(ЗадачаИсполнителя) Тогда
			Возврат;
		КонецЕсли;
		
		//Оповещение контактного лица заказчика
		Если ПроизошедшееСобытие.Свойство("УведомитьЗаказчика") И ЗначениеЗаполнено(ПроизошедшееСобытие.УведомитьЗаказчика) Тогда
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытиюЗаказчику(
				ПроизошедшееСобытие.УведомитьЗаказчика,
				ВидСобытия,
				Объект,
				ЗадачаИсполнителя);
		Иначе
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоЗадаче(
				ВидСобытия,
				Объект,
				ЗадачаИсполнителя);
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			ЗадачаИсполнителя);
			
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
		
		//ПараметрыСобытия = ПолучитьПараметрыСобытия(ПроизошедшееСобытие);
		
		ДополнительноеОписание = "";
		Если ПроизошедшееСобытие.Свойство("БылИсполнитель")
			И ПроизошедшееСобытие.Свойство("СталИсполнитель")
			И ЗначениеЗаполнено(ПроизошедшееСобытие.БылИсполнитель)
			И ЗначениеЗаполнено(ПроизошедшееСобытие.СталИсполнитель) Тогда
			
			
			Если ПроизошедшееСобытие.Свойство("Автоперенаправление") И ПроизошедшееСобытие.Автоперенаправление Тогда
				Действие = НСтр("ru = 'Автоперенаправление'");
			Иначе
				Действие = НСтр("ru = 'Перенаправлена'");
			КонецЕсли;
			
			ДополнительноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 от %2 к %3.'"),
				Действие,
				ПроизошедшееСобытие.БылИсполнитель,
				ПроизошедшееСобытие.СталИсполнитель);
			
			Если ЗадачаИсполнителя.Исполнитель <> ПроизошедшееСобытие.БылИсполнитель Тогда
				РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
					ПроизошедшееСобытие.БылИсполнитель,
					Перечисления.СобытияУведомлений.ПеренаправлениеМоейЗадачи,
					Объект,
					ЗадачаИсполнителя,
					ДополнительноеОписание);
			КонецЕсли;
			
		КонецЕсли;
		
		//РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоЗадаче(
		//	Справочники.ВидыБизнесСобытий.СозданиеЗадачи,
		//	Объект,
		//	ЗадачаИсполнителя);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			ЗадачаИсполнителя,
			ДополнительноеОписание);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
		
		// Если была выполнена эта задача - тогда уведомим подписчиков
		Если ЗадачаИсполнителя = Объект Тогда
			//Оповещение контактного лица заказчика
			Если ПроизошедшееСобытие.Свойство("УведомитьЗаказчика") И ЗначениеЗаполнено(ПроизошедшееСобытие.УведомитьЗаказчика) Тогда
				РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытиюЗаказчику(
					ПроизошедшееСобытие.УведомитьЗаказчика,
					ВидСобытия,
					Объект,
					ЗадачаИсполнителя);
			Иначе
				РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
					ЗадачаИсполнителя.Исполнитель,
					Перечисления.СобытияУведомлений.ВыполнениеМоейЗадачи,
					Объект,
					ЗадачаИсполнителя);
			КонецЕсли;
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
				ВидСобытия,
				Объект,
				ЗадачаИсполнителя);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на обсуждение задачи
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			ЗадачаИсполнителя.Автор,
			ВидСобытия,
			Объект,
			ЗадачаИсполнителя);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоЗадаче(
			ВидСобытия,
			Объект,
			ЗадачаИсполнителя);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			ЗадачаИсполнителя);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.УведомлениеПрограммы И ПроизошедшееСобытие.Свойство("ШаблонПисьма")
		И ЗначениеЗаполнено(ПроизошедшееСобытие.ШаблонПисьма) Тогда
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоШаблону(ПроизошедшееСобытие);
		
	Иначе
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			ЗадачаИсполнителя);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по назначению ответственного.
//
// Параметры:
//   ПроизошедшееСобытие - запись РС ПроизошедшиеБизнесСобытия или выборка из него.
//   Документ - СправочникСсылка.<...>Документы - документ-источник события.
//
Процедура ДобавитьУведомленияПоНазначениюОтветственного(ПроизошедшееСобытие, Документ)
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Документ,
		"Ответственный, ВидДокумента");
	
	Ответственный = РеквизитыДокумента.Ответственный;
	НазначенныйОтветственный = ПроизошедшееСобытие.КонтекстСобытия.Получить();
	Если Ответственный <> НазначенныйОтветственный // возможно, событие устарело
		Или Ответственный = ПроизошедшееСобытие.Автор Тогда // возможно, пользователь назначил сам себя
		Возврат;
	КонецЕсли;
	
	ВидДокумента = РеквизитыДокумента.ВидДокумента;
	ВидСобытия = Справочники.ВидыБизнесСобытий.НазначениеОтветственного;
	
	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
		Ответственный,
		ВидСобытия,
		Документ,
		ВидДокумента);
	
	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия,
		Документ,
		ВидДокумента,,
		Ответственный);
	
КонецПроцедуры

// Добавляет уведомление по папке файлов
Процедура ДобавитьУведомленияПоПапкеФайлов(ПроизошедшееСобытие, Папка, ВидСобытия, Объект) 
	
	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия,
		Объект,
		Папка);
	
КонецПроцедуры

// Добавляет уведомление по пользователю
Процедура ДобавитьУведомленияПоПользователю(
		ПроизошедшееСобытие, Пользователь, ВидСобытия, Объект)
	
	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		ВидСобытия,
		Объект,
		Пользователь);
	
КонецПроцедуры

// Добавляет уведомление по проекту
Процедура ДобавитьУведомленияПоПроекту(ПроизошедшееСобытие, Проект, ВидСобытия, Объект)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		// Объект уведомления является ответом на обсуждение проекта
		//Для Каждого ИсполнительПроектнойКоманды Из Проект.ПроектнаяКоманда Цикл
		//	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
		//		ИсполнительПроектнойКоманды.Исполнитель,
		//		ВидСобытия,
		//		Объект,
		//		Проект);
		//КонецЦикла;
		//РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
		//	Проект.Руководитель,
		//	ВидСобытия,
		//	Объект,
		//	Проект);
		//РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
		//	ВидСобытия,
		//	Объект,
		//	Проект);
		
	Иначе
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			Проект);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по сообщению
Процедура ДобавитьУведомленияПоСообщению(
	ПроизошедшееСобытие,
	Сообщение,
	ВидСобытия,
	Объект)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		Если Сообщение = Объект Тогда
			
			// Объект уведомления является самим сообщением
			Если ЗначениеЗаполнено(Сообщение.Родитель) Тогда
				ДобавитьУведомлениеПоОбъекту(
					ПроизошедшееСобытие,
					Сообщение.Родитель,
					ВидСобытия,
					Объект);
			КонецЕсли;
			
			ДобавитьУведомлениеПоОбъекту(
				ПроизошедшееСобытие,
				Сообщение.ВладелецСообщения,
				ВидСобытия,
				Объект);
			
		Иначе
			
			// Объект уведомления является ответом на сообщение
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
				Сообщение.Автор,
				ВидСобытия,
				Объект,
				Сообщение);
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
				ВидСобытия,
				Объект,
				Сообщение);
			
			Если ЗначениеЗаполнено(Сообщение.Родитель) Тогда
				ДобавитьУведомлениеПоОбъекту(
					ПроизошедшееСобытие,
					Сообщение.Родитель,
					ВидСобытия,
					Объект);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			Сообщение);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по теме
Процедура ДобавитьУведомленияПоТеме(ПроизошедшееСобытие, Тема, ВидСобытия, Объект)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на тему
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			Тема.Автор,
			ВидСобытия,
			Объект,
			Тема);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			Тема);
		
		Если ЗначениеЗаполнено(Тема.Документ) Тогда
			ДобавитьУведомлениеПоОбъекту(ПроизошедшееСобытие, Тема.Документ, ВидСобытия, Объект);
		КонецЕсли;
		
	Иначе
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			Тема);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по файлу
Процедура ДобавитьУведомленияПоФайлу(ПроизошедшееСобытие, Файл, ВидСобытия, Объект) 
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
		
		ДобавитьУведомлениеПоОбъекту(
			ПроизошедшееСобытие,
			Файл.ВладелецФайла,
			ВидСобытия,
			Объект);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на обсуждение файла
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			Файл.Автор,
			ВидСобытия,
			Объект,
			Файл);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(
			Файл.Редактирует,
			ВидСобытия,
			Объект,
			Файл);
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			Файл);
		
	Иначе
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоОбъекту(
			ВидСобытия,
			Объект,
			Файл);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие отказа от подписки в иерархии
Функция ЕстьОтказОтПодпискиВИерархии(ОбъектУведомления, ОбъектПодписки, ОтказыОтПодписки, ОбработанныеОбъекты = Неопределено)
	
	Если ОбработанныеОбъекты = Неопределено Тогда
		ОбработанныеОбъекты = Новый Массив;
	КонецЕсли;
	Если ОбработанныеОбъекты.Найти(ОбъектУведомления) <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	ОбработанныеОбъекты.Добавить(ОбъектУведомления);
	
	Если ОбъектУведомления = ОбъектПодписки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(ОбъектУведомления) = Тип("ДокументСсылка.Задачи") Тогда
		
		ОтказОтПодпискиВИерархии = Ложь;
		
		Возврат ОтказОтПодпискиВИерархии;
		
	КонецЕсли;
	
	Если ОтказыОтПодписки.Найти(ОбъектУведомления) <> Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ЕстьОтказПоВедущейЗадаче = Ложь;
	ЕстьОтказПоГлавнойЗадаче = Ложь;
	
	Возврат ЕстьОтказПоВедущейЗадаче Или ЕстьОтказПоГлавнойЗадаче;
	
КонецФункции

// Производит отключение от почтового сервера, если соединение с почтовым сервером открыто.
//
// Параметры:
//  Соединение - ИнтернетПочта - Соединение с почтовым сервером.
//
Процедура ЗакрытьСоединениеСПочтовымСервером(Соединение)
	
	Если Соединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Соединение.Отключиться();
	Исключение
		ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка при закрытии соединения с почтовым сервером: %1'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецПопытки;
	Соединение = Неопределено;
	
КонецПроцедуры

// Отправляет уведомление окном.
//
// Параметры:
//  СформированноеУведомление - Структура - Сформированное уведомление.
// 
// Возвращаемое значение:
//  Булево - Отправка выполнена успешно.
//
Функция ОтправитьУведомлениеОкном(СформированноеУведомление)
	
	ВидУведомления = Перечисления.СобытияУведомлений.ОпределитьВидУведомления(СформированноеУведомление.ВидСобытия);
	Если ВидУведомления = Перечисления.ВидыУведомленийПрограммы.Ошибка Тогда
		ТекстУведомления = СформированноеУведомление.ТекстУведомления;
	Иначе
		ТекстУведомления = СтрШаблон("<b>%1</b>
			|%2",
			СформированноеУведомление.ТемаУведомления,
			СформированноеУведомление.ТекстУведомления);
	КонецЕсли;
	ТекстУведомления = ТекстУведомленияВHTML(ТекстУведомления);
	Если СформированноеУведомление.ОбъектыУведомления.Количество() = 1 Тогда
		Объект = СформированноеУведомление.ОбъектыУведомления[0];
	КонецЕсли;
	
	Попытка
		Справочники.УведомленияПрограммы.Добавить(
			СформированноеУведомление.ТемаУведомления,
			ТекстУведомления,
			ВидУведомления,
			СформированноеУведомление.Пользователь,
			Объект);
	Исключение
		ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка при отправке уведомления окном: %1'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Отправляет уведомление по почте.
//
// Параметры:
//  СформированноеУведомление - Структура - Сформированное уведомление.
//  Соединение - ИнтернетПочта - Соединение с почтовым сервером для рассылки уведомлений.
// 
// Возвращаемое значение:
//  Булево - Отправка выполнена успешно.
//
Функция ОтправитьУведомлениеПоПочте(СформированноеУведомление, Соединение)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПользователиКонтактнаяИнформация.Ссылка КАК Пользователь,
		|	ПользователиКонтактнаяИнформация.Представление КАК Емаил
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|ГДЕ
		|	ПользователиКонтактнаяИнформация.Ссылка = &Пользователь
		|	И НЕ ПользователиКонтактнаяИнформация.Ссылка.ПометкаУдаления
		|	И НЕ ПользователиКонтактнаяИнформация.Ссылка.Недействителен
		|	И НЕ ПользователиКонтактнаяИнформация.Ссылка.Служебный
		|	И ПользователиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсполнителиКонтактнаяИнформация.Ссылка,
		|	ИсполнителиКонтактнаяИнформация.Представление
		|ИЗ
		|	Справочник.КонтактныеЛицаЗаказчиков.КонтактнаяИнформация КАК ИсполнителиКонтактнаяИнформация
		|ГДЕ
		|	ИсполнителиКонтактнаяИнформация.Ссылка = &Пользователь
		|	И НЕ ИсполнителиКонтактнаяИнформация.Ссылка.ПометкаУдаления
		|	И ИсполнителиКонтактнаяИнформация.Ссылка.Актуален
		|	И ИсполнителиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКЛ)";
	Запрос.УстановитьПараметр("Пользователь", СформированноеУведомление.Пользователь);
	
	АдресаЭлектроннойПочты = Новый Массив;
	АдресаЭлектроннойПочтыНРег = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если РаботаСУведомлениямиКлиентСервер.ЭтоКорректныйСпособУведомленияПоПочте(Выборка.Емаил)
			И АдресаЭлектроннойПочтыНРег.Найти(НРег(Выборка.Емаил)) = Неопределено Тогда
			АдресаЭлектроннойПочты.Добавить(Выборка.Емаил);
			АдресаЭлектроннойПочтыНРег.Добавить(НРег(Выборка.Емаил));
		КонецЕсли;
	КонецЦикла;
	
	Если АдресаЭлектроннойПочты.Количество() = 0 Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Уведомление не отправлено, так как не указан почтовый адрес у пользователя %1.'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			Строка(СформированноеУведомление.Пользователь));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,,,
			ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	// Формирование массива вложений.
	Вложения = Новый Массив();
	Если ЗначениеЗаполнено(СформированноеУведомление.Файлы) Тогда
		Для Каждого Вложение Из СформированноеУведомление.Файлы Цикл
			СтруктураВложения = Новый Структура;
			СтруктураВложения.Вставить(
				"Данные", РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(Вложение.Ссылка));
			СтруктураВложения.Вставить("Имя", Вложение.ИмяФайла);
			СтруктураВложения.Вставить("Идентификатор", Неопределено);
			Вложения.Добавить(СтруктураВложения);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ПочтовыйАдресПолучателя Из АдресаЭлектроннойПочты Цикл
		
		Попытка
			
			ПараметрыПисьма = Новый Структура;
			ПараметрыПисьма.Вставить("Тема", СформированноеУведомление.ТемаУведомления);
			ПараметрыПисьма.Вставить("Текст", ТекстУведомленияВHTML(СформированноеУведомление.ТекстУведомления));
			ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
			ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовПочтовыхСообщений.HTML);
			
			Если ЗначениеЗаполнено(Вложения) Тогда
				ПараметрыПисьма.Вставить("Вложения", Новый Массив);
				Для каждого Вложение Из Вложения Цикл
					СтруктураВложения = Новый Структура("Адрес, ИмяФайла");
					СтруктураВложения.Адрес = Вложение.Данные;
					СтруктураВложения.ИмяФайла = Вложение.Имя;
					ПараметрыПисьма.Вложения.Добавить(СтруктураВложения);
				КонецЦикла;
			КонецЕсли;
			
			СообщениеОбОшибке = "";
			Если Соединение = Неопределено Тогда
				Соединение = СоединениеСПочтовымСервером();
			КонецЕсли;
			УведомлениеОтправлено = ЛегкаяПочтаСервер.ОтправитьИнтернетПочта(
				ПараметрыПисьма,
				УчетнаяЗаписьДляРассылки(),,
				СообщениеОбОшибке,
				Соединение);
			Если Не УведомлениеОтправлено Тогда
				ВызватьИсключение СообщениеОбОшибке;
			КонецЕсли;
			
		Исключение
			ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка при отправке уведомления по почте: %1'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
			ЗакрытьСоединениеСПочтовымСервером(Соединение);
			Возврат Ложь;
		КонецПопытки;
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Уведомление успешно отправлено на адрес %1.'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ПочтовыйАдресПолучателя));
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Отправляет уведомления.
//
// Параметры:
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//
Процедура ОтправитьУведомления(СформированныеУведомления)
	
	Соединение = Неопределено;
	Для Каждого СформированноеУведомление Из СформированныеУведомления Цикл
		
		УведомлениеОтправлено = Ложь;
		Если СформированноеУведомление.СпособУведомления = Перечисления.СпособыУведомления.ПоПочте Тогда
			УведомлениеОтправлено = ОтправитьУведомлениеПоПочте(СформированноеУведомление, Соединение);
		ИначеЕсли СформированноеУведомление.СпособУведомления = Перечисления.СпособыУведомления.Окном Тогда
			УведомлениеОтправлено = ОтправитьУведомлениеОкном(СформированноеУведомление);
		КонецЕсли;
		
		Для Каждого Уведомление Из СформированноеУведомление.Уведомления Цикл
			Если УведомлениеОтправлено Тогда
				РегистрыСведений.ОчередьУведомлений.УдалитьУведомление(
					Уведомление.Пользователь,
					Уведомление.ВидСобытия,
					Уведомление.СпособУведомления,
					Уведомление.Объект,
					Уведомление.ОбъектПодписки);
			Иначе
				РегистрыСведений.ОчередьУведомлений.УвеличитьЧислоПопытокОтправки(
					Уведомление.Пользователь,
					Уведомление.ВидСобытия,
					Уведомление.СпособУведомления,
					Уведомление.Объект,
					Уведомление.ОбъектПодписки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	ЗакрытьСоединениеСПочтовымСервером(Соединение);
	
КонецПроцедуры

// Возвращает настройки уведомления о задачах пользователей.
//
// Параметры:
//  МассивПользователей - Массив - Массив пользователей.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Настройки уведомления о задачах.
//
Функция ПолучитьНастройкиУведомленийОЗадачах(МассивПользователей)
	
	НастройкиУведомлений = Новый ТаблицаЗначений;
	НастройкиУведомлений.Колонки.Добавить("Пользователь",
		Новый ОписаниеТипов("СправочникСсылка.Пользователи, СправочникСсылка.КонтактныеЛицаЗаказчиков"));
	НастройкиУведомлений.Колонки.Добавить("СрокУведомления",
		Новый ОписаниеТипов("Число"));
	НастройкиУведомлений.Колонки.Добавить("ЧастотаПриближениеСрока",
		Новый ОписаниеТипов("Число"));
	НастройкиУведомлений.Колонки.Добавить("ЧастотаПросроченныеЗадачи",
		Новый ОписаниеТипов("Число"));
	
	Для Каждого Пользователь Из МассивПользователей Цикл
		НоваяСтрока = НастройкиУведомлений.Добавить();
		НоваяСтрока.Пользователь = Пользователь;
		НоваяСтрока.СрокУведомления = РегистрыСведений.НастройкиУведомлений.ПолучитьСрок(
			Пользователь,
			Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		НоваяСтрока.ЧастотаПриближениеСрока = РегистрыСведений.НастройкиУведомлений.ПолучитьЧастоту(
			Пользователь,
			Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		НоваяСтрока.ЧастотаПросроченныеЗадачи = РегистрыСведений.НастройкиУведомлений.ПолучитьЧастоту(
			Пользователь,
			Перечисления.СобытияУведомлений.ПросроченаЗадача);
	КонецЦикла;
	
	Возврат НастройкиУведомлений;
	
КонецФункции

// Формирует значение оставшихся неполных дней до конца срока.
//
// Параметры:
//  СрокДата - Дата - Срок.
//  ТекущаяДата - Дата - Дата, относительно которой рассчитывается срок в днях.
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, график работы которого используется.
//  ПримерныйСрок - Булево - Признак того, что срок примерный.
//  КНачалуДня - Булево - Признак того, что дату следует привести к началу дня.
//
// Возвращаемое значение:
//  Число - Срок в днях.
//
Функция ПолучитьОсталосьДней(Срок, Знач ТекущаяДата = Неопределено, Пользователь = Неопределено,
		ПримерныйСрок = Ложь, КНачалуДня = Ложь)
	
	Если ТекущаяДата = Неопределено Тогда
		ТекущаяДата = ТекущаяДатаСеанса();
	КонецЕсли;
	Если КНачалуДня Тогда
		ТекущаяДата = НачалоДня(ТекущаяДата);
	КонецЕсли;
	
	ПримерныйСрок = Ложь;
	
	Если Срок >= ТекущаяДата Тогда
		СрокВДнях = (КонецДня(Срок) - КонецДня(ТекущаяДата)) / 86400 + 1; // 86400 - число секунд в сутках.
	Иначе
		СрокВДнях = (КонецДня(ТекущаяДата) - КонецДня(Срок)) / 86400; // 86400 - число секунд в сутках.
	КонецЕсли;
	
	Возврат СрокВДнях;
	
КонецФункции

// Возвращает структуру с параметрами произошедшего события
Функция ПолучитьПараметрыСобытия(Событие)
	
	Попытка
		
		СтрокаXML = Событие.КонтекстСобытия.Получить();
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		
		НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
		ПараметрыСобытия = НовыйСериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		
	Исключение
		
		ПараметрыСобытия = Новый Структура;
		
	КонецПопытки;
	
	Возврат ПараметрыСобытия;
	
КонецФункции

// Возвращает полный путь папки
Функция ПолучитьПолныйПуть(Папка)
	
	ПапкаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Папка.Ссылка, "Родитель");
	
	Если ЗначениеЗаполнено(ПапкаРодитель) Тогда
		
		ПолныйПуть = "";
		Пока ЗначениеЗаполнено(ПапкаРодитель) Цикл
			
			ПолныйПуть = Строка(ПапкаРодитель) + "\" + ПолныйПуть;
			ПапкаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПапкаРодитель, "Родитель");
			Если Не ЗначениеЗаполнено(ПапкаРодитель) Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ПолныйПуть = ПолныйПуть + Строка(Папка.Ссылка);
		
	Иначе
		
		ПолныйПуть = Строка(Папка.Ссылка);
		
	КонецЕсли;
	
	Возврат ПолныйПуть;
	
КонецФункции

// Помещает активных подписчиков во временные таблицы.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события, по которому отбираются подписчики.
//  ОбъектМетаданных - Строка - Имя объекта метаданных, по которому учитывается делегирование.
//  ИмяВременнойТаблицы - Строка - Имя временной таблицы подписчиков.
//
Процедура ПоместитьПодписчиковВоВременнуюТаблицу(МенеджерВременныхТаблиц, ВидСобытия,
	ИмяВременнойТаблицы = "Подписчики")
	
	РазрешитьИзменятьНастройкиУведомлений = РегистрыСведений.НастройкиУведомлений.РазрешеноИзменятьНастройки();
	ПодпискаПоУмолчанию = РегистрыСведений.НастройкиУведомлений.ПолучитьПодпискуПоУмолчанию(ВидСобытия);
	
	Если ПодпискаПоУмолчанию И РазрешитьИзменятьНастройкиУведомлений Тогда
		
		// Установлена подписка по умолчанию, но пользователи могут изменять персональную настройку.
		ТекстЗапросаПодписчиков =
		
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсполнителиРолейИДелегаты.Ссылка КАК Подписчик,
			|	ИсполнителиРолейИДелегаты.Ссылка КАК ПолучательУведомления
			|ПОМЕСТИТЬ ПользователиИРолиСПодпиской
			|ИЗ
			|	Справочник.Пользователи КАК ИсполнителиРолейИДелегаты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
			|		ПО ИсполнителиРолейИДелегаты.Ссылка = НастройкиУведомлений.Пользователь
			|			И (НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка))
			|			И (НастройкиУведомлений.ВидСобытия = &ВидСобытия)
			|			И (НастройкиУведомлений.Объект = НЕОПРЕДЕЛЕНО)
			|			И (НастройкиУведомлений.Значение = ЛОЖЬ)
			|ГДЕ
			|	НастройкиУведомлений.Значение ЕСТЬ NULL
			|	И ИсполнителиРолейИДелегаты.Недействителен = ЛОЖЬ
			|	И ИсполнителиРолейИДелегаты.ПометкаУдаления = ЛОЖЬ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПользователиИРолиСПодпиской.Подписчик КАК Подписчик,
			|	ПользователиИРолиСПодпиской.ПолучательУведомления КАК ПолучательУведомления
			|ПОМЕСТИТЬ %1
			|ИЗ
			|	ПользователиИРолиСПодпиской КАК ПользователиИРолиСПодпиской
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Подписчик
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ПользователиИРолиСПодпиской";
		
		
	ИначеЕсли ПодпискаПоУмолчанию И Не РазрешитьИзменятьНастройкиУведомлений Тогда
		
		// Установка подписка по умолчанию и пользователям запрещено изменять персональную настройку.
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсполнителиРолейИДелегаты.Ссылка КАК Подписчик,
			|	ИсполнителиРолейИДелегаты.Ссылка КАК ПолучательУведомления
			|ПОМЕСТИТЬ ПользователиИРолиСПодпиской
			|ИЗ
			|	Справочник.Пользователи КАК ИсполнителиРолейИДелегаты
			|ГДЕ
			|	ИсполнителиРолейИДелегаты.Недействителен = ЛОЖЬ
			|	И ИсполнителиРолейИДелегаты.ПометкаУдаления = ЛОЖЬ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПользователиИРолиСПодпиской.Подписчик КАК Подписчик,
			|	ПользователиИРолиСПодпиской.ПолучательУведомления КАК ПолучательУведомления
			|ПОМЕСТИТЬ %1
			|ИЗ
			|	ПользователиИРолиСПодпиской КАК ПользователиИРолиСПодпиской
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Подписчик
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ПользователиИРолиСПодпиской";
		
	Иначе
		
		// Не установлена подписка по умолчанию.
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсполнителиРолейИДелегаты.Ссылка КАК Подписчик,
			|	ИсполнителиРолейИДелегаты.Ссылка КАК ПолучательУведомления
			|ПОМЕСТИТЬ ПользователиИРолиСПодпиской
			|ИЗ
			|	Справочник.Пользователи КАК ИсполнителиРолейИДелегаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
			|		ПО ИсполнителиРолейИДелегаты.Ссылка = НастройкиУведомлений.Пользователь
			|			И (НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка))
			|			И (НастройкиУведомлений.ВидСобытия = &ВидСобытия)
			|			И (НастройкиУведомлений.Объект = НЕОПРЕДЕЛЕНО)
			|			И (НастройкиУведомлений.Значение = ИСТИНА)
			|ГДЕ
			|	ИсполнителиРолейИДелегаты.Недействителен = ЛОЖЬ
			|	И ИсполнителиРолейИДелегаты.ПометкаУдаления = ЛОЖЬ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПользователиИРолиСПодпиской.Подписчик КАК Подписчик,
			|	ПользователиИРолиСПодпиской.ПолучательУведомления КАК ПолучательУведомления
			|ПОМЕСТИТЬ %1
			|ИЗ
			|	ПользователиИРолиСПодпиской КАК ПользователиИРолиСПодпиской
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Подписчик
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ПользователиИРолиСПодпиской";
		
	КонецЕсли;
	
	ТекстЗапросаПодписчиков = СтрШаблон(ТекстЗапросаПодписчиков, ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапросаПодписчиков);
	Запрос.УстановитьПараметр("ВидСобытия", ВидСобытия);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает соединение с почтовым сервером для рассылки уведомлений.
//
// Возвращаемое значение:
//  ИнтернетПочта - Соединение с почтовым сервером для рассылки уведомлений.
//
Функция СоединениеСПочтовымСервером()
	
	Возврат Неопределено;
	
КонецФункции

// Формирует текстовое представление файла
Функция СформироватьПредставлениеФайла(
	Файл,
	ВидСобытия,
	ДополнительноеОписание)
	
	ПредставлениеФайла = "";
	
	ДобавитьРеквизитКСтроке(
		ПредставлениеФайла,
		НСтр("ru = 'Файл'"),
		Файл.Ссылка);
	Если ЗначениеЗаполнено(Файл.ВладелецФайла) Тогда
		Если ТипЗнч(Файл.ВладелецФайла) = Тип("СправочникСсылка.Файлы") Тогда
			ДобавитьРеквизитКСтроке(
				ПредставлениеФайла,
				НСтр("ru = 'Папка'"),
				ПолучитьПолныйПуть(Файл.ВладелецФайла));
		Иначе 
			ДобавитьРеквизитКСтроке(
				ПредставлениеФайла,
				ТипЗнч(Файл.ВладелецФайла),
				Файл.ВладелецФайла);
		КонецЕсли;
	КонецЕсли;
	ДобавитьРеквизитКСтроке(
		ПредставлениеФайла,
		НСтр("ru = 'Автор'"),
		Файл.Автор);
	ДобавитьРеквизитКСтроке(
		ПредставлениеФайла,
		НСтр("ru = 'Дата'"),
		Файл.ТекущаяВерсияДатаСоздания);
	ДобавитьРеквизитКСтроке(
		ПредставлениеФайла,
		НСтр("ru = 'Ссылка'"),
		ПолучитьНавигационнуюСсылкуУведомления(Файл));
	
	Возврат ПредставлениеФайла;
	
КонецФункции

// Формирует текст уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Строка - Текст уведомления.
//
Функция СформироватьТекстУведомленияПоОбъектамУведомления(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания)
	
	ТекстУведомления = РаботаСУведомлениямиПереопределяемый.СформироватьТекстУведомленияПоОбъектамУведомления(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектыУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительныеОписания);
	Если ЗначениеЗаполнено(ТекстУведомления) Тогда
		Возврат ТекстУведомления;
	КонецЕсли;
	
	Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
			ДополнительноеОписание = ДополнительныеОписания.Получить(ОбъектУведомления);
		Иначе
			ДополнительноеОписание = Неопределено;
		КонецЕсли;
		
		ПредставлениеОбъекта = СформироватьПредставлениеОбъекта(
			ОбъектУведомления,
			ВидСобытия,
			ПолучательУведомления,
			ДополнительноеОписание);
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ТекстУведомления,
			Символы.ПС + Символы.ПС,
			ПредставлениеОбъекта);
		
	КонецЦикла;
	
	Возврат ТекстУведомления;
	
КонецФункции

// Формирует текст уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текст уведомления.
//
Функция СформироватьТекстУведомленияПоСобытию(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание)
	
	ТекстУведомления = РаботаСУведомлениямиПереопределяемый.СформироватьТекстУведомленияПоСобытию(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание);
	Если ЗначениеЗаполнено(ТекстУведомления) Тогда
		Возврат ТекстУведомления;
	КонецЕсли;
	
	ТекстУведомления = СформироватьПредставлениеОбъекта(
		ОбъектУведомления,
		ВидСобытия,
		ПолучательУведомления,
		ДополнительноеОписание);
	
	Возврат ТекстУведомления;
	
КонецФункции

// Формирует тему уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Строка - Тема уведомления.
//
Функция СформироватьТемуУведомленияПоОбъектамУведомления(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания)
	
	ТемаУведомления = РаботаСУведомлениямиПереопределяемый.СформироватьТемуУведомленияПоОбъектамУведомления(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектыУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительныеОписания);
	Если ЗначениеЗаполнено(ТемаУведомления) Тогда
		Возврат ТемаУведомления;
	КонецЕсли;
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
		
		ПредставлениеОбъектаПодписки = "";
		Если ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
			ПолныйПутьПапки = ПолучитьПолныйПуть(ОбъектПодписки.Ссылка);
			ПредставлениеОбъектаПодписки = СтрШаблон(
				НСтр("ru = 'в папке ""%1""'"),
				ПолныйПутьПапки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПредставлениеОбъектаПодписки) Тогда
			Если ОбъектыУведомления.Количество() = 1 Тогда
				ОбъектУведомления = ОбъектыУведомления[0];
				ТемаУведомления = СтрШаблон(
					НСтр("ru = 'Новый файл ""%1"" %2'"),
					ОбъектУведомления.Ссылка,
					ПредставлениеОбъектаПодписки);
			Иначе
				КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
				ТемаУведомления = СтрШаблон(
					НСтр("ru = 'Новые файлы (%1) %2'"),
					КоличествоОбъектовУведомления,
					ПредставлениеОбъектаПодписки);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтрШаблон(НСтр("ru = 'Новая задача ""%1""'"), ОбъектУведомления.Ссылка);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(НСтр("ru = 'Новые задачи (%1)'"), КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Перенаправлена задача ""%1""'"),
				ОбъектУведомления.Ссылка);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Задачи перенаправлены (%1)'"),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Выполнение задачи ""%1"" отменено'"),
				ОбъектУведомления.Ссылка);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Отменено выполнение задач (%1)'"),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ПредставлениеСрока = ПолучитьПредставлениеСрока(
				ОбъектУведомления.Исполнитель, 
				ОбъектУведомления.Срок, 
				ВидСобытия);
			ТемаУведомления = СтрШаблон(
				"%1: ""%2""",
				ПредставлениеСрока,
				ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Подошел срок выполнения задач (%1)'"),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ПредставлениеСрока = ПолучитьПредставлениеСрока(
				ОбъектУведомления.Исполнитель, 
				ОбъектУведомления.Срок, 
				ВидСобытия);
			ТемаУведомления = СтрШаблон(
				"%1: ""%2""",
				ПредставлениеСрока,
				ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Просрочены задачи (%1)'"),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ПредставлениеСрока = ПолучитьПредставлениеСрока(
				ОбъектУведомления.Исполнитель, 
				ОбъектУведомления.Срок, 
				ВидСобытия);
			ТемаУведомления = СтрШаблон(
				"%1: ""%2""",
				ПредставлениеСрока,
				ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Просрочены задачи от меня (%1)'"),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
		
		Если ТипЗнч(ОбъектПодписки) = Тип("ДокументСсылка.Задачи") Тогда
			ПредставлениеОбъектаПодписки = "";
		Иначе
			ПредставлениеОбъектаПодписки = СтрШаблон(
				НСтр("ru = 'процесса ""%1""'"),
				ОбъектПодписки.Наименование);
		КонецЕсли;
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Выполнена задача ""%1""'"),
				ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Выполнены задачи (%1) %2'"),
				КоличествоОбъектовУведомления,
				ПредставлениеОбъектаПодписки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТемаУведомления;
	
КонецФункции

// Формирует тему уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Тема уведомления.
//
Функция СформироватьТемуУведомленияПоСобытию(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание)
	
	ТемаУведомления = РаботаСУведомлениямиПереопределяемый.СформироватьТемуУведомленияПоСобытию(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание);
	Если ЗначениеЗаполнено(ТемаУведомления) Тогда
		Возврат ТемаУведомления;
	КонецЕсли;
	
	ПредставлениеВидаСобытия =
		Перечисления.СобытияУведомлений.ПредставлениеВидаСобытия(
			ВидСобытия,
			ОбъектПодписки,
			ПолучательУведомления);
	ПредставлениеОбъектаУведомления = Строка(ОбъектУведомления);
	ТемаУведомления = СтрШаблон("%1 ""%2""", ПредставлениеВидаСобытия, ПредставлениеОбъектаУведомления);
	
	Возврат ТемаУведомления;
	
КонецФункции

// Формирует уведомления из очереди уведомлений для отправки.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Уведомления для отправки.
//
Функция СформироватьУведомленияДляОтправки()
	
	СформированныеУведомления = Новый ТаблицаЗначений;
	СформированныеУведомления.Колонки.Добавить("Пользователь",
		Новый ОписаниеТипов("СправочникСсылка.Пользователи, СправочникСсылка.КонтактныеЛицаЗаказчиков"));
	СформированныеУведомления.Колонки.Добавить("СпособУведомления",
		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУведомления"));
	СформированныеУведомления.Колонки.Добавить("ВидСобытия",
		Новый ОписаниеТипов("СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений"));
	СформированныеУведомления.Колонки.Добавить("ТемаУведомления",
		Новый ОписаниеТипов("Строка"));
	СформированныеУведомления.Колонки.Добавить("ТекстУведомления",
		Новый ОписаниеТипов("Строка"));
	СформированныеУведомления.Колонки.Добавить("Уведомления",
		Новый ОписаниеТипов("Массив"));
	СформированныеУведомления.Колонки.Добавить("Файлы",
		Новый ОписаниеТипов("Массив"));
	СформированныеУведомления.Колонки.Добавить("ОбъектыУведомления",
		Новый ОписаниеТипов("Массив"));
	
	Уведомления = РегистрыСведений.ОчередьУведомлений.ПолучитьУведомления();
	ПолучателиУведомлений = ОбщегоНазначения.ВыгрузитьКолонку(Уведомления, "Пользователь", Истина);
	
	Для Каждого ПолучательУведомления Из ПолучателиУведомлений Цикл
		
		Для Каждого СпособУведомления Из Перечисления.СпособыУведомления Цикл
			
			// Группируем уведомления по виду видам событий.
			ВидыСобытий = ВидыСобытийДляГруппировки(ПолучательУведомления, СпособУведомления);
			Для Каждого ВидСобытия Из ВидыСобытий Цикл
				СформироватьУведомленияПоВидуБизнесСобытия(
					ПолучательУведомления,
					СпособУведомления,
					ВидСобытия,
					Уведомления,
					СформированныеУведомления);
			КонецЦикла;
			
			// Формируем тексты уведомлений по оставшимся уведомлениям.
			СформироватьУведомленияПоСобытиям(
				ПолучательУведомления,
				СпособУведомления,
				ВидыСобытий,
				Уведомления,
				СформированныеУведомления);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СформированныеУведомления;
	
КонецФункции

// Формирует уведомления по событию с группировкой.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназанчено увдеомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
Процедура СформироватьУведомленияПоВидуБизнесСобытия(
	ПолучательУведомления,
	СпособУведомления,
	ВидСобытия,
	Уведомления,
	СформированныеУведомления)
	
	Если РаботаСУведомлениямиПереопределяемый.СформироватьУведомленияПоВидуБизнесСобытия(
		ПолучательУведомления,
		СпособУведомления,
		ВидСобытия,
		Уведомления,
		СформированныеУведомления) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
		
		// Группировка уведомлений по процессу / задаче.
		Отбор = Новый Структура();
		Отбор.Вставить("Пользователь", ПолучательУведомления);
		Отбор.Вставить("СпособУведомления", СпособУведомления);
		Отбор.Вставить("ВидСобытия", ВидСобытия);
		УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
		
		УведомленияПодписки = Новый Массив;
		ДополнительныеОписания = Новый Соответствие;
		ОбъектыПодписки = Новый Массив;
		ОбъектыУведомленияСПодпиской = Новый Массив;
		ОбъектыУведомленияСОтказом = Новый Массив;
		
		БизнесПроцессыРодители = Новый ТаблицаЗначений;
		БизнесПроцессыРодители.Колонки.Добавить("ОбъектПодписки");
		БизнесПроцессыРодители.Колонки.Добавить("Родитель");
		ОтказыОтПодписки = РегистрыСведений.НастройкиУведомлений.ОтказыОтПодписки(ПолучательУведомления, ВидСобытия, СпособУведомления);
		
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ТипЗнч(Уведомление.ОбъектПодписки) <> Тип("ДокументСсылка.Задачи") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если Не ЯвляетсяПотомкомОбъектовПодписки(Уведомление.ОбъектПодписки, ОбъектыПодписки, ОтказыОтПодписки) Тогда
				
				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
				
			КонецЕсли;
			
			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
		КонецЦикла;
		
		Для Каждого ОбъектПодписки Из ОбъектыПодписки Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("Пользователь", ПолучательУведомления);
			Отбор.Вставить("СпособУведомления", СпособУведомления);
			Отбор.Вставить("ВидСобытия", ВидСобытия);
			Отбор.Вставить("ОбъектПодписки", ОбъектПодписки);
			УведомленияПользователяПоВидуИПоОбъектуПодписки = Уведомления.НайтиСтроки(Отбор);
			
			ОбъектыУведомления = Новый Массив;
			Для Каждого Уведомление Из УведомленияПользователяПоВидуИПоОбъектуПодписки Цикл
				Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено
					И ОбъектыУведомленияСОтказом.Найти(Уведомление.Объект) = Неопределено Тогда
					ОбъектыУведомления.Добавить(Уведомление.Объект);
				КонецЕсли;
			КонецЦикла;
			
			Если ОбъектыУведомления.Количество() > 0 Тогда
				
				ДанныеУведомления = ДанныеУведомленияПоОбъектам(
					ОбъектПодписки,
					ВидСобытия,
					ОбъектыУведомления,
					ПолучательУведомления,
					СпособУведомления,
					ДополнительныеОписания);
				
				СформированноеУведомление = СформированныеУведомления.Добавить();
				ЗаполнитьЗначенияСвойств(СформированноеУведомление, ДанныеУведомления);
				СформированноеУведомление.Пользователь = ПолучательУведомления;
				СформированноеУведомление.СпособУведомления = СпособУведомления;
				СформированноеУведомление.ВидСобытия = ВидСобытия;
				СформированноеУведомление.Уведомления = УведомленияПодписки;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					СформированноеУведомление.ОбъектыУведомления,
					ОбъектыУведомления);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадачаАвтора Тогда
		
		// Группировка по событию.
		СформироватьУведомленияГруппировкаПоСобытию(
			ПолучательУведомления,
			СпособУведомления,
			ВидСобытия,
			Уведомления,
			СформированныеУведомления);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
		
		// Группировка по событию и объекту подписки.
		СформироватьУведомленияГруппировкаПоОбъектуПодписки(
			ПолучательУведомления,
			СпособУведомления,
			ВидСобытия,
			Уведомления,
			СформированныеУведомления);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует уведомления по событиям без группировки.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ОбработанныеВидыБизнесСобытий - Массив - Виды события, по которым уже сгруппированы уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназанчено увдеомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
Процедура СформироватьУведомленияПоСобытиям(
	ПолучательУведомления,
	СпособУведомления,
	ОбработанныеВидыБизнесСобытий,
	Уведомления,
	СформированныеУведомления)
	
	Если РаботаСУведомлениямиПереопределяемый.СформироватьУведомленияПоСобытиям(
		ПолучательУведомления,
		СпособУведомления,
		ОбработанныеВидыБизнесСобытий,
		Уведомления,
		СформированныеУведомления) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Пользователь", ПолучательУведомления);
	Отбор.Вставить("СпособУведомления", СпособУведомления);
	УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
	
	Для Каждого Уведомление Из УведомленияПользователя Цикл
		
		Если ОбработанныеВидыБизнесСобытий.Найти(Уведомление.ВидСобытия) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеУведомления = ДанныеУведомленияПоСобытию(
			Уведомление.ОбъектПодписки, 
			Уведомление.ВидСобытия, 
			Уведомление.Объект,
			ПолучательУведомления,
			СпособУведомления,
			Уведомление.ДополнительноеОписание);
		
		УведомленияПодписки = Новый Массив;
		ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
		
		СформированноеУведомление = СформированныеУведомления.Добавить();
		ЗаполнитьЗначенияСвойств(СформированноеУведомление, ДанныеУведомления);
		СформированноеУведомление.Пользователь = ПолучательУведомления;
		СформированноеУведомление.СпособУведомления = СпособУведомления;
		СформированноеУведомление.ВидСобытия = Уведомление.ВидСобытия;
		СформированноеУведомление.Уведомления = УведомленияПодписки;
		СформированноеУведомление.ОбъектыУведомления.Добавить(Уведомление.Объект);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует файлы уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Массив - Массив структур файлов уведомлений.
//   * Ссылка - СправочникСсылка.Файлы - Ссылка на файл.
//   * ИмяФайла - Строка - Имя файла.
//
Функция СформироватьФайлыУведомленияПоОбъектамУведомления(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания)
	
	Файлы = РаботаСУведомлениямиПереопределяемый.СформироватьФайлыУведомленияПоОбъектамУведомления(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектыУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительныеОписания);
	Если Файлы <> Неопределено Тогда
		Возврат Файлы;
	КонецЕсли;
	
	Файлы = Неопределено;
	
	Возврат Файлы;
	
КонецФункции

// Формирует файлы уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Массив - Массив структур файлов уведомлений.
//   * Ссылка - СправочникСсылка.Файлы - Ссылка на файл.
//   * ИмяФайла - Строка - Имя файла.
//
Функция СформироватьФайлыУведомленияПоСобытию(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание)
	
	Файлы = РаботаСУведомлениямиПереопределяемый.СформироватьФайлыУведомленияПоСобытию(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание);
	Если Файлы <> Неопределено Тогда
		Возврат Файлы;
	КонецЕсли;
	
	Файлы = Неопределено;
	
	Возврат Файлы;
	
КонецФункции

// Преобразует текст уведомления в HTML.
//
// Параметры:
//  ТекстУведомления - Строка - Текст уведомления.
//
// Возвращаемое значение:
//  Строка - Текст уведомления в HTML.
//
Функция ТекстУведомленияВHTML(Знач ТекстУведомления)
	
	ТекстУведомления = СтрЗаменить(ТекстУведомления, Символы.ПС, "<br>");
	
	ТекстУведомления = СтрШаблон(
		"<html>
		|<body>
		|<div style=""font-family:Arial;font-size:10pt;"">
		|%1
		|</div>
		|</body>
		|</html>",
		ТекстУведомления);
	
	Возврат ТекстУведомления;
	
КонецФункции

// Преобразует текст уведомления в простой текст.
//
// Параметры:
//  ТекстУведомления - Строка - Текст уведомления.
//
// Возвращаемое значение:
//  Строка - Текст уведомления в HTML.
//
Функция ТекстУведомленияВПростойТекст(Знач ТекстУведомления)
	
	ТекстУведомления = СтрЗаменить(ТекстУведомления, "<b>","");
	ТекстУведомления = СтрЗаменить(ТекстУведомления, "</b>","");
	
	Возврат ТекстУведомления;
	
КонецФункции

// Возвращает учетную запись, используемую для рассылки уведомлений.
//
Функция УчетнаяЗаписьДляРассылки()
	
	Возврат Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
КонецФункции

// Проверяет есть ли среди родителей объекта подписки объекта из массива объектов подписки 
// с учетом отказов от уведомлений.
Функция ЯвляетсяПотомкомОбъектовПодписки(ОбъектПодписки, ОбъектыПодписки, ОтказыОтПодписки, ОбработанныеОбъекты = Неопределено)
	
	Если ОбработанныеОбъекты = Неопределено Тогда
		ОбработанныеОбъекты = Новый Массив;
	КонецЕсли;
	Если ОбработанныеОбъекты.Найти(ОбъектПодписки) <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	ОбработанныеОбъекты.Добавить(ОбъектПодписки);
	
	Если ТипЗнч(ОбъектПодписки) = Тип("ДокументСсылка.Задачи") Тогда
		
		ЯвляетсяПотомкомПоБизнесПроцессу = Ложь;
		
		Возврат ЯвляетсяПотомкомПоБизнесПроцессу;
		
	КонецЕсли;
	
	Если ОбъектыПодписки.Найти(ОбъектПодписки) <> Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если ОтказыОтПодписки.Найти(ОбъектПодписки) <> Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура СозданиеПисемПоШаблонам()
	
	НаборЗаписей = РегистрыСведений.ОчередьУведомлений.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого Уведомление Из НаборЗаписей Цикл
		Если Не Уведомление.ШаблонПисьма.Пустая() И Уведомление.КоличествоПопытокОтправки < 3 Тогда
			СформироватьЭлектронноеПисьмо(Уведомление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьЭлектронноеПисьмо(Уведомление)
	
	ТекущаяДата = ТекущаяДата();
	
	//Структура с полями МинимальнаяДатаСоздания, ПроизвольныеПараметры
	ДопПараметры = Уведомление.ПроизвольныеПараметры.Получить();
	
	//+++++++++++
	Если ДопПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//+++++++++++
	
	Если ТекущаяДата < ДопПараметры.МинимальнаяДатаСоздания Тогда
		Возврат;
	КонецЕсли;
	
	ПриемникОбъект = Документы.ИсходящееПисьмо.СоздатьДокумент();
	ПриемникОбъект.Заполнить(Уведомление.ШаблонПисьма); 
	ПриемникОбъект.Предмет = Уведомление.Объект;
	
	Уведомляемые = Новый Массив;
		
	//Получение получателей письма
	Счетчик = ПриемникОбъект.ПолучателиПисьма.Количество();
	Для Каждого Получатель Из ДопПараметры.ПолучателиПисьма Цикл
		ПолучательСтрока = ПриемникОбъект.ПолучателиПисьма.Добавить();
		ПолучательСтрока.Адресат = Получатель;
		ПолучательСтрока.ПорядковыйНомер = Счетчик;
		Счетчик = Счетчик + 1;
	КонецЦикла;		
		
	ДополнительныеПараметры = Новый Структура;
	Если ДопПараметры.Свойство("ПроизвольныеПараметры") Тогда
		ДополнительныеПараметры.Вставить("ПроизвольныеПараметры", ДопПараметры.ПроизвольныеПараметры);
	КонецЕсли;
	
	ПараметрыСообщения = ШаблоныСообщений.СформироватьСообщение(
			Уведомление.ШаблонПисьма, 
			Уведомление.Объект,
			Новый УникальныйИдентификатор,
			ДополнительныеПараметры
	);
	
	ПриемникОбъект.Тема = ПараметрыСообщения.Тема;
	ПриемникОбъект.Дата = ТекущаяДата;
	
	ПриемникОбъект.УчетнаяЗапись = ?(ДопПараметры.Свойство("УчетнаяЗапись") И ДопПараметры.УчетнаяЗапись.Пустая(),
			Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты,
			ДопПараметры.УчетнаяЗапись
	);
	
	ПриемникОбъект.ДополнительныеСвойства.Вставить("ТекстПисьма", ПараметрыСообщения.Текст);
	
	ПриемникОбъект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	Если Не ЗначениеЗаполнено(ПриемникОбъект.Автор) Тогда
		ПриемникОбъект.Автор = Пользователи.СсылкаНеуказанногоПользователя();
	КонецЕсли;	
	ПриемникОбъект.ПодготовленоКОтправке = ТекущаяДата;
	ПриемникОбъект.ПолучателиПисьмаСтрокой = ВстроеннаяПочтаСервер.ТаблицаПолучателейВСтроку(ПриемникОбъект.ПолучателиПисьма);
	ПриемникОбъект.ЕстьВложения = (ПараметрыСообщения.Вложения.Количество() > 0);
	
	Попытка
		ПриемникОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		РегистрыСведений.ОчередьУведомлений.УвеличитьЧислоПопытокОтправки(
			Уведомление.Пользователь,
			Уведомление.ВидСобытия,
			Уведомление.СпособУведомления,
			Уведомление.Объект,
			Уведомление.ОбъектПодписки,
			Уведомление.ШаблонПисьма);
		Возврат;
	КонецПопытки;
	
	РегистрыСведений.ОчередьУведомлений.УдалитьУведомление(
		Уведомление.Пользователь,
		Уведомление.ВидСобытия,
		Уведомление.СпособУведомления,
		Уведомление.Объект,
		Уведомление.ОбъектПодписки,
		"", Уведомление.ШаблонПисьма);
	
	// Файлы из задания.
	//Если ПриемникОбъект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML 
	//	И СтрНайти(ШаблонСообщения.ТекстШаблонаПисьмаHTML, "[Задание.ОписаниеЗаданияHTML]") > 0 Тогда 
	//	ЗаполнитьПрисоединенныеФайлы(Источник.Ссылка, ПриемникОбъект.Ссылка);					
	//КонецЕсли;
	
	Если ПараметрыСообщения.Вложения.Количество() > 0 Тогда
		
		Для Каждого Вложение Из ПараметрыСообщения.Вложения Цикл
			
			РазмерДанных = 0;
			Данные = ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище);
			Если ТипЗнч(Данные) =  Тип("ДвоичныеДанные") Тогда
				РазмерДанных = Данные.Размер();
			КонецЕсли;
			
			НовыйФайл = ВстроеннаяПочтаСервер.ДобавитьВложениеПисьмаИзВременногоХранилища(
				ПриемникОбъект.Ссылка, // Письмо
				Вложение.АдресВоВременномХранилище, // АдресВременногоХранилища
				Новый ХранилищеЗначения(""), // АдресВременногоХранилищаТекста
				РазмерДанных,
				Вложение.Представление,
				ТекущаяУниверсальнаяДата(), // ВремяИзменения
				Вложение.Идентификатор); // Идентификатор - идентификатор картинки
			
		КонецЦикла;
	КонецЕсли;
			
КонецПроцедуры	

#КонецОбласти
