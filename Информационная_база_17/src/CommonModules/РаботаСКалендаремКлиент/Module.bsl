////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с календарем.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обрабатывает выбор исключения повторения.
//
// Параметры:
//  ПовторяющеесяСобытие - СправочникСсылка.ЗаписиКалендаряСотрудника	 - Повторяющееся событие.
//  ДатаИсключения		 - Дата										 - Дата элемента повторяющегося события.
//
Процедура ОбработкаВыбораПовторяющегосяСобытия(ПовторяющеесяСобытие, ДатаИсключения) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ПовторяющеесяСобытие", ПовторяющеесяСобытие);
	ПараметрыОбработчика.Вставить("ДатаИсключения", ДатаИсключения);
	ОписаниеОповещения =
		Новый ОписаниеОповещения("ОбработкаВыбораПовторяющегосяСобытияЗавершение",
			ЭтотОбъект, ПараметрыОбработчика);
	
	ТекстВопроса = НСтр("ru = 'Это повторяющееся событие.'");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("ИзменитьОдно", НСтр("ru = 'Изменить одно событие'"));
	Кнопки.Добавить("ИзменитьВсе", НСтр("ru = 'Изменить все'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , "ИзменитьОдно");
	
КонецПроцедуры

// Обрабатывает выбор исключения повторения.
//
Процедура ОбработкаВыбораПовторяющегосяСобытияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИзменитьОдно" Тогда 
		СоздатьИсключениеПовторения(
			ДополнительныеПараметры.ПовторяющеесяСобытие,
			ДополнительныеПараметры.ДатаИсключения);
	ИначеЕсли Результат = "ИзменитьВсе" Тогда 
		ПоказатьЗаписьКалендаря(ДополнительныеПараметры.ПовторяющеесяСобытие);
	КонецЕсли;
	
КонецПроцедуры

// Показывает запись календаря в отдельной форме.
//
// Параметры:
//  ЗаписьКалендаря - СправочникСсылка.ЗаписиКалендаряСотрудника - Запись календаря.
//  ПользовательКалендаря - СправочникСсылка.Пользователи - Пользователь календаря.
//
Процедура ПоказатьЗаписьКалендаря(ЗаписьКалендаря) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗаписьКалендаря) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ЗаписьКалендаря);
	Уникальность = ЗаписьКалендаря.УникальныйИдентификатор();
	
	Если ТипЗнч(ЗаписьКалендаря) = Тип("СправочникСсылка.ЗаписиКалендаряСотрудника") Тогда
		ОткрытьФормуЗаписиКалендаря(ПараметрыФормы, Уникальность);
	КонецЕсли;
	
КонецПроцедуры

// Создает элемент повторяющегося событие на конкретную дату.
//
// Параметры:
//  ПовторяющеесяСобытие - СправочникСсылка.ЗаписиКалендаряСотрудника	 - Повторяющееся событие.
//  ДатаИсключения		 - Дата										 - Дата элемента повторяющегося события.
//
Процедура СоздатьИсключениеПовторения(ПовторяющеесяСобытие, ДатаИсключения) Экспорт
	
	СтруктураОснование = Новый Структура("ПовторяющеесяСобытие, ДатаИсключения");
	СтруктураОснование.ПовторяющеесяСобытие = ПовторяющеесяСобытие;
	СтруктураОснование.ДатаИсключения = ДатаИсключения;
	
	ПараметрыФормы = Новый Структура("Основание, ПовторяющеесяСобытие, ДатаИсключения");
	ПараметрыФормы.Основание = СтруктураОснование;
	ПараметрыФормы.ПовторяющеесяСобытие = ПовторяющеесяСобытие;
	ПараметрыФормы.ДатаИсключения = ДатаИсключения;
	
	Уникальность = Строка(ПовторяющеесяСобытие.УникальныйИдентификатор()) + Строка(ДатаИсключения);
	ОткрытьФормуЗаписиКалендаря(ПараметрыФормы, Уникальность);
	
КонецПроцедуры

// Добавляет значение в массив, если данного значения нет в массиве.
//
// Параметры:
//  Значение - СправочникеСсылка - Значение.
//  Массив	 - Массив			 - Массив, в который будет добавлено значение.
//
Процедура ДобавитьЗначениеВМассив(Значение, Массив)
	
	Если ТипЗнч(Значение) = Тип("Структура")
		И Значение.Свойство("ЗаписьКалендаря")
		И Значение.Свойство("ДатаИсключения") Тогда
		
		Для Каждого ЭлементМассива Из Массив Цикл
			
			Если ЭлементМассива.ЗаписьКалендаря = Значение.ЗаписьКалендаря
				И ЭлементМассива.ДатаИсключения = Значение.ДатаИсключения Тогда
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		Массив.Добавить(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура")
		И Значение.Свойство("Ссылка")
		И Значение.Свойство("ДеньНачала") Тогда
		
		Для Каждого ЭлементМассива Из Массив Цикл
			
			Если ЭлементМассива.Ссылка = Значение.Ссылка
				И ЭлементМассива.ДеньНачала = Значение.ДеньНачала Тогда
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		Массив.Добавить(Значение);
		
	Иначе
		
		Если Массив.Найти(Значение) = Неопределено Тогда
			Массив.Добавить(Значение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму настройки повторения события.
//
// Параметры:
//  ЗаписьКалендаря	 - СправочникСсылка.ЗаписиКалендаряСотрудника	 - Запись календаря.
// 
Процедура ОткрытьФормуНастройкиПовторения(ЗаписьКалендаря) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаписьКалендаря", ЗаписьКалендаря);
	
	ОткрытьФорму("Справочник.ЗаписиКалендаряСотрудника.Форма.ФормаНастройкиПовторения", ПараметрыФормы);
	
КонецПроцедуры

// Устанавливает повторение события в соответствии с настройками.
//
// Параметры:
//  ЗаписьКалендаря		 - СправочникСсылка.ЗаписиКалендаряСотрудника	 - Запись рабочего календаря.
//  НастройкиПовторения	 - Структура	 - Настройки повторения.
//
Процедура УстановитьПовторение(ЗаписьКалендаря, НастройкиПовторения) Экспорт
	
	РаботаСКалендаремСервер.УстановитьПовторение(ЗаписьКалендаря, НастройкиПовторения);
	Если ТипЗнч(ЗаписьКалендаря) = Тип("СправочникСсылка.ЗаписиКалендаряСотрудника") Тогда
		Оповестить("Запись_ЗаписьКалендаря", ЗаписьКалендаря);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму записи календаря.
//
// Параметры:
//  Параметры	 - Структура	 - Параметры формы.
//  Уникальность - Произвольный	 - Уникальность формы.
//
Процедура ОткрытьФормуЗаписиКалендаря(Параметры, Уникальность = Неопределено)
	
	Если Уникальность = Неопределено Тогда
		Уникальность = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.ЗаписиКалендаряСотрудника.ФормаОбъекта",
		Параметры,,
		Уникальность,
		ВариантОткрытияОкна.ОтдельноеОкно);
	
КонецПроцедуры

// Возвращает массив записей календаря, содержащихся в выделенной области.
//
Функция ПолучитьСобытияВВыделеннойОбласти(Планировщик, ПометкаУдаления = Ложь, ВключаяПовторяющиеся = Истина) Экспорт
	
	ВыделенныеЭлементы = Новый Массив;
	
	Для Каждого ВыделенныйЭлемент Из Планировщик.ВыделенныеЭлементы Цикл
		
		ЗначениеЭлемента = ВыделенныйЭлемент.Значение;
		
		Если ЗначениеЭлемента.ЭтоТекущаяЗапись Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ВключаяПовторяющиеся
			И ЗначениеЭлемента.ВидЭлемента =
			ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.СобытиеПовторяющееся") Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьЗначениеВМассив(ЗначениеЭлемента.Ссылка, ВыделенныеЭлементы);
		ПометкаУдаления = ПометкаУдаления Или ЗначениеЭлемента.ПометкаУдаления;
		
	КонецЦикла;
	
	Возврат ВыделенныеЭлементы;
	
КонецФункции

// Возвращает массив повторяющихся событий, содержащихся в выделенной области.
//
// Параметры:
//  Планировщик	 - Планировщик	 - Планировщик.
// 
// Возвращаемое значение:
//  Массив - Потворющиеся события.
//
Функция ПолучитьПовторяющиесяСобытияВВыделеннойОбласти(Планировщик) Экспорт
	
	ПовторяющиесяСобытия = Новый Массив;
	
	Для Каждого ВыделенныйЭлемент Из Планировщик.ВыделенныеЭлементы Цикл
		
		ЗначениеЭлемента = ВыделенныйЭлемент.Значение;
		
		Если ЗначениеЭлемента.ЭтоТекущаяЗапись Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЭлемента.ВидЭлемента <>
			ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.СобытиеПовторяющееся") Тогда
			Продолжить;
		КонецЕсли;
		
		ПовторяющеесяСобытие = Новый Структура("ЗаписьКалендаря, ДатаИсключения");
		ПовторяющеесяСобытие.ЗаписьКалендаря = ЗначениеЭлемента.Ссылка;
		ПовторяющеесяСобытие.ДатаИсключения = ВыделенныйЭлемент.Начало;
		
		ДобавитьЗначениеВМассив(ПовторяющеесяСобытие, ПовторяющиесяСобытия);
		
	КонецЦикла;
	
	Возврат ПовторяющиесяСобытия;
	
КонецФункции


#КонецОбласти