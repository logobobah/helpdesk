
#Область ДляМобильногоПриложения
	
// Выполняет перенаправление (изменение исполнителя) задачи.
//
// Параметры
//  Задача  - перенаправляемая задача.
//  ИнфоОПеренаправлении  - Структура - информация о новом исполнителе задачи.
//	ИдентификаторФормы - идентификатор формы, из которой было вызвано перенаправление.
//
// Возвращаемое значение:
//   Булево   - Истина, если перенаправление прошло успешно.
//

&НаСервере
Функция ПеренаправитьЗадачу(Знач Задача, Знач ИнфоОПеренаправлении,
	ИдентификаторФормы = Неопределено) Экспорт
	
	Результат = Истина;
	
	ЗадачаВыполнена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача.Ссылка, "Выполнена");
	Если ЗадачаВыполнена Тогда
		Возврат Результат = Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		ВнешняяТранзакция = ТранзакцияАктивна();
		Если Не ВнешняяТранзакция Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(Задача.Ссылка,, ИдентификаторФормы);
		
		ЗаполнитьЗначенияСвойств(ЗадачаОбъект, ИнфоОПеренаправлении, "Исполнитель");
		ЗадачаОбъект.Статус = Перечисления.СтатусыЗадач.Новая;
		
		ЗадачаОбъект.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(Задача.Ссылка, ИдентификаторФормы);
		
		Возврат Результат;
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции


#КонецОбласти

#Область ТекстовыеРеквизиты
	
&НаКлиенте
Процедура СформироватьРешение(Задача) Экспорт
	
	//Заполнение поля Решение
	Если Не СистемаУчетаЗадачПовтИсп.ПолучитьФормироватьРезультатЗадачПоДням() Тогда
		Возврат;
	КонецЕсли;
	Решение = "";
	ПредДата = '00010101';
	Для Каждого СтрокаТЧ Из Задача.Работы Цикл
		Если ПустаяСтрока(СтрокаТЧ.ВыполненныеДействия) Тогда
			Продолжить;
		КонецЕсли;
		Решение = Решение + ?(ПредДата = НачалоДня(СтрокаТЧ.ДатаНачала), "", 
				Формат(СтрокаТЧ.ДатаНачала,"ДФ=dd.MM.yy") + ". ") + СтрокаТЧ.ВыполненныеДействия+"
		|";
		ПредДата = НачалоДня(СтрокаТЧ.ДатаНачала);
	КонецЦикла;
	Задача.РезультатВыполнения = Решение;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнестиОписаниеРешения(ЗадачаОбъект, ТекстРешения, Заменить = Ложь) Экспорт
	
	Если СистемаУчетаЗадачПовтИсп.ПолучитьФормироватьРезультатЗадачПоДням() Тогда
		ВсегоРабот = ЗадачаОбъект.Работы.Количество();
		Если ВсегоРабот = 0 Тогда
			ИзменяемаяСтрока = ЗадачаОбъект.Работы.Добавить();
			ИзменяемаяСтрока.ДатаНачала = ТекущаяДата();
			ИзменяемаяСтрока.ДатаОкончания = ИзменяемаяСтрока.ДатаНачала;
		Иначе
			ИзменяемаяСтрока = ЗадачаОбъект.Работы[ВсегоРабот-1];
		КонецЕсли;
		ИзменяемаяСтрока.ВыполненныеДействия = ?(Заменить ИЛИ ПустаяСтрока(ИзменяемаяСтрока.ВыполненныеДействия),"",ИзменяемаяСтрока.ВыполненныеДействия + "
			|") + ТекстРешения;
		
		//Заполнение поля Решение
		СформироватьРешение(ЗадачаОбъект);
	Иначе
		ЗадачаОбъект.РезультатВыполнения = ?(ПустаяСтрока(ЗадачаОбъект.РезультатВыполнения),"",ЗадачаОбъект.РезультатВыполнения + "
		|")+ТекстРешения;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьРешение(Задача) Экспорт
	
	//Заполнение поля Решение
	Если Не СистемаУчетаЗадачПовтИсп.ПолучитьФормироватьРезультатЗадачПоДням() Тогда
		Возврат;
	КонецЕсли;
	Решение = "";
	ПредДата = '00010101';
	Для Каждого СтрокаТЧ Из Задача.Работы Цикл
		Если ПустаяСтрока(СтрокаТЧ.ВыполненныеДействия) Тогда
			Продолжить;
		КонецЕсли;
		Решение = Решение + ?(ПредДата = НачалоДня(СтрокаТЧ.ДатаНачала), "", 
				Формат(СтрокаТЧ.ДатаНачала,"ДФ=dd.MM.yy") + ". ") + СтрокаТЧ.ВыполненныеДействия+"
		|";
		ПредДата = НачалоДня(СтрокаТЧ.ДатаНачала);
	КонецЦикла;
	Задача.РезультатВыполнения = Решение;
	
КонецПроцедуры

&НаСервере
Процедура ВнестиОписаниеРешения(ЗадачаОбъект, ТекстРешения, Заменить = Ложь) Экспорт
	
	Если СистемаУчетаЗадачПовтИсп.ПолучитьФормироватьРезультатЗадачПоДням() Тогда
		ВсегоРабот = ЗадачаОбъект.Работы.Количество();
		Если ВсегоРабот = 0 Тогда
			ИзменяемаяСтрока = ЗадачаОбъект.Работы.Добавить();
			ИзменяемаяСтрока.ДатаНачала = ТекущаяДата();
			ИзменяемаяСтрока.ДатаОкончания = ИзменяемаяСтрока.ДатаНачала;
		Иначе
			ИзменяемаяСтрока = ЗадачаОбъект.Работы[ВсегоРабот-1];
		КонецЕсли;
		ИзменяемаяСтрока.ВыполненныеДействия = ?(Заменить ИЛИ ПустаяСтрока(ИзменяемаяСтрока.ВыполненныеДействия),"",ИзменяемаяСтрока.ВыполненныеДействия + "
			|") + ТекстРешения;
		
		//Заполнение поля Решение
		СформироватьРешение(ЗадачаОбъект);
	Иначе
		ЗадачаОбъект.РезультатВыполнения = ?(ПустаяСтрока(ЗадачаОбъект.РезультатВыполнения),"",ЗадачаОбъект.РезультатВыполнения + "
		|")+ТекстРешения;
	КонецЕсли;
КонецПроцедуры

// Добавление системы редактирования текстового поля
//Процедура вставляется на форме с полем описания в процедуру ПриСозданииНаСервере
//На форме с полем описания размещаются следующие процедуры <ИмяПоля>_ИзменитьТекст, <ИмяПоля>_СохранитьТекст, <ИмяПоля>_ОтменитьТекст.
&НаСервере
Процедура НастройкаРедактированияТекстовогоПоля(Форма, ТекстовыйЭлемент) Экспорт
	
	ПриставкаЭлементов = ТекстовыйЭлемент.Имя;
	
	Реквизит_ВводТекста = Новый РеквизитФормы(ПриставкаЭлементов+"_ВводТекста", Новый ОписаниеТипов("Строка"));
	Реквизит_ВводТекста.СохраняемыеДанные = Истина;
	ДобавляемыеРеквизиты	= Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Реквизит_ВводТекста);
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	//Добавление команд
	КомандаИзменить = Форма.Команды.Добавить(ПриставкаЭлементов+"_ИзменитьТекст");
	КомандаИзменить.Заголовок = "Изменить";
	КомандаИзменить.Подсказка = "Изменить " + ТекстовыйЭлемент.Заголовок;
	КомандаИзменить.Действие = ПриставкаЭлементов+"_ИзменитьТекст";
	
	КомандаИзменить = Форма.Команды.Добавить(ПриставкаЭлементов+"_РазвернутьСвернуть");
	КомандаИзменить.Заголовок = "Развернуть";
	КомандаИзменить.Подсказка = "Развернуть/свернуть " + ТекстовыйЭлемент.Заголовок;
	КомандаИзменить.Действие = ПриставкаЭлементов+"_РазвернутьСвернуть";
	
	КомандаСохранить = Форма.Команды.Добавить(ПриставкаЭлементов+"_СохранитьТекст");
	КомандаСохранить.Заголовок = "Сохранить";
	КомандаСохранить.Подсказка = "Сохранить в " + ТекстовыйЭлемент.Заголовок;
	КомандаСохранить.Действие = ПриставкаЭлементов+"_СохранитьТекст";
	
	КомандаОтменить = Форма.Команды.Добавить(ПриставкаЭлементов+"_ОтменитьТекст");
	КомандаОтменить.Заголовок = "Отменить";
	КомандаОтменить.Подсказка = "Отменить внесение текста";
	КомандаОтменить.Действие = ПриставкаЭлементов+"_ОтменитьТекст";
	КомандаОтменить.Картинка = БиблиотекаКартинок.КонтактнаяИнформацияНеактуально;
	КомандаОтменить.Отображение = ОтображениеКнопки.Картинка;
	
	//Вставка заголовка и кнопки Изменить перед текстовым полем
	
	Группа_Заголовок = Форма.Элементы.Вставить(ПриставкаЭлементов+"_ГруппаЗаголовок", Тип("ГруппаФормы"), ТекстовыйЭлемент.Родитель, ТекстовыйЭлемент);
	Группа_Заголовок.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа_Заголовок.Заголовок = ТекстовыйЭлемент.Заголовок + " (Группа заголовок)";
	Группа_Заголовок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Группа_Заголовок.ОтображатьЗаголовок = Ложь;
	
	НовыйЭлемент = Форма.Элементы.Вставить(ПриставкаЭлементов+"_Заголовок", Тип("ДекорацияФормы"), Группа_Заголовок);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.Заголовок = ТекстовыйЭлемент.Заголовок;
	НовыйЭлемент.Шрифт = Новый Шрифт(НовыйЭлемент.Шрифт,,11);
	
	//Кнопка Изменить
	НовыйЭлемент = Форма.Элементы.Вставить(ПриставкаЭлементов+"_ИзменитьТекст", Тип("КнопкаФормы"), Группа_Заголовок);
	НовыйЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	НовыйЭлемент.ИмяКоманды = ПриставкаЭлементов+"_ИзменитьТекст";
	НовыйЭлемент.ЦветФона = WebЦвета.СеребристоСерый;
	НовыйЭлемент.ЦветРамки = НовыйЭлемент.ЦветФона;
	
	//Кнопка Развернуть
	НовыйЭлемент = Форма.Элементы.Вставить(ПриставкаЭлементов+"_РазвернутьСвернуть", Тип("КнопкаФормы"), Группа_Заголовок);
	НовыйЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	НовыйЭлемент.ИмяКоманды = ПриставкаЭлементов+"_РазвернутьСвернуть";
	//НовыйЭлемент.ЦветФона = WebЦвета.СеребристоСерый;
	//НовыйЭлемент.ЦветРамки = НовыйЭлемент.ЦветФона;
	
	//Определение следующего поля после описания для вставки элементов
	НомерСледующегоПоля = ТекстовыйЭлемент.Родитель.ПодчиненныеЭлементы.Индекс(ТекстовыйЭлемент)+1;
	СледующееПоле = Неопределено;
	Если ТекстовыйЭлемент.Родитель.ПодчиненныеЭлементы.Количество() > НомерСледующегоПоля Тогда
		СледующееПоле = ТекстовыйЭлемент.Родитель.ПодчиненныеЭлементы.Получить(НомерСледующегоПоля);
	КонецЕсли;
	
	//Вставка элементов после текстового поля
	
	Группа_ВводаТекста = Форма.Элементы.Вставить(ПриставкаЭлементов+"_ГруппаВводаТекста", Тип("ГруппаФормы"), ТекстовыйЭлемент.Родитель, СледующееПоле);
	Группа_ВводаТекста.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа_ВводаТекста.Заголовок = ТекстовыйЭлемент.Заголовок + " (Группа ввода текста)";
	Группа_ВводаТекста.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Группа_ВводаТекста.ОтображатьЗаголовок = Ложь;
	//Группа_ВводаТекста.Видимость = Ложь;
	
	ЭлементВвода = Форма.Элементы.Добавить(ПриставкаЭлементов+"_ВводТекста", Тип("ПолеФормы"), Группа_ВводаТекста);
	ЭлементВвода.Вид = ВидПоляФормы.ПолеВвода;
	ЗаполнитьЗначенияСвойств(ЭлементВвода, ТекстовыйЭлемент,,"ВыделенныйТекст, ПутьКДанным");
	ЭлементВвода.ПутьКДанным = ПриставкаЭлементов+"_ВводТекста";
	ЭлементВвода.ТолькоПросмотр = Ложь;
	//НовыйЭлемент.ПодсказкаВвода = ТекстовыйЭлемент.ПодсказкаВвода;
	//НовыйЭлемент.Высота = 2;
	//НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	//Группа кнопок
	Группа_КнопокВводаТекста = Форма.Элементы.Вставить(ПриставкаЭлементов+"_ГруппаКнопокВводаТекста", Тип("ГруппаФормы"), Группа_ВводаТекста);
	Группа_КнопокВводаТекста.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа_КнопокВводаТекста.Заголовок = ТекстовыйЭлемент.Заголовок + " (Группа кнопок ввода текста)";
	Группа_КнопокВводаТекста.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Группа_КнопокВводаТекста.ОтображатьЗаголовок = Ложь;
	
	//Кнопка Сохранить
	НовыйЭлемент = Форма.Элементы.Вставить(ПриставкаЭлементов+"_СохранитьТекст", Тип("КнопкаФормы"), Группа_КнопокВводаТекста);
	НовыйЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	НовыйЭлемент.ИмяКоманды = ПриставкаЭлементов+"_СохранитьТекст";
	НовыйЭлемент.ЦветФона = WebЦвета.СеребристоСерый;
	НовыйЭлемент.ЦветРамки = НовыйЭлемент.ЦветФона;
	
	//Кнопка Отменить
	НовыйЭлемент = Форма.Элементы.Вставить(ПриставкаЭлементов+"_ОтменитьТекст", Тип("КнопкаФормы"), Группа_КнопокВводаТекста);
	НовыйЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	НовыйЭлемент.ИмяКоманды = ПриставкаЭлементов+"_ОтменитьТекст";
	НовыйЭлемент.Ширина = 3;
	
	//Изменение текстового поля Форма["Объект"]["Описание"]
	РежимРедактированияТекстовогоПоля(Форма, ТекстовыйЭлемент, 
			?(ПустаяСтрока(ЗначениеТекстовогоПоля(Форма, ТекстовыйЭлемент)) 
				Или Не ЗначениеЗаполнено(Форма.Объект.Ссылка), "Изменить", "Отменить")
			);
	ТекстовыйЭлемент.ТолькоПросмотр = Истина;
	
	//Добавление возможности вставки из шаблона текстов
	//Кнопка ВставитьШаблонТекста
	НовыйЭлемент = Форма.Элементы.Вставить(ПриставкаЭлементов+"_ВставитьШаблонТекста", Тип("КнопкаФормы"), ЭлементВвода.КонтекстноеМеню);
	НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйЭлемент.ИмяКоманды = "ВставитьШаблонТекста";
	
	
КонецПроцедуры

&НаСервере
Процедура РежимРедактированияТекстовогоПоля(Форма, ТекстовыйЭлемент, Команда) Экспорт
	//При простом сохранении без включения режим редактирования поля изменять его не нужно
	Если Команда = "Сохранить" И Форма.Элементы[ТекстовыйЭлемент.Имя+"_ИзменитьТекст"].Видимость Тогда
		Возврат;
	КонецЕсли;

	Изменить = Команда = "Изменить";
	Форма.Элементы[ТекстовыйЭлемент.Имя+"_ИзменитьТекст"].Видимость = Не Изменить;
	Форма.Элементы[ТекстовыйЭлемент.Имя+"_ГруппаВводаТекста"].Видимость = Изменить;
	ТекстовыйЭлемент.Видимость = Не Изменить;
	ЗначениеТекстовогоПоля = ЗначениеТекстовогоПоля(Форма, ТекстовыйЭлемент);
	Если Команда = "Изменить" Тогда
		Форма.ТекущийЭлемент = Форма.Элементы[ТекстовыйЭлемент.Имя+"_ВводТекста"];
		Форма[ТекстовыйЭлемент.Имя+"_ВводТекста"] = ЗначениеТекстовогоПоля;
		//Форма[ТекстовыйЭлемент.Имя+"_ВводТекста"] = Форма[ТекстовыйЭлемент.Имя];
	Иначе  
		Если Команда = "Сохранить" Тогда
			ЗначениеТекстовогоПоля = Форма[ТекстовыйЭлемент.Имя+"_ВводТекста"];
			//Форма[ТекстовыйЭлемент.Имя] = Форма[ТекстовыйЭлемент.Имя+"_ВводТекста"];
		КонецЕсли;
		Форма.ТекущийЭлемент = ТекстовыйЭлемент;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗначениеТекстовогоПоля(Форма, ТекстовыйЭлемент)
	ЗначениеТекстовогоПоля = Форма;
	МассивИмен = СтрРазделить(ТекстовыйЭлемент.ПутьКДанным, ".", Ложь);
	Для Каждого СтрокаИмени Из МассивИмен Цикл
		ЗначениеТекстовогоПоля = ЗначениеТекстовогоПоля[СтрокаИмени];
	КонецЦикла;
	Возврат ЗначениеТекстовогоПоля;
КонецФункции
	
&НаКлиенте
Процедура РежимРедактированияТекстовогоПоля(Форма, РеквизитЭлемента, ТекстовыйЭлемент, Команда) Экспорт
	//При простом сохранении без включения режим редактирования поля изменять его не нужно
	Если Команда = "Сохранить" И Форма.Элементы[ТекстовыйЭлемент.Имя+"_ИзменитьТекст"].Видимость Тогда
		Возврат;
	КонецЕсли;
	Если Команда = "Сохранить" И ПустаяСтрока(Форма[ТекстовыйЭлемент.Имя+"_ВводТекста"]) Тогда
		РеквизитЭлемента = "";
		Возврат;
	КонецЕсли;
	
	Изменить = Команда = "Изменить";
	Форма.Элементы[ТекстовыйЭлемент.Имя+"_ИзменитьТекст"].Видимость = Не Изменить;
	Форма.Элементы[ТекстовыйЭлемент.Имя+"_ГруппаВводаТекста"].Видимость = Изменить;
	ТекстовыйЭлемент.Видимость = Не Изменить;
	Если Команда = "Изменить" Тогда
		Форма.ТекущийЭлемент = Форма.Элементы[ТекстовыйЭлемент.Имя+"_ВводТекста"];
		Форма[ТекстовыйЭлемент.Имя+"_ВводТекста"] = РеквизитЭлемента;
		//Форма[ТекстовыйЭлемент.Имя+"_ВводТекста"] = Форма[ТекстовыйЭлемент.Имя];
	Иначе  
		Если Команда = "Сохранить" Тогда
			РеквизитЭлемента = Форма[ТекстовыйЭлемент.Имя+"_ВводТекста"];
			//Форма[ТекстовыйЭлемент.Имя] = Форма[ТекстовыйЭлемент.Имя+"_ВводТекста"];
		КонецЕсли;
		Форма.ТекущийЭлемент = ТекстовыйЭлемент;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернуть(Форма, ГруппаТекстовогоЭлемента, ИмяПоля) Экспорт
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(ГруппаТекстовогоЭлемента);
	ЭлементФормы = ГруппаТекстовогоЭлемента.Родитель;
	Пока ТипЗнч(ЭлементФормы) <> Тип("ФормаКлиентскогоПриложения") Цикл
		МассивЭлементов.Добавить(ЭлементФормы);
		ЭлементФормы = ЭлементФормы.Родитель;
	КонецЦикла;
	
	КомандаИмя = ИмяПоля+"_РазвернутьСвернуть";
	Развернуть = Форма.Элементы[КомандаИмя].Пометка;
	СкрытьОстальныеЭлементыФормы(Форма, МассивЭлементов, Развернуть);
	
	//Форма.Элементы[КомандаИмя].Пометка   = Не Развернуть;
	Форма.Элементы[КомандаИмя].Заголовок = ?(Развернуть, "Свернуть", "Развернуть");
КонецПроцедуры

&НаКлиенте
Процедура СкрытьОстальныеЭлементыФормы(ГруппаФормы, МассивЭлементов, Развернуть)
	
	ТипЭлемента = ТипЗнч(ГруппаФормы);
	Если ТипЭлемента <> Тип("ГруппаФормы") И ТипЭлемента <> Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат;
	КонецЕсли;
	Если ГруппаФормы  = МассивЭлементов[0] Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Элемент Из ГруппаФормы.ПодчиненныеЭлементы Цикл
		Если МассивЭлементов.Найти(Элемент) = Неопределено Тогда
			Элемент.Видимость = Не Развернуть;
		Иначе
			СкрытьОстальныеЭлементыФормы(Элемент, МассивЭлементов, Развернуть);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

