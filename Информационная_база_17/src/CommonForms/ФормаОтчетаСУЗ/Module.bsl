
////////////////////////////////////////////////////////////////////////////////
//
// Реализовано редактирование на форме следующих параметров схемы компоновки 
// при их наличии: ПериодОтчета.
//
// Форма обрабатывает следующие параметры формы:
//		СформироватьПриОткрытии - Булево
//		ВыводитьСуммуВыделенныхЯчеек - Булево
//		УровеньСверткиСтрокПриФормировании - Число -  0 - не сворачивать, 1 - свернуть все, 2 - свернуть до уровня 2 и т.д.
//
// Форма обрабатывает следующие параметры схемы компоновки данных:
//		УровеньСверткиСтрокПриФормированииПоУмолчанию - Число -  0 - не сворачивать, 1 - свернуть все, 2 - свернуть до уровня 2 и т.д.
//
// Поведением формы можно управлять с помощью механизма событий.
// Переопределяемые события описываются в модуле объекта отчета.
// Пример реализации см. в Отчет.СтруктураРасходов.МодульОбъекта
//  
////////////////////////////////////////////////////////////////////////////////

&НаСервере
Перем ОтчетОбъект Экспорт;  // Кэш

&НаСервере
Перем ОбработкаОтбораВыполнялась Экспорт;  // Чтобы исключить повторную обработку (при расшифровке иногда срабатывает 2 раза)


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ОтчетыСервер.ЗаполнитьСлужебныеРеквизитыФормы(ЭтаФорма);
	
	Если ПараметрыРаботыФормы.РежимРасшифровкиСКД ИЛИ ПараметрыРаботыФормы.РежимРасшифровкиОтбор Тогда
		// При расшифровке используем свой набор сохраняемых данных формы.
		// С этим ключом сохраняются сохраняемые реквизиты формы и последние использованные КлючВарианат, КлючПользовательскихНастроек и пользовательские настройи
		КлючНазначенияИспользования = "Расшифровка";  
	КонецЕсли;
	
	Если ПараметрыРаботыФормы.СформироватьПриОткрытии Тогда
		Параметры.СформироватьПриОткрытии = Ложь;  // Чтобы не сработала системная обработка параметра
	КонецЕсли;
	
	Если НЕ ПараметрыРаботыФормы.ВыводитьСуммуВыделенныхЯчеек Тогда
		Элементы.ГруппаСумма.Видимость = Ложь;
		Элементы.ОтчетТабличныйДокумент.УстановитьДействие("ПриАктивизацииОбласти", "");
	КонецЕсли;
	
	ОтчетыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(Элементы.ФормаСкрытьПоказатьПанельНастроек, Элементы.ГруппаПанельНастроек.Видимость);
	
	// Переопределяемое событие ПриСозданииФормыНаСервере
	СтандартнаяОбработкаВФорме = Истина;
	Если ПараметрыСобытийОтчета.ВыполнятьПриСозданииФормыНаСервере Тогда
		ОтчетОбъект.ПриСозданииФормыНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, СтандартнаяОбработкаВФорме);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Обработка формирования отчета при открытии
	Если ПараметрыРаботыФормы.СформироватьПриОткрытии Тогда
		СкрыватьНастройкиПриФормированииОтчета = Истина;
		СформироватьОтчетКлиент();
		ПараметрыРаботыФормы.СформироватьПриОткрытии = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииВариантаНаСервере(Настройки)
	
	Если Настройки.ДополнительныеСвойства.Свойство("ИсходноеПредставлениеВарианта") Тогда
		Настройки.ДополнительныеСвойства.Удалить("ИсходноеПредставлениеВарианта");
	КонецЕсли;
	
	Если Настройки.ДополнительныеСвойства.Свойство("ИсходныйЗаголовокОтчета") Тогда
		Настройки.ДополнительныеСвойства.Удалить("ИсходныйЗаголовокОтчета");
	КонецЕсли;
	
	Модифицированность = ВариантМодифицирован;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	
	// Переопределим РежимРасшифровкиСКД и РежимРасшифровкиОтбор. В форме, изначально открытой в режиме расшифровки, могли загрузить другой вариант.
	ПараметрыРаботыФормы.РежимРасшифровкиСКД = Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено;
	ПараметрыРаботыФормы.РежимРасшифровкиОтбор = Параметры.Свойство("Отбор") И ЗначениеЗаполнено(Параметры.Отбор);
	
	// ПредставлениеТекущегоВарианта
	ЭтоСтандартныйВариант = ОтчетыВызовСервера.ЭтоСтандартныйВариант(КлючТекущегоВарианта, ПараметрыОбъекта.АдресСхемыКомпоновкиДанных);
	Если ЭтоСтандартныйВариант Тогда
		ПредставлениеТекущегоВарианта = ОтчетыКлиентСервер.ПредставлениеВариантаБезСтандартногоПрефикса(ПредставлениеТекущегоВарианта);
	КонецЕсли;
	ПредставлениеТекущегоВарианта = ОтчетыКлиентСервер.ПредставлениеВариантаСУчетомРасшифровки(ПредставлениеТекущегоВарианта, 
		ПараметрыРаботыФормы.РежимРасшифровкиСКД ИЛИ ПараметрыРаботыФормы.РежимРасшифровкиОтбор, 
		Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства);
	
	// Заголовок отчета
	Если ПараметрыРаботыФормы.РежимРасшифровкиСКД Тогда
		// При формировании исходного отчета использовалась пользовательская настройка заголовка отчета. Здесь необходимо ее сбросить.
		ПараметрЗаголовокОтчета = Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("Заголовок");
		ПараметрЗаголовокОтчета.ИдентификаторПользовательскойНастройки = "";
	КонецЕсли;
	
	// УровеньСверткиСтрокПриФормировании по умолчанию. Далее может быть переопределен пользовательской настройкой.
	ЗначениеПараметраДанных = ОтчетыКлиентСервер.ЗначениеПараметраДанныхНКДПоИмени(Отчет.КомпоновщикНастроек, "УровеньСверткиСтрокПриФормированииПоУмолчанию", , Ложь);
	
	УровеньСверткиСтрокПриФормировании = 0;
	Если Параметры.Свойство("УровеньСверткиСтрокПриФормировании") Тогда
		УровеньСверткиСтрокПриФормировании = Параметры.УровеньСверткиСтрокПриФормировании;
	ИначеЕсли ЗначениеПараметраДанных <> Неопределено Тогда
		УровеньСверткиСтрокПриФормировании = ЗначениеПараметраДанных.Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	// Запомним настройку свертки групп
	Настройки.ДополнительныеСвойства.Вставить("УровеньСверткиСтрокПриФормировании", УровеньСверткиСтрокПриФормировании);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	// Восстановим настройку свертки групп. Не восстанавливаем в момент открытия формы с параметром.
	Если НЕ Параметры.Свойство("УровеньСверткиСтрокПриФормировании") Тогда
		Настройки.ДополнительныеСвойства.Свойство("УровеньСверткиСтрокПриФормировании", УровеньСверткиСтрокПриФормировании);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	Модифицированность = ВариантМодифицирован;
	
	// Фрагмент выполняется один раз после создания формы и когда уже заполнен Отчет.КомпоновщикНастроек
	Если Параметры.Свойство("Отбор") И ОбработкаОтбораВыполнялась = Неопределено Тогда
		
		РежимРасшифровкиОтбор = ЗначениеЗаполнено(Параметры.Отбор);
		
		Если РежимРасшифровкиОтбор Тогда
			ОтчетыКлиентСервер.СброситьПользовательскиеНастройки(Отчет.КомпоновщикНастроек);
		КонецЕсли;
		
		// Переопределяемое событие ПриОбработкеПараметраФормыОтбор
		// Для вызова события необязательно, чтобы Отбор был заполнен.
		Если ПараметрыСобытийОтчета.ВыполнятьПриОбработкеПараметраФормыОтбор Тогда
			ОтчетОбъект = ОтчетыСервер.ПолучитьОтчетОбъект(ЭтаФорма);
			ОтчетОбъект.ПриОбработкеПараметраФормыОтбор(Параметры.Отбор, ЭтаФорма);
		КонецЕсли;
		
		Если РежимРасшифровкиОтбор Тогда
			// Перенесем фиксированные настройки в основные и пользовательские
			ОтчетыКлиентСервер.ОбработатьФиксированныеНастройки(Отчет.КомпоновщикНастроек);
			ПредставлениеТекущегоВариантаНаФорме = ПредставлениеТекущегоВарианта;
		КонецЕсли;
		
		ОбработкаОтбораВыполнялась = Истина;
		
	КонецЕсли;
	
	
	ИсключаемыеПараметры = "ПериодОтчета";  // Элементы формы для этих параметров будут созданы платформой или уже созданы на форме
	
	// Переопределяемое событие ПередСозданиемЭлементовФормыПользовательскихНастроек
	СтандартнаяОбработкаВФорме = Истина;
	Если ПараметрыСобытийОтчета.ВыполнятьПередСозданиемЭлементовФормыПользовательскихНастроек Тогда
		ОтчетОбъект = ОтчетыСервер.ПолучитьОтчетОбъект(ЭтаФорма);
		Отказ = Ложь;
		ОтчетОбъект.ПередСозданиемЭлементовФормыПользовательскихНастроек(ЭтаФорма, ИсключаемыеПараметры, Отказ, СтандартнаяОбработка, СтандартнаяОбработкаВФорме);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если СтандартнаяОбработкаВФорме Тогда
		
		// Обновим элементы и реквизиты формы для пользовательских параметров
		ОтчетыСервер.ОбновитьЭлементыПользовательскихПараметров(ЭтаФорма, ИсключаемыеПараметры);
		
		// ПериодОтчета
		ЗначениеПараметраДанных = ОтчетыКлиентСервер.ЗначениеПараметраДанныхНКДПоИмени(Отчет.КомпоновщикНастроек, "ПериодОтчета", , Ложь);
		ПараметрПериодОтчетаСуществует = ЗначениеПараметраДанных <> Неопределено И ЗначениеЗаполнено(ЗначениеПараметраДанных.ИдентификаторПользовательскойНастройки);
		Элементы.ПериодОтчета.Видимость = ПараметрПериодОтчетаСуществует;
		
		// Установим значения параметров
		ЗаполнитьРеквизитыФормыПоПараметрамНКД();
		
		// Установим режим отображения Обычный для всех элементов отбора, кроме тех, 
		// что указаны как пользовательские в самом варианте
		ОтборВарианта = Отчет.КомпоновщикНастроек.Настройки.Отбор;
		Если НЕ ПустаяСтрока(ОтборВарианта.ИдентификаторПользовательскойНастройки) Тогда
			ПользовательскийОтбор = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ОтборВарианта.ИдентификаторПользовательскойНастройки);
			ОтчетыКлиентСервер.СкрытьЭлементыОтбора(ПользовательскийОтбор.Элементы);
		КонецЕсли;
		
	КонецЕсли;
	
	// Переопределяемое событие ПриСозданииЭлементовФормыПользовательскихНастроек
	СтандартнаяОбработкаВФорме = Истина;
	Если ПараметрыСобытийОтчета.ВыполнятьПриСозданииЭлементовФормыПользовательскихНастроек Тогда
		ОтчетОбъект = ОтчетыСервер.ПолучитьОтчетОбъект(ЭтаФорма);
		ОтчетОбъект.ПриСозданииЭлементовФормыПользовательскихНастроек(ЭтаФорма, СтандартнаяОбработка, СтандартнаяОбработкаВФорме);
	КонецЕсли;
	
	Если СтандартнаяОбработкаВФорме Тогда
		// Создадим элементы пользовательских настроек
		СоздатьЭлементыФормыПользовательскихНастроек(Элементы.КомпоновщикНастроекПользовательскиеНастройки, РежимОтображенияНастроекКомпоновкиДанных.БыстрыйДоступ, 1);
	КонецЕсли;
	
	// Переопределяемое событие ПослеСозданияЭлементовФормыПользовательскихНастроек
	СтандартнаяОбработкаВФорме = Истина;
	Если ПараметрыСобытийОтчета.ВыполнятьПослеСозданияЭлементовФормыПользовательскихНастроек Тогда
		ОтчетОбъект = ОтчетыСервер.ПолучитьОтчетОбъект(ЭтаФорма);
		ОтчетОбъект.ПослеСозданияЭлементовФормыПользовательскихНастроек(ЭтаФорма, СтандартнаяОбработка, СтандартнаяОбработкаВФорме);
	КонецЕсли;
	
	Если СтандартнаяОбработкаВФорме Тогда
		ОтчетыКлиентСервер.ОформитьЭлементыПользовательскихНастроек(Элементы.КомпоновщикНастроекПользовательскиеНастройки);
	КонецЕсли;
	
	//// Обработка формирования отчета при открытии
	//Если ПараметрыРаботыФормы.СформироватьПриОткрытии Тогда
	//	СкрыватьНастройкиПриФормированииОтчета = Истина;
	//	СформироватьОтчетНаСервере();
	//	ПараметрыРаботыФормы.СформироватьПриОткрытии = Ложь;
	//КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодОтчетаПриИзменении(Элемент)
	
	ОтчетыКлиентСервер.УстановитьЗначениеПараметраДанныхНКДПоИмени(Отчет.КомпоновщикНастроек, "ПериодОтчета", ПериодОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Период, ЗакрыватьПриВыборе, ОповеститьОВыборе", ПериодОтчета, Истина, Истина);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	 
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПериодОтчета = ВыбранноеЗначение;
	Если ПериодОтчета.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		ПериодОтчета.ДатаНачала    = ?(ЗначениеЗаполнено(ПериодОтчета.ДатаНачала), НачалоДня(ПериодОтчета.ДатаНачала), '00010101');
		ПериодОтчета.ДатаОкончания = ?(ЗначениеЗаполнено(ПериодОтчета.ДатаОкончания), КонецДня(ПериодОтчета.ДатаОкончания), КонецГода(ТекущаяДата()));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПараметрОтчетаПриИзменении(Элемент)
	
	ИмяПараметра = ПользовательскиеПараметрыОтчета[Элемент.Имя];
	ОтчетыКлиентСервер.УстановитьЗначениеПараметраДанныхНКДПоИмени(Отчет.КомпоновщикНастроек, ИмяПараметра, ЭтаФорма[Элемент.Имя]);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	ОтчетыКлиент.ОбработкаРасшифровки(ЭтаФорма, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	// Сумма выделенных ячеек
	Если ПараметрыРаботыФормы.ВыводитьСуммуВыделенныхЯчеек Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РассчитатьСуммуЯчеек", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УровеньСверткиСтрокПриФормированииПриИзменении(Элемент)
	
	ПользовательскиеНастройкиМодифицированы = Истина;  // Чтобы настройка сохранилась в пользовательских настройках
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	СформироватьОтчетКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВычислитьСумму(Команда)
	
	// Сумма выделенных ячеек
	СуммаВыделенныхЯчеек = ВычислитьСуммуСервер(ОтчетТабличныйДокумент, ВыделенныеОбласти());
	Элементы.Сумма.Доступность = Истина;
	Элементы.ВычислитьСумму.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьПанельНастроек(Команда)
	
	Элементы.ГруппаПанельНастроек.Видимость = Не Элементы.ГруппаПанельНастроек.Видимость;
	ОтчетыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(Элементы.ФормаСкрытьПоказатьПанельНастроек, Элементы.ГруппаПанельНастроек.Видимость);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Запускает формирование отчета, при необходимости выводит предупреждения
&НаКлиенте
Процедура СформироватьОтчетКлиент()

	ТекстСообщений = "";
	СформироватьОтчетНаСервере(ТекстСообщений, Ложь);

	Если ТекстСообщений <> "" Тогда
		ПоказатьПредупреждение(, ТекстСообщений);
	КонецЕсли;
	 

КонецПроцедуры
 

&НаСервере
Процедура СформироватьОтчетНаСервере(ТекстСообщений = "", ПовторноеФормирование = Ложь)
	
	// Параметр вывода настроек КД "Заголовок"
	Перем ПараметрЗаголовокОтчета;
	
	УстановитьСлужебныеПараметрыНКД(); 
	
	// Переопределяемое событие ПередКомпоновкойРезультата
	СтандартнаяОбработкаВФорме = Истина;
	Если ПараметрыСобытийОтчета.ВыполнятьПередКомпоновкойРезультата Тогда
		ОтчетОбъект = ОтчетыСервер.ПолучитьОтчетОбъект(ЭтаФорма);
		Отказ = Ложь;
		ОтчетОбъект.ПередКомпоновкойРезультата(ЭтаФорма, Отказ, СтандартнаяОбработкаВФорме);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СуффиксПериод = "";
	Если СтандартнаяОбработкаВФорме Тогда
		Если ПараметрПериодОтчетаСуществует Тогда
			СуффиксПериод = " " + ОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПериодОтчета.ДатаНачала, ПериодОтчета.ДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	
	// Установим заголовок отчета
	ПараметрЗаголовокОтчета = Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("Заголовок");
	ПараметрЗаголовокОтчета.ИдентификаторПользовательскойНастройки = "ЗаголовокОтчета";
	
	ЗаголовокОтчет = ОтчетыКлиентСервер.ЗаголовокОтчетаСУчетомРасшифровки(ПараметрЗаголовокОтчета.Значение, 
		ПараметрыРаботыФормы.РежимРасшифровкиСКД ИЛИ ПараметрыРаботыФормы.РежимРасшифровкиОтбор, 
		Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства);
	
	ПользовательскийЗаголовокОтчета = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрЗаголовокОтчета.ИдентификаторПользовательскойНастройки);
	ПользовательскийЗаголовокОтчета.Значение = ЗаголовокОтчет;
	
	Если ПараметрПериодОтчетаСуществует Тогда
		ПользовательскийЗаголовокОтчета.Значение = ПользовательскийЗаголовокОтчета.Значение + СуффиксПериод;
	КонецЕсли;
	
	// Сформируем отчет
	Попытка
		СкомпоноватьРезультат(РежимКомпоновкиРезультата.Авто);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеОписание = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		Если НЕ ПовторноеФормирование И Найти(ПодробноеОписание, "Поле не найдено") > 0 Тогда
			
			// В случае изменения настроек или схемы отчета некоторые поля могли стать недоступными.
			//Для обхода этой проблемы попробуем восстановить в отчете настройки по умолчанию и повторить формирование
			
			ЭтоСтандартныйВариант = ОтчетыВызовСервера.ЭтоСтандартныйВариант(КлючТекущегоВарианта, ПараметрыОбъекта.АдресСхемыКомпоновкиДанных);
			Если ЭтоСтандартныйВариант Тогда
				ТекстСообщений = НСтр("ru='В отчете изменился состав полей. 
					|Для корректной работы отчета восстановите настройки по умолчанию с помощью меню ""Еще..."" - ""Установить стандартные настройки"".'");
			Иначе
				ТекстСообщений = НСтр("ru='В отчете изменился состав полей! 
					|Откройте вариант отчета в меню  ""Еще..."" - ""Изменить вариант..."", найдите и замените все поля, помеченные красным крестиком.'");
			КонецЕсли;
			 
			ВосстановитьНастройкиОтчетаПоУмолчанию();
			СформироватьОтчетНаСервере(ТекстСообщений, Истина);
			Возврат;
			
		КонецЕсли;
		 
		
		// Сбросим служебные пользовательские настройки
		Если ПараметрЗаголовокОтчета <> Неопределено Тогда
			ПараметрЗаголовокОтчета.ИдентификаторПользовательскойНастройки = "";
		КонецЕсли;
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
	
	// Свернем группы, включая вложенные
	Если УровеньСверткиСтрокПриФормировании > 0 Тогда
		ТекУровень = ОтчетТабличныйДокумент.КоличествоУровнейГруппировокСтрок() - 1;
		Пока ТекУровень >= УровеньСверткиСтрокПриФормировании - 1 Цикл
			ОтчетТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(ТекУровень);
			ТекУровень = ТекУровень - 1;
		КонецЦикла;
	КонецЕсли; 
	
	// Переопределяемое событие ПослеКомпоновкиРезультата
	Если ПараметрыСобытийОтчета.ВыполнятьПослеКомпоновкиРезультата Тогда
		ОтчетОбъект = ОтчетыСервер.ПолучитьОтчетОбъект(ЭтаФорма);
		ОтчетОбъект.ПослеКомпоновкиРезультата(ОтчетТабличныйДокумент, ЭтаФорма);
	КонецЕсли;
	
	// Сбросим служебные пользовательские настройки
	Если ПараметрЗаголовокОтчета <> Неопределено Тогда
		ПараметрЗаголовокОтчета.ИдентификаторПользовательскойНастройки = "";
	КонецЕсли;
	
	// Скроем панель настроек
	Если Элементы.ГруппаПанельНастроек.Видимость И СкрыватьНастройкиПриФормированииОтчета Тогда
		Элементы.ГруппаПанельНастроек.Видимость = Ложь;
		ОтчетыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(Элементы.ФормаСкрытьПоказатьПанельНастроек, Элементы.ГруппаПанельНастроек.Видимость);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиОтчетаПоУмолчанию()

	Схема = ПолучитьИзВременногоХранилища(ПараметрыОбъекта.АдресСхемыКомпоновкиДанных);
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема);
	Отчет.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	
	ОтчетыКлиентСервер.СброситьПользовательскиеНастройки(Отчет.КомпоновщикНастроек);
	
	ЗаполнитьРеквизитыФормыПоПараметрамНКД();
	
КонецПроцедуры
 

////////////////////////////////////////////////////////////////////////////////
// Процедуры для работы с параметрами отчета

// Заполненяет реквизиты формы по параметрам НКД, устанавливает значения по умолчанию
//
&НаСервере
Процедура ЗаполнитьРеквизитыФормыПоПараметрамНКД()
		
	// Переопределяемое событие ПриЗаполненииРеквизитовФормыПоПараметрамНКД
	СтандартнаяОбработкаВФорме = Истина;
	Если ПараметрыСобытийОтчета.ВыполнятьПриЗаполненииРеквизитовФормыПоПараметрамНКД Тогда
		ОтчетОбъект = ОтчетыСервер.ПолучитьОтчетОбъект(ЭтаФорма);
		Отказ = Ложь;
		ОтчетОбъект.ПриЗаполненииРеквизитовФормыПоПараметрамНКД(ЭтаФорма, СтандартнаяОбработкаВФорме);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если СтандартнаяОбработкаВФорме Тогда
		
		Для каждого КлючИЗначение Из ПользовательскиеПараметрыОтчета Цикл
			ЭтаФорма[КлючИЗначение.Ключ] = ОтчетыКлиентСервер.ЗначениеПараметраДанныхНКДПоИмени(Отчет.КомпоновщикНастроек, КлючИЗначение.Значение).Значение;
		КонецЦикла;
		
		// ПериодОтчета
		Если ПараметрПериодОтчетаСуществует Тогда
			ЗначениеПараметра = ОтчетыКлиентСервер.ЗначениеПараметраДанныхНКДПоИмени(Отчет.КомпоновщикНастроек, "ПериодОтчета");
			ЗначениеПараметра.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
			ПериодОтчета = ЗначениеПараметра.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполненяет служебные параметры НКД, влияющие только на формирование отчета.
// 
&НаСервере
Процедура УстановитьСлужебныеПараметрыНКД()
		
	// Переопределяемое событие ПриУстановкеСлужебныхПараметровНКД
	СтандартнаяОбработкаВФорме = Истина;
	Если ПараметрыСобытийОтчета.ВыполнятьПриУстановкеСлужебныхПараметровНКД Тогда
		ОтчетОбъект = ОтчетыСервер.ПолучитьОтчетОбъект(ЭтаФорма);
		Отказ = Ложь;
		ОтчетОбъект.ПриУстановкеСлужебныхПараметровНКД(ЭтаФорма, СтандартнаяОбработкаВФорме);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если СтандартнаяОбработкаВФорме Тогда
		
		//// ВалютаОтчета
		//ЗначениеПараметраДанных = ОтчетыКлиентСервер.ЗначениеПараметраДанныхНКДПоИмени(Отчет.КомпоновщикНастроек, "ВалютаОтчета", , Ложь);
		//ПараметрВалютаОтчетаСуществует = ЗначениеПараметраДанных <> Неопределено И ЗначениеЗаполнено(ЗначениеПараметраДанных.ИдентификаторПользовательскойНастройки);
		//Если ПараметрВалютаОтчетаСуществует И НЕ ЗначениеЗаполнено(ЗначениеПараметраДанных.Значение) Тогда
		//	// Установим значение по умолчанию
		//	ОтчетыКлиентСервер.УстановитьЗначениеПараметраДанныхНКДПоИмени(Отчет.КомпоновщикНастроек, "ВалютаОтчета",  ВалютаУчета);
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сумма выделенных ячеек

&НаКлиенте
Процедура Подключаемый_РассчитатьСуммуЯчеек()
	
	Сумма = РассчитатьСуммуВыделенныхЯчеек(ОтчетТабличныйДокумент, Неопределено);
	Если ТипЗнч(Сумма) = Тип("Число") Тогда
		СуммаВыделенныхЯчеек = Формат(Сумма, "ЧН=0");
		Элементы.Сумма.Доступность = Истина;
		Элементы.ВычислитьСумму.Доступность = Ложь;
	Иначе
		СуммаВыделенныхЯчеек = "Нажмите ∑"; //"-";
		Элементы.Сумма.Доступность = Ложь;
		Элементы.ВычислитьСумму.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВычислитьСуммуСервер(Знач ОтчетТабличныйДокумент, Знач ВыделенныеОбласти)
	
	Сумма = РассчитатьСуммуВыделенныхЯчеек(ОтчетТабличныйДокумент, ВыделенныеОбласти);
	Возврат Формат(Сумма, "ЧН=0");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьСуммуВыделенныхЯчеек(ТабличныйДокумент, ВыделенныеОбласти)
	
	#Если Клиент Тогда
		ВыделенныеОбласти = ТабличныйДокумент.ВыделенныеОбласти;
	#КонецЕсли
	
	#Если Клиент И Не ТолстыйКлиентУправляемоеПриложение И Не ТолстыйКлиентОбычноеПриложение Тогда
		КоличествоВыделенныхОбластей = ВыделенныеОбласти.Количество();
		Если КоличествоВыделенныхОбластей = 0 Тогда
			Возврат 0;
		ИначеЕсли КоличествоВыделенныхОбластей >= 100 Тогда
			Возврат Неопределено; // Нужен вызов сервера.
		КонецЕсли;
		КоличествоВыделенныхЯчеек = 0;
	#КонецЕсли
	
	Сумма = 0;
	ПроверенныеЯчейки = Новый Соответствие;
	
	Для Каждого ВыделеннаяОбласть Из ВыделенныеОбласти Цикл
		#Если Клиент Тогда
			Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
				Продолжить;
			КонецЕсли;
		#КонецЕсли
		
		ВыделеннаяОбластьВерх = ВыделеннаяОбласть.Верх;
		ВыделеннаяОбластьНиз = ВыделеннаяОбласть.Низ;
		ВыделеннаяОбластьЛево = ВыделеннаяОбласть.Лево;
		ВыделеннаяОбластьПраво = ВыделеннаяОбласть.Право;
		
		Если ВыделеннаяОбластьВерх = 0 Тогда
			ВыделеннаяОбластьВерх = 1;
		КонецЕсли;
		
		Если ВыделеннаяОбластьНиз = 0 Тогда
			ВыделеннаяОбластьНиз = ТабличныйДокумент.ВысотаТаблицы;
		КонецЕсли;
		
		Если ВыделеннаяОбластьЛево = 0 Тогда
			ВыделеннаяОбластьЛево = 1;
		КонецЕсли;
		
		Если ВыделеннаяОбластьПраво = 0 Тогда
			ВыделеннаяОбластьПраво = ТабличныйДокумент.ШиринаТаблицы;
		КонецЕсли;
		
		Если ВыделеннаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда
			ВыделеннаяОбластьВерх = ВыделеннаяОбласть.Низ;
			ВыделеннаяОбластьНиз = ТабличныйДокумент.ВысотаТаблицы;
		КонецЕсли;
		
		ВыделеннаяОбластьВысота = ВыделеннаяОбластьНиз   - ВыделеннаяОбластьВерх;
		ВыделеннаяОбластьШирина = ВыделеннаяОбластьПраво - ВыделеннаяОбластьЛево;
		
		#Если Клиент И Не ТолстыйКлиентУправляемоеПриложение И Не ТолстыйКлиентОбычноеПриложение Тогда
			КоличествоВыделенныхЯчеек = КоличествоВыделенныхЯчеек + ВыделеннаяОбластьШирина * ВыделеннаяОбластьВысота;
			Если КоличествоВыделенныхЯчеек >= 1000 Тогда
				Возврат Неопределено; // Нужен вызов сервера.
			КонецЕсли;
		#КонецЕсли
		
		Для НомерКолонки = ВыделеннаяОбластьЛево По ВыделеннаяОбластьПраво Цикл
			Для НомерСтроки = ВыделеннаяОбластьВерх По ВыделеннаяОбластьНиз Цикл
				Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
				Если ПроверенныеЯчейки.Получить(Ячейка.Имя) = Неопределено Тогда
					ПроверенныеЯчейки.Вставить(Ячейка.Имя, Истина);
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если Ячейка.Видимость = Истина Тогда
					Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
						Сумма = Сумма + Ячейка.Значение;
					ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
						Сумма = Сумма + СтрокаВЧисло(Ячейка.Текст);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции

&НаКлиенте
Функция ВыделенныеОбласти()
	
	Области = Новый Массив;
	Для Каждого ВыделеннаяОбласть Из ОтчетТабличныйДокумент.ВыделенныеОбласти Цикл
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		Структура = Новый Структура("Верх, Низ, Лево, Право, ТипОбласти");
		ЗаполнитьЗначенияСвойств(Структура, ВыделеннаяОбласть);
		Области.Добавить(Структура);
	КонецЦикла;
	
	Возврат Области;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВЧисло(ИсходнаяСтрока)
	// Превращает строку в число без вызова исключений. Стандартная функция преобразования
	//   Число() строго контролирует отсутствие каких-либо символов кроме числовых.
	
	Результат = 0;
	ЗнаковПослеЗапятой = -1;
	ЗнакОтрицательный = Ложь;
	Для НомерСимвола = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		КодСимвола = КодСимвола(ИсходнаяСтрока, НомерСимвола);
		Если КодСимвола = 32 Или КодСимвола = 160 Тогда // Пробел или неразрывный пробел.
			// Пропуск (действие не требуется).
		ИначеЕсли КодСимвола = 45 Тогда // Минус
			Если Результат <> 0 Тогда
				Возврат 0;
			КонецЕсли;
			ЗнакОтрицательный = Истина;
		ИначеЕсли КодСимвола = 44 Или КодСимвола = 46 Тогда // Запятая или точка.
			ЗнаковПослеЗапятой = 0; // Запуск отсчета знаков после запятой.
		ИначеЕсли КодСимвола > 47 И КодСимвола < 58 Тогда // Число.
			Если ЗнаковПослеЗапятой <> -1 Тогда
				ЗнаковПослеЗапятой = ЗнаковПослеЗапятой + 1;
			КонецЕсли;
			Число = КодСимвола - 48;
			Результат = Результат * 10 + Число;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗнаковПослеЗапятой > 0 Тогда
		Результат = Результат / Pow(10, ЗнаковПослеЗапятой);
	КонецЕсли;
	Если ЗнакОтрицательный Тогда
		Результат = -Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти

