&НаКлиенте
Перем ЭлементПроектДляИзмененияШирины;

#Область СобытияФормы
	
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Настройка автоматического открытия формы при начале работы порграммы
	Элементы.ФормаОткрыватьПриЗапускеПрограммы.Пометка = СтрНайти(СистемаУчетаЗадачСервер.ПриЗапускеОткрыватьРаздел(),"Доска") <> 0;
	
	//СписокНовые
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокНовые, "Статус", 
		ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Новая"));
	УстановитьСортировкуСписка(СписокНовые, "Непрочитана-, Приоритет, Дата");
	
	
	//СписокВОчереди
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗадач.ВОчереди"));
//	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Приостановлена"));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокВОчереди, "Статус", 
		МассивСтатусов);
	УстановитьСортировкуСписка(СписокВОчереди, "Исполнитель, Порядок");
	
		
	//СписокВРаботе
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗадач.ВРаботе"));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокВРаботе, "Статус", 
		МассивСтатусов);
	УстановитьСортировкуСписка(СписокВРаботе, "Исполнитель, Статус, ДатаСтатуса");
	
	
	//СписокПодтверждение
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПодтверждение, "Статус", 
		ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Подтверждение"));
	УстановитьСортировкуСписка(СписокПодтверждение, "Исполнитель, ДатаСтатуса");
	
	
	//СписокЗавершенные
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Завершена"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Отменена"));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокЗавершенные, "Статус", 
		МассивСтатусов);
	УстановитьСортировкуСписка(СписокЗавершенные, "ДатаСтатуса-, Дата");
	
	УстановитьУсловноеОформлениеСписков();
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Новая"));
	ЗадачиВызовСервера.ЗаполнитьГруппуИзмененияСтатуса(Элементы, Команды, "УстановитьСтатус_", "СписокНовыеКонтекстноеМеню", Элементы.СписокНовыеКонтекстноеМенюУстановитьСтатус, МассивСтатусов);
	
//	УправлениеФормой(ЭтаФорма);
	ЭтоВнешнийПользователь = ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя();

	ОпределитьДоступностьПолнотекстовыйПоиск();

	ПроверитьДоступностьНовойВерсии();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНаСервере();
	ВывестиДиаграммуРабот();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Задачи.ИзменениеСтатуса" Тогда
		ОбновитьСтатусОтложенные();	
		ОбновитьЗаголовкиСписков(ЭтаФорма);
		ВывестиДиаграммуРабот();
	ИначеЕсли ИмяСобытия = "Изменилась настройка" И Параметр.Свойство("ПриЗапускеОткрыватьРаздел") Тогда
		Элементы.ФормаОткрыватьПриЗапускеПрограммы.Пометка =  СтрНайти(Параметр.ПриЗапускеОткрыватьРаздел,"Доска") <> 0;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	УправлениеФормой();
КонецПроцедуры

#КонецОбласти

#Область ЭлементыФормы
	
&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	УстановитьОтборСписковПоРеквизиту("Исполнитель");
	ВывестиДиаграммуРабот();
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура("РежимВыбора, ВыборГруппПользователей", Истина, Истина);
	ОткрытьФорму("Справочник.Пользователи.Форма.ФормаСписка", ПараметрыОтбора, Элементы.Исполнитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	УстановитьОтборСписковПоРеквизиту("Проект");
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикПриИзменении(Элемент)
	УстановитьОтборСписковПоРеквизиту("Заказчик");
КонецПроцедуры

&НаКлиенте
Процедура ОтборТегПриИзменении(Элемент)
	УстановитьОтборСписковПоРеквизиту("Тег");
КонецПроцедуры

&НаКлиенте
Процедура СписокНовыеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	СписокПередНачаломДобавления(Отказ, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура СписокВОчередиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	СписокПередНачаломДобавления(Отказ, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура СписокВРаботеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	СписокПередНачаломДобавления(Отказ, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура СписокПодтверждениеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	СписокПередНачаломДобавления(Отказ, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура СписокЗавершенныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	СписокПередНачаломДобавления(Отказ, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура СписокНовыеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, 
		ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Новая"));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВОчередиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, 
		ПредопределенноеЗначение("Перечисление.СтатусыЗадач.ВОчереди"));
		
КонецПроцедуры

&НаКлиенте
Процедура СписокВРаботеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, 
		ПредопределенноеЗначение("Перечисление.СтатусыЗадач.ВРаботе"));
		
КонецПроцедуры

&НаКлиенте
Процедура СписокПодтверждениеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, 
		ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Подтверждение"));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗавершенныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, 
		ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Завершена"));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНовыеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
КонецПроцедуры

&НаКлиенте
Процедура СписокВОчередиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
КонецПроцедуры

&НаКлиенте
Процедура СписокВРаботеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
КонецПроцедуры

&НаКлиенте
Процедура СписокПодтверждениеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
КонецПроцедуры

&НаКлиенте
Процедура СписокЗавершенныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
КонецПроцедуры

&НаКлиенте
Процедура СписокНовыеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	СписокНачалоПеретаскивания(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СписокВОчередиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	СписокНачалоПеретаскивания(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СписокВРаботеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	СписокНачалоПеретаскивания(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СписокПодтверждениеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	СписокНачалоПеретаскивания(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СписокЗавершенныеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	СписокНачалоПеретаскивания(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтложенныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФормуСпискаЗадач(ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Ожидание"), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
КонецПроцедуры

&НаКлиенте
Процедура ОтложенныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Ожидание");
	СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, 
		Статус);
	Оповестить("Задачи.ИзменениеСтатуса", Статус, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершенныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФормуСпискаЗадач(ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Завершена"), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершенныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
КонецПроцедуры

&НаКлиенте
Процедура ЗавершенныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Завершена");
	СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, Статус);
	Оповестить("Задачи.ИзменениеСтатуса", Статус, ЭтаФорма);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокНовыеПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	СписокПриПолученииДанныхНаСервере(Строки);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокВОчередиПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	СписокПриПолученииДанныхНаСервере(Строки);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокВРаботеПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	СписокПриПолученииДанныхНаСервере(Строки);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПодтверждениеПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	СписокПриПолученииДанныхНаСервере(Строки);
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсФормы
	
&НаСервере
Процедура УправлениеФормой()
	
	УстановитьОтборСписковПоРеквизиту("Исполнитель", Ложь);
	УстановитьОтборСписковПоРеквизиту("Заказчик", Ложь);
	УстановитьОтборСписковПоРеквизиту("Проект", Ложь);
	ИзменитьВидФормы();
	ПодготовитьДиаграмму(ДиаграммаРаботыЗаДень);
	ПодготовитьДиаграмму(ДиаграммаРаботыЗаМесяц);
	ПодготовитьДиаграмму(ДиаграммаЗакрытыхРаботВмесяце);
	//Проверка возможности создания задач по шаблонам
	Элементы.СоздатьЗадачуПоШаблону.Видимость = ЗадачиВызовСервера.ИспользованиеШаблоновЗадач();
	ОбновитьСтатусОтложенные();
	ОбновитьЗаголовкиСписков(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСписковПоРеквизиту(ИмяРеквизита, ОбновлятьЗаголовкиПоСтатусам = Истина)
	
	МассивСписков = Новый Массив;
	МассивСписков.Добавить("СписокНовые");
	МассивСписков.Добавить("СписокВОчереди");
	МассивСписков.Добавить("СписокВРаботе");
	МассивСписков.Добавить("СписокПодтверждение");
	МассивСписков.Добавить("СписокЗавершенные");
	
	Если ИмяРеквизита = "Исполнитель" Тогда
		Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			МассивИсполнителей = Справочники.ГруппыПользователей.ПолучитьПользователейГруппы(Исполнитель);
		Иначе
			МассивИсполнителей = Новый Массив;
			МассивИсполнителей.Добавить(Исполнитель);
		КонецЕсли;
		МассивИсполнителей.Добавить(Справочники.Пользователи.ПустаяСсылка());
	КонецЕсли;
	
	Для каждого Список Из МассивСписков Цикл
		Если ИмяРеквизита = "Исполнитель" Тогда
			//Для отбора по исполнителю нужно что бы незаполненые тоже показывались
			ОтборПоИсполнителю = ЗначениеЗаполнено(Исполнитель);
			ОтборДинамическогоСписка = ЭтаФорма[Список].КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
			ГруппаЭлементовОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ОтборДинамическогоСписка.Элементы,"ГруппаИсполнитель",ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			ГруппаЭлементовОтбора.Использование = ОтборПоИсполнителю;
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбора, "Исполнитель", МассивИсполнителей, ВидСравненияКомпоновкиДанных.ВСписке, "ВыбранныйИсполнитель",ОтборПоИсполнителю);
		ИначеЕсли ИмяРеквизита = "Тег" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтаФорма[Список], "Ссылка.Теги.Тег", ОтборТег, ВидСравненияКомпоновкиДанных.ВИерархии, , ЗначениеЗаполнено(ОтборТег));
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЭтаФорма[Список], ИмяРеквизита, ЭтаФорма[ИмяРеквизита], ВидСравненияКомпоновкиДанных.ВИерархии, , ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизита]));
		КонецЕсли;
	КонецЦикла;
	
	Если ОбновлятьЗаголовкиПоСтатусам Тогда
		ОбновитьСтатусОтложенные();
		ОбновитьЗаголовкиСписков(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСписков()
	
	УстановитьУсловноеОформлениеСписка(СписокНовые,         Элементы.СписокНовые.Шрифт,         "Дата", "Приоритет");
	УстановитьУсловноеОформлениеСписка(СписокВОчереди,      Элементы.СписокВОчереди.Шрифт,      "Дата", "Приоритет");
	УстановитьУсловноеОформлениеСписка(СписокВРаботе,       Элементы.СписокВРаботе.Шрифт,       "ДатаСтатуса", "Приоритет");
	УстановитьУсловноеОформлениеСписка(СписокПодтверждение, Элементы.СписокПодтверждение.Шрифт, "ДатаСтатуса", "Приоритет");
	УстановитьУсловноеОформлениеСписка(СписокЗавершенные,   Элементы.СписокЗавершенные.Шрифт,   "ДатаСтатуса", "Приоритет");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСортировкуСписка(СортируемыйСписок, СписокПолей)
	
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокПолей, ",", Истина, Истина);
	СортируемыйСписок.Порядок.Элементы.Очистить();
	Для каждого Поле Из МассивПолей Цикл
		ЭлементСортировки = СортируемыйСписок.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		Если СтрНайти(Поле, "-") <> 0 Тогда
			ЭлементСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			Поле = СтрЗаменить(Поле, "-", "");
		КонецЕсли;
		ЭлементСортировки.Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСписка(ОформляемыйСписок, БазовыйШрифт, ПолеДаты, ПолеПриоритета)
	
	ОформляемыйСписок.УсловноеОформление.Элементы.Очистить();
	
	Документы.Задачи.УстановитьУсловноеОформление(ОформляемыйСписок, БазовыйШрифт, ПолеДаты);
	
	//ЭлементОформления = ОформляемыйСписок.УсловноеОформление.Элементы.Добавить();
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, "Проект", ВидСравненияКомпоновкиДанных.Равно, ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка"));
	//ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Проект");
	
	//ЭлементОформления = ОформляемыйСписок.УсловноеОформление.Элементы.Добавить();
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, "Проект.Цвет", ВидСравненияКомпоновкиДанных.НеЗаполнено, Неопределено);
	//ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Проект.Цвет");
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусОтложенные()
	
	ПараметрыОтбора = Новый Структура("Проект, Заказчик, Исполнитель, Тег",Проект, Заказчик, Исполнитель, ОтборТег);
	
	//Заполнение отложенных
	Если Отложенные.Количество() = 0 Тогда
		СтрОтложенные = Отложенные.Добавить();
	Иначе
		СтрОтложенные = Отложенные[0];
	КонецЕсли;
	СтрОтложенные.Заголовок = НСтр("ru = 'Ожидание:'");
	
	СтрОтложенные.Количество = ПолучитьКоличествоПоСтатусу(ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Ожидание"), ПараметрыОтбора);

	//Заполнение завершенных за день
	Если Завершенные.Количество() = 0 Тогда
		СтрЗавершенные = Завершенные.Добавить();
	Иначе
		СтрЗавершенные = Завершенные[0];
	КонецЕсли;
	СтрЗавершенные.Заголовок = НСтр("ru = 'Завершенные сегодня:'");
	
	СтрЗавершенные.Количество = ПолучитьКоличествоПоСтатусу(ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Завершена"), ПараметрыОтбора);
	
КонецПроцедуры // ОбновитьСтатусОтложенные()

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗаголовкиСписков(Знач Форма)
	СоответствиеСтатусов = Новый Соответствие;
	СоответствиеСтатусов.Вставить("ЗаголовокНовые", ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Новая"));
	СоответствиеСтатусов.Вставить("ЗаголовокВОчереди", ПредопределенноеЗначение("Перечисление.СтатусыЗадач.ВОчереди"));
	СоответствиеСтатусов.Вставить("ЗаголовокВРаботе", ПредопределенноеЗначение("Перечисление.СтатусыЗадач.ВРаботе"));
	СоответствиеСтатусов.Вставить("ЗаголовокПодтверждение", ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Подтверждение"));
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Завершена"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Отменена"));
	СоответствиеСтатусов.Вставить("ЗаголовокЗавершенные", МассивСтатусов);
	
	ПараметрыОтбора = Новый Структура("Проект, Заказчик, Исполнитель, Тег", Форма.Проект, Форма.Заказчик, Форма.Исполнитель, Форма.ОтборТег);
	СоответствиеЗаголовков = ПолучитьЗаголовкиСписковНаСервере(СоответствиеСтатусов, ПараметрыОтбора);
	
	Для каждого КлючИЗначение Из СоответствиеЗаголовков Цикл
		Форма[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗаголовкиСписковНаСервере(Знач СоответствиеСтатусов, ПараметрыОтбора)
	СоответствиеЗаголовков = Новый Соответствие;
	Для каждого КлючИЗначение Из СоответствиеСтатусов Цикл
		СоответствиеЗаголовков.Вставить(КлючИЗначение.Ключ, ПолучитьКоличествоПоСтатусу(КлючИЗначение.Значение, ПараметрыОтбора));
	КонецЦикла;
	Возврат СоответствиеЗаголовков;
КонецФункции

&НаКлиенте
Процедура УведомлениеОНовойВерсииНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормаОбновления = ОткрытьФорму("Обработка.УстановкаОбновлений.Форма");
	ФормаОбновления.НуженФайлОбновления = 2;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсеТаблицыЗадач();
	Элементы.СписокНовые.Обновить();
	Элементы.СписокВОчереди.Обновить();
	Элементы.СписокВРаботе.Обновить();
	Элементы.СписокПодтверждение.Обновить();
КонецПроцедуры

// Настройка автоматического открытия формы при начале работы порграммы

&НаСервереБезКонтекста
Процедура ИзменитьНастройкуОткрытияПриЗапускеПрограммы(НоваяНастройка)

	СистемаУчетаЗадачСервер.ЗаписатьПриЗапускеОткрыватьРаздел(НоваяНастройка);

КонецПроцедуры
 
&НаКлиенте
Процедура ОткрыватьПриЗапускеПрограммы(Команда)
	
	ЗначениеНастройки = ?(Элементы.ФормаОткрыватьПриЗапускеПрограммы.Пометка, "Доска-", "Доска");
	ИзменитьНастройкуОткрытияПриЗапускеПрограммы(ЗначениеНастройки);
	Элементы.ФормаОткрыватьПриЗапускеПрограммы.Пометка = НЕ Элементы.ФормаОткрыватьПриЗапускеПрограммы.Пометка;
	Оповестить("Изменилась настройка", Новый Структура("ПриЗапускеОткрыватьРаздел", ЗначениеНастройки))
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСоСписками
	
&НаКлиенте
Процедура СписокПередНачаломДобавления(Отказ, Копирование)
	Если Не Копирование Тогда
		Отказ = Истина;
		ОткрытьФормуНовойЗадачи();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокНачалоПеретаскивания(Знач Элемент)
	
	ИсточникПеретаскивания = Элемент.Имя
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	МассивЗадач = ПолучитьМассивЗадачИзПараметровПеретаскивания(ПараметрыПеретаскивания);
	МассивДействий = Новый Массив;
	
	Если МассивЗадач.Количество() = 0 Тогда
		//
	Иначе
		Если 
			Элемент.Имя <> ИсточникПеретаскивания ИЛИ 
			(Элемент = Элементы.СписокВОчереди И ВозможноИзменитьПорядокЗадачи(МассивЗадач, Строка)) 
			Тогда
			МассивДействий.Добавить(ДействиеПеретаскивания.Перемещение);
		КонецЕсли;
		Если 
			Элемент.Имя <> ИсточникПеретаскивания И 
			Элемент = Элементы.СписокВОчереди И 
			ВозможноИзменитьПорядокЗадачи(МассивЗадач, Строка)
			Тогда
			МассивДействий.Добавить(ДействиеПеретаскивания.Копирование); // перед выбранной задачей
		КонецЕсли;
		Если 
			Элемент.Имя <> ИсточникПеретаскивания И 
			Элемент = Элементы.СписокВРаботе
			Тогда
			МассивДействий.Добавить(ДействиеПеретаскивания.Копирование); // без приостановки задач
		КонецЕсли;
	КонецЕсли; 
	
	Если МассивДействий.Найти(ПараметрыПеретаскивания.Действие) = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, Статус)
	
	СтандартнаяОбработка = Ложь;
	МассивЗадач = ПолучитьМассивЗадачИзПараметровПеретаскивания(ПараметрыПеретаскивания);
	
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
		
		Если Элемент.Имя <> ИсточникПеретаскивания Тогда
			
			ЗадачиКлиент.ИзменитьСтатусСВыборомИсполнителя(МассивЗадач, Статус, Исполнитель, Элемент, ?(ЗначениеЗаполнено(ИсточникПеретаскивания), Элементы[ИсточникПеретаскивания], Неопределено));
			
		ИначеЕсли Элемент = Элементы.СписокВОчереди Тогда
			// меняем порядок задач в списке "в очереди"
			ПоменятьПорядокЗадачиВОчереди(МассивЗадач[0], Строка);
			Элемент.Обновить();
			Элемент.ТекущаяСтрока = МассивЗадач[0];
		КонецЕсли;
	ИначеЕсли ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование Тогда
		
		Если Элемент.Имя <> ИсточникПеретаскивания И Элемент = Элементы.СписокВОчереди Тогда
			
			ЗадачиКлиент.ИзменитьСтатусСВыборомИсполнителя(МассивЗадач, Статус, Исполнитель, Элемент, Элементы[ИсточникПеретаскивания]);
			// меняем порядок задач в списке "в очереди"
			
			ПоменятьПорядокЗадачиВОчереди(МассивЗадач[0], Строка);
			Элемент.Обновить();
			Элемент.ТекущаяСтрока = МассивЗадач[0];
			
		ИначеЕсли Элемент.Имя <> ИсточникПеретаскивания И Элемент = Элементы.СписокВРаботе Тогда
			
			ЗадачиКлиент.ИзменитьСтатусСВыборомИсполнителя(МассивЗадач, Статус, Исполнитель, Элемент, Элементы[ИсточникПеретаскивания]);
			// меняем порядок задач в списке "в очереди"
			
			ПоменятьПорядокЗадачиВОчереди(МассивЗадач[0], Строка);
			Элемент.Обновить();
			Элемент.ТекущаяСтрока = МассивЗадач[0];
		КонецЕсли;
		
		
	КонецЕсли;
	
	ИсточникПеретаскивания = Неопределено;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(Строки)
	Для Каждого СтрокаВыд Из Строки Цикл
		ТегиСтрока = "";
		Для Каждого ТегСтрока Из СтрокаВыд.Ключ.Теги Цикл
			ТегиСтрока = ТегиСтрока + ТегСтрока.Тег.Наименование+",";
		КонецЦикла;
		СтрокаВыд.Значение.Данные.Теги = ?(ПустаяСтрока(ТегиСтрока),"",Лев(ТегиСтрока,СтрДлина(ТегиСтрока)-1));
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписки(Команда = Неопределено)
	УстановитьУсловноеОформлениеСписков();
	ОбновитьСтатусОтложенные();
	ОбновитьЗаголовкиСписков(ЭтаФорма);
	ВывестиДиаграммуРабот();
	ОповеститьОбИзменении(Тип("ДокументСсылка.Задачи"));
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПереместитьВверхНаСервере(Задача)
	РегистрыСведений.ПорядокЗадачВОчереди.Сдвинуть(Задача, -1);
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	Если ТекущийЭлемент = Элементы.СписокВОчереди Тогда
		Если ЗначениеЗаполнено(Элементы.СписокВОчереди.ТекущаяСтрока) Тогда
			ПереместитьВверхНаСервере(Элементы.СписокВОчереди.ТекущаяСтрока);
			Элементы.СписокВОчереди.Обновить();
		КонецЕсли;
	ИначеЕсли ТекущийЭлемент = Элементы.СписокНовые Тогда
		ИзменитьПриоритет(Элементы.СписокНовые.ВыделенныеСтроки, -1);
		Элементы.СписокНовые.Обновить();
//		ОповеститьОбИзменении(Тип("ДокументСсылка.Задачи"));
		
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПереместитьВнизНаСервере(Задача)
	РегистрыСведений.ПорядокЗадачВОчереди.Сдвинуть(Задача, 1);
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	Если ТекущийЭлемент = Элементы.СписокВОчереди Тогда
		Если ЗначениеЗаполнено(Элементы.СписокВОчереди.ТекущаяСтрока) Тогда
			ПереместитьВнизНаСервере(Элементы.СписокВОчереди.ТекущаяСтрока);
			Элементы.СписокВОчереди.Обновить();
		КонецЕсли;
	ИначеЕсли ТекущийЭлемент = Элементы.СписокНовые Тогда
		ИзменитьПриоритет(Элементы.СписокНовые.ВыделенныеСтроки, 1);
		Элементы.СписокНовые.Обновить();
//		ОповеститьОбИзменении(Тип("ДокументСсылка.Задачи"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВлево(Команда)
	//1. Определение текущей колонки задач и выделенного списка задач
	//2. Определение статуса, на который нужно установить
	//3. Изменение текущей строки
	ЗадачиВызовСервера.УстановитьСледующийСтатусЗадачи(ТекущийЭлемент.ВыделенныеСтроки, Истина);
	ОповеститьОбИзменении(Тип("ДокументСсылка.Задачи"));
	Оповестить("Задачи.ИзменениеСтатуса");
	//ОбновитьВсеТаблицыЗадач();
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВправо(Команда)
	//1. Определение текущей колонки задач и выделенного списка задач
	//2. Определение статуса, на который нужно установить
	//3. Изменение текущей строки
	ЗадачиВызовСервера.УстановитьСледующийСтатусЗадачи(ТекущийЭлемент.ВыделенныеСтроки);
	ОповеститьОбИзменении(Тип("ДокументСсылка.Задачи"));
	Оповестить("Задачи.ИзменениеСтатуса");
	//ОбновитьВсеТаблицыЗадач();
КонецПроцедуры
 
&НаКлиенте
Процедура ПереместитьВНачало(Команда)
	Если ЗначениеЗаполнено(Элементы.СписокВОчереди.ТекущаяСтрока) Тогда
		ПереместитьВНачалоНаСервере(Элементы.СписокВОчереди.ТекущаяСтрока);
		Элементы.СписокВОчереди.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПереместитьВНачалоНаСервере(Задача)
	РегистрыСведений.ПорядокЗадачВОчереди.Разместить(Задача, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НазначитьИсполнителя(Команда)
	Элемент = ТекущийЭлемент;
	МассивЗадач = Элемент.ВыделенныеСтроки;
	
	Если МассивЗадач.Количество() > 0 Тогда
		ПараметрыОповещения = Новый Структура("МассивЗадач, Элемент", МассивЗадач, Элемент);
		Оповещение = Новый ОписаниеОповещения("НазначитьИсполнителяЗавершение", ЭтотОбъект, ПараметрыОповещения);
		
		ПоказатьВводЗначения(Оповещение, Исполнитель, НСтр("ru = 'Выберите исполнителя задач'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьИсполнителяЗавершение(Значение, ДополнительныеПараметры) Экспорт
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УстановитьИсполнителя(ДополнительныеПараметры.МассивЗадач, Значение);
	ДополнительныеПараметры.Элемент.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВозможноИзменитьПорядокЗадачи(Знач МассивЗадач, Знач ЦелеваяЗадача)
	
	Если МассивЗадач.Количество() <> 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИсходнаяЗадача = МассивЗадач[0];
	Если ИсходнаяЗадача = ЦелеваяЗадача Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивСсылок = Новый Массив();
	МассивСсылок.Добавить(ИсходнаяЗадача);
	МассивСсылок.Добавить(ЦелеваяЗадача);
	СоответствиеРеквизитов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСсылок, "Исполнитель");
	Если СоответствиеРеквизитов[ИсходнаяЗадача] <> СоответствиеРеквизитов[ЦелеваяЗадача] Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

&НаСервереБезКонтекста
Процедура ПоменятьПорядокЗадачиВОчереди(ИсходнаяЗадача, ЦелеваяЗадача)
	РегистрыСведений.ПорядокЗадачВОчереди.Переместить(ИсходнаяЗадача, ЦелеваяЗадача);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивЗадачИзПараметровПеретаскивания(Знач ПараметрыПеретаскивания)
	
	Перем МассивСсылок;
	
	МассивСсылок = Новый Массив;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		Для каждого Значение Из ПараметрыПеретаскивания.Значение Цикл
			Если ТипЗнч(Значение) = Тип("ДокументСсылка.Задачи") Тогда
				МассивСсылок.Добавить(Значение);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ДокументСсылка.Задачи") Тогда
		МассивСсылок.Добавить(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
	Возврат МассивСсылок;

КонецФункции

&НаКлиенте
Процедура ОткрытьФормуСпискаЗадач(Статус, ЭтоОжидание = Ложь)
	
	ПараметрыОткрываемойФормы = Новый Структура;
	Если ЭтоОжидание Тогда
		ПараметрыОткрываемойФормы.Вставить("ФормаОжидающих", Истина);
	Иначе
		ПараметрыОткрываемойФормы.Вставить("ФормаЗавершенных", Истина);
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Статус", Статус);
	Если ЗначениеЗаполнено(Заказчик) Тогда
		Отбор.Вставить("Заказчик", Заказчик);
	КонецЕсли;
	Если ЗначениеЗаполнено(Проект) Тогда
		Отбор.Вставить("Проект", Проект);
	КонецЕсли;
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		Отбор.Вставить("Исполнитель", Исполнитель);
	КонецЕсли;
	ПараметрыОткрываемойФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("Документ.Задачи.ФормаСписка", ПараметрыОткрываемойФормы, ЭтаФорма, , ВариантОткрытияОкна.ОтдельноеОкно, , , );
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоследовательностьВыполненияНаСервере()
	РегистрыСведений.ПорядокЗадачВОчереди.СортироватьЗадачи();
	Элементы.СписокВОчереди.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоследовательностьВыполнения(Команда)
	РассчитатьПоследовательностьВыполненияНаСервере();
КонецПроцедуры

#КонецОбласти

#Область РаботаСЗадачами
	
&НаКлиенте
Процедура СоздатьЗадачу(Команда)
	ОткрытьФормуНовойЗадачи();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачуПоШаблону(Команда)
	//Открыть форму выбора шаблона
	ЗадачиКлиент.ОткрытьВыборШаблонаЗадач();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНовойЗадачи()
	
	Перем ПараметрыФормы;
	
	ПараметрыФормы = Новый Структура;
	ЗначенияЗаполнения = Новый Структура("Исполнитель", Исполнитель);
	Если ЗначениеЗаполнено(Проект) Тогда
		ЗначенияЗаполнения.Вставить("Проект", Проект);
	КонецЕсли;
	Если ЗначениеЗаполнено(Заказчик) Тогда
		ЗначенияЗаполнения.Вставить("Заказчик", Заказчик);
	КонецЕсли;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.Задачи.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

//ПараметрыОтбора - структура с реквизитами Проект, Заказчик, Исполнитель, Тег
&НаСервереБезКонтекста
Функция ПолучитьКоличествоПоСтатусу(Знач Статус, ПараметрыОтбора)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоставыГруппПользователей.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ втИсполнители
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	СоставыГруппПользователей.ГруппаПользователей = &Исполнитель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(Задачи.ОценкаТрудозатрат) КАК Часов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Задачи.Ссылка) КАК Количество
	|ИЗ
	|	Документ.Задачи КАК Задачи
	|ГДЕ
	|	Задачи.Статус В(&Статус)
	|	И ВЫБОР
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗадач.Завершена) В (&Статус)
	|				ТОГДА НАЧАЛОПЕРИОДА(Задачи.ДатаСтатуса, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И (&Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|			ИЛИ Задачи.Проект = &Проект)
	|	И (&Заказчик = ЗНАЧЕНИЕ(Справочник.Заказчики.ПустаяСсылка)
	|			ИЛИ Задачи.Заказчик = &Заказчик)
	|	И (&ИсполнительЗаполнен = ЛОЖЬ
	|			ИЛИ Задачи.Исполнитель В
	|				(ВЫБРАТЬ
	|					втИсполнители.Пользователь КАК Пользователь
	|				ИЗ
	|					втИсполнители КАК втИсполнители))";
	
	Запрос.УстановитьПараметр("Статус", Статус);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Заказчик", ПараметрыОтбора.Заказчик);
	Запрос.УстановитьПараметр("Проект", ПараметрыОтбора.Проект);
	Запрос.УстановитьПараметр("Исполнитель", ПараметрыОтбора.Исполнитель);
	Запрос.УстановитьПараметр("ИсполнительЗаполнен", ЗначениеЗаполнено(ПараметрыОтбора.Исполнитель));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Формат(Выборка.Количество, "ЧН=; ЧГ=") + ", часов: "+Формат(Выборка.Часов, "ЧН=; ЧГ=");
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьИсполнителя(Знач МассивЗадач, Знач Исполнитель)
	Перем Ошибки, Отказ;
	
	Для каждого Ссылка Из МассивЗадач Цикл
		Попытка
			Объект = Ссылка.ПолучитьОбъект();
			Объект.Заблокировать();
			Объект.Исполнитель = Исполнитель;
			Объект.Записать();
		Исключение
			Текст = НСтр("ru = 'Ошибка изменения задачи <%1>: %2'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Объект, ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", Текст, Неопределено);
		КонецПопытки;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ВнестиОписаниеРешения(Команда)
	Задача = ТекущийЭлемент.ТекущаяСтрока;
	
	Текст = "";//ПолучитьПоследнееРешение(Задача);
	ПараметрыОповещения = Новый Структура("Задача", Задача);
	Оповещение = Новый ОписаниеОповещения("ВнестиОписаниеРешенияЗавершение", ЭтотОбъект, ПараметрыОповещения);
		
	ПоказатьВводСтроки(Оповещение, Текст, НСтр("ru = 'Введите результат выполненного действия'"),,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВнестиОписаниеРешенияЗавершение(Значение, ДополнительныеПараметры) Экспорт
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	ВнестиОписаниеРешенияСервер(ДополнительныеПараметры.Задача, Значение);
КонецПроцедуры

&НаСервере
Процедура ВнестиОписаниеРешенияСервер(Задача, Решение)
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачиКлиентСервер.ВнестиОписаниеРешения(ЗадачаОбъект, Решение);
	ЗадачаОбъект.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачу(Команда)
	КомандаСтатус = Новый Структура("Имя","Завершена");
	ЗадачиКлиент.ОбработкаКомандыИзмененияСтатуса(ЭтаФорма, ТекущийЭлемент.ВыделенныеСтроки, КомандаСтатус);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатус_(Команда)
	ЗадачиКлиент.ОбработкаКомандыИзмененияСтатуса(ЭтаФорма, Элементы.СписокНовые.ВыделенныеСтроки, Команда);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьПриоритет(Знач МассивЗадач, Знач Направление)
	Для каждого Задача из МассивЗадач Цикл
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		Если ЛОжь Тогда ЗадачаОбъект = Документы.Задачи.СоздатьДокумент() КонецЕсли;
		ЗадачаОбъект.Заблокировать();
		ЗадачаОбъект.Приоритет = ЗадачаОбъект.Приоритет + Направление;
		ЗадачаОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТег(Команда)
	
	КлассификацияКонтактовКлиент.УстановитьТег(ТекущийЭлемент.ВыделенныеСтроки, НСтр("ru='задаче,задачам,задачам'"));
	
КонецПроцедуры

#КонецОбласти

#Область ПанельАнализа
	
&НаСервере
Процедура ИзменитьВидФормы()

	Элементы.ГруппаАнализ.Видимость = ПоказыватьАнализ;
	
	Если ПоказыватьАнализ Тогда
		Элементы.ФормаПоказыватьАнализ.Заголовок = НСтр("ru = 'Скрыть панель анализа'") ;
	Иначе
		Элементы.ФормаПоказыватьАнализ.Заголовок = НСтр("ru = 'Показать панель анализа'") ;
	КонецЕсли; 
    Элементы.ФормаПоказыватьАнализ.Пометка = ПоказыватьАнализ;
	
	//Вывод для внешнего пользователя
	Если ЭтоВнешнийПользователь Тогда
		Элементы.ГруппаРаботЗаДень.Видимость = Ложь;
		Элементы.ГруппаРаботЗаМесяц.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДиаграммуРабот()

	Если Не ПоказыватьАнализ Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьДанныеДиаграмм();
	
	Если ЭтоВнешнийПользователь Тогда
		//Вывод часов за месяц
		ТекстДиаграммыРаботМесяц = НСтр("ru = 'Реализовано часов'");
		ДиаграммаЗакрытыхРаботВмесяце.Обновление = Ложь;
		ДиаграммаЗакрытыхРаботВмесяце.Очистить();
		
		ТочкаДиаграммы = ДиаграммаЗакрытыхРаботВмесяце.УстановитьТочку("Время");
		
		Счетчик = 0;
		ВсегоЧасов = 0;
		Для каждого СтрокаДанных Из ВыполненоЗаМесяц Цикл
			
			Счетчик = Счетчик + 1;
			ВсегоЧасов = ВсегоЧасов + СтрокаДанных.Время;
			СерияДиаграммы = ДиаграммаЗакрытыхРаботВмесяце.УстановитьСерию(СтрокаДанных.Проект);
			СерияДиаграммы.Текст = "";
			ДиаграммаЗакрытыхРаботВмесяце.УстановитьЗначение(ТочкаДиаграммы, СерияДиаграммы, СтрокаДанных.Время, СтрокаДанных.Проект, 
					"" + ?(СтрокаДанных.Проект.Пустая(),"<Не указан>",СтрокаДанных.Проект) + " (" + Формат(СтрокаДанных.Время, "ЧДЦ=2") + " )");
			//Если ЗначениеЗаполнено(ОбъектСтроки) И ОбъектСтроки = СтрокаДанных.Ссылка И КоличествоВГруппе > 2 Тогда
				СерияДиаграммы.Раздвигать = Истина;
			//КонецЕсли; 
			
		КонецЦикла;
		ТекстДиаграммыРаботМесяц = "Реализовано "+ВсегоЧасов+" ч. за "+Формат(ТекущаяДата(),"ДФ='MMMM yyyy'");
		ДиаграммаЗакрытыхРаботВмесяце.Обновление = Истина;
		Возврат;
	КонецЕсли;
	
	//Вывод часов за день
	ТекстДиаграммыРабот = НСтр("ru = 'Затрачено времени за сегодня'");
	ДиаграммаРаботыЗаДень.Обновление = Ложь;
	ДиаграммаРаботыЗаДень.Очистить();
	
	ТочкаДиаграммы = ДиаграммаРаботыЗаДень.УстановитьТочку("Время");
	
	Счетчик = 0;
	ВсегоЧасов = 0;
	Для каждого СтрокаДанных Из ФактическоеВремяНаДату Цикл
		
		Счетчик = Счетчик + 1;
		ВсегоЧасов = ВсегоЧасов + СтрокаДанных.Время;
		СерияДиаграммы = ДиаграммаРаботыЗаДень.УстановитьСерию(СтрокаДанных.Заказчик);
		СерияДиаграммы.Текст = "";
		ДиаграммаРаботыЗаДень.УстановитьЗначение(ТочкаДиаграммы, СерияДиаграммы, СтрокаДанных.Время, СтрокаДанных.Заказчик, 
				"" + СтрокаДанных.Заказчик + " (" + Формат(СтрокаДанных.Время, "ЧДЦ=2") + " )");
		//Если ЗначениеЗаполнено(ОбъектСтроки) И ОбъектСтроки = СтрокаДанных.Ссылка И КоличествоВГруппе > 2 Тогда
			СерияДиаграммы.Раздвигать = Истина;
		//КонецЕсли; 
		
	КонецЦикла;
	ТекстДиаграммыРабот = "Затрачено за сегодня: "+ВсегоЧасов+" ч.";
	ДиаграммаРаботыЗаДень.Обновление = Истина;

	//Вывод часов за месяц
	ТекстДиаграммыЧасовЗаМесяц = НСтр("ru = 'Затрачено времени за месяц'");
	ДиаграммаРаботыЗаМесяц.Обновление = Ложь;
	ДиаграммаРаботыЗаМесяц.Очистить();
	
	ТочкаДиаграммы = ДиаграммаРаботыЗаМесяц.УстановитьТочку("Время");
	
	Счетчик = 0;
	ВсегоЧасов = 0;
	Для каждого СтрокаДанных Из ФактическоеВремяЗаМесяц Цикл
		
		Счетчик = Счетчик + 1;
		ВсегоЧасов = ВсегоЧасов + СтрокаДанных.Время;
		СерияДиаграммы = ДиаграммаРаботыЗаМесяц.УстановитьСерию(СтрокаДанных.Заказчик);
		СерияДиаграммы.Текст = "";
		ДиаграммаРаботыЗаМесяц.УстановитьЗначение(ТочкаДиаграммы, СерияДиаграммы, СтрокаДанных.Время, СтрокаДанных.Заказчик, 
				"" + СтрокаДанных.Заказчик + " (" + Формат(СтрокаДанных.Время, "ЧДЦ=2") + " )");
		//Если ЗначениеЗаполнено(ОбъектСтроки) И ОбъектСтроки = СтрокаДанных.Ссылка И КоличествоВГруппе > 2 Тогда
			СерияДиаграммы.Раздвигать = Истина;
		//КонецЕсли; 
		
	КонецЦикла;
	ТекстДиаграммыЧасовЗаМесяц = "Затрачено "+ВсегоЧасов+" ч. за "+Формат(ТекущаяДата(),"ДФ='MMMM yyyy'");
	ДиаграммаРаботыЗаМесяц.Обновление = Истина;
	
	//Вывод часов за месяц
	ТекстДиаграммыРаботМесяц = НСтр("ru = 'Реализовано часов'");
	ДиаграммаЗакрытыхРаботВмесяце.Обновление = Ложь;
	ДиаграммаЗакрытыхРаботВмесяце.Очистить();
	
	ТочкаДиаграммы = ДиаграммаЗакрытыхРаботВмесяце.УстановитьТочку("Время");
	
	Счетчик = 0;
	ВсегоЧасов = 0;
	Для каждого СтрокаДанных Из ВыполненоЗаМесяц Цикл
		
		Счетчик = Счетчик + 1;
		ВсегоЧасов = ВсегоЧасов + СтрокаДанных.Время;
		СерияДиаграммы = ДиаграммаЗакрытыхРаботВмесяце.УстановитьСерию(СтрокаДанных.Заказчик);
		СерияДиаграммы.Текст = "";
		ДиаграммаЗакрытыхРаботВмесяце.УстановитьЗначение(ТочкаДиаграммы, СерияДиаграммы, СтрокаДанных.Время, СтрокаДанных.Заказчик, 
				"" + СтрокаДанных.Заказчик + " (" + Формат(СтрокаДанных.Время, "ЧДЦ=2") + " )");
		//Если ЗначениеЗаполнено(ОбъектСтроки) И ОбъектСтроки = СтрокаДанных.Ссылка И КоличествоВГруппе > 2 Тогда
			СерияДиаграммы.Раздвигать = Истина;
		//КонецЕсли; 
		
	КонецЦикла;
	ТекстДиаграммыРаботМесяц = "Реализовано "+ВсегоЧасов+" ч. за "+Формат(ТекущаяДата(),"ДФ='MMMM yyyy'");
	ДиаграммаЗакрытыхРаботВмесяце.Обновление = Истина;
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеДиаграмм()
	
	ВыбранныйИсполнитель = Исполнитель;
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		ВыбранныйИсполнитель = Справочники.ГруппыПользователей.ПолучитьПользователейГруппы(Исполнитель);
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Исполнитель",ВыбранныйИсполнитель);
	Запрос.УстановитьПараметр("ВсеИсполнители",Не ЗначениеЗаполнено(Исполнитель));
	Если ЭтоВнешнийПользователь Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СУММА(Задачи.ОценкаТрудозатрат) КАК Время,
		               |	Задачи.Проект КАК Проект
		               |ИЗ
		               |	Документ.Задачи КАК Задачи
		               |ГДЕ
		               |	(Задачи.Статус = ЗНАЧЕНИЕ(ПЕречисление.СтатусыЗадач.Завершена)
		               |			ИЛИ Задачи.Статус = ЗНАЧЕНИЕ(ПЕречисление.СтатусыЗадач.Подтверждение))
		               |	И Задачи.ДатаСтатуса МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
		               |	И (&ВсеИсполнители ИЛИ Задачи.Исполнитель В (&Исполнитель))
		               |	И Задачи.Заказчик В
		               |			(ВЫБРАТЬ
		               |				КонтактныеЛицаЗаказчиков.Владелец КАК Владелец
		               |			ИЗ
		               |				Справочник.КонтактныеЛицаЗаказчиков КАК КонтактныеЛицаЗаказчиков
		               |			ГДЕ
		               |				КонтактныеЛицаЗаказчиков.Ссылка = &КонтактноеЛицо)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	Задачи.Проект
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Время УБЫВ,
		               |	Проект";
		Запрос.УстановитьПараметр("КонтактноеЛицо",Пользователи.АвторизованныйПользователь().ОбъектАвторизации);
		ВыполненоЗаМесяц.Загрузить(Запрос.Выполнить().Выгрузить());
		Возврат;
	КонецЕсли;

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗадачиРаботы.Ссылка.Заказчик КАК Заказчик,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗадачиРаботы.Трудозатраты = 0
	               |					И ЗадачиРаботы.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	               |				ТОГДА РАЗНОСТЬДАТ(ЗадачиРаботы.ДатаНачала, &Дата, ЧАС)
	               |			КОГДА ЗадачиРаботы.ДатаНачала < НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	               |				ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ), ЗадачиРаботы.ДатаОкончания, ЧАС)
	               |			КОГДА ЗадачиРаботы.ДатаОкончания > КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	               |				ТОГДА РАЗНОСТЬДАТ(ЗадачиРаботы.ДатаНачала, КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), ЧАС)
	               |			ИНАЧЕ ЗадачиРаботы.Трудозатраты
	               |		КОНЕЦ) КАК Время
	               |ИЗ
	               |	Документ.Задачи.Работы КАК ЗадачиРаботы
	               |ГДЕ
	               |	ЗадачиРаботы.ДатаНачала < КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	               |	И ВЫБОР
	               |			КОГДА ЗадачиРаботы.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	               |				ТОГДА &Дата
	               |			ИНАЧЕ ЗадачиРаботы.ДатаОкончания
	               |		КОНЕЦ > НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	               |	И (&ВсеИсполнители ИЛИ ЗадачиРаботы.Ссылка.Исполнитель В (&Исполнитель))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗадачиРаботы.Ссылка.Заказчик
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Время УБЫВ,
	               |	Заказчик
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗадачиРаботы.Ссылка.Заказчик КАК Заказчик,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЗадачиРаботы.Трудозатраты = 0
	               |					И ЗадачиРаботы.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	               |				ТОГДА РАЗНОСТЬДАТ(ЗадачиРаботы.ДатаНачала, &Дата, ЧАС)
	               |			КОГДА ЗадачиРаботы.ДатаНачала < НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)
	               |				ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ), ЗадачиРаботы.ДатаОкончания, ЧАС)
	               |			КОГДА ЗадачиРаботы.ДатаОкончания > КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	               |				ТОГДА РАЗНОСТЬДАТ(ЗадачиРаботы.ДатаНачала, КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ), ЧАС)
	               |			ИНАЧЕ ЗадачиРаботы.Трудозатраты
	               |		КОНЕЦ) КАК Время
	               |ИЗ
	               |	Документ.Задачи.Работы КАК ЗадачиРаботы
	               |ГДЕ
	               |	ЗадачиРаботы.ДатаНачала < КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	               |	И ВЫБОР
	               |			КОГДА ЗадачиРаботы.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	               |				ТОГДА &Дата
	               |			ИНАЧЕ ЗадачиРаботы.ДатаОкончания
	               |		КОНЕЦ > НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)
	               |	И (&ВсеИсполнители ИЛИ ЗадачиРаботы.Ссылка.Исполнитель В (&Исполнитель))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗадачиРаботы.Ссылка.Заказчик
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Время УБЫВ,
	               |	Заказчик
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Задачи.Заказчик КАК Заказчик,
	               |	СУММА(Задачи.ОценкаТрудозатрат) КАК Время
	               |ИЗ
	               |	Документ.Задачи КАК Задачи
	               |ГДЕ
	               |	(Задачи.Статус = ЗНАЧЕНИЕ(ПЕречисление.СтатусыЗадач.Завершена)
	               |			ИЛИ Задачи.Статус = ЗНАЧЕНИЕ(ПЕречисление.СтатусыЗадач.Подтверждение))
	               |	И Задачи.ДатаСтатуса МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	               |	И (&ВсеИсполнители ИЛИ Задачи.Исполнитель В (&Исполнитель))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Задачи.Заказчик
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Время УБЫВ,
	               |	Заказчик";
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ФактическоеВремяНаДату.Загрузить(МассивРезультатов[0].Выгрузить());
	ФактическоеВремяЗаМесяц.Загрузить(МассивРезультатов[1].Выгрузить());
	ВыполненоЗаМесяц.Загрузить(МассивРезультатов[2].Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДиаграмму(Диаграмма)

	// Диагарамма за день
	Диаграмма.Обновление = Ложь;
	Диаграмма.ТипДиаграммы                    = ТипДиаграммы.Круговая;
	Диаграмма.Рамка                           = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	Диаграмма.ЦветФона                        = ЦветаСтиля.ЦветФонаФормы;
	Диаграмма.ПрозрачныйФон                   = Истина;
	Диаграмма.ОтображатьЛегенду               = Ложь;
	Диаграмма.ОтображатьЗаголовок             = Ложь;
	Диаграмма.ВидПодписей                     = ВидПодписейКДиаграмме.СерияПроцент;
	Диаграмма.ПоложениеПодписей               = ПоложениеПодписейКДиаграмме.Край;
	Диаграмма.ФорматПроцентовВПодписях        = "ЧДЦ=1; ЧН=0; ЧГ=";
	Диаграмма.Градиент                        = Истина;
	Диаграмма.ОбластьПостроения.ПрозрачныйФон = Истина;
	Диаграмма.БазовоеЗначение                 = 0;
	Диаграмма.ПропускатьБазовоеЗначение       = Истина;
	
	Диаграмма.ОбластьПостроения.Верх          = 0; // Привязана к верхнему краю
	Диаграмма.ОбластьПостроения.Низ           = 1; // Привязана к нижнему краю
	Диаграмма.ОбластьПостроения.Право         = 1; // Привязана к правому краю
	Диаграмма.ОбластьПостроения.Лево          = 0; // Привязана к левому краю
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьАнализ(Команда)
	ПоказыватьАнализ = НЕ ПоказыватьАнализ;
	ИзменитьВидФормы();
КонецПроцедуры

&НаКлиенте
Процедура ТекстДиаграммыРаботМесяцНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ТекущаяДата = ТекущаяДата();
	ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Новый СтандартныйПериод(НачалоМесяца(ТекущаяДата),КонецМесяца(ТекущаяДата)));
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		ПараметрыФормы.Отбор.Вставить("Исполнитель", Исполнитель);
	КонецЕсли;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	Если Элемент.Имя = "ТекстДиаграммыЧасовЗаМесяц" Тогда
		ПараметрыФормы.Вставить("КлючВарианта", "Основной");
		ОткрытьФорму("Отчет.АнализФактическогоВремени.ФормаОбъекта", ПараметрыФормы, , Истина);
	Иначе
		ПараметрыФормы.Вставить("КлючВарианта", "ЗадачиПоСтатусам");
		ОткрытьФорму("Отчет.АнализВыполненияЗадач.ФормаОбъекта", ПараметрыФормы, , Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПолнотекстовыйПоиск

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ОбъектыПоиска.Очистить();
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		УстановитьОтборДинамическихСписков(Неопределено, ВидСравненияКомпоновкиДанных.Равно, Ложь);
	Иначе
		ВыполнитьПолнотекстовыйПоиск();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДоступностьПолнотекстовыйПоиск() 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПолнотекстовыйПоиск") 
		И ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
		ИсторияПоиска = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ИсторияПоискаДоскаЗадач", "");
		Если ИсторияПоиска <> Неопределено Тогда
			Элементы.СтрокаПоиска.СписокВыбора.ЗагрузитьЗначения(ИсторияПоиска);
		КонецЕсли;
	Иначе
		Элементы.СтрокаПоиска.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПолнотекстовыйПоиск()
	
	КоличествоЭлементовНайдено = 0;
	ТекстОшибки = НайтиЗадачиПолнотекстовыйПоиск(КоличествоЭлементовНайдено);
	Если ТекстОшибки <> Неопределено Тогда
		Если НЕ ТекстОшибки = НСтр("ru = 'Ничего не найдено'") Тогда
			ПоказатьОповещениеПользователя(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиЗадачиПолнотекстовыйПоиск(КоличествоЭлементов)

	// настроить параметры поиска
	РазмерПорции = 200;
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска+"*", РазмерПорции);
	
	ОбластьПоиска = Новый Массив;
	ОбластьПоиска.Добавить(Метаданные.Документы.Задачи);

	СписокПоиска.ОбластьПоиска = ОбластьПоиска;

	СписокПоиска.ПерваяЧасть();

	// Возврат, если поиск слишком результативен.
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		УстановитьОтборДинамическихСписков(Документы.Задачи.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно, Истина);
		Элементы.СтрокаПоиска.ЦветФона = ЦветаСтиля.ОшибкаПолнотекстовыйПоискФон;
		Возврат НСтр("ru = 'Слишком много результатов, уточните запрос.'");
	КонецЕсли;

	// Возврат, если поиск не результативен.
	Если СписокПоиска.ПолноеКоличество() = 0 Тогда
		УстановитьОтборДинамическихСписков(Документы.Задачи.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно, Истина);
		Элементы.СтрокаПоиска.ЦветФона = ЦветаСтиля.ОшибкаПолнотекстовыйПоискФон;
		Возврат НСтр("ru = 'Ничего не найдено'");
	КонецЕсли;
	
	КоличествоЭлементов = СписокПоиска.ПолноеКоличество();
	
	НачальнаяПозиция = 0;
	КонечнаяПозиция = ?(КоличествоЭлементов > РазмерПорции, РазмерПорции, КоличествоЭлементов) - 1;
	ЕстьСледующаяПорция = Истина;

	// Обработать по порциям результаты ППД.
	Пока ЕстьСледующаяПорция Цикл
		Для СчетчикЭлементов = 0 По КонечнаяПозиция Цикл
			
			Элемент = СписокПоиска.Получить(СчетчикЭлементов);
			НоваяСтрока = ОбъектыПоиска.Добавить();
			НоваяСтрока.Задача = Элемент.Значение;
			
		КонецЦикла;
		НачальнаяПозиция = НачальнаяПозиция + РазмерПорции;
		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоЭлементов - 1);
		Если ЕстьСледующаяПорция Тогда
			КонечнаяПозиция = 
			?(КоличествоЭлементов > НачальнаяПозиция + РазмерПорции, РазмерПорции,
			КоличествоЭлементов - НачальнаяПозиция) - 1;
			СписокПоиска.СледующаяЧасть();
		КонецЕсли;
	КонецЦикла;
	
	Если ОбъектыПоиска.Количество() = 0 Тогда
		УстановитьОтборДинамическихСписков(Документы.Задачи.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно, Истина);
		Элементы.СтрокаПоиска.ЦветФона = ЦветаСтиля.ОшибкаПолнотекстовыйПоискФон;
		Возврат НСтр("ru = 'Ничего не найдено.'");
	КонецЕсли;
	
	// Удалим элемент из истории поиска если он там был.
	НомерНайденногоЭлементаСписка = Элементы.СтрокаПоиска.СписокВыбора.НайтиПоЗначению(СтрокаПоиска);
	Пока НомерНайденногоЭлементаСписка <> Неопределено Цикл
		Элементы.СтрокаПоиска.СписокВыбора.Удалить(НомерНайденногоЭлементаСписка);
		НомерНайденногоЭлементаСписка = Элементы.СтрокаПоиска.СписокВыбора.НайтиПоЗначению(СтрокаПоиска);
	КонецЦикла;
	
	// И поставим его на первое место.
	Элементы.СтрокаПоиска.СписокВыбора.Вставить(0, СтрокаПоиска);
	Пока Элементы.СтрокаПоиска.СписокВыбора.Количество() > 100 Цикл
		Элементы.СтрокаПоиска.СписокВыбора.Удалить(Элементы.СтрокаПоиска.СписокВыбора.Количество() - 1);
	КонецЦикла;
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ИсторияПоискаДоскаЗадач",
		"",
		Элементы.СтрокаПоиска.СписокВыбора.ВыгрузитьЗначения());
	
	УстановитьОтборДинамическихСписков(ОбъектыПоиска.Выгрузить(,"Задача").ВыгрузитьКолонку("Задача"), ВидСравненияКомпоновкиДанных.ВСписке, Истина);
			
	Элементы.СтрокаПоиска.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборДинамическихСписков(Значение, ВидСравнения, Использовать)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокНовые, "Поиск", Значение, ВидСравнения,, Использовать);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокВОчереди, "Поиск", Значение, ВидСравнения,, Использовать);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокВРаботе, "Поиск", Значение, ВидСравнения,, Использовать);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокПодтверждение, "Поиск", Значение, ВидСравнения,, Использовать);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокЗавершенные, "Поиск", Значение, ВидСравнения,, Использовать);
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, ИмяПоля, Представление)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если ЭлементОтбора.ЛевоеЗначение = ИмяПоля И ЭлементОтбора.Представление = Представление Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
		Иначе
			
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, ИмяПоля, Представление);
			
			Если ЭлементОтбора.Представление = Представление Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДоступностьНовойВерсии()
	Версия = ОбновлениеКонфигурацииВызовСервераСУЗ.ПолучитьВерсиюКонфигурацииНаСайтеОбновлений(); 
	
	РезультатСравнения = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Версия, Метаданные.Версия);
	Если РезультатСравнения > 0 Тогда
		УведомлениеОНовойВерсии = НСтр("ru = 'Доступна новая версия: %1, рекомендуется обновление!'");
		УведомлениеОНовойВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(УведомлениеОНовойВерсии, Версия);
	КонецЕсли;
	
	Элементы.УведомлениеОНовойВерсии.Видимость = ЗначениеЗаполнено(УведомлениеОНовойВерсии);
КонецПроцедуры

