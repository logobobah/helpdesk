Процедура Разместить(Задача, РазместитьВКонец = Истина) Экспорт
	
	НачатьТранзакцию();
	
	ЗаблокироватьРегистр();
	
	УбратьИзПорядка(Задача);
	
	Исполнитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Исполнитель");
	
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ЕСТЬNULL(МИНИМУМ(ПорядокЗадачВОчереди.Порядок), 2) КАК ПорядокМин,
	//|	ЕСТЬNULL(МАКСИМУМ(ПорядокЗадачВОчереди.Порядок), 0) КАК ПорядокМакс
	//|ИЗ
	//|	РегистрСведений.ПорядокЗадачВОчереди КАК ПорядокЗадачВОчереди
	//|ГДЕ
	//|	ПорядокЗадачВОчереди.Исполнитель = &Исполнитель";
	//Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	//Результат = Запрос.Выполнить();	
	//Выборка = Результат.Выбрать();
	//Выборка.Следующий();
	//Запись = РегистрыСведений.ПорядокЗадачВОчереди.СоздатьМенеджерЗаписи();
	//Запись.Исполнитель = Исполнитель;
	//Запись.Порядок = ?(РазместитьВКонец, Выборка.ПорядокМакс + 1, Выборка.ПорядокМин - 1);
	//Запись.Задача = Задача;
	//Запись.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задачи.Ссылка КАК Ссылка,
	|	Задачи.Приоритет КАК Приоритет,
	|	Задачи.Срок КАК Срок
	|ПОМЕСТИТЬ втЗадачи
	|ИЗ
	|	Документ.Задачи КАК Задачи
	|ГДЕ
	|	Задачи.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадач.ВОчереди)
	|	И Задачи.Исполнитель = &Исполнитель
	|	И Задачи.Приоритет <= &Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(втЗадачи.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ втПриоритеты
	|ИЗ
	|	втЗадачи КАК втЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗадачи.Ссылка КАК Задача,
	|	втЗадачи.Срок КАК Срок,
	|	ПорядокЗадачВОчереди.Порядок КАК Порядок
	|ИЗ
	|	втЗадачи КАК втЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПриоритеты КАК втПриоритеты
	|		ПО втЗадачи.Приоритет = втПриоритеты.Приоритет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокЗадачВОчереди КАК ПорядокЗадачВОчереди
	|		ПО втЗадачи.Ссылка = ПорядокЗадачВОчереди.Задача
	|			И втЗадачи.Ссылка.Исполнитель = ПорядокЗадачВОчереди.Исполнитель
	|
	|УПОРЯДОЧИТЬ ПО
	|	Срок УБЫВ";
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Запрос.УстановитьПараметр("Приоритет", Задача.Приоритет);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Запись = РегистрыСведений.ПорядокЗадачВОчереди.СоздатьМенеджерЗаписи();
		Запись.Исполнитель = Исполнитель;
		Запись.Порядок = Выборка.Порядок+1;
		Запись.Задача = Задача;
		Запись.Записать();
		ЗафиксироватьТранзакцию();
		Возврат;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(ПорядокЗадачВОчереди.Порядок), 2) КАК ПорядокМин,
	|	ЕСТЬNULL(МАКСИМУМ(ПорядокЗадачВОчереди.Порядок), 0) КАК ПорядокМакс
	|ИЗ
	|	РегистрСведений.ПорядокЗадачВОчереди КАК ПорядокЗадачВОчереди
	|ГДЕ
	|	ПорядокЗадачВОчереди.Исполнитель = &Исполнитель";
	Результат = Запрос.Выполнить();	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Запись = РегистрыСведений.ПорядокЗадачВОчереди.СоздатьМенеджерЗаписи();
	Запись.Исполнитель = Исполнитель;
	Запись.Порядок = ?(РазместитьВКонец, Выборка.ПорядокМакс + 1, Выборка.ПорядокМин - 1);
	Запись.Задача = Задача;
	Запись.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаблокироватьРегистр()
	
	Перем Блокировка, ЭлементБлокировки;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПорядокЗадачВОчереди");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();

КонецПроцедуры

Процедура УбратьИзПорядка(Задача) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПорядокЗадачВОчереди.Порядок,
	|	ПорядокЗадачВОчереди.Исполнитель
	|ПОМЕСТИТЬ НачальнаяПозиция
	|ИЗ
	|	РегистрСведений.ПорядокЗадачВОчереди КАК ПорядокЗадачВОчереди
	|ГДЕ
	|	ПорядокЗадачВОчереди.Задача = &Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕстьNULL(ПорядокЗадачВОчереди.Порядок - 1, НачальнаяПозиция.Порядок) КАК Порядок,
	|	НачальнаяПозиция.Исполнитель,
	|	ПорядокЗадачВОчереди.Задача,
	|	0 КАК Обработка
	|ИЗ
	|	НачальнаяПозиция КАК НачальнаяПозиция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокЗадачВОчереди КАК ПорядокЗадачВОчереди
	|		ПО НачальнаяПозиция.Исполнитель = ПорядокЗадачВОчереди.Исполнитель
	|			И НачальнаяПозиция.Порядок < ПорядокЗадачВОчереди.Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПорядокЗадачВОчереди.Порядок),
	|	ПорядокЗадачВОчереди.Исполнитель,
	|	NULL,
	|	1
	|ИЗ
	|	РегистрСведений.ПорядокЗадачВОчереди КАК ПорядокЗадачВОчереди
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачальнаяПозиция КАК НачальнаяПозиция
	|		ПО ПорядокЗадачВОчереди.Исполнитель = НачальнаяПозиция.Исполнитель
	|			И ПорядокЗадачВОчереди.Порядок > НачальнаяПозиция.Порядок
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокЗадачВОчереди.Исполнитель
	|
	|УПОРЯДОЧИТЬ ПО
	|	Обработка,
	|	Порядок";
	Запрос.УстановитьПараметр("Задача", Задача);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.ПорядокЗадачВОчереди.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Если ЗначениеЗаполнено(Запись.Задача) Тогда
			Запись.Записать();
		Иначе
			Запись.Удалить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//
// Направление = 1 - сдвигаем вниз
// Направление = -1 - сдвигаем вверх
// 
Процедура Сдвинуть(Задача, Направление) Экспорт
	НачатьТранзакцию();
	ЗаблокироватьРегистр();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПорядокЗадачВОчереди.Исполнитель,
	|	ПорядокЗадачВОчереди.Порядок,
	|	ПорядокЗадачВОчереди.Задача,
	|	ПорядокЗадачВОчередиЗамена.Порядок КАК ПорядокЗамена,
	|	ПорядокЗадачВОчередиЗамена.Задача КАК ЗадачаЗамена
	|ИЗ
	|	РегистрСведений.ПорядокЗадачВОчереди КАК ПорядокЗадачВОчереди
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокЗадачВОчереди КАК ПорядокЗадачВОчередиЗамена
	|		ПО ПорядокЗадачВОчереди.Исполнитель = ПорядокЗадачВОчередиЗамена.Исполнитель
	|			И (ПорядокЗадачВОчереди.Порядок + &Направление = ПорядокЗадачВОчередиЗамена.Порядок)
	|ГДЕ
	|	ПорядокЗадачВОчереди.Задача = &Задача";
	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.УстановитьПараметр("Направление", Направление);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если ЗначениеЗаполнено(Выборка.ЗадачаЗамена) Тогда
		Запись = РегистрыСведений.ПорядокЗадачВОчереди.СоздатьМенеджерЗаписи();
		Запись.Порядок = Выборка.Порядок;
		Запись.Исполнитель = Выборка.Исполнитель;
		Запись.Задача = Выборка.ЗадачаЗамена;
		Запись.Записать();
		
		Запись = РегистрыСведений.ПорядокЗадачВОчереди.СоздатьМенеджерЗаписи();
		Запись.Порядок = Выборка.ПорядокЗамена;
		Запись.Исполнитель = Выборка.Исполнитель;
		Запись.Задача = Выборка.Задача;
		Запись.Записать();
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура Переместить(Знач Задача, Знач ЗадачаЦель) Экспорт
	
	НачатьТранзакцию();
	ЗаблокироватьРегистр();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПорядокЗадачВОчереди.Порядок,
	|	ПорядокЗадачВОчереди.Задача,
	|	ПорядокЗадачВОчередиЦель.Порядок КАК ПорядокЦель,
	|	ПорядокЗадачВОчереди.Исполнитель
	|ИЗ
	|	РегистрСведений.ПорядокЗадачВОчереди КАК ПорядокЗадачВОчереди
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокЗадачВОчереди КАК ПорядокЗадачВОчередиЦель
	|		ПО ПорядокЗадачВОчереди.Исполнитель = ПорядокЗадачВОчередиЦель.Исполнитель
	|			И (ПорядокЗадачВОчереди.Задача = &Задача)
	|			И (&ЗадачаЦель = ПорядокЗадачВОчередиЦель.Задача)";
	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.УстановитьПараметр("ЗадачаЦель", ЗадачаЦель);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПорядокЗадачВОчереди.Исполнитель,
	|	ПорядокЗадачВОчереди.Порядок,
	|	ПорядокЗадачВОчереди.Задача КАК Задача
	|ИЗ
	|	РегистрСведений.ПорядокЗадачВОчереди КАК ПорядокЗадачВОчереди
	|ГДЕ
	|	ПорядокЗадачВОчереди.Исполнитель = &Исполнитель
	|	И ПорядокЗадачВОчереди.Порядок МЕЖДУ &П1 И &П2
	|
	|УПОРЯДОЧИТЬ ПО
	|	&_Порядок";
	Запрос.УстановитьПараметр("Исполнитель", Выборка.Исполнитель);
	Запрос.УстановитьПараметр("П1", Мин(Выборка.Порядок, Выборка.ПорядокЦель));
	Запрос.УстановитьПараметр("П2", Макс(Выборка.Порядок, Выборка.ПорядокЦель));
	Если Выборка.Порядок > Выборка.ПорядокЦель Тогда
		// тянем "вверх", нужно вставить на место целевой задачи, остальное сместить вниз
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&_Порядок", "Порядок");
	Иначе
		// тянем "вниз", нужно вставить на место целевой задачи, остальное сместить вверх
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&_Порядок", "Порядок УБЫВ");
	КонецЕсли;
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ПредыдущаяЗадача = Задача;
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.ПорядокЗадачВОчереди.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Задача = ПредыдущаяЗадача;
		ПредыдущаяЗадача = Выборка.Задача;
		Запись.Записать();
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

// Формирует последовательность задач к выполнению
Процедура СортироватьЗадачи() Экспорт
	
	//Если Не Константы.ИспользоватьАвтоматическуюОчередьЗадач.Получить() Тогда
	//	Возврат;
	//КонецЕсли;
	
	//Только исполнители могут настраивать порядок выполнения задач в очереди
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		Возврат;
	КонецЕсли;
	
	Исполнитель = ПользователиКлиентСервер.ТекущийПользователь();
	Если Исполнитель.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ЧасовВДнеПоУмолчанию = 8;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсторияЗадач.Задача КАК Задача
		|ПОМЕСТИТЬ втПродолжение
		|ИЗ
		|	РегистрСведений.ИсторияЗадач КАК ИсторияЗадач
		|ГДЕ
		|	ИсторияЗадач.Задача.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадач.ВОчереди)
		|	И ИсторияЗадач.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадач.ВРаботе)
		|	И ИсторияЗадач.Задача.Исполнитель = &Исполнитель
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияЗадач.Задача
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачиПлан.Ссылка КАК Задача,
		|	МИНИМУМ(ЗадачиПлан.ДатаНачала) КАК ДатаНачала
		|ПОМЕСТИТЬ втПланыЗадач
		|ИЗ
		|	Документ.Задачи.План КАК ЗадачиПлан
		|ГДЕ
		|	ЗадачиПлан.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадач.ВОчереди)
		|	И ЗадачиПлан.Ссылка.Исполнитель = &Исполнитель
		|	И ЗадачиПлан.ДатаОкончания > &ТекущаяДата
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗадачиПлан.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задачи.Исполнитель КАК Исполнитель,
		|	Задачи.Ссылка КАК Задача,
		|	Задачи.Приоритет КАК Приоритет,
		|	Задачи.ОценкаТрудозатрат КАК ОценкаТрудозатрат,
		|	ВЫБОР
		|		КОГДА втПродолжение.Задача ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК Продолжение,
		|	ВЫБОР
		|		КОГДА Задачи.ОценкаТрудозатрат > 0
		|				И Задачи.ОценкаТрудозатрат <= ВЫБОР
		|					КОГДА Задачи.Исполнитель.ЧасовВДне = 0
		|						ТОГДА &ЧасовВДне
		|					ИНАЧЕ Задачи.Исполнитель.ЧасовВДне
		|				КОНЕЦ
		|			ТОГДА -1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сложность,
		|	ВЫБОР
		|		КОГДА Задачи.Срок = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 1800)
		|		ИНАЧЕ Задачи.Срок
		|	КОНЕЦ КАК Срок,
		|	ВЫБОР
		|		КОГДА Задачи.Срок = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА 1800
		|		ИНАЧЕ РАЗНОСТЬДАТ(&ТекущаяДата, Задачи.Срок, ДЕНЬ)
		|	КОНЕЦ КАК ДнейДоЗавершения,
		|	Задачи.ОценкаТрудозатрат / ВЫБОР
		|		КОГДА Задачи.Исполнитель.ЧасовВДне = 0
		|			ТОГДА &ЧасовВДне
		|		ИНАЧЕ Задачи.Исполнитель.ЧасовВДне
		|	КОНЕЦ КАК ДнейНаВыполнение,
		|	ВЫРАЗИТЬ(Задачи.ОценкаТрудозатрат / ВЫБОР
		|			КОГДА Задачи.Исполнитель.ЧасовВДне = 0
		|				ТОГДА &ЧасовВДне
		|			ИНАЧЕ Задачи.Исполнитель.ЧасовВДне
		|		КОНЕЦ КАК ЧИСЛО(10, 0)) КАК ДнейНаВыполнениеОкр,
		|	ВЫБОР
		|		КОГДА втПланыЗадач.Задача ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ втПланыЗадач.ДатаНачала
		|	КОНЕЦ КАК ДатаПлана
		|ПОМЕСТИТЬ втЗадачи
		|ИЗ
		|	Документ.Задачи КАК Задачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПродолжение КАК втПродолжение
		|		ПО Задачи.Ссылка = втПродолжение.Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПланыЗадач КАК втПланыЗадач
		|		ПО втПланыЗадач.Задача = Задачи.Ссылка
		|ГДЕ
		|	Задачи.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадач.ВОчереди)
		|	И Задачи.Исполнитель = &Исполнитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗадачи.Исполнитель КАК Исполнитель,
		|	втЗадачи.Задача КАК Задача,
		|	втЗадачи.Приоритет КАК Приоритет,
		|	втЗадачи.ОценкаТрудозатрат КАК ОценкаТрудозатрат,
		|	втЗадачи.Срок КАК Срок,
		|	втЗадачи.Продолжение КАК Продолжение,
		|	втЗадачи.Приоритет + втЗадачи.ДнейДоЗавершения - втЗадачи.ДнейНаВыполнениеОкр - ВЫБОР
		|		КОГДА втЗадачи.ДнейНаВыполнение > втЗадачи.ДнейНаВыполнениеОкр
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ + втЗадачи.Продолжение + втЗадачи.Сложность КАК Баллы,
		|	втЗадачи.ДатаПлана КАК ДатаПлана
		|ИЗ
		|	втЗадачи КАК втЗадачи
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПлана,
		|	Баллы,
		|	Срок,
		|	Приоритет,
		|	ОценкаТрудозатрат,
		|	Продолжение";
	
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ЧасовВДне", ЧасовВДнеПоУмолчанию);
	
	//Очистка очереди задач пользователя
	НаборЗаписей = РегистрыСведений.ПорядокЗадачВОчереди.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Исполнитель.Установить(Исполнитель);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Сч = 1;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = НаборЗаписей.Добавить();
		Запись.Задача = Выборка.Задача;
		Запись.Исполнитель = Исполнитель;
		Запись.Порядок = Сч;
		Сч = Сч +1;
	КонецЦикла;
	
	НаборЗаписей.Записать();
КонецПроцедуры