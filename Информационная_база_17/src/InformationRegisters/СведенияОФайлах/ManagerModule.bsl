// Устанавливает значение указанного ресурса регистра для переданного объекта.
//
Процедура УстановитьПризнак(Файл, Признак, Значение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.СведенияОФайлах.СоздатьМенеджерЗаписи();
	Запись.Файл = Файл;
	Если Запись.Файл = Неопределено Тогда // Данный тип объекта не обрабатывается
		Возврат;
	КонецЕсли;
	
	Запись.Прочитать();
	
	Если Запись[Признак] <> Значение Тогда
		Запись.Файл = Файл;
		Запись[Признак] = Значение;
		Запись.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Получает значение указанного ресурса регистра для переданного объекта.
//
Функция ПолучитьПризнак(Файл, Признак) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.СведенияОФайлах.СоздатьМенеджерЗаписи();
	Запись.Файл = Файл;
	Если Запись.Файл = Неопределено Тогда // Данный тип объекта не обрабатывается
		Возврат Неопределено;
	КонецЕсли;
	
	Запись.Прочитать();
	
	Возврат Запись[Признак];
	
КонецФункции

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления.

// Регистрирует на плане обмена ОбновлениеИнформационнойБазы объекты,
// для которых необходимо обновить записи в регистре.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ТипПрисоединенногоФайла Из Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип.Типы() Цикл
	
		ОтработаныВсеВладельцыФайлов = Ложь;
		
		МетаданныеПрисоединенногоФайла = Метаданные.НайтиПоТипу(ТипПрисоединенногоФайла);
		
		ЭтоСправочникФайлов = ОбщегоНазначения.ЕстьРеквизитОбъекта("ТекущаяВерсия", МетаданныеПрисоединенногоФайла);
		
		Если Не ЭтоСправочникФайлов Тогда 
			Продолжить;
		КонецЕсли;
		
		ПолноеИмяОбъектаМетаданных = Метаданные.НайтиПоТипу(ТипПрисоединенногоФайла).ПолноеИмя();
		
		Ссылка = "";
		
		Пока Не ОтработаныВсеВладельцыФайлов Цикл
			
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
				|	Файлы.Ссылка КАК Ссылка
				|ИЗ
				|	" + ПолноеИмяОбъектаМетаданных + " КАК Файлы
		 		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФайлах КАК СведенияОФайлах
		 		|		ПО Файлы.Ссылка = СведенияОФайлах.Файл
				|ГДЕ
				|	Файлы.Ссылка > &Ссылка
				|	И СведенияОФайлах.Файл ЕСТЬ NULL
				|	И ИСТИНА
				|УПОРЯДОЧИТЬ ПО
				|	Файлы.Ссылка";
				
			Если МетаданныеПрисоединенногоФайла.Иерархический Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИСТИНА", "И НЕ Файлы.ЭтоГруппа");
			КонецЕсли;
				
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			
			МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"); 
		
			ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылок);
			
			КоличествоСсылок = МассивСсылок.Количество();
			
			Если КоличествоСсылок < 1000 Тогда
				ОтработаныВсеВладельцыФайлов = Истина;
			КонецЕсли;
			
			Если КоличествоСсылок > 0 Тогда
				Ссылка = МассивСсылок[КоличествоСсылок-1];
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновить записи регистра.
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработкаЗавершена = Истина;
	
	Для Каждого ТипПрисоединенногоФайла Из Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип.Типы() Цикл
	
		ЭтоСправочникФайлов = ОбщегоНазначения.ЕстьРеквизитОбъекта("ТекущаяВерсия", Метаданные.НайтиПоТипу(ТипПрисоединенногоФайла));
		
		Если Не ЭтоСправочникФайлов Тогда 
			Продолжить;
		КонецЕсли;
		
		ПолноеИмяОбъектаМетаданных = Метаданные.НайтиПоТипу(ТипПрисоединенногоФайла).ПолноеИмя();
		
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъектаМетаданных);
		
		Если Выборка.Количество() > 0 Тогда 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			МенеджерЗаписи = СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка.Ссылка);
			МенеджерЗаписи.Файл          = Выборка.Ссылка; 
			СтруктураРеквизитов =          ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.Ссылка, "Автор, ВладелецФайла");
			МенеджерЗаписи.Автор         = СтруктураРеквизитов.Автор;
			МенеджерЗаписи.ВладелецФайла = СтруктураРеквизитов.ВладелецФайла;
			Если Выборка.Ссылка.ПодписанЭП И Выборка.Ссылка.Зашифрован Тогда
				МенеджерЗаписи.НомерКартинкиПодписанЗашифрован = 2;
			ИначеЕсли Выборка.Ссылка.Зашифрован Тогда
				МенеджерЗаписи.НомерКартинкиПодписанЗашифрован = 1;
			ИначеЕсли Выборка.Ссылка.ПодписанЭП Тогда
				МенеджерЗаписи.НомерКартинкиПодписанЗашифрован = 0;
			Иначе
				МенеджерЗаписи.НомерКартинкиПодписанЗашифрован = -1;
			КонецЕсли;
			МенеджерЗаписи.Записать();
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать файл: %1 по причине:
				|%2'"), 
				Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(), Выборка.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Для Каждого ТипПрисоединенногоФайла Из Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип.Типы() Цикл
	
		ЭтоСправочникФайлов = ОбщегоНазначения.ЕстьРеквизитОбъекта("ТекущаяВерсия", Метаданные.НайтиПоТипу(ТипПрисоединенногоФайла));
		
		Если Не ЭтоСправочникФайлов Тогда 
			Продолжить;
		КонецЕсли;
		
		ПолноеИмяОбъектаМетаданных = Метаданные.НайтиПоТипу(ТипПрисоединенногоФайла).ПолноеИмя();
		
		Если Не ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъектаМетаданных) Тогда
			ОбработкаЗавершена = Ложь;
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Процедуре РегистрыСведений.СведенияОФайлах.ОбработатьДанныеДляПереходаНаНовуюВерсию не удалось обработать некоторые файлы файлов (пропущены): %1'"), 
		ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
		Метаданные.НайтиПоПолномуИмени("ПолноеИмяОбъектаМетаданных"),,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Процедура РегистрыСведений.СведенияОФайлах.ОбработатьДанныеДляПереходаНаНовуюВерсию обработала очередную порцию файлов: %1'"),
		ОбъектовОбработано));
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЧитаемыеОбъектыПриОбновленииИБ() Экспорт
	
	ЧитаемыеОбъекты = "";
	
	Для Каждого ТипПрисоединенногоФайла Из Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип.Типы() Цикл
		ПолноеИмяОбъектаМетаданных = Метаданные.НайтиПоТипу(ТипПрисоединенногоФайла).ПолноеИмя();
		ЧитаемыеОбъекты = ЧитаемыеОбъекты + ПолноеИмяОбъектаМетаданных + ", ";
	КонецЦикла;
	
	ЧитаемыеОбъекты = Лев(ЧитаемыеОбъекты, СтрДлина(ЧитаемыеОбъекты) - 2);
	
	Возврат ЧитаемыеОбъекты;
	
КонецФункции

#КонецОбласти

#КонецЕсли
