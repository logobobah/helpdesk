#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет уведомление по задаче.
//
// Параметры:
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события.
//  Объект - ЛюбаяСсылка - Объект.
//  Задача - ДокументСсылка.Задачи - Задача.
//  ДополнительноеОписание - Строка - Дополнительное описание.
//
Процедура ДобавитьУведомлениеПоЗадаче(
	ВидСобытия,
	Объект,
	Задача,
	ДополнительноеОписание = "") Экспорт
	
	ДобавитьУведомлениеПоСобытию(
		Задача.Исполнитель,
		ВидСобытия,
		Объект,
		Задача,
		ДополнительноеОписание);
	ДобавитьУведомлениеПоОбъекту(
		ВидСобытия,
		Объект,
		Задача.Исполнитель,
		ДополнительноеОписание);
		
КонецПроцедуры

// Добавляет уведомление по задаче.
//
// Параметры:
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события.
//  Объект - ЛюбаяСсылка - Объект.
//  ОбъектПодписки - ЛюбаяСсылка - Объект подписки.
//  ДополнительноеОписание - Строка - Дополнительное описание.
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
//
Процедура ДобавитьУведомлениеПоОбъекту(
	ВидСобытия,
	Объект,
	ОбъектПодписки,
	ДополнительноеОписание = "",
	Пользователь = Неопределено) Экспорт
	
	Подписчики = РегистрыСведений.НастройкиУведомлений.ПодписчикиПоОбъекту(ВидСобытия, ОбъектПодписки);
	Для Каждого Подписчик Из Подписчики Цикл
		Если ЗначениеЗаполнено(Пользователь) И Подписчик.Пользователь <> Пользователь Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьУведомление(
			Подписчик.Пользователь,
			ВидСобытия,
			Подписчик.СпособУведомления,
			Объект,
			ОбъектПодписки,
			ДополнительноеОписание);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет уведомление по событию.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события.
//  Объект - ЛюбаяСсылка - Объект.
//  ОбъектПодписки - ЛюбаяСсылка - Объект подписки.
//  ДополнительноеОписание - Строка - Дополнительное описание.
//
Процедура ДобавитьУведомлениеПоСобытию(
	Пользователь,
	ВидСобытия,
	Объект,
	ОбъектПодписки,
	ДополнительноеОписание = "") Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли;
	
	//Если ТипЗнч(Пользователь) <> Тип("СправочникСсылка.Пользователи") Тогда
	//	Возврат;
	//КонецЕсли;
	
	ВозможныеПодписчики = Новый Массив;
	ВозможныеПодписчики.Добавить(Пользователь);
	
	Подписчики = РегистрыСведений.НастройкиУведомлений.ПодписчикиПоСобытию(ВозможныеПодписчики, ВидСобытия, Объект);
	Для Каждого Подписчик Из Подписчики Цикл
		ДобавитьУведомление(
			Подписчик.Пользователь,
			ВидСобытия,
			Подписчик.СпособУведомления,
			Объект,
			ОбъектПодписки,
			ДополнительноеОписание);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет уведомление по состоянию.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события.
//  Объект - ЛюбаяСсылка - Объект.
//  ОбъектПодписки - ЛюбаяСсылка - Объект подписки.
//  ДополнительноеОписание - Строка - Дополнительное описание.
//
Процедура ДобавитьУведомлениеПоСостоянию(
	Пользователь,
	ВидСобытия,
	Объект,
	ОбъектПодписки,
	ДополнительноеОписание = "") Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ДобавитьУведомлениеПоСобытию(
			Пользователь,
			ВидСобытия,
			Объект,
			ОбъектПодписки,
			ДополнительноеОписание);
		
		РегистрыСведений.ОбработанныеУведомления.ДобавитьОбработанноеУведомление(
			ВидСобытия,
			Объект,
			Пользователь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Добавляет уведомление по событию.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события.
//  Объект - ЛюбаяСсылка - Объект.
//  ОбъектПодписки - ЛюбаяСсылка - Объект подписки.
//  ДополнительноеОписание - Строка - Дополнительное описание.
//
Процедура ДобавитьУведомлениеПоСобытиюЗаказчику(
	КонтактноеЛицо,
	ВидСобытия,
	Объект,
	ОбъектПодписки,
	ДополнительноеОписание = "") Экспорт
	
	Если Не ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	//Проверка на наличие эл. почты
	ЭлПочта = КонтактноеЛицо.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, "Тип");
	Если ЭлПочта = Неопределено Или ПустаяСтрока(ЭлПочта.Представление) Тогда
		Возврат;
	КонецЕсли;
	
	ВозможныеПодписчики = Новый Массив;
	ВозможныеПодписчики.Добавить(КонтактноеЛицо);
	
	//Контактные лица уведомляются только по электронной почте
	ДобавитьУведомление(
		КонтактноеЛицо,
		ВидСобытия,
		Перечисления.СпособыУведомления.ПоПочте,
		Объект,
		ОбъектПодписки,
		ДополнительноеОписание);
	
КонецПроцедуры

// Добавляет уведомление по шаблону.
//
// Параметры:
//	Событие - структура с ключами ВидСобытия, Источник, Получатель, ШаблонПисьма, УчетнаяЗапись, ОтложеннаяОтправкаПисем, ПроизвольныеПараметры
//  Получатель - СправочникСсылка.Пользователи, КонтактныеЛицаЗаказчиков.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события.
//  Источник - ЛюбаяСсылка - Объект.
//  ШаблонПисьма - СправочникСсылка.ШаблоныПисем.
//  МинимальнаяДатаСоздания - Дата - минимальная дата с которой нужно создавать письмо.
//  ПроизвольныеПараметры - Соответствие произвольных параметров для их добавления в письмо по шаблону
Процедура ДобавитьУведомлениеПоШаблону(Событие) Экспорт
	
	Если Не ЗначениеЗаполнено(Событие.ШаблонПисьма) Тогда
		Возврат;
	КонецЕсли;
	
	СпособУведомления = Перечисления.СпособыУведомления.ПоПочте;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.ОчередьУведомлений.СоздатьМенеджерЗаписи();
	//Запись.Пользователь = Пользователь;
	Запись.ВидСобытия = Событие.ВидСобытия;
	Запись.СпособУведомления = СпособУведомления;
	Запись.Объект = Событие.Источник;
	Запись.ОбъектПодписки = Событие.Источник;
	Запись.ШаблонПисьма = Событие.ШаблонПисьма;
	Запись.Прочитать();
	
	//Запись.Пользователь = Пользователь;
	Запись.ВидСобытия = Событие.ВидСобытия;
	Запись.СпособУведомления = СпособУведомления;
	Запись.Объект = Событие.Источник;
	Запись.ОбъектПодписки = Событие.Источник;
	Запись.КоличествоПопытокОтправки = 0;
	Запись.ШаблонПисьма = Событие.ШаблонПисьма;
	Если ЗначениеЗаполнено(Событие.ПроизвольныеПараметры) Тогда
		Запись.ПроизвольныеПараметры = Событие.ПроизвольныеПараметры;
	КонецЕсли;
	Запись.Записать();
	
КонецПроцедуры

// Возвращает все уведомления из очереди, отправку которых необходимо выполнить.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Уведомления.
//
Функция ПолучитьУведомления() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОчередьУведомлений.Пользователь КАК Пользователь,
		|	ОчередьУведомлений.ВидСобытия КАК ВидСобытия,
		|	ОчередьУведомлений.СпособУведомления КАК СпособУведомления,
		|	ОчередьУведомлений.Объект КАК Объект,
		|	ОчередьУведомлений.ОбъектПодписки КАК ОбъектПодписки,
		|	ОчередьУведомлений.ДополнительноеОписание КАК ДополнительноеОписание
		|ИЗ
		|	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
		|ГДЕ
		|	ОчередьУведомлений.КоличествоПопытокОтправки < 3
		|	И ОчередьУведомлений.ШаблонПисьма = ЗНАЧЕНИЕ(Справочник.ШаблоныПисем.ПустаяСсылка)";
	Уведомления = Запрос.Выполнить().Выгрузить();
	
	КоличествоЭлементов = Уведомления.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		Уведомление = Уведомления[КоличествоЭлементов - Индекс];
		
		Если (ТипЗнч(Уведомление.Пользователь) = Тип("СправочникСсылка.Пользователи") И Уведомление.Пользователь.Недействителен)
			ИЛИ (ТипЗнч(Уведомление.Пользователь) = Тип("СправочникСсылка.КонтактныеЛицаЗаказчиков") И (Не Уведомление.Пользователь.Актуален ИЛИ Не Уведомление.Пользователь.Владелец.Актуален)) 
			ИЛИ Уведомление.Пользователь.ПометкаУдаления Тогда
			ПричинаУдаления = НСтр("ru = 'Пользователь помечен на удаление или является недействительным.'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			УдалитьУведомление(
				Уведомление.Пользователь,
				Уведомление.ВидСобытия,
				Уведомление.СпособУведомления,
				Уведомление.Объект,
				Уведомление.ОбъектПодписки,
				ПричинаУдаления);
			Уведомления.Удалить(Уведомление);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Уведомления;
	
КонецФункции

// Увеличивает число попыток отправки уведомления.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ уведомления.
//  Объект - ЛюбаяСсылка - Объект.
//  ОбъектПодписки - ЛюбаяСсылка - Объект подписки.
//
Процедура УвеличитьЧислоПопытокОтправки(
	Пользователь,
	ВидСобытия,
	СпособУведомления,
	Объект,
	ОбъектПодписки,
	ШаблонПисьма = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.ОчередьУведомлений.СоздатьМенеджерЗаписи();
	Запись.Пользователь = Пользователь;
	Запись.ВидСобытия = ВидСобытия;
	Запись.СпособУведомления = СпособУведомления;
	Запись.Объект = Объект;
	Запись.ОбъектПодписки = ОбъектПодписки;
	Если ЗначениеЗаполнено(ШаблонПисьма) Тогда
		Запись.ШаблонПисьма = ШаблонПисьма;
	КонецЕсли;
	Запись.Прочитать();
	
	Запись.Пользователь = Пользователь;
	Запись.ВидСобытия = ВидСобытия;
	Запись.СпособУведомления = СпособУведомления;
	Запись.Объект = Объект;
	Запись.ОбъектПодписки = ОбъектПодписки;
	Запись.ДополнительноеОписание = Запись.ДополнительноеОписание;
	Запись.КоличествоПопытокОтправки = Запись.КоличествоПопытокОтправки + 1;
	Если ЗначениеЗаполнено(ШаблонПисьма) Тогда
		Запись.ШаблонПисьма = ШаблонПисьма;
	КонецЕсли;
	Запись.Записать();
	
КонецПроцедуры

// Удаляет уведомление из очереди уведомлений.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ уведомления.
//  Объект - ЛюбаяСсылка - Объект.
//  ОбъектПодписки - ЛюбаяСсылка - Объект подписки.
//  ПричинаУдаления - Строка - Причина удаления уведомления из очереди.
//
Процедура УдалитьУведомление(
	Пользователь,
	ВидСобытия,
	СпособУведомления,
	Объект,
	ОбъектПодписки,
	ПричинаУдаления = "",
	ШаблонПисьма = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.ОчередьУведомлений.СоздатьМенеджерЗаписи();
	Запись.Пользователь = Пользователь;
	Запись.ВидСобытия = ВидСобытия;
	Запись.СпособУведомления = СпособУведомления;
	Запись.Объект = Объект;
	Запись.ОбъектПодписки = ОбъектПодписки;
	Если ЗначениеЗаполнено(ШаблонПисьма) Тогда
		Запись.ШаблонПисьма = ШаблонПисьма;
	КонецЕсли;
	Запись.Удалить();
	
	Если ЗначениеЗаполнено(ПричинаУдаления) Тогда
		ТекстЗаписи = СтрШаблон(
			НСтр("ru = 'Уведомление не было отправлено
				|Пользователь: %1
				|Вид события: %2
				|Способ уведомления: %3
				|Объект: %4
				|Объект подписки: %5
				|Причина: %6'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			Пользователь,
			ВидСобытия,
			СпособУведомления,
			Объект,
			ОбъектПодписки,
			ПричинаУдаления);
		ЗаписьЖурналаРегистрации(
			РаботаСУведомлениями.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			ТекстЗаписи);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет уведомление в очередь уведомлений. Уведомление добавляет только для дейстительных пользователей.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ уведомления.
//  Объект - ЛюбаяСсылка - Объект.
//  ОбъектПодписки - ЛюбаяСсылка - Объект подписки.
//  ДополнительноеОписание - Строка - Дополнительное описание.
//
Процедура ДобавитьУведомление(
	Пользователь,
	ВидСобытия,
	СпособУведомления,
	Объект,
	ОбъектПодписки,
	ДополнительноеОписание)
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") И Пользователь.Недействителен)
			ИЛИ (ТипЗнч(Пользователь) = Тип("СправочникСсылка.КонтактныеЛицаЗаказчиков") И (Не Пользователь.Актуален ИЛИ Не Пользователь.Владелец.Актуален))
			Или Пользователь.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительнаяПроверкаПодписки = Перечисления.СобытияУведомлений.ДополнительнаяПроверкаПодписки(
		Пользователь,
		ВидСобытия,
		Объект);
	Если Не ДополнительнаяПроверкаПодписки Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.ОчередьУведомлений.СоздатьМенеджерЗаписи();
	Запись.Пользователь = Пользователь;
	Запись.ВидСобытия = ВидСобытия;
	Запись.СпособУведомления = СпособУведомления;
	Запись.Объект = Объект;
	Запись.ОбъектПодписки = ОбъектПодписки;
	Запись.Прочитать();
	
	Запись.Пользователь = Пользователь;
	Запись.ВидСобытия = ВидСобытия;
	Запись.СпособУведомления = СпособУведомления;
	Запись.Объект = Объект;
	Запись.ОбъектПодписки = ОбъектПодписки;
	Если ЗначениеЗаполнено(Запись.ДополнительноеОписание) Тогда
		Запись.ДополнительноеОписание = Запись.ДополнительноеОписание + Символы.ПС + Символы.ПС + ДополнительноеОписание;
	Иначе
		Запись.ДополнительноеОписание = ДополнительноеОписание;
	КонецЕсли;
	Запись.КоличествоПопытокОтправки = 0;
	Запись.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли