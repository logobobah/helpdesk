#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		Если ДанныеЗаполнения.Свойство("ПовторениеПоДням") Тогда
			ПовторениеПоДням.Загрузить(ДанныеЗаполнения.ПовторениеПоДням);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ИсключенияПовторения") Тогда
			ИсключенияПовторения.Загрузить(ДанныеЗаполнения.ИсключенияПовторения);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ПовторяющеесяСобытие") И ЗначениеЗаполнено(ДанныеЗаполнения.ПовторяющеесяСобытие)
			И ДанныеЗаполнения.Свойство("ДатаИсключения") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаИсключения) Тогда
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.ПовторяющеесяСобытие,
				"Начало, Окончание, Наименование, Описание, Источник, Календарь, РедактированиеЗапрещено");
			
			ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия;
			
			ИсходнаяДатаНачала = Начало;
			Начало = НачалоДня(ДанныеЗаполнения.ДатаИсключения) + (ИсходнаяДатаНачала - НачалоДня(ИсходнаяДатаНачала));
			Окончание = НачалоДня(ДанныеЗаполнения.ДатаИсключения) + (Окончание - НачалоДня(ИсходнаяДатаНачала));
			
			ИдентификаторПовторяющегосяСобытия = ДанныеЗаполнения.ПовторяющеесяСобытие.Идентификатор;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ЗаписиКалендаряСотрудника") Тогда
		
		СкопироватьЗаписьКалендаря(ДанныеЗаполнения);
		
	КонецЕсли;
	
	ДозаполнитьПоУмолчанию();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Окончание < Начало Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru='Дата окончания не может быть меньше даты начала.'"),
		ЭтотОбъект,
		"Окончание",
		,
		Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	ЗаполнитьКлючевыеПоля();
	
	ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	ОбменДанными.Получатели.Очистить();
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьИзменениеВПланеОбмена();
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", Не ЗначениеЗаполнено(Ссылка));
	
	// Установка настроек повторения
	Если ДополнительныеСвойства.Свойство("НастройкиПовторения") Тогда
		
		// Отказ в установке повторения для помеченной на удаление записи
		Если ПометкаУдаления = Истина Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Невозможно настроить повторение для записи, помеченной на удаление.'"));
			Возврат;
		КонецЕсли;
		
		// Отказ в установке повторения для записи, уже являющейся исключением повторения
		Если ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Невозможно настроить повторение для записи, являющейся исключением повторения.'"));
			Возврат;
		КонецЕсли;
		
		ДополнительныеСвойства.Вставить("ИзмененыНастройкиПовторения");
		// При смене частоты повторения очищаются все настройки повторения, в том числе и исключения.
		Если ЧастотаПовторения <> ДополнительныеСвойства.НастройкиПовторения.ЧастотаПовторения Тогда
			ОчиститьРеквизитыПовторения();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДополнительныеСвойства.НастройкиПовторения);
		
		// Проверка заполненности частоты повторения
		Если ЗначениеЗаполнено(ЧастотаПовторения) Тогда
			ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие;
		Иначе
			ОтменитьПовторение();
		КонецЕсли;
		
		// Установка настроек и проверка заполненности, особенная для каждой частоты повторения.
		Если ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно Тогда
			
			ПовторениеПоДням.Очистить();
			
			Для Каждого ДеньПовтора Из ДополнительныеСвойства.НастройкиПовторения.ПовторениеПоДнямНедели Цикл
				Если ДеньПовтора.Значение Тогда
					НоваяСтрока = ПовторениеПоДням.Добавить();
					НоваяСтрока.ДеньНедели = ДеньПовтора.Ключ;
					НоваяСтрока.НомерВхождения = 0;
				КонецЕсли;
			КонецЦикла;
			
			Если ПовторениеПоДням.Количество() = 0 Тогда
				ОтменитьПовторение();
			КонецЕсли;
			
		ИначеЕсли ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно Тогда
			
			ПовторениеПоДням.Очистить();
			
			Если ЗначениеЗаполнено(ДополнительныеСвойства.НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце) Тогда
				НоваяСтрока = ПовторениеПоДням.Добавить();
				ЗаполнитьЗначенияСвойств(
					НоваяСтрока,
					ДополнительныеСвойства.НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПовторениеПоДнямМесяца) И ПовторениеПоДням.Количество() = 0 Тогда
				ОтменитьПовторение();
			КонецЕсли;
			
		ИначеЕсли ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно Тогда
			
			Если НЕ ЗначениеЗаполнено(ПовторениеПоДнямМесяца) ИЛИ НЕ ЗначениеЗаполнено(ПовторениеПоМесяцам) Тогда
				ОтменитьПовторение();
			КонецЕсли;
			
		КонецЕсли;
		
		// Удаление исключений повторения, не подходящих под новое правило повторения
		СтруктураПравилаПовторения = ПолучитьСтруктуруПравилаПовторения();
		ИсключенияПовторенияКоличество = ИсключенияПовторения.Количество();
		Для ИндексИсключения = 1 По ИсключенияПовторенияКоличество Цикл
			
			ИсключениеПовторения = ИсключенияПовторения[ИсключенияПовторенияКоличество - ИндексИсключения];
			Если НЕ РаботаСКалендаремСервер.ДатаУдовлетворяетПравилуПовторения(
				ИсключениеПовторения.ДатаИсключения, СтруктураПравилаПовторения, Ложь) Тогда
				
				ПометитьНаУдалениеИсключениеПовторения(ИсключениеПовторения);
				ИсключенияПовторения.Удалить(ИсключениеПовторения);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Корректировка даты начала повторения и даты окончания повторения
	Если ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие
		ИЛИ ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия Тогда
		
		ОчиститьРеквизитыПовторения();
		
	ИначеЕсли ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		
		ДатаНачалаПовторения = Начало;
		
		Если ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.Никогда Тогда
			ДатаОкончанияПовторения = Дата(1,1,1);
		ИначеЕсли ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ПослеЧислаПовторов Тогда
			РассчитатьДатуОкончанияПовторения();
		ИначеЕсли ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ДоДаты Тогда
			Если НЕ ЗначениеЗаполнено(ДатаОкончанияПовторения) Тогда
				ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.Никогда;
			ИначеЕсли ДатаОкончанияПовторения < ДатаНачалаПовторения Тогда
				ОтменитьПовторение();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Очистка настроек повторения при удалении повторяющегося события
	Если ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие И ИзмениласьПометкаУдаления() Тогда
		ОтменитьПовторение();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ДополнительныеСвойства.Свойство("ПовторяющеесяСобытие") И ЗначениеЗаполнено(ДополнительныеСвойства.ПовторяющеесяСобытие)
		И ДополнительныеСвойства.Свойство("ДатаИсключения") И ЗначениеЗаполнено(ДополнительныеСвойства.ДатаИсключения) Тогда
		
		ПовторяющеесяСобытиеОбъект = ДополнительныеСвойства.ПовторяющеесяСобытие.ПолучитьОбъект();
		ПовторяющеесяСобытиеОбъект.Заблокировать();
		ПовторяющеесяСобытиеОбъект.ДобавитьИсключениеПовторения(ДополнительныеСвойства.ДатаИсключения, Ссылка);
		ПовторяющеесяСобытиеОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	СкопироватьЗаписьКалендаря(ОбъектКопирования);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СкопироватьЗаписьКалендаря(ЗаписьКалендаря)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаписьКалендаря,
		"ВесьДень, Начало, Окончание, Описание, Предмет");
	
	ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие;
	Связанная = Ложь;
	
	ДатаНачалаПовторения = Неопределено;
	ДатаОкончанияПовторения = Неопределено;
	ИнтервалПовторения = Неопределено;
	КоличествоПовторов = Неопределено;
	ПовторениеПоДнямМесяца = Неопределено;
	ПовторениеПоМесяцам = Неопределено;
	ПравилоОкончанияПовторения = Неопределено;
	ЧастотаПовторения = Неопределено;
	
	ИсключенияПовторения.Очистить();
	ПовторениеПоДням.Очистить();
	
КонецПроцедуры

Процедура ДозаполнитьПоУмолчанию()
	
	Если ЗначениеЗаполнено(Календарь) Тогда
		Возврат;
	КонецЕсли;
	
	Календарь = СистемаУчетаЗадачСервер.ПолучитьКалендарьИсполнителя();
	
КонецПроцедуры

Процедура ЗаполнитьКлючевыеПоля()
	
	Если ПометкаУдаления Тогда
		ETag = "";
	КонецЕсли;
	Если ТипЗаписиКалендаря.Пустая() Тогда
		ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Ключ = ОбменСGoogle.КлючИзИдентификатора(Идентификатор, ТипЗнч(ЭтотОбъект));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		СсылкаНаОбъект = Ссылка;
	Иначе
		СсылкаНаОбъект = ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			СсылкаНаОбъект = Справочники.ЗаписиКалендаряСотрудника.ПолучитьСсылку();
			УстановитьСсылкуНового(СсылкаНаОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Ключ = ОбменСGoogle.КлючИзИдентификатора(
	СтрЗаменить(СсылкаНаОбъект.УникальныйИдентификатор(), "-", ""),
	ТипЗнч(ЭтотОбъект));
	
	// Заполнение идентификатора элемента повторяющегося события
	Если ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия Тогда
		Идентификатор = ИдентификаторПовторяющегосяСобытия + "_" + Формат(Начало,"ДФ=yyyyMMddТЧЧммссZ");
	ИначеЕсли ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		//Заполнение показателя ПовторениеПоДнямМесяца
		Если ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно 
				И ПовторениеПоДнямМесяца = 0 И ПовторениеПоДням.Количество() = 0 Тогда
			ПовторениеПоДнямМесяца = День(Начало);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзменениеВПланеОбмена()
	
	Если Не ЗначениеЗаполнено(Календарь) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Календарь, "СинхронизироватьСGoogle") Тогда
		УзелДляКалендаряGoogle = ПланыОбмена.ОбменСGoogleCalendar.УзелДляКалендаряGoogle(Календарь);
		ОбменДанными.Получатели.Добавить(УзелДляКалендаряGoogle);
		УдалитьДублированиеРегистрацииИзменений(УзелДляКалендаряGoogle);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет регистрацию изменений в случае, когда у объекта был изменен календарь перед выгрузкой
Процедура УдалитьДублированиеРегистрацииИзменений(УзелДляКалендаряGoogle)
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаписиКалендаряСотрудникаИзменения.Узел
	|ИЗ
	|	Справочник.ЗаписиКалендаряСотрудника.Изменения КАК ЗаписиКалендаряСотрудникаИзменения
	|ГДЕ
	|	ЗаписиКалендаряСотрудникаИзменения.Ссылка = &Ссылка
	|	И ЗаписиКалендаряСотрудникаИзменения.Узел <> &Узел");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Узел", УзелДляКалендаряGoogle);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку(0), Ссылка);
	
КонецПроцедуры

Процедура ОчиститьРеквизитыПовторения()
	
	ДатаНачалаПовторения = Дата(1,1,1);
	ДатаОкончанияПовторения = Дата(1,1,1);
	ИнтервалПовторения = 0;
	ПовторениеПоДнямМесяца = 0;
	ПовторениеПоМесяцам = 0;
	ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ПустаяСсылка();
	ЧастотаПовторения = Перечисления.ЧастотаПовторения.ПустаяСсылка();
	КоличествоПовторов = 0;
	ПовторениеПоДням.Очистить();
	
	ОчиститьИсключенияПовторения();
	
КонецПроцедуры

Процедура ОчиститьИсключенияПовторения()
	
	Для Каждого ИсключениеПовторения Из ИсключенияПовторения Цикл
		
		ПометитьНаУдалениеИсключениеПовторения(ИсключениеПовторения);
		
	КонецЦикла;
	
	ИсключенияПовторения.Очистить();
	
КонецПроцедуры

Процедура ПометитьНаУдалениеИсключениеПовторения(ИсключениеПовторения)
	
	Если ЗначениеЗаполнено(ИсключениеПовторения.ЗаписьИсключения) Тогда
		
		ЗаписьИсключенияОбъект = ИсключениеПовторения.ЗаписьИсключения.ПолучитьОбъект();
		
		Если ЗаписьИсключенияОбъект = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗаписьИсключенияОбъект.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия Тогда
			ЗаписьИсключенияОбъект.Заблокировать();
			ЗаписьИсключенияОбъект.ПометкаУдаления = Истина;
			ЗаписьИсключенияОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИзмениласьПометкаУдаления()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаписиКалендаряСотрудника.ПометкаУдаления
		|ИЗ
		|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
		|ГДЕ
		|	ЗаписиКалендаряСотрудника.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат ПометкаУдаления И НЕ Выборка.ПометкаУдаления;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура РассчитатьДатуОкончанияПовторения()
	
	Если ЗначениеЗаполнено(ДатаОкончанияПовторения) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КоличествоПовторов) Тогда
		ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.Никогда;
		Возврат;
	КонецЕсли;
	
	СтруктураПравилаПовторения = ПолучитьСтруктуруПравилаПовторения();
	
	НомерИтерации = 0;
	НомерПовтора = 0;
	ПроверяемаяДата = ДатаНачалаПовторения;
	
	Пока НомерИтерации < 10000 Цикл // Ограничение на слишком большую дату окончания повторения
		
		Если РаботаСКалендаремСервер.ДатаУдовлетворяетПравилуПовторения(
				ПроверяемаяДата, СтруктураПравилаПовторения) Тогда
			
			НомерИтерации = 0;
			НомерПовтора = НомерПовтора + 1;
			
			Если НомерПовтора = КоличествоПовторов Тогда
				ДатаОкончанияПовторения = ПроверяемаяДата;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ПроверяемаяДата = ПроверяемаяДата + 86400; // 86400 - число секунд в сутках
		НомерИтерации = НомерИтерации + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Включает на данную дату как исключение из правила повторения
Процедура ДобавитьИсключениеПовторения(ДатаИсключения, ЗаписьИсключения = Неопределено) Экспорт
	
	Если ТипЗаписиКалендаря <> Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		ВызватьИсключение НСтр("ru = 'Некорректный тип повторяющегося события.'");
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ДатаИсключения", ДатаИсключения);
	НайденныеСтроки = ИсключенияПовторения.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ВызватьИсключение НСтр("ru = 'На данную дату уже указано исключение повторения.'");
	КонецЕсли;
	
	НоваяСтрокаИсключенияПовторения = ИсключенияПовторения.Добавить();
	НоваяСтрокаИсключенияПовторения.ЗаписьИсключения = ЗаписьИсключения;
	НоваяСтрокаИсключенияПовторения.ДатаИсключения = ДатаИсключения;
	
	Если ЗначениеЗаполнено(ЗаписьИсключения) Тогда
		ДополнительныеСвойства.Вставить("ИзмененоВхождение");
	Иначе
		ДополнительныеСвойства.Вставить("УдаленоВхождение");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает следующую дату начала повторяющегося события
Функция ПолучитьСледующуюДатуНачала(ДатаОтсчета) Экспорт
	
	Если ЗначениеЗаполнено(ДатаОкончанияПовторения) И ДатаОтсчета >= ДатаОкончанияПовторения Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПравилаПовторения = ПолучитьСтруктуруПравилаПовторения();
	
	НомерИтерации = 0;
	ПроверяемаяДата = НачалоДня(ДатаОтсчета);
	
	Пока НомерИтерации < 10000 Цикл // Ограничение на слишком следующую дату начала
		
		Если РаботаСКалендаремСервер.ДатаУдовлетворяетПравилуПовторения(
				ПроверяемаяДата, СтруктураПравилаПовторения) Тогда
			
			ВозможнаяДата = ПроверяемаяДата + (Начало - НачалоДня(Начало));
			Если ДатаОтсчета < ВозможнаяДата Тогда
				Возврат ВозможнаяДата;
			КонецЕсли;
			
		КонецЕсли;
		
		ПроверяемаяДата = ПроверяемаяДата + 86400; // 86400 - число секунд в сутках
		НомерИтерации = НомерИтерации + 1;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьСтруктуруПравилаПовторения()
	
	СтруктураПравилаПовторения = РаботаСКалендаремСервер.ПолучитьСтруктуруПравилаПовторения();
	ЗаполнитьЗначенияСвойств(СтруктураПравилаПовторения, ЭтотОбъект);
	СтруктураПравилаПовторения.ИсключенияПовторения = ИсключенияПовторения.Выгрузить();
	СтруктураПравилаПовторения.ПовторениеПоДням = ПовторениеПоДням.Выгрузить();
	
	Возврат СтруктураПравилаПовторения;
	
КонецФункции

Процедура ОтменитьПовторение()
	
	ОчиститьРеквизитыПовторения();
	ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие;
	
КонецПроцедуры

Функция ПолучитьДатуНачалаИДатуОкончания(ДатаЗаписи)
	
	Если ДатаЗаписи < ДатаНачалаПовторения Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОкончанияПовторения) И ДатаЗаписи > ДатаОкончанияПовторения Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПравилаПовторения = ПолучитьСтруктуруПравилаПовторения();
	ПроверяемаяДата = НачалоДня(ДатаЗаписи);
	
	Если РаботаСКалендаремСервер.ДатаУдовлетворяетПравилуПовторения(
			ПроверяемаяДата, СтруктураПравилаПовторения) Тогда
		
		ДатаНачалаИОкончания = Новый Структура("Начало, Окончание");
		ДатаНачалаИОкончания.Начало = ПроверяемаяДата + (Начало - НачалоДня(Начало));
		ДатаНачалаИОкончания.Окончание = ПроверяемаяДата + (Окончание - НачалоДня(Окончание));
		
		Возврат ДатаНачалаИОкончания;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьТекстовоеПредставлениеПовторения()
	
	ТекстовоеПредставлениеПовторения = "";
	
	НастройкиПовторения = ПолучитьНастройкиПовторения();
	ТекстовоеПредставлениеПовторения =
		РаботаСКалендаремКлиентСервер.ПолучитьТекстовоеПредставлениеПовторения(НастройкиПовторения);
	
	Возврат ТекстовоеПредставлениеПовторения;
	
КонецФункции

Функция ПолучитьНастройкиПовторения()
	
	ПовторениеПоДнямНедели = Новый Соответствие;
	Для ИндексПовторениеПоДням = 1 По 7 Цикл
		
		Если ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ДеньНедели", ИндексПовторениеПоДням);
			ПараметрыОтбора.Вставить("НомерВхождения", 0);
			НайденныеСтроки = ПовторениеПоДням.НайтиСтроки(ПараметрыОтбора); 
			
			ПовторениеПоДнямНедели.Вставить(ИндексПовторениеПоДням, НайденныеСтроки.Количество() <> 0);
			
		Иначе
			ПовторениеПоДнямНедели.Вставить(ИндексПовторениеПоДням, Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
	ПовторениеПоДнямНеделиВМесяце = Неопределено;
	
	Если ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно
		И НЕ ЗначениеЗаполнено(ПовторениеПоДнямМесяца) И ПовторениеПоДням.Количество() = 1 Тогда
		
		ПовторениеПоДнямНеделиВМесяце = Новый Структура("НомерВхождения, ДеньНедели");
		ЗаполнитьЗначенияСвойств(ПовторениеПоДнямНеделиВМесяце, ПовторениеПоДням[0]);
		
	КонецЕсли;
	
	НастройкиПовторения = РаботаСКалендаремКлиентСервер.ПолучитьСтруктуруНастройкиПовторения(
		ЧастотаПовторения, ИнтервалПовторения, ПравилоОкончанияПовторения,
		КоличествоПовторов, ДатаОкончанияПовторения, ПовторениеПоДнямНедели,
		ПовторениеПоДнямМесяца, ПовторениеПоДнямНеделиВМесяце, ПовторениеПоМесяцам);
	
	Возврат НастройкиПовторения;
	
КонецФункции

#КонецОбласти

#КонецЕсли