
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Параметры.Ключ) Тогда
		СоздатьЭлементыРасширенногоВвода();
		КлючСохраненияПоложенияОкна = "РасширенныйВвод";
	КонецЕсли;
	
	Если Параметры.Свойство("ПовторяющеесяСобытие") И ЗначениеЗаполнено(Параметры.ПовторяющеесяСобытие)
		И Параметры.Свойство("ДатаИсключения") И ЗначениеЗаполнено(Параметры.ДатаИсключения) Тогда
		
		ПовторяющеесяСобытие = Параметры.ПовторяющеесяСобытие;
		ПовторяющеесяСобытиеДатаИсключения = Параметры.ДатаИсключения;
		
	КонецЕсли;
	
	РаботаСЦветомКлиентСервер.ЗаполнитьСписокВыбораВремени(Элементы.НачалоВремя);
	РаботаСЦветомКлиентСервер.ЗаполнитьСписокВыбораВремени(Элементы.ОкончаниеВремя);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если ЗначениеЗаполнено(ПовторяющеесяСобытие) И ЗначениеЗаполнено(ПовторяющеесяСобытиеДатаИсключения) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПовторяющеесяСобытие", ПовторяющеесяСобытие);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ДатаИсключения", ПовторяющеесяСобытиеДатаИсключения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ПометитьНаУдалениеПриЗаписи) Тогда
		ПометитьНаУдалениеПриЗаписи.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		ПометитьНаУдалениеПриЗаписи = Справочники.ЗаписиКалендаряСотрудника.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СУЗ.КалендарьСотрудника
	Оповестить("Запись_ИсточникЗаписейКалендаряСотрудника");
	// Конец СУЗ.КалендарьСотрудника
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	УстановитьПодписьПовторять();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаписьКалендаря" Тогда
		
		Если (ТипЗнч(Параметр) = Тип("СправочникСсылка.ЗаписиКалендаряСотрудника")
				И Параметр = Объект.Ссылка
				И Источник <> УникальныйИдентификатор)
			Или (ТипЗнч(Параметр) = Тип("Массив")
				И Параметр.Найти(Объект.Ссылка) <> Неопределено
				И Источник <> УникальныйИдентификатор) Тогда
			
			Прочитать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КалендарьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Идентификатор)
		И Не ЗначениеЗаполнено(ПометитьНаУдалениеПриЗаписи) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Календарь = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПодменитьОбъектНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыбранноеЗначение = НачалоДня(Объект.Начало) + (ВыбранноеЗначение - НачалоДня(ВыбранноеЗначение));
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыбранноеЗначение = НачалоДня(Объект.Окончание) + (ВыбранноеЗначение - НачалоДня(ВыбранноеЗначение));
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторятьПриИзменении(Элемент)
	
	Повторять = (Объект.ТипЗаписиКалендаря =
		ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие"));
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РаботаСКалендаремКлиент.ОткрытьФормуНастройкиПовторения(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторятьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	РаботаСКалендаремКлиент.ОткрытьФормуНастройкиПовторения(Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СоздатьЭлементыРасширенногоВвода()
	
	ЗначениеВРеквизитФормы(Справочники.ЗаписиКалендаряСотрудника.ОписаниеРасширенногоВводаЗаписей(), "ОписаниеРасширенногоВвода");
	
	Для Индекс = 0 По ОписаниеРасширенногоВвода.Количество()-1 Цикл
		
		СтрокаОписания = ОписаниеРасширенногоВвода[Индекс];
		
		ГруппаРодитель = ?(Индекс <= ОписаниеРасширенногоВвода.Количество() / 2, Элементы.Колонка_1, Элементы.Колонка_2);
		
		ИмяЭлемента = "ВводТипа_" + Индекс;
		ДекорацияНадпись = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), ГруппаРодитель);
		ДекорацияНадпись.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияНадпись.Заголовок = СтрокаОписания.Представление;
		ДекорацияНадпись.Гиперссылка = Истина;
		ДекорацияНадпись.УстановитьДействие("Нажатие", "Подключаемый_ВводТипаНажатие");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВводТипаНажатие(Элемент)
	
	ДанныеЗаписиКалендаря = Новый Структура;
	ДанныеЗаписиКалендаря.Вставить("Наименование",	Объект.Наименование);
	ДанныеЗаписиКалендаря.Вставить("Календарь",		Объект.Календарь);
	ДанныеЗаписиКалендаря.Вставить("Начало",		Объект.Начало);
	ДанныеЗаписиКалендаря.Вставить("Окончание",		Объект.Окончание);
	ДанныеЗаписиКалендаря.Вставить("Описание",		Объект.Описание);
	
	Индекс = Число(Сред(Элемент.Имя, СтрДлина("ВводТипа_")+1));
	СтрокаОписания = ОписаниеРасширенногоВвода[Индекс];
	
	Если Не СтрокаОписания.ПараметрыФормы.Свойство("ЗначенияЗаполнения") Тогда
		СтрокаОписания.ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура);
	КонецЕсли;
	
	СтрокаОписания.ПараметрыФормы.ЗначенияЗаполнения.Вставить("ДанныеЗаписиКалендаря", ДанныеЗаписиКалендаря);
	
	ОткрытьФорму(СтрокаОписания.ИмяФормы, СтрокаОписания.ПараметрыФормы);
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

// Процедура обеспечивает подмену объекта при изменении календаря.
// Такое поведение нужно для корректной выгрузки в Google записей,
// которые были перемещены между календарями.
&НаСервере
Процедура ПодменитьОбъектНаСервере(НовыйКалендарь)
	
	СохраняемыеСвойства = Новый Структура("Наименование,Начало,Окончание,Источник,НомерСтрокиИсточника,Описание");
	ЗаполнитьЗначенияСвойств(СохраняемыеСвойства, Объект);
	
	Модифицированность = Истина;
	
	Если ЗначениеЗаполнено(ПометитьНаУдалениеПриЗаписи)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПометитьНаУдалениеПриЗаписи, "Календарь") = НовыйКалендарь Тогда
		
		// Вернули календарь к первоначальному значению
		ПредыдущаяЗаписьКалендаря = ПометитьНаУдалениеПриЗаписи.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ПредыдущаяЗаписьКалендаря, "Объект");
		ЗаполнитьЗначенияСвойств(Объект, СохраняемыеСвойства);
		ПометитьНаУдалениеПриЗаписи = Справочники.ЗаписиКалендаряСотрудника.ПустаяСсылка();
		Возврат;
		
	КонецЕсли;
	
	НоваяЗаписьКалендаря = Справочники.ЗаписиКалендаряСотрудника.СоздатьЭлемент();
	ПометитьНаУдалениеПриЗаписи = Объект.Ссылка;
	ЗначениеВРеквизитФормы(НоваяЗаписьКалендаря, "Объект");
	ЗаполнитьЗначенияСвойств(Объект, СохраняемыеСвойства);
	Объект.Календарь = НовыйКалендарь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодписьПовторять()
	
	Повторять = (Объект.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие);
	Если Повторять Тогда
		НастройкиПовторения = ПолучитьНастройкиПовторения();
		ПовторениеСтрокой =
			РаботаСКалендаремКлиентСервер.ПолучитьТекстовоеПредставлениеПовторения(НастройкиПовторения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиПовторения()
	
	ПовторениеПоДнямНедели = ПолучитьПовторениеПоДнямНедели();
	ПовторениеПоДнямНеделиВМесяце = Неопределено;
	
	Если Объект.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно
		И НЕ ЗначениеЗаполнено(Объект.ПовторениеПоДнямМесяца) И Объект.ПовторениеПоДням.Количество() = 1 Тогда
		
		ПовторениеПоДнямНеделиВМесяце = Новый Структура("НомерВхождения, ДеньНедели");
		ЗаполнитьЗначенияСвойств(ПовторениеПоДнямНеделиВМесяце, Объект.ПовторениеПоДням[0]);
		
	КонецЕсли;
	
	НастройкиПовторения = РаботаСКалендаремКлиентСервер.ПолучитьСтруктуруНастройкиПовторения(
		Объект.ЧастотаПовторения, Объект.ИнтервалПовторения, Объект.ПравилоОкончанияПовторения,
		Объект.КоличествоПовторов, Объект.ДатаОкончанияПовторения, ПовторениеПоДнямНедели,
		Объект.ПовторениеПоДнямМесяца, ПовторениеПоДнямНеделиВМесяце, Объект.ПовторениеПоМесяцам);
	
	Возврат НастройкиПовторения;
	
КонецФункции

&НаСервере
Функция ПолучитьПовторениеПоДнямНедели()
	
	ПовторениеПоДням = Новый Соответствие;
	Для ИндексПовторениеПоДням = 1 По 7 Цикл
		
		Если Объект.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ДеньНедели", ИндексПовторениеПоДням);
			ПараметрыОтбора.Вставить("НомерВхождения", 0);
			НайденныеСтроки = Объект.ПовторениеПоДням.НайтиСтроки(ПараметрыОтбора); 
			
			ПовторениеПоДням.Вставить(ИндексПовторениеПоДням, НайденныеСтроки.Количество() <> 0);
			
		Иначе
			ПовторениеПоДням.Вставить(ИндексПовторениеПоДням, Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПовторениеПоДням;
	
КонецФункции

&НаКлиенте
Процедура ВставитьШаблонТекста(Команда)
	
	ПараметрыФормы = Новый Структура("ОбластьПрименения", 
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗаписьКалендаря"));
	ПараметрыФормы.Вставить("Заголовок", "Выбор шаблона текста для записи календаря");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВставкиШаблонаТекста", ЭтотОбъект);
	ОткрытьФорму("Справочник.ШаблоныТекстов.Форма.ФормаВыбора",ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстШаблона_ТипТекста(Шаблон, ТипТекста)
	
	ТипТекста = ОбщегоНазначенияСУЗВызовСервера.ЗначениеРеквизитаОбъекта(Шаблон, "ТипТекста");
	
	Возврат Справочники.ШаблоныТекстов.ПолучитьТекстШаблона(Шаблон, Объект);
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеВставкиШаблонаТекста(ШаблонСсылка, Параметры) Экспорт

	Если ШаблонСсылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипТекста = Неопределено;
	ШаблонТекста = ПолучитьТекстШаблона_ТипТекста(ШаблонСсылка, ТипТекста);
	
	Если ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		ШаблонТекста = РаботаС_HTML.ПолучитьТекстИзHTML(ШаблонТекста);
		
	КонецЕсли;	
		
	ТекущийЭлемент.ВыделенныйТекст = ШаблонТекста;
	//Установка курсора в конец текста
	КонецТекста = СтрДлина(ТекущийЭлемент.ТекстРедактирования);
	ТекущийЭлемент.ОбновитьТекстРедактирования();
	ТекущийЭлемент.УстановитьГраницыВыделения(КонецТекста+1,КонецТекста+1);
	
КонецПроцедуры

#КонецОбласти
