
#Область ПеременныеФормы

&НаКлиенте
Перем ТекущийЭлементЦвета;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Элементы.ФормаВсеКалендари.Видимость			= Пользователи.ЭтоПолноправныйПользователь();
	Элементы.ФормаСписокЗаписейКалендаря.Видимость	= Элементы.ФормаВсеКалендари.Видимость;
	
	ВосстановитьНастройки();
	ПрочитатьДоступныеКалендари();
	ПрочитатьВыполнениеИсполнителей();
	ОбновитьДанныеПланировщикаСервер();
	
	НастроитьВидимостьГруппыСинхронизировать();
	
	СписокВОчереди.Параметры.УстановитьЗначениеПараметра("Исполнитель",ПользователиКлиентСервер.АвторизованныйПользователь());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодсветитьЗаписиКалендаряВыделеннойЗадачи(Элементы.СписокВОчереди.ВыделенныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ЗаписиКалендаряСотрудника.Форма.НастройкиКалендаря" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НастройкиОтображения, ВыбранноеЗначение);
			СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборЦвета" Тогда
		
		Если ТекущийЭлементЦвета <> Неопределено Тогда
			
			ТекущийЭлементЦвета.Картинка = РаботаСЦветомКлиентСервер.КартинкаЦветаПоНомеруКартинки(ВыбранноеЗначение);
			Индекс = Число(Сред(ТекущийЭлементЦвета.Имя, СтрДлина("ЦветКалендарь_")+1));
			ТекКалендарь = ДоступныеКалендари[Индекс];
			ТекКалендарь.ВариантЦвета = ВыбранноеЗначение;
			
			Если ТекКалендарь.Выбран Тогда
				СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ИсточникЗаписейКалендаряСотрудника" Тогда
		
		ОбновитьДанныеПланировщикаСервер();
		
	ИначеЕсли ИмяСобытия = "Запись_КалендарьСотрудника" ИЛИ ИмяСобытия = "Запись_ЗаписьКалендаря" Тогда
		
		ОбработатьЗаписьКалендаряСервер();
		
	ИначеЕсли ИмяСобытия = "ОчиститьСеансовыеДанные" Тогда
		
		СеансовыеДанные = Новый Структура;
		
	//ИначеЕсли ИмяСобытия = "Изменилась настройка" И Параметр.Свойство("ПриЗапускеОткрыватьРаздел") Тогда
	//	
	//	Элементы.ФормаОткрыватьПриЗапускеПрограммы.Пометка = СтрНайти(Параметр.ПриЗапускеОткрыватьРаздел, "Календарь") <> 0;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВариантПериодаПриИзменении(Элемент)
	
	ВыделитьДатыОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериода(ЭтотОбъект);
	Элементы.ДатаОтображения.Обновить();
	
	СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтображенияПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеПланировщикаКлиент", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтображенияПриАктивизацииДаты(Элемент)
	
	ВыделитьДатыОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериода(ЭтотОбъект);
	Элементы.ДатаОтображения.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбранныеКалендари = ДоступныеКалендари.НайтиСтроки(Новый Структура("Выбран", Истина));
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Начало", НачалоЧаса(Начало));
	ЗначенияЗаполнения.Вставить("Окончание", КонецЧаса(Конец)+1);
	Если ВыбранныеКалендари.Количество() = 1 Тогда
		ЗначенияЗаполнения.Вставить("Календарь", ВыбранныеКалендари[0].Календарь);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.ЗаписиКалендаряСотрудника.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	ОбрабатываемыеЭлементы = Новый Массив;
	
	Для Каждого ВыделенныйЭлемент Из Элемент.ВыделенныеЭлементы Цикл
		
		Если ВыделенныйЭлемент.Значение.РедактированиеЗапрещено Тогда
			ОтменаРедактирования = Истина;
			Возврат;
		КонецЕсли;
		
		ОбрабатываемыйЭлемент = Новый Структура;
		ОбрабатываемыйЭлемент.Вставить("ЗаписьКалендаря",		ВыделенныйЭлемент.Значение.ЗаписьКалендаря);
		ОбрабатываемыйЭлемент.Вставить("Источник",				ВыделенныйЭлемент.Значение.Источник);
		ОбрабатываемыйЭлемент.Вставить("НомерСтрокиИсточника",	ВыделенныйЭлемент.Значение.НомерСтрокиИсточника);
		ОбрабатываемыйЭлемент.Вставить("Начало",				ВыделенныйЭлемент.Начало);
		ОбрабатываемыйЭлемент.Вставить("Конец",					ВыделенныйЭлемент.Конец);
		
		ОбрабатываемыеЭлементы.Добавить(ОбрабатываемыйЭлемент);
		
	КонецЦикла;
	
	ОтменаРедактирования = Не СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуТекущегоЭлементаПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	
	ОбрабатываемыеЭлементы = Новый Массив;
	
	Для Каждого ВыделенныйЭлемент Из Элемент.ВыделенныеЭлементы Цикл
		
		Если ВыделенныйЭлемент.Значение.РедактированиеЗапрещено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ОбрабатываемыйЭлемент = Новый Структура;
		ОбрабатываемыйЭлемент.Вставить("ЗаписьКалендаря",		ВыделенныйЭлемент.Значение.ЗаписьКалендаря);
		ОбрабатываемыйЭлемент.Вставить("Источник",				ВыделенныйЭлемент.Значение.Источник);
		ОбрабатываемыйЭлемент.Вставить("НомерСтрокиИсточника",	ВыделенныйЭлемент.Значение.НомерСтрокиИсточника);
		ОбрабатываемыйЭлемент.Вставить("ПометкаУдаления",		Истина);
		
		ОбрабатываемыеЭлементы.Добавить(ОбрабатываемыйЭлемент);
		
	КонецЦикла;
	
	Отказ = Не СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	
	Если ВариантПериода = "Месяц" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Если ТекущиеПериодыОтображения[0].Начало = НачалоДня(ТекущаяДатаСеанса) Тогда
			ДатаОтображения = ТекущаяДатаСеанса;
		ИначеЕсли ТекущиеПериодыОтображения[0].Начало < Планировщик.ТекущиеПериодыОтображения[0].Начало Тогда
			ДатаОтображения = ДобавитьМесяц(ДатаОтображения, -1);
		ИначеЕсли ТекущиеПериодыОтображения[0].Начало > Планировщик.ТекущиеПериодыОтображения[0].Начало Тогда
			ДатаОтображения = ДобавитьМесяц(ДатаОтображения, 1);
		КонецЕсли;
		
		ПериодДанных = ПолучитьПериодДанных(ВариантПериода, ДатаОтображения);
		Планировщик.ТекущиеПериодыОтображения.Очистить();
		Планировщик.ТекущиеПериодыОтображения.Добавить(ПериодДанных.ДатаНачала, ПериодДанных.ДатаОкончания);
		
		Планировщик.ИнтервалыФона.Очистить();
		Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоМесяца(ДатаОтображения), КонецМесяца(ДатаОтображения));
		Интервал.Цвет = Новый Цвет(250, 250, 250);
		Если НастройкиОтображения.ОтображатьТекущуюДату Тогда
			Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоДня(ТекущаяДатаСеанса), КонецДня(ТекущаяДатаСеанса));
			Интервал.Цвет = Новый Цвет(223, 255, 223);
		КонецЕсли;
		
	Иначе
		
		ДатаОтображения = ТекущиеПериодыОтображения[0].Начало;
		
	КонецЕсли;
	
	ВыделитьДатыОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериода(ЭтотОбъект);
	Элементы.ДатаОтображения.Обновить();
	ПодключитьОбработчикОжидания("ОбновитьДанныеПланировщикаКлиент", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуТекущегоЭлементаПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВОчередиПриАктивизацииСтроки(Элемент)
	//Подсветка всех записей календаря выделенных задач в планировщике
	ПодсветитьЗаписиКалендаряВыделеннойЗадачи(Элементы.СписокВОчереди.ВыделенныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ФактИсполнителейПриИзменении(Элемент)
	
	СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ФактИсполнителейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Элемент.ТекущийЭлемент.Имя = "ФактИсполнителейИсполнитель" Тогда
		ОткрытьФорму("ОбщаяФорма.ВыборЦвета", , Элемент,,,,Новый ОписаниеОповещения("ВыборЦветаИсполнителяЗавершение",ЭтотОбъект));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборЦветаИсполнителяЗавершение(ВыбранноеЗначение, ДопПараметры) Экспорт
	ТекДанные = Элементы.ФактИсполнителей.ТекущиеДанные;
	Если ВыбранноеЗначение = 0 ИЛИ ВыбранноеЗначение = КодВозвратаДиалога.Отмена ИЛИ ВыбранноеЗначение = Неопределено Тогда
		//Автоопределение цвета строки
		ЗанятыеЦвета = Новый Массив;
		Для Каждого Цвет Из ДоступныеКалендари Цикл
			ЗанятыеЦвета.Добавить(Цвет.ВариантЦвета);
		КонецЦикла;
		Для Каждого ЦветИсп Из ФактИсполнителей Цикл
			ЗанятыеЦвета.Добавить(ЦветИсп.ВариантЦвета);
		КонецЦикла;
		Цвет = 18;
		Пока ЗанятыеЦвета.Найти(Цвет) <> Неопределено И Цвет <= 24 Цикл
			Цвет = Цвет + 1;
		КонецЦикла;
		Если Цвет > 24 Тогда
			Цвет = 1;
		КонецЕсли;
		ТекДанные = Элементы.ФактИсполнителей.ТекущиеДанные;
		ТекДанные.ВариантЦвета = Цвет;
		ТекДанные.Картинка = РаботаСЦветомКлиентСервер.КартинкаЦветаПоНомеруКартинки(Цвет);
	Иначе
		ТекДанные.ВариантЦвета = ВыбранноеЗначение;
		ТекДанные.Картинка = РаботаСЦветомКлиентСервер.КартинкаЦветаПоНомеруКартинки(ВыбранноеЗначение);
	КонецЕсли;
	СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбранКалендарьПриИзменении(Элемент)
	
	СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЦветКалендарьНажатие(Элемент)
	
	ТекущийЭлементЦвета = Элемент;
	ОткрытьФорму("ОбщаяФорма.ВыборЦвета", , ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеПланировщикаСервер();
	Элементы.СписокВОчереди.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Настроить(Команда)
	
	ОткрытьФорму("Справочник.ЗаписиКалендаряСотрудника.Форма.НастройкиКалендаря", Новый Структура("НастройкиОтображения", НастройкиОтображения), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКалендарь(Команда)
	
	ОткрытьФорму("Справочник.КалендариСотрудников.ФормаОбъекта", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Синхронизировать(Команда)
	
	СинхронизироватьНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьФормуТекущегоЭлементаПланировщика()
	
	ВыделенныйЭлемент = Элементы.Планировщик.ВыделенныеЭлементы[0];
	ЗначениеЭлемента = ВыделенныйЭлемент.Значение;
	
	Если ЗначениеЗаполнено(ЗначениеЭлемента.Источник) Тогда
		
		ПоказатьЗначение(,ЗначениеЭлемента.Источник);
		
	Иначе
		
		Если ЗначениеЭлемента.ВидСобытия = ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие") Тогда
			РаботаСКалендаремКлиент.ОбработкаВыбораПовторяющегосяСобытия(ЗначениеЭлемента.ЗаписьКалендаря, ВыделенныйЭлемент.Начало);
		Иначе
			РаботаСКалендаремКлиент.ПоказатьЗаписьКалендаря(ЗначениеЭлемента.ЗаписьКалендаря);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	ВариантПериода = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
		"ВариантПериода",
		Элементы.ВариантПериода.СписокВыбора[0].Значение
	);
	
	НастройкиОтображения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
		"Отображение",
		Неопределено
	);
	
	Если НастройкиОтображения = Неопределено Тогда
		
		НастройкиОтображения = Новый Структура;
		НастройкиОтображения.Вставить("НачалоРабочегоДня",		0);
		НастройкиОтображения.Вставить("ОкончаниеРабочегоДня",	23);
		НастройкиОтображения.Вставить("ОтображатьТекущуюДату",	Истина);
		
	КонецЕсли;
	
	Планировщик.ШкалаВремени.Элементы[0].ФорматДня = ФорматДняШкалыВремени.ДеньМесяцаДеньНедели;
	
	ДатаОтображения = ТекущаяДатаСеанса();
	ВыделитьДатыОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериода(ЭтотОбъект);
	
	// Настройка автоматического открытия формы при начале работы порграммы
	Элементы.ФормаОткрыватьПриЗапускеПрограммы.Пометка = СтрНайти(СистемаУчетаЗадачСервер.ПриЗапускеОткрыватьРаздел(),"Календарь") <> 0;
	
	МассивСтатусовЗадач = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
		"СтатусыЗадач",
		Неопределено
	);
	Если МассивСтатусовЗадач = Неопределено ИЛИ МассивСтатусовЗадач.Количество() = 0 Тогда
		СписокВОчереди.Параметры.УстановитьЗначениеПараметра("Статус",Перечисления.СтатусыЗадач.ПустаяСсылка());
	Иначе
		СтатусыЗадач.ЗагрузитьЗначения(МассивСтатусовЗадач);
		СписокВОчереди.Параметры.УстановитьЗначениеПараметра("Статус",МассивСтатусовЗадач);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиИОбновитьДанныеПланировщикаСервер()
	
	СохранитьНастройки();
	ОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиКалендаряСотрудника",
		"ВариантПериода",
		ВариантПериода
	);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиКалендаряСотрудника",
		"Отображение",
		НастройкиОтображения
	);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиКалендаряСотрудника",
		"СтатусыЗадач",
		СтатусыЗадач.ВыгрузитьЗначения()
	);
	
	СохранитьНастройкиДоступныхКалендарей();
	СохранитьНастройкиФактаИсполнителей();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиДоступныхКалендарей()
	
	НастройкиДоступныхКалендарей = РеквизитФормыВЗначение("ДоступныеКалендари");
	НастройкиДоступныхКалендарей.Колонки.Удалить("Наименование");
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиКалендаряСотрудника",
		"ДоступныеКалендари",
		НастройкиДоступныхКалендарей
	);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФактаИсполнителей()
	
	НастройкиФактаИсполнителей = РеквизитФормыВЗначение("ФактИсполнителей");
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиКалендаряСотрудника",
		"ФактИсполнителей",
		НастройкиФактаИсполнителей
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПланировщикаСервер()
	
	Планировщик.Элементы.Очистить();
	Планировщик.ИнтервалыФона.Очистить();
	
	УстановитьОтображениеПланировщика();
	
	ПериодДанных = ПолучитьПериодДанных(ВариантПериода, ДатаОтображения);
	
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	Планировщик.ТекущиеПериодыОтображения.Добавить(ПериодДанных.ДатаНачала, ПериодДанных.ДатаОкончания);
	
	ВыбранныеКалендари = Новый Массив;
	Для Каждого СтрокаКалендаря Из ДоступныеКалендари Цикл
		Если СтрокаКалендаря.Выбран Тогда
			ВыбранныеКалендари.Добавить(СтрокаКалендаря.Календарь);
		КонецЕсли;
	КонецЦикла;
	ВыбранныеИсполнители = Новый Массив;
	Для Каждого СтрокаКалендаря Из ФактИсполнителей Цикл
		Если СтрокаКалендаря.Выбран Тогда
			ВыбранныеИсполнители.Добавить(СтрокаКалендаря.Исполнитель);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаписиКалендаря.Источник КАК Источник
		|ПОМЕСТИТЬ втИсточники
		|ИЗ
		|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаря
		|ГДЕ
		|	ЗаписиКалендаря.ПометкаУдаления = ЛОЖЬ
		|	И ЗаписиКалендаря.Начало < &ДатаОкончания
		|	И ЗаписиКалендаря.Окончание > &ДатаНачала
		|	И ЗаписиКалендаря.Календарь В(&ВыбранныеКалендари)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задачи.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втРазрешенныеИсточники
		|ИЗ
		|	Документ.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.Ссылка В
		|			(ВЫБРАТЬ
		|				втИсточники.Источник
		|			ИЗ
		|				втИсточники)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Документ.Задачи.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаписиКалендаряСотрудника.Ссылка КАК ЗаписьКалендаря,
		|	ЗаписиКалендаряСотрудника.Наименование КАК Наименование,
		|	ЗаписиКалендаряСотрудника.Начало КАК Начало,
		|	ЗаписиКалендаряСотрудника.Окончание КАК Конец,
		|	ЗаписиКалендаряСотрудника.Описание КАК Описание,
		|	ЗаписиКалендаряСотрудника.Источник КАК Источник,
		|	ЗаписиКалендаряСотрудника.НомерСтрокиИсточника КАК НомерСтрокиИсточника,
		|	ЗаписиКалендаряСотрудника.Календарь КАК Календарь,
		|	ЗаписиКалендаряСотрудника.РедактированиеЗапрещено КАК РедактированиеЗапрещено,
		|	1 КАК ВидЗаписи,
		|	NULL КАК ДатаНачалаПовторения,
		|	NULL КАК ДатаОкончанияПовторения,
		|	NULL КАК ИнтервалПовторения,
		|	NULL КАК КоличествоПовторов,
		|	NULL КАК ПовторениеПоДнямМесяца,
		|	NULL КАК ПовторениеПоМесяцам,
		|	NULL КАК ПравилоОкончанияПовторения,
		|	NULL КАК ТипЗаписиКалендаря,
		|	NULL КАК ЧастотаПовторения
		|ИЗ
		|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
		|ГДЕ
		|	ЗаписиКалендаряСотрудника.Источник В
		|			(ВЫБРАТЬ
		|				втРазрешенныеИсточники.Ссылка
		|			ИЗ
		|				втРазрешенныеИсточники)
		|	И ЗаписиКалендаряСотрудника.ПометкаУдаления = ЛОЖЬ
		|	И ЗаписиКалендаряСотрудника.Начало < &ДатаОкончания
		|	И ЗаписиКалендаряСотрудника.Окончание > &ДатаНачала
		|	И ЗаписиКалендаряСотрудника.Календарь В(&ВыбранныеКалендари)
		|	И ЗаписиКалендаряСотрудника.ТипЗаписиКалендаря <> ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ЗаписиКалендаряСотрудника.ПустаяСсылка),
		|	ЗадачиРаботы.Ссылка.Наименование,
		|	ЗадачиРаботы.ДатаНачала,
		|	ВЫБОР
		|		КОГДА ЗадачиРаботы.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ТекущаяДата
		|		ИНАЧЕ ЗадачиРаботы.ДатаОкончания
		|	КОНЕЦ,
		|	ЗадачиРаботы.ВыполненныеДействия,
		|	ЗадачиРаботы.Ссылка,
		|	ЗадачиРаботы.НомерСтроки,
		|	ЗадачиРаботы.Ссылка.КалендарьСотрудника,
		|	ИСТИНА,
		|	2,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	Документ.Задачи.Работы КАК ЗадачиРаботы
		|ГДЕ
		|	НЕ ЗадачиРаботы.Ссылка.ПометкаУдаления
		|	И ЗадачиРаботы.ДатаНачала < &ДатаОкончания
		|	И ВЫБОР
		|			КОГДА ЗадачиРаботы.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА &ТекущаяДата
		|			ИНАЧЕ ЗадачиРаботы.ДатаОкончания
		|		КОНЕЦ > &ДатаНачала
		|	И ЗадачиРаботы.Ссылка.Исполнитель В(&ВыбранныеИсполнители)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаписиКалендаряСотрудника.Ссылка,
		|	ЗаписиКалендаряСотрудника.Наименование,
		|	ЗаписиКалендаряСотрудника.Начало,
		|	ЗаписиКалендаряСотрудника.Окончание,
		|	ЗаписиКалендаряСотрудника.Описание,
		|	ЗаписиКалендаряСотрудника.Источник,
		|	ЗаписиКалендаряСотрудника.НомерСтрокиИсточника,
		|	ЗаписиКалендаряСотрудника.Календарь,
		|	ЗаписиКалендаряСотрудника.РедактированиеЗапрещено,
		|	3,
		|	ЗаписиКалендаряСотрудника.ДатаНачалаПовторения,
		|	ЗаписиКалендаряСотрудника.ДатаОкончанияПовторения,
		|	ЗаписиКалендаряСотрудника.ИнтервалПовторения,
		|	ЗаписиКалендаряСотрудника.КоличествоПовторов,
		|	ЗаписиКалендаряСотрудника.ПовторениеПоДнямМесяца,
		|	ЗаписиКалендаряСотрудника.ПовторениеПоМесяцам,
		|	ЗаписиКалендаряСотрудника.ПравилоОкончанияПовторения,
		|	ЗаписиКалендаряСотрудника.ТипЗаписиКалендаря,
		|	ЗаписиКалендаряСотрудника.ЧастотаПовторения
		|ИЗ
		|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
		|ГДЕ
		|	ЗаписиКалендаряСотрудника.Источник В
		|			(ВЫБРАТЬ
		|				втРазрешенныеИсточники.Ссылка
		|			ИЗ
		|				втРазрешенныеИсточники)
		|	И ЗаписиКалендаряСотрудника.ПометкаУдаления = ЛОЖЬ
		|	И ЗаписиКалендаряСотрудника.ДатаНачалаПовторения < &ДатаОкончания
		|	И (ЗаписиКалендаряСотрудника.ДатаОкончанияПовторения >= &ДатаНачала
		|			ИЛИ ЗаписиКалендаряСотрудника.ДатаОкончанияПовторения = ДАТАВРЕМЯ(1, 1, 1))
		|	И ЗаписиКалендаряСотрудника.Календарь В(&ВыбранныеКалендари)
		|	И ЗаписиКалендаряСотрудника.ТипЗаписиКалендаря = ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начало";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ДатаНачала", ПериодДанных.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодДанных.ДатаОкончания);
	Запрос.УстановитьПараметр("ВыбранныеКалендари", ВыбранныеКалендари);
	Запрос.УстановитьПараметр("ВыбранныеИсполнители", ВыбранныеИсполнители);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Отбор1 = Новый Структура("Календарь");
	Отбор2 = Новый Структура("Исполнитель");
	ЗапланированоЧасов = 0;
	ЗатраченоЧасов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		//Обработка повторяющихся событий
		Если Выборка.ВидЗаписи = 3 И ЗначениеЗаполнено(ПериодДанных.ДатаОкончания) Тогда
			
			ПроверяемаяДата = НачалоДня(ПериодДанных.ДатаНачала);
			Пока ПроверяемаяДата < ПериодДанных.ДатаОкончания Цикл
				
				СтруктураПравилаПовторения = РаботаСКалендаремСервер.ПолучитьСтруктуруПравилаПовторения();
				ЗаполнитьЗначенияСвойств(СтруктураПравилаПовторения, Выборка);
				СтруктураПравилаПовторения.ИсключенияПовторения = Выборка.ЗаписьКалендаря.ИсключенияПовторения.Выгрузить();
				СтруктураПравилаПовторения.ПовторениеПоДням = Выборка.ЗаписьКалендаря.ПовторениеПоДням.Выгрузить();
				
				Если РаботаСКалендаремСервер.ДатаУдовлетворяетПравилуПовторения(ПроверяемаяДата, СтруктураПравилаПовторения) Тогда
					
					ДатаНачалаЭлементаПовторения = НачалоДня(ПроверяемаяДата)
						+ (Выборка.Начало - НачалоДня(Выборка.Конец));
					ДатаОкончанияЭлементаПовторения = НачалоДня(ПроверяемаяДата)
						+ (Выборка.Конец - НачалоДня(Выборка.Начало));
					
					Если ПериодДанных.ДатаНачала < ДатаОкончанияЭлементаПовторения И ПериодДанных.ДатаОкончания > ДатаНачалаЭлементаПовторения Тогда
						ДобавитьЭлементПланировщика(Выборка,ДатаНачалаЭлементаПовторения, ДатаОкончанияЭлементаПовторения);
						
						Часов = Окр((Мин(ДатаОкончанияЭлементаПовторения,ПериодДанных.ДатаОкончания) - Макс(ДатаНачалаЭлементаПовторения,ПериодДанных.ДатаНачала)) / 3600,2);
						ЗапланированоЧасов = ЗапланированоЧасов + Часов;
					КонецЕсли;
					
				КонецЕсли;
				
				ПроверяемаяДата = ПроверяемаяДата + 86400; // 86400 - число секунд в сутках
				
			КонецЦикла;
		Иначе
			ДобавитьЭлементПланировщика(Выборка, Выборка.Начало, Выборка.Конец);
			
			Часов = Окр((Мин(Выборка.Конец,ПериодДанных.ДатаОкончания) - Макс(Выборка.Начало,ПериодДанных.ДатаНачала)) / 3600,2);
			Если Выборка.ВидЗаписи = 1 Тогда
				ЗапланированоЧасов = ЗапланированоЧасов + Часов;
			Иначе
				ЗатраченоЧасов = ЗатраченоЧасов + Часов;
			КонецЕсли;
		
		КонецЕсли;
	КонецЦикла;
	
	ПредставлениеВремени = ?(ЗапланированоЧасов = 0, "","План "+Окр(ЗапланированоЧасов,1)+" ч.")
			+ ?(ЗатраченоЧасов = 0, "", ?(ЗапланированоЧасов = 0, "Ф", ", ф")+"акт "+Окр(ЗатраченоЧасов,1)+" ч.");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементПланировщика(ДанныеСобытия, ДатаНачала, ДатаОкончания)
	
	ЭлементПланировщика = Планировщик.Элементы.Добавить(ДатаНачала, ДатаОкончания);
	ЭлементПланировщика.Значение = Новый Структура;
	ЭлементПланировщика.Значение.Вставить("Календарь", ДанныеСобытия.Календарь);
	ЭлементПланировщика.Значение.Вставить("ЗаписьКалендаря", ДанныеСобытия.ЗаписьКалендаря);
	ЭлементПланировщика.Значение.Вставить("Источник", ДанныеСобытия.Источник);
	ЭлементПланировщика.Значение.Вставить("РедактированиеЗапрещено", ДанныеСобытия.РедактированиеЗапрещено);
	ЭлементПланировщика.Значение.Вставить("НомерСтрокиИсточника", ДанныеСобытия.НомерСтрокиИсточника);
	ЭлементПланировщика.Значение.Вставить("ВидСобытия", ДанныеСобытия.ЗаписьКалендаря.ТипЗаписиКалендаря);
	ЭлементПланировщика.Текст		= ДанныеСобытия.Наименование;
	ЭлементПланировщика.Подсказка	= ДанныеСобытия.Наименование + 
			?(ПустаяСтрока(ДанныеСобытия.Описание),"","
			|"+ДанныеСобытия.Описание);
	
	Если ЗначениеЗаполнено(ДанныеСобытия.Источник) Тогда
		МенеджерИсточника = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДанныеСобытия.Источник);
		ЭлементПланировщика.Картинка = МенеджерИсточника.КартинкаЗаписиКалендаря(ДанныеСобытия.Источник);
		ЭлементПланировщика.ЦветТекста = МенеджерИсточника.ЦветТекстаЗаписиКалендаря(ДанныеСобытия.Источник);
		Подсказка = МенеджерИсточника.ДополнитьПодсказкуЗаписиКалендаря(ДанныеСобытия.Источник);
		ЭлементПланировщика.Подсказка = ЭлементПланировщика.Подсказка + 
				?(ПустаяСтрока(Подсказка),"","
				|"+Подсказка);
	КонецЕсли;
	
	//Определение цвета фона события
	Если ДанныеСобытия.ВидЗаписи = 2 Тогда
		НайденныеСтроки = ФактИсполнителей.НайтиСтроки(Новый Структура("Исполнитель",ДанныеСобытия.Источник.Исполнитель));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЭлементПланировщика.ЦветФона = РаботаСЦветомКлиентСервер.ЦветПоНомеруКартинки(НайденныеСтроки[0].ВариантЦвета);
		КонецЕсли;
	Иначе
		НайденныеСтроки = ДоступныеКалендари.НайтиСтроки(Новый Структура("Календарь",ДанныеСобытия.Календарь));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЭлементПланировщика.ЦветФона = РаботаСЦветомКлиентСервер.ЦветПоНомеруКартинки(НайденныеСтроки[0].ВариантЦвета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеПланировщика()
	
	КоличествоЭлементов = Планировщик.ШкалаВремени.Элементы.Количество();
	Если КоличествоЭлементов >= 2 Тогда
		Для Индекс = 1 По КоличествоЭлементов - 1 Цикл
			ЭтотЭлемент = Планировщик.ШкалаВремени.Элементы[КоличествоЭлементов - Индекс];
			Планировщик.ШкалаВремени.Элементы.Удалить(ЭтотЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если ВариантПериода = "День" Тогда
		
		Планировщик.ОтображатьТекущуюДату = НастройкиОтображения.ОтображатьТекущуюДату;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 24;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = НастройкиОтображения.НачалоРабочегоДня;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = ?(НастройкиОтображения.ОкончаниеРабочегоДня = 0, 0, 24 - НастройкиОтображения.ОкончаниеРабочегоДня);
		Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='dddd, d MMMM yyyy'";
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ=ЧЧ:мм";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час;
		
		//Создание возможности указывать события поминутно
		ШкалаВремениМинута = Планировщик.ШкалаВремени.Элементы.Добавить();
		ЗаполнитьЗначенияСвойств(ШкалаВремениМинута,Планировщик.ШкалаВремени.Элементы[0]);
		ШкалаВремениМинута.ОтображатьПериодическиеМетки = Ложь;
		ШкалаВремениМинута.Единица = ТипЕдиницыШкалыВремени.Минута;
		ШкалаВремениМинута.Кратность = 10;
		ШкалаВремениМинута.Формат = "";
		
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		
		Планировщик.ОтображатьТекущуюДату = НастройкиОтображения.ОтображатьТекущуюДату;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 24;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = НастройкиОтображения.НачалоРабочегоДня;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = ?(НастройкиОтображения.ОкончаниеРабочегоДня = 0, 0, 24 - НастройкиОтображения.ОкончаниеРабочегоДня);
		Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d MMMM'";
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ=ЧЧ:мм";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час;
		
		//Создание возможности указывать события поминутно
		ШкалаВремениМинута = Планировщик.ШкалаВремени.Элементы.Добавить();
		ЗаполнитьЗначенияСвойств(ШкалаВремениМинута,Планировщик.ШкалаВремени.Элементы[0]);
		ШкалаВремениМинута.ОтображатьПериодическиеМетки = Ложь;
		ШкалаВремениМинута.Единица = ТипЕдиницыШкалыВремени.Минута;
		ШкалаВремениМинута.Кратность = 10;
		ШкалаВремениМинута.Формат = "";
		
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		
		Планировщик.ОтображатьТекущуюДату = Ложь;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Планировщик.КратностьПериодическогоВарианта = 7;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Истина;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d MMM yyyy'";
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ='ddd, d MMM yyyy'";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.День;
		
		Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоМесяца(ДатаОтображения), КонецМесяца(ДатаОтображения));
		Интервал.Цвет = Новый Цвет(250, 250, 250);
		Если НастройкиОтображения.ОтображатьТекущуюДату Тогда
			ТекущаяДатаСеанса = ТекущаяДатаСеанса();
			Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоДня(ТекущаяДатаСеанса), КонецДня(ТекущаяДатаСеанса));
			Интервал.Цвет = Новый Цвет(223, 255, 223);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПериодДанных(ВариантПериода, ДатаОтображения)
	
	Результат = Новый Структура("ДатаНачала, ДатаОкончания");
	
	Если ВариантПериода = "День" Тогда
		Результат.ДатаНачала	= НачалоДня(ДатаОтображения);
		Результат.ДатаОкончания	= КонецДня(ДатаОтображения);
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		Результат.ДатаНачала	= НачалоНедели(ДатаОтображения);
		Результат.ДатаОкончания	= КонецНедели(ДатаОтображения);
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		Результат.ДатаНачала	= НачалоНедели(НачалоМесяца(ДатаОтображения));
		Результат.ДатаОкончания	= КонецНедели(КонецМесяца(ДатаОтображения));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы)
	
	Возврат Справочники.ЗаписиКалендаряСотрудника.СохранитьИзмененияЗаписейКалендарей(ОбрабатываемыеЭлементы);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ВыделитьДатыОтображения(Форма)
	
	ПолеКалендаря = Форма.Элементы.ДатаОтображения;
	
	ПолеКалендаря.ВыделенныеДаты.Очистить();
	
	Если Форма.ВариантПериода = "Месяц" Тогда
		// Для варианта "Месяц" выделенные даты календаря отличаются от фактического периода.
		// Фактический период должен быть кратен 7 дням (недели).
		// Но в поле календаря выделяются даты только в пределах месяца.
		ПериодДанных = Новый Структура("ДатаНачала, ДатаОкончания");
		ПериодДанных.ДатаНачала		= НачалоМесяца(Форма.ДатаОтображения);
		ПериодДанных.ДатаОкончания	= КонецМесяца(Форма.ДатаОтображения);
	Иначе
		ПериодДанных = ПолучитьПериодДанных(Форма.ВариантПериода, Форма.ДатаОтображения);
	КонецЕсли;
	
	ТекДата = ПериодДанных.ДатаНачала;
	
	Пока ТекДата < ПериодДанных.ДатаОкончания Цикл
		ПолеКалендаря.ВыделенныеДаты.Добавить(ТекДата);
		ТекДата = ТекДата + 86400;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПланировщикаКлиент()
	
	ОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДоступныхКалендарей()
	
	УдаляемыеЭлементы = Новый Массив;
	
	Для Каждого ГруппаЭлементов Из Элементы.ДоступныеКалендари.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(ГруппаЭлементов);
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Для Каждого СтрокаКалендаря Из ДоступныеКалендари Цикл
		
		Индекс = ДоступныеКалендари.Индекс(СтрокаКалендаря);
		
		ГруппаКалендаря = Элементы.Добавить("ГруппаКалендарь_" + Индекс, Тип("ГруппаФормы"), Элементы.ДоступныеКалендари);
		ГруппаКалендаря.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаКалендаря.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаКалендаря.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаКалендаря.ОтображатьЗаголовок = Ложь;
		
		ФлагВыбран = Элементы.Добавить("ВыбранКалендарь_" + Индекс, Тип("ПолеФормы"), ГруппаКалендаря);
		ФлагВыбран.Вид = ВидПоляФормы.ПолеФлажка;
		ФлагВыбран.ПутьКДанным = "ДоступныеКалендари[" + Индекс + "].Выбран";
		ФлагВыбран.Заголовок = СтрокаКалендаря.Наименование;
		ФлагВыбран.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		ФлагВыбран.УстановитьДействие("ПриИзменении", "Подключаемый_ВыбранКалендарьПриИзменении");
		
		ДекорацияОтступ = Элементы.Добавить("ОтступКалендарь_" + Индекс, Тип("ДекорацияФормы"), ГруппаКалендаря);
		ДекорацияОтступ.РастягиватьПоГоризонтали = Истина;
		
		КартинкаЦвета = Элементы.Добавить("ЦветКалендарь_" + Индекс, Тип("ДекорацияФормы"), ГруппаКалендаря);
		КартинкаЦвета.Вид = ВидДекорацииФормы.Картинка;
		КартинкаЦвета.Картинка = РаботаСЦветомКлиентСервер.КартинкаЦветаПоНомеруКартинки(СтрокаКалендаря.ВариантЦвета);
		КартинкаЦвета.Гиперссылка = Истина;
		КартинкаЦвета.Ширина = 2;
		КартинкаЦвета.Высота = 1;
		КартинкаЦвета.УстановитьДействие("Нажатие", "Подключаемый_ЦветКалендарьНажатие");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьКалендаряСервер()
	
	ПрочитатьДоступныеКалендари();
	ПрочитатьВыполнениеИсполнителей();
	ОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДоступныеКалендари()
	
	ДоступныеКалендари.Очистить();
	
	НастройкиДоступныхКалендарей = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
		"ДоступныеКалендари",
		Новый ТаблицаЗначений
	);
	
	ЗанятыеЦвета = ?(НастройкиДоступныхКалендарей.Количество() = 0, Новый Массив, НастройкиДоступныхКалендарей.ВыгрузитьКолонку("ВариантЦвета"));
	ЕстьНеНазначенныеЦвета = Ложь;
	
	ТаблицаКалендарей = Справочники.КалендариСотрудников.ДоступныеСотрудникуКалендари();
	
	Для Каждого СтрокаТаблицы Из ТаблицаКалендарей Цикл
		
		НоваяСтрока = ДоступныеКалендари.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, "Календарь,Наименование");
		
		НайденнаяСтрока = НастройкиДоступныхКалендарей.Найти(СтрокаТаблицы.Календарь);
		Если НайденнаяСтрока <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока, "ВариантЦвета,Выбран");
		КонецЕсли;
		
		Если НоваяСтрока.ВариантЦвета = 0 Тогда
			ПроверяемыйЦвет = 14;
			Пока Истина Цикл
				Если ЗанятыеЦвета.Найти(ПроверяемыйЦвет) = Неопределено Тогда
					НоваяСтрока.ВариантЦвета = ПроверяемыйЦвет;
					ЕстьНеНазначенныеЦвета = Истина;
					Прервать;
				КонецЕсли;
				ПроверяемыйЦвет = ?(ПроверяемыйЦвет = 24, 1, ПроверяемыйЦвет+1);
			КонецЦикла;
		КонецЕсли;
		
		ЗанятыеЦвета.Добавить(НоваяСтрока.ВариантЦвета);
		Если ЗанятыеЦвета.Количество() = 24 Тогда
			ЗанятыеЦвета.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	Отбор = Новый Структура("Выбран", Истина);
	Если ДоступныеКалендари.НайтиСтроки(Отбор).Количество() = 0 Тогда
		
		Отбор.Удалить("Выбран");
		Отбор.Вставить("Календарь");
		Для Каждого СтрокаКалендаря Из ДоступныеКалендари Цикл
			Отбор.Календарь = СтрокаКалендаря.Календарь;
			СтрокаКалендаря.Выбран = ТаблицаКалендарей.НайтиСтроки(Отбор)[0].ЯвляетсяВладельцем;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьНеНазначенныеЦвета Тогда
		СохранитьНастройкиДоступныхКалендарей();
	КонецЕсли;
	
	ОбновитьЭлементыДоступныхКалендарей();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВыполнениеИсполнителей()
	
	ФактИсполнителей.Очистить();
	
	НастройкиФактИсполнителей = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
		"ФактИсполнителей",
		Новый ТаблицаЗначений
	);
	
	ЗанятыеЦвета = ?(НастройкиФактИсполнителей.Количество() = 0, Новый Массив, НастройкиФактИсполнителей.ВыгрузитьКолонку("ВариантЦвета"));
	ЕстьНеНазначенныеЦвета = Ложь;
	
	ТаблицаКалендарей = Справочники.КалендариСотрудников.ДоступныеСотрудникуКалендари();
	
	Для Каждого СтрокаТаблицы Из НастройкиФактИсполнителей Цикл
		
		НоваяСтрока = ФактИсполнителей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		Если НоваяСтрока.ВариантЦвета = 0 Тогда
			ПроверяемыйЦвет = 14;
			Пока Истина Цикл
				Если ЗанятыеЦвета.Найти(ПроверяемыйЦвет) = Неопределено Тогда
					НоваяСтрока.ВариантЦвета = ПроверяемыйЦвет;
					ЕстьНеНазначенныеЦвета = Истина;
					Прервать;
				КонецЕсли;
				ПроверяемыйЦвет = ?(ПроверяемыйЦвет = 24, 1, ПроверяемыйЦвет+1);
			КонецЦикла;
		КонецЕсли;
		
		ЗанятыеЦвета.Добавить(НоваяСтрока.ВариантЦвета);
		Если ЗанятыеЦвета.Количество() = 24 Тогда
			ЗанятыеЦвета.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьНеНазначенныеЦвета Тогда
		СохранитьНастройкиФактаИсполнителей();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеПериода(Форма)
	
	Если Форма.ВариантПериода = "День" Тогда
		
		Форма.ПредставлениеПериода = Формат(Форма.ДатаОтображения, "ДФ='дддд, д МММ'");
		
	ИначеЕсли Форма.ВариантПериода = "Неделя" Тогда
		
		ПериодДанных = ПолучитьПериодДанных(Форма.ВариантПериода, Форма.ДатаОтображения);
		Форма.ПредставлениеПериода = СтрШаблон(
			"%1 - %2",
			Формат(ПериодДанных.ДатаНачала, "ДФ='д МММ'"),
			Формат(ПериодДанных.ДатаОкончания, "ДФ='д МММ гггг'")
		);
		
	ИначеЕсли Форма.ВариантПериода = "Месяц" Тогда
		
		Форма.ПредставлениеПериода = ПредставлениеПериода(НачалоМесяца(Форма.ДатаОтображения), КонецМесяца(Форма.ДатаОтображения));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсветитьЗаписиКалендаряВыделеннойЗадачи(МассивЗадач)

	АвтоЦвет = Новый Цвет;
	Для Каждого ЭлементПланировщика Из Планировщик.Элементы Цикл
		Если МассивЗадач.Найти(ЭлементПланировщика.Значение.Источник) = Неопределено Тогда
			ЭлементПланировщика.ЦветРамки = АвтоЦвет;
		Иначе
			ЭлементПланировщика.ЦветРамки = WebЦвета.Красный;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПодсветитьЗаписиКалендаряВыделенныхЗадач()

#КонецОбласти

#Область ОбменСGoogle

&НаСервере
Процедура НастроитьВидимостьГруппыСинхронизировать()
	
	ОтключенныеОбластиДоступа = РегистрыСведений.СеансовыеДанныеGoogle.ОтключенныеОбластиДоступа(Пользователи.ТекущийПользователь());
	
	Элементы.ГруппаСинхронизировать.Видимость = ОтключенныеОбластиДоступа.Найти(Перечисления.ОбластиДоступаGoogle.Календарь) = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьНаКлиенте()
	
	Элементы.ГруппаСинхронизировать.ТекущаяСтраница = Элементы.ГруппаПрогрессСинхронизации;
	ПодключитьОбработчикОжидания("ПродолжитьСинхронизироватьНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСинхронизироватьНаКлиенте()
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПараметрыОбработчикаОжидания.МаксимальныйИнтервал = 5;
	
	СинхронизироватьНаСервере();
	Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
		НачатьАвторизацию();
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьАвторизацию()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатЗапросаТокена", ЭтотОбъект);
	ОткрытьФорму(
	"РегистрСведений.СеансовыеДанныеGoogle.Форма.ЗапросТокена",
	Новый Структура("ОписанияОбластейДоступа", ОбменСGoogleКлиентСервер.ОписанияОбластейДоступаКалендарь()),
	ЭтаФорма,,,,
	ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗапросаТокена(Результат, Параметры) Экспорт
	
	СеансовыеДанные = Результат;
	
	Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
		Элементы.ГруппаСинхронизировать.ТекущаяСтраница = Элементы.ГруппаКомандаСинхронизировать;
		Возврат;
	КонецЕсли;
	
	СинхронизироватьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные)
		ИЛИ ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
		Элементы.ГруппаСинхронизировать.ТекущаяСтраница = Элементы.ГруппаКомандаСинхронизировать;
		ОповеститьОбИзменении(Тип("СправочникСсылка.ЗаписиКалендаряСотрудника"));
		ОповеститьОбИзменении(Тип("СправочникСсылка.КалендариСотрудников"));
		ОбработатьЗаписьКалендаряСервер();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗадания",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал,
		Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьНаСервере()
	
	ОбменСGoogle.ИнициализироватьУзелПланаОбменаДляКалендаряGoogle();
	ОбменСGoogle.ИнициализироватьСеансовыеДанные(
	СеансовыеДанные,
	Пользователи.ТекущийПользователь(),
	Перечисления.ОбластиДоступаGoogle.Календарь);
	
	Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = СистемаУчетаЗадачСервер.ЗапуститьВыполнениеВФоне(
	УникальныйИдентификатор,
	"ОбменСGoogle.СинхронизироватьGoogleCalendar",
	СеансовыеДанные,,,
	Ложь);
	
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#КонецОбласти

#Область Задачи

&НаКлиенте
Процедура ПланировщикПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, Значения)
	Для Каждого СтрокаМассива Из ПараметрыПеретаскивания.Значение Цикл
		СоздатьПланЗадачи(СтрокаМассива, Дата);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, Значения)
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокВОчередиПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	СписокПриПолученииДанныхНаСервере(Строки);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(Строки)
	Для Каждого СтрокаВыд Из Строки Цикл
		ТегиСтрока = "";
		Для Каждого ТегСтрока Из СтрокаВыд.Ключ.Теги Цикл
			ТегиСтрока = ТегиСтрока + ТегСтрока.Тег.Наименование+",";
		КонецЦикла;
		СтрокаВыд.Значение.Данные.Теги = ?(ПустаяСтрока(ТегиСтрока),"",Лев(ТегиСтрока,СтрДлина(ТегиСтрока)-1));
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СоздатьПланЗадачи(Задача, Дата)
	
	ДатаНачала = НачалоЧаса(Дата);
	ДатаОкончания = КонецЧаса(Дата);
	Календарь = Задача.КалендарьСотрудника;
	
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	НовыйПлан = ЗадачаОбъект.План.Добавить();
	НовыйПлан.ДатаНачала = ДатаНачала;
	НовыйПлан.ДатаОкончания = ДатаОкончания;
	НовыйПлан.Продолжительность = 1;
	НомерСтрокиИсточника = НовыйПлан.НомерСтроки;
	ЗадачаОбъект.Записать();
	ЗаписьКалендаря = Справочники.ЗаписиКалендаряСотрудника.ПолучитьЗаписьКалендаряПоИсточнику(Задача,НомерСтрокиИсточника,Календарь);
	
	//Отображение на планировщике
	ЭлементПланировщика = Планировщик.Элементы.Добавить(ДатаНачала, ДатаОкончания);
	ЭлементПланировщика.Значение = Новый Структура;
	ЭлементПланировщика.Значение.Вставить("Календарь", Календарь);
	ЭлементПланировщика.Значение.Вставить("ЗаписьКалендаря", ЗаписьКалендаря);
	ЭлементПланировщика.Значение.Вставить("Источник", Задача);
	ЭлементПланировщика.Значение.Вставить("РедактированиеЗапрещено", ЗаписьКалендаря.РедактированиеЗапрещено);
	ЭлементПланировщика.Значение.Вставить("НомерСтрокиИсточника", НомерСтрокиИсточника);
	ЭлементПланировщика.Текст		= Задача.Наименование;
	ЭлементПланировщика.Подсказка	= ЗаписьКалендаря.Описание;
	
	Если ЗначениеЗаполнено(Задача) Тогда
		МенеджерИсточника = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Задача);
		ЭлементПланировщика.Картинка = МенеджерИсточника.КартинкаЗаписиКалендаря(Задача);
		ЭлементПланировщика.ЦветТекста = МенеджерИсточника.ЦветТекстаЗаписиКалендаря(Задача);
	КонецЕсли;
	
	НайденныеСтроки = ДоступныеКалендари.НайтиСтроки(Новый Структура("Календарь",Календарь));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЭлементПланировщика.ЦветФона = РаботаСЦветомКлиентСервер.ЦветПоНомеруКартинки(НайденныеСтроки[0].ВариантЦвета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусыЗадачПриИзменении(Элемент)
	СтатусыЗадачПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура СтатусыЗадачПриИзмененииСервер()
	МассивСтатусовЗадач = СтатусыЗадач.ВыгрузитьЗначения();
	Если МассивСтатусовЗадач.Количество() > 0 Тогда
		СписокВОчереди.Параметры.УстановитьЗначениеПараметра("Статус",МассивСтатусовЗадач);
	Иначе
		СписокВОчереди.Параметры.УстановитьЗначениеПараметра("Статус",Перечисления.СтатусыЗадач.ПустаяСсылка());
	КонецЕсли;
	СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
КонецПроцедуры

#КонецОбласти

// Настройка автоматического открытия формы при начале работы порграммы

&НаСервереБезКонтекста
Процедура ИзменитьНастройкуОткрытияПриЗапускеПрограммы(НоваяНастройка)

	СистемаУчетаЗадачСервер.ЗаписатьПриЗапускеОткрыватьРаздел(НоваяНастройка);

КонецПроцедуры
 
&НаКлиенте
Процедура ОткрыватьПриЗапускеПрограммы(Команда)
	
	ЗначениеНастройки = ?(Элементы.ФормаОткрыватьПриЗапускеПрограммы.Пометка, "Календарь-", "Календарь");
	ИзменитьНастройкуОткрытияПриЗапускеПрограммы(ЗначениеНастройки);
	Элементы.ФормаОткрыватьПриЗапускеПрограммы.Пометка = НЕ Элементы.ФормаОткрыватьПриЗапускеПрограммы.Пометка;
	//Оповестить("Изменилась настройка", Новый Структура("ПриЗапускеОткрыватьРаздел", ЗначениеНастройки))
	
КонецПроцедуры













