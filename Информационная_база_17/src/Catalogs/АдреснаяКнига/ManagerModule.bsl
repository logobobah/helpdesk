
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ОбновитьДанныеОбъекта(Объект, Родитель, Раздел, ОбъектДоступа = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначения.СсылкаСуществует(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	// Определение родителя в адресной книге
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдреснаяКнига.Ссылка
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.Объект = &Родитель
		|	И АдреснаяКнига.Ссылка В ИЕРАРХИИ(&Раздел)";
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("Раздел", Раздел);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РодительВАдреснойКниге = Выборка.Ссылка;
	Иначе
		РодительВАдреснойКниге = Раздел;
	КонецЕсли;
	
	СсылкаНаОбъектВАдреснойКниге = ПолучитьСсылкуНаОбъектВАдреснойКниге(Объект, Родитель, Раздел);
	
	Если СсылкаНаОбъектВАдреснойКниге = РодительВАдреснойКниге Тогда
		РодительВАдреснойКниге = Неопределено;
	КонецЕсли;
	
	Если СсылкаНаОбъектВАдреснойКниге <> Неопределено Тогда
		
		ЗаблокироватьДанныеДляРедактирования(СсылкаНаОбъектВАдреснойКниге);
		ОбъектВАдреснойКниге = СсылкаНаОбъектВАдреснойКниге.ПолучитьОбъект();
		ОбъектВАдреснойКниге.Родитель = РодительВАдреснойКниге;
		ОбъектВАдреснойКниге.Объект = Объект;
		ОбъектВАдреснойКниге.ОбъектДоступа = ОбъектДоступа;
		УстановитьПорядокОбъектаВСписке(ОбъектВАдреснойКниге, Объект, Родитель);
		УстановитьПризнакОтображенияОбъектаВАдреснойКниге(ОбъектВАдреснойКниге, Объект);
		УстановитьПредставлениеОбъектаВАдреснойКниге(ОбъектВАдреснойКниге, Объект);
		ОбъектВАдреснойКниге.Записать();
		РазблокироватьДанныеДляРедактирования(СсылкаНаОбъектВАдреснойКниге);
		
	Иначе
		
		ОбъектВАдреснойКниге = СоздатьЭлемент();
		ОбъектВАдреснойКниге.Родитель = РодительВАдреснойКниге;
		ОбъектВАдреснойКниге.Объект = Объект;
		ОбъектВАдреснойКниге.ОбъектДоступа = ОбъектДоступа;
		УстановитьПорядокОбъектаВСписке(ОбъектВАдреснойКниге, Объект, Родитель);
		УстановитьПризнакОтображенияОбъектаВАдреснойКниге(ОбъектВАдреснойКниге, Объект);
		УстановитьПредставлениеОбъектаВАдреснойКниге(ОбъектВАдреснойКниге, Объект);
		ОбъектВАдреснойКниге.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСписокПодчиненныхОбъектов(
	Объект, Родитель, Знач СписокПодчиненных, Раздел, ОбъектДоступа = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначения.СсылкаСуществует(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	ОбъектАдреснойКниге = 
		ПолучитьСсылкуНаОбъектВАдреснойКниге(Объект, Родитель, Раздел);
		
	// Получение текущего списка подчиненных в адресной книге
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АдреснаяКнига.Ссылка,
		|	АдреснаяКнига.Объект,
		|	АдреснаяКнига.ОбъектДоступа
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.РодительОбъекта = &РодительОбъекта";
	Запрос.УстановитьПараметр("РодительОбъекта", Объект);
	
	СписокПодчиненныхВАдреснойКниге = Запрос.Выполнить().Выгрузить();
	
	// Получение строк адресной книги к удалению
	СтрокиКУдалению = Новый Массив;
	СтрокиКОбновлениюОбъектаДоступа = Новый Массив;
	Для Каждого СтрАдреснойКниги ИЗ СписокПодчиненныхВАдреснойКниге Цикл
		Если СписокПодчиненных.Найти(СтрАдреснойКниги.Объект) = Неопределено Тогда
			СтрокиКУдалению.Добавить(СтрАдреснойКниги.Ссылка);
		ИначеЕсли СтрАдреснойКниги.ОбъектДоступа <> ОбъектДоступа Тогда
			СтрокиКОбновлениюОбъектаДоступа.Добавить(СтрАдреснойКниги.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	// Получение списка пользователей к добавлению
	НовыеПодчиненныеОбъекты = Новый Массив;
	Для Каждого Подчиненный ИЗ СписокПодчиненных Цикл
		
		Если Подчиненный = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СписокПодчиненныхВАдреснойКниге.Найти(Подчиненный, "Объект") = Неопределено Тогда
			НовыеПодчиненныеОбъекты.Добавить(Подчиненный);
		КонецЕсли;
	КонецЦикла;
	
	// Удаление старых пользователей
	Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
		УдаляемаяСтрока.ПолучитьОбъект().Удалить();
	КонецЦикла;
	
	// Добавление новых пользователей
	Для Каждого Подчиненный Из НовыеПодчиненныеОбъекты Цикл
		НовыйПодчиненный = СоздатьЭлемент();
		НовыйПодчиненный.Родитель = ОбъектАдреснойКниге;
		НовыйПодчиненный.Объект = Подчиненный;
		НовыйПодчиненный.РодительОбъекта = Объект;
		НовыйПодчиненный.ОбъектДоступа = ОбъектДоступа;
		УстановитьПорядокОбъектаВСписке(НовыйПодчиненный, Подчиненный, Объект);
		УстановитьПризнакОтображенияОбъектаВАдреснойКниге(НовыйПодчиненный, Подчиненный);
		УстановитьПредставлениеОбъектаВАдреснойКниге(НовыйПодчиненный, Подчиненный);
		НовыйПодчиненный.Записать();
	КонецЦикла;
	
	// Обновление объекта доступа для старых подчиненных
	Для Каждого СтрДляОбновленияОбъектаДоступа Из СтрокиКОбновлениюОбъектаДоступа Цикл
		ПодчиненныйОбъект = СтрДляОбновленияОбъектаДоступа.ПолучитьОбъект();
		ПодчиненныйОбъект.ОбъектДоступа = ОбъектДоступа;
		ПодчиненныйОбъект.Записать();
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ОбновитьДанныеОтображенияПодчиненногоОбъекта(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначения.СсылкаСуществует(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	Разделы = Новый Массив;
	Разделы.Добавить(Избранное);
	
	ТипОбъекта = ТипЗнч(Объект);
	//Если ТипОбъекта = Тип("СправочникСсылка.Пользователи")
	//	Или ТипОбъекта = Тип("СправочникСсылка.Исполнители") Тогда
	//	
	//	Разделы.Добавить(Сотрудники);
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АдреснаяКнига.Ссылка,
		|	АдреснаяКнига.Родитель,
		|	АдреснаяКнига.Родитель.Объект КАК РодительОбъект,
		|	АдреснаяКнига.Родитель.ТипДанныхОбъекта КАК ТипДанныхОбъекта
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.Объект = &Объект
		|	И АдреснаяКнига.Ссылка В ИЕРАРХИИ(&Разделы)";
		
	Запрос.УстановитьПараметр("Разделы", Разделы);
	Запрос.УстановитьПараметр("Объект", Объект);
	
	ТаблицаРодителей = Новый ТаблицаЗначений;
	ТаблицаРодителей.Колонки.Добавить("Объект");
	ТаблицаРодителей.Колонки.Добавить("ЭлементАдреснойКниги");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		ЭлементАдреснойКниги = Выборка.Ссылка.ПолучитьОбъект();
		УстановитьПризнакОтображенияОбъектаВАдреснойКниге(ЭлементАдреснойКниги, Объект);
		УстановитьПредставлениеОбъектаВАдреснойКниге(ЭлементАдреснойКниги, Объект);
		ЭлементАдреснойКниги.Записать();
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		
		Если Выборка.ТипДанныхОбъекта = Перечисления.ТипыДанныхАдреснойКниги.ГруппаКонтактовПользователей Тогда
			НоваяСтрРодитель = ТаблицаРодителей.Добавить();
			НоваяСтрРодитель.Объект = Выборка.РодительОбъект;
			НоваяСтрРодитель.ЭлементАдреснойКниги = Выборка.Родитель;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРодителей.Свернуть("Объект, ЭлементАдреснойКниги");
	
	Для Каждого СтрРодитель Из ТаблицаРодителей Цикл
		ЗаблокироватьДанныеДляРедактирования(СтрРодитель.ЭлементАдреснойКниги);
		ЭлементАдреснойКниги = СтрРодитель.ЭлементАдреснойКниги.ПолучитьОбъект();
		УстановитьПредставлениеОбъектаВАдреснойКниге(ЭлементАдреснойКниги, СтрРодитель.Объект);
		ЭлементАдреснойКниги.Записать();
		РазблокироватьДанныеДляРедактирования(СтрРодитель.ЭлементАдреснойКниги);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСпискиАвтоподстановок() Экспорт
	
	//УстановитьПривилегированныйРежим(Истина);
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	АдреснаяКнига.Ссылка
	//	|ИЗ
	//	|	Справочник.АдреснаяКнига КАК АдреснаяКнига
	//	|ГДЕ
	//	|	(АдреснаяКнига.Родитель В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.АдреснаяКнига.АвтоподстановкиДляДокументов))
	//	|			ИЛИ АдреснаяКнига.Родитель В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.АдреснаяКнига.АвтоподстановкиДляПроцессов)))
	//	|	И АдреснаяКнига.Предопределенный = ЛОЖЬ";
	//	
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
	//	
	//	ЭлементАдреснойКнигиОбъект = Выборка.Ссылка.ПолучитьОбъект();
	//	ЭлементАдреснойКнигиОбъект.Удалить();
	//	
	//КонецЦикла;
	//
	//// Добавление автоподстановок документов
	//АвтоподстановкиДокументов = ШаблоныДокументов.ПолучитьСписокДоступныхФункций();
	//
	//Для Каждого Автоподстановка Из АвтоподстановкиДокументов Цикл
	//	
	//	ЭлементАдреснойКнигиОбъект = СоздатьЭлемент();
	//	ЭлементАдреснойКнигиОбъект.Родитель = Справочники.АдреснаяКнига.АвтоподстановкиДляДокументов;
	//	ЭлементАдреснойКнигиОбъект.Объект = Автоподстановка.Представление;
	//	ЭлементАдреснойКнигиОбъект.ОтображатьВАдреснойКниге = Истина;
	//	ЭлементАдреснойКнигиОбъект.ПредставлениеОбъекта = ЭлементАдреснойКнигиОбъект.Объект;
	//	ЭлементАдреснойКнигиОбъект.ПорядокОбъектаВСписке = 3;
	//	ЭлементАдреснойКнигиОбъект.Записать();
	//	
	//КонецЦикла;
	//
	//// Добавление автоподстановок процессов
	//МассивПредметов = Новый Массив;
	//МассивПредметов.Добавить("Предмет");
	//АвтоподстановкиПроцессов = ШаблоныБизнесПроцессов.ПолучитьСписокДоступныхФункций(МассивПредметов);
	//
	//Для Каждого Автоподстановка Из АвтоподстановкиПроцессов Цикл
	//	
	//	ЭлементАдреснойКнигиОбъект = СоздатьЭлемент();
	//	ЭлементАдреснойКнигиОбъект.Родитель = Справочники.АдреснаяКнига.АвтоподстановкиДляПроцессов;
	//	ЭлементАдреснойКнигиОбъект.Объект = СтрЗаменить(Автоподстановка.Представление, "Предмет.", "");
	//	ЭлементАдреснойКнигиОбъект.ОтображатьВАдреснойКниге = Истина;
	//	ЭлементАдреснойКнигиОбъект.ПредставлениеОбъекта = ЭлементАдреснойКнигиОбъект.Объект;
	//	ЭлементАдреснойКнигиОбъект.ПорядокОбъектаВСписке = 3;
	//	ЭлементАдреснойКнигиОбъект.Записать();
	//	
	//КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьОбъект(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначения.СсылкаСуществует(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	ОбъектВАдреснойКниге = 
		ПолучитьСсылкуНаОбъектВАдреснойКниге(Объект);
	
	ЗаблокироватьДанныеДляРедактирования(ОбъектВАдреснойКниге);
	ОбъектВАдреснойКниге = ОбъектВАдреснойКниге.ПолучитьОбъект();
	ОбъектВАдреснойКниге.Удалить();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПредопределенныеРазделы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	// Начальное заполнение разделов		
	РазделАдреснойКниги = Справочники.АдреснаяКнига.Избранное.ПолучитьОбъект();
	РазделАдреснойКниги.Объект = НСтр("ru = 'Избранное'");
	РазделАдреснойКниги.ОтображатьВАдреснойКниге = Истина;
	РазделАдреснойКниги.ПредставлениеОбъекта = РазделАдреснойКниги.Объект;
	РазделАдреснойКниги.ПорядокОбъектаВСписке = -13;
	РазделАдреснойКниги.Записать();
	
	РазделАдреснойКниги = Справочники.АдреснаяКнига.Исполнители.ПолучитьОбъект();
	РазделАдреснойКниги.Объект = НСтр("ru = 'Исполнители'");
	РазделАдреснойКниги.ОтображатьВАдреснойКниге = Истина;
	РазделАдреснойКниги.ПредставлениеОбъекта = РазделАдреснойКниги.Объект;
	РазделАдреснойКниги.ПорядокОбъектаВСписке = -11;
	РазделАдреснойКниги.Записать();
	
	РазделАдреснойКниги = Справочники.АдреснаяКнига.Заказчики.ПолучитьОбъект();
	РазделАдреснойКниги.Объект = НСтр("ru = 'Заказчики'");
	РазделАдреснойКниги.ОтображатьВАдреснойКниге = Истина;
	РазделАдреснойКниги.ПредставлениеОбъекта = РазделАдреснойКниги.Объект;
	РазделАдреснойКниги.ПорядокОбъектаВСписке = -3;
	РазделАдреснойКниги.Записать();
	
	РазделАдреснойКниги = Справочники.АдреснаяКнига.ЛичныеАдресаты.ПолучитьОбъект();
	РазделАдреснойКниги.Объект = НСтр("ru = 'Личные адресаты'");
	РазделАдреснойКниги.ОтображатьВАдреснойКниге = Истина;
	РазделАдреснойКниги.ПредставлениеОбъекта = РазделАдреснойКниги.Объект;
	РазделАдреснойКниги.ПорядокОбъектаВСписке = -2;
	РазделАдреснойКниги.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаполнитьАдреснуюКнигу() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьПредопределенныеРазделы();
	
	ОбновитьСпискиАвтоподстановок();
	
	// Исполнители
	Выборка = Справочники.ГруппыПользователей.ВыбратьИерархически();
	Пока Выборка.Следующий() Цикл
		ОбновитьДанныеОбъекта(
			Выборка.Ссылка,
			Выборка.Родитель,
			Справочники.АдреснаяКнига.Исполнители);
			
		Если Выборка.Ссылка = Справочники.ГруппыПользователей.ВсеПользователи Тогда
			Состав = Пользователи.ПолучитьВсехПользователей();
		Иначе
			Состав = Выборка.Состав.ВыгрузитьКолонку("Пользователь");
		КонецЕсли;
		
		ОбновитьСписокПодчиненныхОбъектов(
			Выборка.Ссылка,
			Выборка.Родитель,
			Состав,
			Справочники.АдреснаяКнига.Исполнители);
	КонецЦикла;
	Выборка = Неопределено;
	
	// Заказчики
	Выборка = Справочники.Заказчики.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновитьДанныеОбъекта(
			Выборка.Ссылка,
			Выборка.Родитель,
			Справочники.АдреснаяКнига.Заказчики,
			Выборка.Ссылка);
	КонецЦикла;
	Выборка = Неопределено;
	
	Выборка = Справочники.КонтактныеЛицаЗаказчиков.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновитьДанныеОбъекта(
			Выборка.Ссылка,
			Выборка.Владелец,
			Справочники.АдреснаяКнига.Заказчики,
			Выборка.Ссылка);
	КонецЦикла;
	Выборка = Неопределено;
	
	// Личные адресаты
	Выборка = Справочники.ГруппыЛичныхАдресатов.ВыбратьИерархически();
	Пока Выборка.Следующий() Цикл
		ОбновитьДанныеОбъекта(
			Выборка.Ссылка,
			Выборка.Родитель,
			Справочники.АдреснаяКнига.ЛичныеАдресаты,
			Выборка.Пользователь);
	КонецЦикла;
	Выборка = Неопределено;
	
	Выборка = Справочники.ЛичныеАдресаты.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновитьДанныеОбъекта(
			Выборка.Ссылка,
			Выборка.Группа,
			Справочники.АдреснаяКнига.ЛичныеАдресаты,
			Выборка.Пользователь);
	КонецЦикла;
	Выборка = Неопределено;
	
КонецПроцедуры

Процедура ОчиститьАдреснуюКнигу() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Справочники.АдреснаяКнига.ВыбратьИерархически(Справочники.АдреснаяКнига.ПустаяСсылка(),);
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектАдреснойКниги = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектАдреснойКниги.Удалить();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПорядокОбъектаВСписке(ЭлементАдреснойКниги, Объект, РодительОбъекта)
	
	Если ЭлементАдреснойКниги.Предопределенный Тогда
		Возврат;
	КонецЕсли;
	
	ПорядокОбъектаВСписке = 99;
	
	ТипОбъекта = ТипЗнч(Объект);
	
	//Если ТипОбъекта = Тип("СправочникСсылка.СтруктураПредприятия")
	//	ИЛИ ТипОбъекта = Тип("СправочникСсылка.РабочиеГруппы")
	//	ИЛИ ТипОбъекта = Тип("СправочникСсылка.ПапкиМероприятий")
	//	ИЛИ ТипОбъекта = Тип("СправочникСсылка.ПапкиПроектов")
	//	ИЛИ ТипОбъекта = Тип("СправочникСсылка.ГруппыКонтактовПользователей")
	Если ТипОбъекта = Тип("СправочникСсылка.ГруппыЛичныхАдресатов") Тогда
		
		ПорядокОбъектаВСписке = 1;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Проекты") Тогда
		ПорядокОбъектаВСписке = 3;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Пользователи") Тогда
		ПорядокОбъектаВСписке = 5;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Заказчики") Тогда
		//Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ЭтоГруппа") Тогда
		//	ПорядокОбъектаВСписке = 1;
		//Иначе
			ПорядокОбъектаВСписке = 2;
		//КонецЕсли;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ЛичныеАдресаты")
		ИЛИ ТипОбъекта = Тип("СправочникСсылка.КонтактныеЛицаЗаказчиков") Тогда
		ПорядокОбъектаВСписке = 6;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РодительОбъекта) Тогда
		ТипРодителя = ТипЗнч(РодительОбъекта);
		//Если ТипРодителя = Тип("СправочникСсылка.ГруппыКонтактовПользователей") Тогда
		//	Если ТипОбъекта = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		//		ПорядокОбъектаВСписке = 3;
		//	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.РабочиеГруппы") Тогда
		//		ПорядокОбъектаВСписке = 7;
		//	ИначеЕсли ТипОбъекта = Тип("Строка") Тогда
		//		СписокФункций = РаботаСАдреснойКнигой.ПолучитьСписокДоступныхФункций();
		//		ЭтоАвтоподстановка = Ложь;
		//		Для Инд = 0 По СписокФункций.Количество() - 1 Цикл
		//			Если СписокФункций[Инд].Представление = Объект Тогда 
		//				ЭтоАвтоподстановка = Истина;
		//				Прервать;
		//			КонецЕсли;
		//		КонецЦикла;
		//		Если ЭтоАвтоподстановка Тогда
		//			ПорядокОбъектаВСписке = 7;
		//		Иначе
		//			ПорядокОбъектаВСписке = 3;
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
	ЭлементАдреснойКниги.ПорядокОбъектаВСписке = ПорядокОбъектаВСписке;
	
КонецПроцедуры

Процедура УстановитьПризнакОтображенияОбъектаВАдреснойКниге(ЭлементАдреснойКниги, Объект)
	
	ТипОбъекта = ТипЗнч(Объект);
	
	Если ЭлементАдреснойКниги.Предопределенный
		ИЛИ ТипОбъекта = Тип("Строка") Тогда
		
		ЭлементАдреснойКниги.ОтображатьВАдреснойКниге = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТипОбъекта = Тип("СправочникСсылка.Пользователи") Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект, "ПометкаУдаления, Недействителен, Служебный, Ссылка");
			
		Если РеквизитыОбъекта.Ссылка <> Неопределено Тогда
			ОтображатьОбъектВАдреснойКниге = НЕ РеквизитыОбъекта.ПометкаУдаления
				И НЕ РеквизитыОбъекта.Недействителен
				И НЕ РеквизитыОбъекта.Служебный;
		КонецЕсли;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ЛичныеАдресаты") Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект, "ПометкаУдаления, Ссылка");
			
		Если РеквизитыОбъекта.Ссылка <> Неопределено Тогда
			ОтображатьОбъектВАдреснойКниге = НЕ РеквизитыОбъекта.ПометкаУдаления;
		КонецЕсли;
	Иначе
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект, "ПометкаУдаления, Ссылка");
			
		Если РеквизитыОбъекта.Ссылка <> Неопределено Тогда
			ОтображатьОбъектВАдреснойКниге = НЕ РеквизитыОбъекта.ПометкаУдаления;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтображатьОбъектВАдреснойКниге = Неопределено Тогда
		ОтображатьОбъектВАдреснойКниге = Истина;
	КонецЕсли;
	
	ЭлементАдреснойКниги.ОтображатьВАдреснойКниге = ОтображатьОбъектВАдреснойКниге;
	
КонецПроцедуры

Процедура УстановитьПредставлениеОбъектаВАдреснойКниге(ЭлементАдреснойКниги, Объект)
	
	ДополнительныеОписание = "";
	
	ТипДанныхРодителя = Неопределено;
	Если ЗначениеЗаполнено(ЭлементАдреснойКниги.Родитель) Тогда
		ТипДанныхРодителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ЭлементАдреснойКниги.Родитель, "ТипДанныхОбъекта");
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Пользователи") Тогда
		ЭлементАдреснойКниги.ПредставлениеОбъекта = 
			ОбщегоНазначенияСУЗ.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Объект, "Наименование");
	Иначе
		ЭлементАдреснойКниги.ПредставлениеОбъекта = Строка(Объект) + ДополнительныеОписание;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСсылкуНаОбъектВАдреснойКниге(
	Объект, Родитель = Неопределено, СсылкаНаРаздел = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(СсылкаНаРаздел) Тогда
		УсловиеПоРазделу = "	И АдреснаяКнига.Ссылка В ИЕРАРХИИ(&СсылкаНаРаздел)";
		Запрос.УстановитьПараметр("СсылкаНаРаздел", СсылкаНаРаздел);
	Иначе
		УсловиеПоРазделу = "";
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АдреснаяКнига.Ссылка
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.Объект = &Объект
		|" + УсловиеПоРазделу;
	Запрос.УстановитьПараметр("Объект", Объект);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

#КонецОбласти

#КонецЕсли
