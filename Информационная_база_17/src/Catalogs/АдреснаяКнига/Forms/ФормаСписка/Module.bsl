
&НаКлиенте
Перем ИсточникПеретаскивания;

#Область ОписаниеПараметровФормы

//   ЗаголовокФормы - значение устанавливается в заголовок формы
//   ЗаголовокСпискаАдреснойКниги - значение устанавливается в заголовок над строкой поиска и деревом адресатов.
//   ЗаголовокСпискаВыбранных - значение устанавливается в заголовок над талицей ВыбранныеАдресаты
//   РежимРаботыФормы - Число - может принимать значения 0,1,2.
//     0 - в форме отсутствует возможность выбора адресатов.
//     1 - можно выбрать одного адресата (выбор)
//     2 - множественный выбор адресатов (подбор)
//   УпрощенныйИнтерфейс - Булево - Истина, если результатом выбора и параметром ВыбранныеАдресаты является
//     ссылка (РежимРаботыФормы = 1) или массив ссылок (РежимРаботыФормы = 2), а не массив структур.
//   ОтображатьСотрудников - Булево - при указании значения Истина, отображается раздел Сотрудники
//                                    с подчиненными разделами и пользователями.
//   ОтображатьАвтоподстановкиПоДокументам - Булево - при указании значения Истина, отображается раздел
//                                                    АвтоподстановкиДляДокументов
//   ОтображатьАвтоподстановкиПоПроцессам - Булево - при указании значения Истина, отображается раздел
//                                                    АвтоподстановкиДляПроцессов
//   ОтображатьКонтрагентов - Булево - при указании значения Истина отображается раздел Контрагенты.
//   ОтображатьОрганизации - Булево - при указании значения Истина отображается раздел Организации.
//   ОтображатьЛичныхАдресатов - Булево - при указании значения Истина отображается раздел ЛичныеАдресаты.
//   ИменаПредметов - СписокЗначений - список имен предметов, для которых выбирается автоподстановка.
//   ВыбранныеАдресаты - Массив структур - для УпрощенныйИнтерфейс = Ложь, или
//                     - Ссылка - для УпрощенныйИнтерфейс = Истина и РежимРаботыФормы = 1, или
//                     - Массив ссылок - для УпрощенныйИнтерфейс = Истина и РежимРаботыФормы = 2.
//                     Ранее выбранный адресат или адресаты.
//   СписокОтбора - СписокЗначений - содержит возможные значения отображения и поиска в адресной книге.
//   КонтролироватьДублиАдресатов - Булево - признак необходимости контроля дублей в списке выбранных адресатов.
//   ГруппаПоУмолчанию - ПеречислениеСсылка.ТипыАдресатов - Указывает какой тип адреса следует установить по умолчанию
//                                                          выбранным адресатам.
//   ПоказыватьТипАдресов - Булево - при указании значения Истина отображается переключатель выбора типа
//                                   адресов для выбранных контактов.
//   УчетнаяЗаписьПочты - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись, которая используется
//                                                                         для определения списков электронных
//                                                                         адресов.
//   ВыбиратьЭлектронныеАдреса - Булево - при указании значения Истина выбираются адресаты с электронными адресами.
//                                        При выборе осуществляется проверка наличия электронного адреса.
//   ВыбиратьЗаказчиков - при указании значения Истина, будет возможность поместить контрагента
//                                 в список выбранных, иначе будут помещаться только подчиненные контактные лица 
//   ВыбиратьКонтейнерыПользователей - Истина, если при выборе контейнера пользователей выбирается сам контейнер,
//     а не пользователи, входящие в его состав.
//   ВыбиратьГруппыПользователей - при указании значения Истина, будет возможность поместить рабочую группу
//                                 в список выбранных, иначе будет помещаться содержимое группы.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.РежимРаботыФормы = Неопределено Тогда
		Параметры.РежимРаботыФормы = 0;
		Параметры.ОтображатьКонтрагентов = Истина;
		Параметры.ОтображатьСотрудников = Истина;
		Параметры.ОтображатьЛичныхАдресатов = Истина;
	КонецЕсли;
	
	Если Параметры.ВыбиратьЭлектронныеАдреса Тогда
		
		ТекстИсключения = НСтр("ru = 'В адресной книге не могут быть установлены одновременно
			|параметры ВыбиратьЭлектронныеАдреса и %1'");
			
		Если Параметры.ОтображатьАвтоподстановкиПоДокументам Тогда
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстИсключения, "ОтображатьАвтоподстановкиПоДокументам");
			ВызватьИсключение ТекстИсключения;
		ИначеЕсли Параметры.ОтображатьАвтоподстановкиПоПроцессам Тогда
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстИсключения, "ОтображатьАвтоподстановкиПоПроцессам");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
	КонецЕсли;
	
	ГруппаПоУмолчанию = Параметры.ГруппаПоУмолчанию;
	
	ВыбиратьКонтейнерыПользователей = Параметры.ВыбиратьГруппыПользователей;
		
	СохраненныеНастройки = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы + "/ТекущиеДанные");
	Если ТипЗнч(СохраненныеНастройки) = Тип("Соответствие") Тогда
		ПоказыватьНедействительных = СохраненныеНастройки.Получить("ПоказыватьНедействительных");
	КонецЕсли;
	
	Элементы.СписокКонтекстноеМенюПоказыватьНедействительных.Пометка = ПоказыватьНедействительных;
	Элементы.РезультатПоискаКонтекстноеМенюПоказыватьНедействительных.Пометка = ПоказыватьНедействительных;
	
	УстановитьПараметрыСписка();
	УстановитьПараметрыСпискаРезультатПоиска();
	УстановитьВидимостьЭлементовПоРежимуРаботыФормы();
	
	//Если ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда
	//	Элементы.СписокКонтекстноеМенюДобавитьВИзбранное.Видимость = Ложь;
	//	Элементы.РезультатПоискаКонтекстноеМенюДобавитьВИзбранноеПолучателя.Видимость = Ложь;
	//	Элементы.ВыбранныеАдресатыКонтекстноеМенюДобавитьВИзбранное.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюСоздатьЭлемент.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюУдалить.Видимость = Ложь;
	//КонецЕсли;
	
	ДоступноДобавлениеГруппКонтактов = Ложь;//ПравоДоступа("Добавление", Метаданные.Справочники.ГруппыКонтактовПользователей);
	ДоступноДобавлениеЛичныхАдресатов = Ложь;//ПравоДоступа("Добавление", Метаданные.Справочники.ЛичныеАдресаты);
	ДоступноДобавлениеРабочихГрупп = Ложь;//ПравоДоступа("Добавление", Метаданные.Справочники.РабочиеГруппы);
	
	Элементы.СписокКонтекстноеМенюДобавитьГруппу.Видимость = ДоступноДобавлениеГруппКонтактов
		Или ДоступноДобавлениеЛичныхАдресатов
		Или ДоступноДобавлениеРабочихГрупп;
	
	Элементы.СписокКонтекстноеМенюОбновитьАвтоподстановки.Видимость = 
		ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ()
		И (Параметры.ОтображатьАвтоподстановкиПоДокументам
			Или Параметры.ОтображатьАвтоподстановкиПоПроцессам);
			
	Элементы.СписокКонтекстноеМенюОбновитьДанныеАдреснойКниги.Видимость = 
		ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ();
		
	ЗаполнитьВыбранныеАдресатыСогласноПараметрам();
	
	// Установка заголовков формы
	Если ЗначениеЗаполнено(Параметры.ЗаголовокФормы) Тогда
		Заголовок = Параметры.ЗаголовокФормы;
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.ЗаголовокСпискаВыбранных) Тогда
		Элементы.ДекорацияВыбранныеАдресаты.Заголовок = Параметры.ЗаголовокСпискаВыбранных;
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.ЗаголовокСпискаАдреснойКниги) Тогда
		Элементы.ДекорацияВсеАдресаты.Заголовок = Параметры.ЗаголовокСпискаАдреснойКниги;
	КонецЕсли;
	
	// Отображение фото контактов
	ОтображатьФотографииПерсональнаяНастройка =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы",
		"ОтображатьФотографииПерсональнаяНастройка",
		Истина);
		
	//ОтображатьФотографииОбщаяНастройка = ПолучитьФункциональнуюОпцию(
	//	"ОтображатьФотографииОбщаяНастройка");
	ОтображатьФотографииОбщаяНастройка = Ложь;
	
	ПриложениеЯвляетсяВебКлиентом =
		ОбщегоНазначенияСУЗ.ПриложениеЯвляетсяВебКлиентом();
		
	ПоказыватьФотографии = Истина;
		
	Если Не ОтображатьФотографииОбщаяНастройка 
		Или Не ОтображатьФотографииПерсональнаяНастройка
		Или ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая 
		Или ПриложениеЯвляетсяВебКлиентом Тогда
		
		ПоказыватьФотографии = Ложь;
	КонецЕсли;
	
	КлючСохраненияПоложенияОкна = Строка(Параметры.РежимРаботыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьНачальноеОтображениеРазделов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура HTMLОписаниеКонтактаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Лев(ДанныеСобытия.Href, 6) = "v8doc:" Тогда 
		
		НавигационнаяСсылкаПоля = Сред(ДанныеСобытия.Href, 7);
		
		ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаПоля);
	ИначеЕсли Найти(ДанныеСобытия.Href, "ДобавитьФото")
		И ЗначениеЗаполнено(ТекущийКонтакт)
		И ТипЗнч(ТекущийКонтакт) <> Тип("Строка") Тогда
			
			//ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(
			//	ТекущийКонтакт,
			//	ПользователиКлиентСервер.ТекущийПользователь());
			//
			//Если Не ПраваПоОбъекту.Изменение Тогда
			//	ПоказатьПредупреждение(, НСтр("ru = 'Нет прав на изменение контакта.'"));
			//	Возврат;
			//КонецЕсли;
			
			ПараметрыОписания = Новый Структура(
				"АдресВременногоХранилищаФайла", 
				"");
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"HTMLОписаниеКонтактаПриНажатии_Продолжение",
				ЭтотОбъект,
				ПараметрыОписания);
			
			ФайловыеФункцииКлиент.ВыбратьКартинкуИПоместитьВХранилище(
			ОписаниеОповещения, УникальныйИдентификатор);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура HTMLОписаниеКонтактаПриНажатии_Продолжение(Результат, Параметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеКонтакта = ОбщегоНазначенияСУЗВызовСервера.ЗначениеРеквизитаОбъекта(
		ТекущийКонтакт,
		"Наименование");
			
	//РаботаСФотографиями.ЗаписатьИзображение(
	//	Параметры.АдресВременногоХранилищаФайла,
	//	УникальныйИдентификатор,
	//	ТекущийКонтакт,
	//	НаименованиеКонтакта);
		
	ОбновитьКарточкуКонтакта();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПоУмолчаниюПриИзменении(Элемент)
	
	Для Каждого ВыбранныйАдресат ИЗ ВыбранныеАдресаты Цикл
		
		ВыбранныйАдресат.Группа = ГруппаПоУмолчанию;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы_СтрокаПоиска

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСписок;
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	СписокПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаВФормеИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСписок;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Список

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Параметры.РежимРаботыФормы = 0 Тогда
		ОткрытьКарточкуОбъекта();
	ИначеЕсли Параметры.РежимРаботыФормы = 1 Тогда
		ОписаниеОповещения = 
			Новый ОписаниеОповещения("ВыбратьАдресатов_Продолжение", ЭтаФорма);
		ДобавитьВыделенныеКонтактыВСписокВыбранных(ОписаниеОповещения);
	ИначеЕсли Параметры.РежимРаботыФормы = 2 Тогда
		ДобавитьВыделенныеКонтактыВСписокВыбранных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьДоступностьКомандСписка", 0.2, Истина);
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		НовыйТекущийКонтакт = Неопределено;
	Иначе
		НовыйТекущийКонтакт = ТекущиеДанные.Объект;
	КонецЕсли;
	
	Если ТекущийКонтакт = НовыйТекущийКонтакт Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКонтакт = НовыйТекущийКонтакт;
	
	ПодключитьОбработчикОжидания("ОбновитьКарточкуКонтакта", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ДобавитьГруппу_Продолжение", ЭтаФорма);
	
	Если ЭтоЛичныеАдресаты(ТекущиеДанные) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Родитель", ТекущийКонтакт);
		
		ОткрытьФорму("Справочник.ЛичныеАдресаты.ФормаОбъекта",
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОткрытьКарточкуОбъекта();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	ДопустимыеТипы = Новый Массив;
	ДопустимыеТипы.Добавить(Тип("СправочникСсылка.ГруппыЛичныхАдресатов"));
	ДопустимыеТипы.Добавить(Тип("СправочникСсылка.ЛичныеАдресаты"));
	
	ОбъектыКУдалению = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока ИЗ ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
		Если ДопустимыеТипы.Найти(ДанныеСтроки.ТипОбъекта) = Неопределено
			И ДопустимыеТипы.Найти(ДанныеСтроки.ТипРодителяОбъекта) = Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		СтруктураУдаляемогоОбъекта = Новый Структура;
		СтруктураУдаляемогоОбъекта.Вставить("Объект", ДанныеСтроки.Объект);
		СтруктураУдаляемогоОбъекта.Вставить("РодительОбъекта", ДанныеСтроки.РодительОбъекта);
		ОбъектыКУдалению.Добавить(СтруктураУдаляемогоОбъекта);
	КонецЦикла;
	
	Если ОбъектыКУдалению.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Удаление доступно только для раздела ""Личные адресаты"".'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УдалитьЭлементГруппу_ПродолжениеПослеВопроса", ЭтаФорма, ОбъектыКУдалению);
	ПоказатьВопрос(ОписаниеОповещения,
		НСтр("ru = 'Удалить выделенных адресатов?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭлементГруппу_ПродолжениеПослеВопроса(Результат, ОбъектыКУдалению) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВыделенныеОбъекты(ОбъектыКУдалению);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru='Удаление из адресной книги'"),,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Адресаты (%1 шт) удалены из адресной книги.'"),
			ОбъектыКУдалению.Количество()),
			БиблиотекаКартинок.Информация32);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ИсточникПеретаскивания = Элементы.Список;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ИсточникПеретаскивания = Элементы.Список Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ПереносимыеОбъекты = Новый Массив;
		
		Для Каждого Стр ИЗ ПараметрыПеретаскивания.Значение Цикл
			ДанныеСтроки = Элементы.Список.ДанныеСтроки(Стр);
			
			ПереносимыйОбъект = Новый Структура;
			ПереносимыйОбъект.Вставить("Объект", ДанныеСтроки.Объект);
			ПереносимыйОбъект.Вставить("ТипОбъекта", ДанныеСтроки.ТипОбъекта);
			ПереносимыйОбъект.Вставить("РодительОбъекта", ДанныеСтроки.РодительОбъекта);
			ПереносимыйОбъект.Вставить("ТипРодителяОбъекта", ДанныеСтроки.ТипРодителяОбъекта);
			
			ПереносимыеОбъекты.Добавить(ПереносимыйОбъект);
			
		КонецЦикла;
		
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(Строка);
		
		НоваяГруппа = Новый Структура;
		НоваяГруппа.Вставить("Ссылка", Строка);
		НоваяГруппа.Вставить("Объект", ДанныеСтроки.Объект);
		НоваяГруппа.Вставить("ТипОбъекта", ДанныеСтроки.ТипОбъекта);
		
		ПеренестиОбъектыВГруппу(НоваяГруппа, ПереносимыеОбъекты);
		
		Элементы.Список.Обновить();
		
	ИначеЕсли ИсточникПеретаскивания = Элементы.ВыбранныеАдресаты Тогда
		
		СтандартнаяОбработка = Ложь;
		
		УдалитьВыделенныеКонтактыИзСпискаВыбранных();
		
	КонецЕсли;
		
	ИсточникПеретаскивания = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_РезультатПоиска

&НаКлиенте
Процедура РезультатПоискаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Параметры.РежимРаботыФормы = 0 Тогда
		ОткрытьКарточкуОбъекта();
	ИначеЕсли Параметры.РежимРаботыФормы = 1 Тогда
		ОписаниеОповещения = 
			Новый ОписаниеОповещения("ВыбратьАдресатов_Продолжение", ЭтаФорма);
		ДобавитьВыделенныеКонтактыВСписокВыбранных(ОписаниеОповещения);
	ИначеЕсли Параметры.РежимРаботыФормы = 2 Тогда
		ДобавитьВыделенныеКонтактыВСписокВыбранных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПоискаПриАктивизацииСтроки(Элемент)
	
	//ПодключитьОбработчикОжидания("УстановитьДоступностьКомандРезультатПоиска", 0.2, Истина);
	
	ТекущиеДанные = Элементы.РезультатПоиска.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		НовыйТекущийКонтакт = Неопределено;
	Иначе
		НовыйТекущийКонтакт = ТекущиеДанные.ОбъектПоиска;
	КонецЕсли;
	
	Если ТекущийКонтакт = НовыйТекущийКонтакт Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКонтакт = НовыйТекущийКонтакт;
	
	ПодключитьОбработчикОжидания("ОбновитьКарточкуКонтакта", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПоискаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ИсточникПеретаскивания = Элементы.РезультатПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПоискаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ИсточникПеретаскивания = Элементы.ВыбранныеАдресаты Тогда
		
		СтандартнаяОбработка = Ложь;
		
		УдалитьВыделенныеКонтактыИзСпискаВыбранных();
		
	КонецЕсли;
	
	ИсточникПеретаскивания = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ВыбранныеАдресаты

&НаКлиенте
Процедура ВыбранныеАдресатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Индекс = ВыбранныеАдресаты.Индекс(ВыбранныеАдресаты.НайтиПоИдентификатору(ВыбраннаяСтрока));
	
	ВыбранныеАдресаты.Удалить(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ВыбранныеАдресаты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		Или ТипЗнч(ТекущиеДанные.Контакт) = Тип("Строка") Тогда
		
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Контакт);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ИсточникПеретаскивания = Элементы.ВыбранныеАдресаты;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ИсточникПеретаскивания = Элементы.Список
		Или ИсточникПеретаскивания = Элементы.РезультатПоиска Тогда
		
		СтандартнаяОбработка = Ложь;
		ДобавитьВыделенныеКонтактыВСписокВыбранных(, Истина);
	КонецЕсли;
	
	ИсточникПеретаскивания = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьЭлемент(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоЛичныеАдресаты(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ДобавитьГруппу_Продолжение", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Родитель", ТекущийКонтакт);
		
	ОткрытьФорму("Справочник.ЛичныеАдресаты.ФормаОбъекта",
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭлемент_Продолжение(Результат, Параметры) Экспорт
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппу(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ДобавитьГруппу_Продолжение", ЭтаФорма);
	
	Если ЭтоЛичныеАдресаты(ТекущиеДанные) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Родитель", ТекущийКонтакт);
		
		ОткрытьФорму("Справочник.ГруппыЛичныхАдресатов.ФормаОбъекта", 
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппу_Продолжение(Результат, Параметры) Экспорт
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьПисьмо(Команда)
	
	ПараметрыТекущегоСписка = ПараметрыТекущегоСписка();
	ВыделенныеСтроки = ПараметрыТекущегоСписка.ВыделенныеСтроки;
	ИмяПоля_Объект = ПараметрыТекущегоСписка.ИмяПоля_Объект;
	ИмяПоля_ТипОбъекта = ПараметрыТекущегоСписка.ИмяПоля_ТипОбъекта;
	ТекущиеДанные = ПараметрыТекущегоСписка.ТекущиеДанные;
	ТаблицаФормы = ПараметрыТекущегоСписка.ТаблицаФормы;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеОбъекты = Новый Массив;
	Для Каждого Стр ИЗ ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаФормы.ДанныеСтроки(Стр);
		
		ДобавитьВыделенныйОбъектВМассив(
			ВыбранныеОбъекты, ДанныеСтроки, ИмяПоля_Объект, ИмяПоля_ТипОбъекта);
		
	КонецЦикла;
	
	Параметры.ВыбиратьЭлектронныеАдреса = Истина;
	ПредыдущийРежимРаботыФормы = Параметры.РежимРаботыФормы;
	Параметры.РежимРаботыФормы = 2;
	
	КонтактыОбъектов = КонтактыОбъектов(
		ВыбранныеОбъекты, Параметры);
		
	Параметры.ВыбиратьЭлектронныеАдреса = Ложь;
	Параметры.РежимРаботыФормы = ПредыдущийРежимРаботыФормы;
		
	СписокПочтовыхАдресов = Новый СписокЗначений;
	
	Для Каждого Стр ИЗ КонтактыОбъектов Цикл
		
		Если Стр.Адреса.Количество() = 0 Тогда
			АдресатБезЭлАдресов = Новый Структура("НомерКартинки, Адресат",
				Стр.НомерКартинки, Стр.Контакт);
			Продолжить;
		КонецЕсли;
		
		АдресИнфо = Новый Структура("Контакт, Адрес, ОтображаемоеИмя",
			Стр.Контакт, Стр.Адреса[0].Адрес, Стр.Адреса[0].Представление);
			
		СписокПочтовыхАдресов.Добавить(АдресИнфо);
		
	КонецЦикла;
	
	Если СписокПочтовыхАдресов.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Для создания письма необходимо выбрать адресатов с электронными адресами.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("СписокПочтовыхАдресов", СписокПочтовыхАдресов);
	ОткрытьФорму("Документ.ИсходящееПисьмо.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокАдресатов(Команда)
	
	ПараметрыТекущегоСписка = ПараметрыТекущегоСписка();
	ТекущиеДанные = ПараметрыТекущегоСписка.ТекущиеДанные;
	ВыделенныеСтроки = ПараметрыТекущегоСписка.ВыделенныеСтроки;
	ТаблицаФормы = ПараметрыТекущегоСписка.ТаблицаФормы;
	
	ИмяПоля_Объект = ПараметрыТекущегоСписка.ИмяПоля_Объект;
	ИмяПоля_ТипОбъекта = ПараметрыТекущегоСписка.ИмяПоля_ТипОбъекта;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДопустимыеТипы = Новый Массив;
	ДопустимыеТипы.Добавить(Тип("СправочникСсылка.Пользователи"));
	ДопустимыеТипы.Добавить(Тип("СправочникСсылка.Заказчики"));
	ДопустимыеТипы.Добавить(Тип("СправочникСсылка.КонтактныеЛицаЗаказчиков"));
	ДопустимыеТипы.Добавить(Тип("СправочникСсылка.ЛичныеАдресаты"));
	
	ОбъектыКДобавлению = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока ИЗ ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаФормы.ДанныеСтроки(ВыделеннаяСтрока);
		Если ДопустимыеТипы.Найти(ДанныеСтроки[ИмяПоля_ТипОбъекта]) = Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		ОбъектыКДобавлению.Добавить(ДанныеСтроки[ИмяПоля_Объект]);
	КонецЦикла;
	
	Если ОбъектыКДобавлению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.УчетнаяЗаписьПочты) Тогда
		ДобавитьВСписокАдресатов_ПродолжениеПослеВыбораУчетнойЗаписиЭлПочты(
			Параметры.УчетнаяЗаписьПочты, ОбъектыКДобавлению);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьВСписокАдресатов_ПродолжениеПослеВыбораУчетнойЗаписиЭлПочты", ЭтаФорма, ОбъектыКДобавлению);
	
	Отбор = Новый Структура("ВариантИспользования", 
		ПредопределенноеЗначение("Перечисление.ВариантыИспользованияПочты.Встроенная"));
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ответственный", ПользователиКлиентСервер.ТекущийПользователь());
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаВыбора",
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокАдресатов_ПродолжениеПослеВыбораУчетнойЗаписиЭлПочты(
		УчетнаяЗаписьДляДобавления, ОбъектыКДобавлению) Экспорт
	
	Если УчетнаяЗаписьДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьВСписокАдресатов_ПродолжениеПослеВыбораСпискаАдресатов", ЭтаФорма, ОбъектыКДобавлению);
	
	ПараметрыФормы = Новый Структура("УчетнаяЗапись", УчетнаяЗаписьДляДобавления);
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора",
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокАдресатов_ПродолжениеПослеВыбораСпискаАдресатов(
		СписокАдресатов, ОбъектыКДобавлению) Экспорт
	
	Если СписокАдресатов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьКонтактыВСписокАдресатов(СписокАдресатов, ОбъектыКДобавлению);
	
	ТекстОповещения = НСтр("ru = 'Добавление в список адресатов.'");
	
	Если ОбъектыКДобавлению.Количество() = 1 Тогда
		ПоказатьОповещениеПользователя(
			ТекстОповещения,
			ПолучитьНавигационнуюСсылку(СписокАдресатов),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Адресат ""%1"" добавлен в список ""%2"".'"),
				Строка(ОбъектыКДобавлению[0]),
				СписокАдресатов),
				БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			ТекстОповещения,
			ПолучитьНавигационнуюСсылку(СписокАдресатов),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Адресаты (%1 шт) добавлены в список ""%2"".'"),
				ОбъектыКДобавлению.Количество(),
				СписокАдресатов),
				БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзOutlook(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоЛичныеАдресаты(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru='Выполняется загрузка из адресной книги Outlook. Пожалуйста подождите...'"));
	
	МассивКонтактов = РаботаСЛичнымиАдресатамиКлиент.ЗагрузитьКонтактыИзOutlook();
	
	ЧислоЗагруженных = РаботаСЛичнымиАдресатами.ЗаписатьКонтакты(МассивКонтактов);
	
	Состояние();
	
	Элементы.Список.Обновить();
	
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Загрузка из адресной книги Outlook завершена. Загружено: %1.'"), 
		Формат(ЧислоЗагруженных, "ЧН=0"));
	ПоказатьПредупреждение(,СтрокаСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНедействительных(Команда)
	
	ПоказыватьНедействительныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАвтоподстановки(Команда)
	
	ОбновитьАвтоподстановки_НаСервере();
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеАдреснойКниги(Команда)
	
	ТекстВопрос = НСтр("ru = 'Адресная книга будет полностью перезаполнена. Это может занять длительное время!
		|
		|Продолжить?'");
		
	ОписаниеОповещения = Новый ОписаниеОповещения("Продолжение_ОбновитьДанныеАдреснойКниги", ЭтаФорма);
		
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопрос, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура Продолжение_ОбновитьДанныеАдреснойКниги(КодОтвета, ДопПараметры) Экспорт
	
	Если КодОтвета <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеАдреснойКнигиНаСервере();
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонтактИзРезультатаПоиска(Команда)
	
	ОткрытьКарточкуОбъекта();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиВОбщемСписке(Команда)
	
	ТекущиеДанные = Элементы.РезультатПоиска.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Список.ТекущаяСтрока = ПолучитьСсылкуНаОбъектВАдреснойКниге(ТекущиеДанные.ОбъектПоиска);
		
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСписок;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьИзСпискаВВыбранное(Команда)
	
	ДобавитьВыделенныеКонтактыВСписокВыбранных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьИзВыбранныхВСписок(Команда)
	
	УдалитьВыделенныеКонтактыИзСпискаВыбранных();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьАдресатовКоманда(Команда)
	
	Если ВыбранныеАдресаты.Количество() = 0 Тогда
		ОписаниеОповещения = 
			Новый ОписаниеОповещения("ВыбратьАдресатов_Продолжение", ЭтаФорма);
		ДобавитьВыделенныеКонтактыВСписокВыбранных(ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	ВыбратьАдресатов_Продолжение(Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьАдресатов_Продолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыбратьАдресатов();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьПараметрыСписка()
	
	СписокНеДоступныхРазделов = Новый Массив;
	СписокНеДоступныхТиповОбъектов = Новый Массив;
	
	Если НЕ Параметры.ОтображатьСотрудников Тогда
		СписокНеДоступныхРазделов.Добавить(Справочники.АдреснаяКнига.Исполнители);
	КонецЕсли;
	
	Если НЕ Параметры.ОтображатьСотрудников Тогда
		//СписокНеДоступныхТиповОбъектов.Добавить(Перечисления.ТипыДанныхАдреснойКниги.РабочаяГруппа);
		//СписокНеДоступныхТиповОбъектов.Добавить(Перечисления.ТипыДанныхАдреснойКниги.СтруктураПредприятия);
		СписокНеДоступныхТиповОбъектов.Добавить(Перечисления.ТипыДанныхАдреснойКниги.Пользователь);
	КонецЕсли;
	//Если НЕ Параметры.ОтображатьАвтоподстановкиПоПроцессам Тогда
	//	СписокНеДоступныхРазделов.Добавить(Справочники.АдреснаяКнига.АвтоподстановкиДляПроцессов);
	//КонецЕсли;
	//Если НЕ Параметры.ОтображатьАвтоподстановкиПоДокументам Тогда
	//	СписокНеДоступныхРазделов.Добавить(Справочники.АдреснаяКнига.АвтоподстановкиДляДокументов);
	//КонецЕсли;
	
	Если НЕ Параметры.ОтображатьКонтрагентов
		Или НЕ ПравоДоступа("Чтение", Метаданные.Справочники.Заказчики)
		Или НЕ ПравоДоступа("Чтение", Метаданные.Справочники.КонтактныеЛицаЗаказчиков) Тогда
		
		СписокНеДоступныхРазделов.Добавить(Справочники.АдреснаяКнига.Заказчики);
		СписокНеДоступныхТиповОбъектов.Добавить(Перечисления.ТипыДанныхАдреснойКниги.Заказчик);
		СписокНеДоступныхТиповОбъектов.Добавить(Перечисления.ТипыДанныхАдреснойКниги.КонтактноеЛицо);
	КонецЕсли;
	
	Если НЕ Параметры.ОтображатьЛичныхАдресатов
		Или Не ПравоДоступа("Чтение", Метаданные.Справочники.ГруппыЛичныхАдресатов)
		Или Не ПравоДоступа("Чтение", Метаданные.Справочники.ЛичныеАдресаты)
		Или Не ПолучитьФункциональнуюОпцию("ИспользованиеВстроеннойПочты")
		Или ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда
		
		СписокНеДоступныхРазделов.Добавить(Справочники.АдреснаяКнига.ЛичныеАдресаты);
		СписокНеДоступныхТиповОбъектов.Добавить(Перечисления.ТипыДанныхАдреснойКниги.ГруппаЛичныхАдресатов);
		СписокНеДоступныхТиповОбъектов.Добавить(Перечисления.ТипыДанныхАдреснойКниги.ЛичныйАдресат);
	КонецЕсли;
	
	Если ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда
		СписокНеДоступныхРазделов.Добавить(Справочники.АдреснаяКнига.Избранное);
	КонецЕсли;
	
	Если СписокНеДоступныхРазделов.Количество() > 0 Тогда
		Список.Параметры.УстановитьЗначениеПараметра(
			"СписокНеДоступныхРазделов", СписокНеДоступныхРазделов);
	КонецЕсли;
	
	Если СписокНеДоступныхТиповОбъектов.Количество() > 0 Тогда
		Список.Параметры.УстановитьЗначениеПараметра(
			"СписокНеДоступныхТиповОбъектов", СписокНеДоступныхТиповОбъектов);
	КонецЕсли;
	
	Если Параметры.СписокОтбора.Количество() > 0 Тогда
		
		ДоступныеТипыДляВыбора = Новый Массив;
		
		Если Параметры.ОтображатьСотрудников Тогда
			ДоступныеТипыДляВыбора.Добавить(Перечисления.ТипыДанныхАдреснойКниги.Пользователь);
		КонецЕсли;
		
		Если Параметры.ОтображатьКонтрагентов Тогда
			Если Параметры.ВыбиратьЗаказчиков Тогда
				ДоступныеТипыДляВыбора.Добавить(Перечисления.ТипыДанныхАдреснойКниги.Заказчик);
			КонецЕсли;
			ДоступныеТипыДляВыбора.Добавить(Перечисления.ТипыДанныхАдреснойКниги.КонтактноеЛицо);
		КонецЕсли;
		Если Параметры.ОтображатьЛичныхАдресатов Тогда
			ДоступныеТипыДляВыбора.Добавить(Перечисления.ТипыДанныхАдреснойКниги.ЛичныйАдресат);
		КонецЕсли;
		Если ВыбиратьКонтейнерыПользователей Тогда
			ДоступныеТипыДляВыбора.Добавить(Перечисления.ТипыДанныхАдреснойКниги.Исполнитель);
		КонецЕсли;
		
		Список.Параметры.УстановитьЗначениеПараметра(
			"ДоступныеТипыДляВыбора", ДоступныеТипыДляВыбора);
			
		Список.Параметры.УстановитьЗначениеПараметра(
			"СписокОтбора", Параметры.СписокОтбора.ВыгрузитьЗначения());
		
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра(
		"ПоказыватьНедействительных", ПоказыватьНедействительных);
	
	Если Параметры.СписокОтбораАвтоподстановок.Количество() > 0 Тогда
		Список.Параметры.УстановитьЗначениеПараметра(
			"СписокОтбораАвтоподстановок",
			Параметры.СписокОтбораАвтоподстановок.ВыгрузитьЗначения());
	Иначе
		СписокЗапретаАвтоподстановок = Новый Массив;
		СписокЗапретаАвтоподстановок.Добавить(НСтр("ru = 'Непосредственный руководитель исполнителя'"));
		//Список.Параметры.УстановитьЗначениеПараметра(
		//	"СписокЗапретаАвтоподстановок",
		//	СписокЗапретаАвтоподстановок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНачальноеОтображениеРазделов()
	
	Элементы.Список.Развернуть(ПредопределенноеЗначение("Справочник.АдреснаяКнига.Избранное"));
	
	Если Параметры.ОтображатьСотрудников Тогда
		Элементы.Список.Развернуть(ПредопределенноеЗначение("Справочник.АдреснаяКнига.Исполнители"));
	КонецЕсли;
	
	Если Параметры.ОтображатьКонтрагентов
		И НЕ Параметры.ОтображатьСотрудников
		И НЕ Параметры.ОтображатьЛичныхАдресатов Тогда
		
		Элементы.Список.Развернуть(ПредопределенноеЗначение("Справочник.АдреснаяКнига.Заказчики"));
	КонецЕсли;
	
	//Если Параметры.ОтображатьОрганизации
	//	И Не Параметры.ОтображатьКонтрагентов Тогда
	//	
	//	Элементы.Список.Развернуть(ПредопределенноеЗначение("Справочник.АдреснаяКнига.Организации"));
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСпискаРезультатПоиска()
	
	СписокНеДоступныхТиповОбъектов = Новый Массив;
	
	Если НЕ Параметры.ОтображатьСотрудников Тогда
		СписокНеДоступныхТиповОбъектов.Добавить(Тип("СправочникСсылка.ГруппыПользователей"));
		//СписокНеДоступныхТиповОбъектов.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
		СписокНеДоступныхТиповОбъектов.Добавить(Тип("СправочникСсылка.Пользователи"));
	КонецЕсли;
	
	Если НЕ Параметры.ОтображатьКонтрагентов
		Или НЕ ПравоДоступа("Чтение", Метаданные.Справочники.Заказчики)
		Или НЕ ПравоДоступа("Чтение", Метаданные.Справочники.КонтактныеЛицаЗаказчиков) Тогда
		
		СписокНеДоступныхТиповОбъектов.Добавить(Тип("СправочникСсылка.Заказчики"));
		СписокНеДоступныхТиповОбъектов.Добавить(Тип("СправочникСсылка.КонтактныеЛицаЗаказчиков"));
	КонецЕсли;
	Если НЕ Параметры.ОтображатьЛичныхАдресатов
		Или НЕ ПравоДоступа("Чтение", Метаданные.Справочники.ГруппыЛичныхАдресатов)
		Или НЕ ПравоДоступа("Чтение", Метаданные.Справочники.ЛичныеАдресаты)
		Или Не ПолучитьФункциональнуюОпцию("ИспользованиеВстроеннойПочты")
		Или ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда
		
		СписокНеДоступныхТиповОбъектов.Добавить(Тип("СправочникСсылка.ЛичныеАдресаты"));
	КонецЕсли;
	
	Если СписокНеДоступныхТиповОбъектов.Количество() > 0 Тогда
		РезультатПоиска.Параметры.УстановитьЗначениеПараметра(
			"СписокНеДоступныхТиповОбъектов", СписокНеДоступныхТиповОбъектов);
	КонецЕсли;
	
	Если Параметры.СписокОтбора.Количество() > 0 Тогда
		РезультатПоиска.Параметры.УстановитьЗначениеПараметра(
			"СписокОтбора", Параметры.СписокОтбора.ВыгрузитьЗначения());
	КонецЕсли;
	
	РезультатПоиска.Параметры.УстановитьЗначениеПараметра("Слово", "%" + СтрокаПоиска + "%");
	
	РезультатПоиска.Параметры.УстановитьЗначениеПараметра(
		"ПоказыватьНедействительных", ПоказыватьНедействительных);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоРежимуРаботыФормы()
	
	Если Параметры.РежимРаботыФормы = 0 Тогда // Режим работы адресной книги без возможности выбора
		Элементы.ГруппаПереместитьИПолучатели.Видимость = Ложь;
		Элементы.ДекорацияВсеАдресаты.Видимость = Ложь;
		Элементы.ГруппаКнопкиВыбора.Видимость = Ложь;
	ИначеЕсли Параметры.РежимРаботыФормы = 1 Тогда // Выбор одного адресата
		Элементы.ГруппаПереместитьИПолучатели.Видимость = Ложь;
		Элементы.ДекорацияВсеАдресаты.Видимость = Ложь;
	ИначеЕсли Параметры.РежимРаботыФормы = 2 Тогда // Выбор нескольких адресатов
		// Ничего не отключаем
	КонецЕсли;
	
	Элементы.ГруппаПоУмолчанию.Видимость = Параметры.ПоказыватьТипАдресов;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСписка()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЛичныеАдресаты = ЭтоЛичныеАдресаты(ТекущиеДанные);
	
	Элементы.СписокКонтекстноеМенюДобавитьГруппу.Доступность = (ЭтоЛичныеАдресаты И ДоступноДобавлениеЛичныхАдресатов);
	
	Элементы.СписокКонтекстноеМенюИзменить.Доступность = НЕ ТекущиеДанные.Предопределенный;
		
	Элементы.СписокКонтекстноеМенюУдалить.Доступность = НЕ ТекущиеДанные.Предопределенный И ЭтоЛичныеАдресаты;
		
	Элементы.СписокКонтекстноеМенюКомандаСоздатьПисьмо.Доступность = НЕ ТекущиеДанные.Предопределенный;
		
	Элементы.СписокКонтекстноеМенюДобавитьВСписокАдресатов.Доступность = 
		ТекущиеДанные.ТипОбъекта = Тип("СправочникСсылка.Заказчики")
		ИЛИ ТекущиеДанные.ТипОбъекта = Тип("СправочникСсылка.КонтактныеЛицаЗаказчиков")
		ИЛИ ТекущиеДанные.ТипОбъекта = Тип("СправочникСсылка.Пользователи")
		ИЛИ ТекущиеДанные.ТипОбъекта = Тип("СправочникСсылка.ЛичныеАдресаты");
	
	Элементы.СписокКонтекстноеМенюЗагрузитьИзOutlook.Доступность = ЭтоЛичныеАдресаты;
	
КонецПроцедуры

// Устанавливает текущую строку списка по указанному контакту (первую подходящую).
//
// Параметры:
//   Контакт - ЛюбаяСсылка - ранее выбранный контакт.
//
&НаСервере
Процедура УстановитьТекущуюСтрокуСписка(ВыбранныйКонтакт)
	
	Если Не ЗначениеЗаполнено(ВыбранныйКонтакт) Тогда
		Возврат;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	
	СтрокаВыбрать = СтрПолучитьСтроку(Список.ТекстЗапроса, 1);
	КоличествоСимволовВПервойСтрокеЗапроса = СтрДлина(СтрокаВыбрать);
	ОбщеееКоличествоСимволов = СтрДлина(Список.ТекстЗапроса);
	КоличествоСимволовВЗапросеБезПервойСтроки = 
		ОбщеееКоличествоСимволов - КоличествоСимволовВПервойСтрокеЗапроса;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ"
		+ Прав(Список.ТекстЗапроса, КоличествоСимволовВЗапросеБезПервойСтроки);
		
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.Имя = "НаборДанных1";
	
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(Список.КомпоновщикНастроек.ПолучитьНастройки());
	КомпоновщикНастроекКомпоновкиДанных.Настройки.УсловноеОформление.Элементы.Очистить();
	
	КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура.Очистить();
	КомпоновщикНастроекКомпоновкиДанных.Настройки.Выбор.Элементы.Очистить();
	
	ГруппировкаКомпоновкиДанных = КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ГруппировкаКомпоновкиДанных.Использование = Истина;
	
	ЭлементПорядка = ГруппировкаКомпоновкиДанных.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Ссылка.ПорядокОбъектаВСписке");
	ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	ЭлементПорядка.Использование = Истина;
	
	ПолеГруппировки = ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	ПолеГруппировки.Использование = Истина;
	
	ПолеГруппировки = ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Объект");
	ПолеГруппировки.Использование = Истина;
	
	ПолеВыбора = КомпоновщикНастроекКомпоновкиДанных.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	ПолеВыбора.Использование = Истина;
	
	ПолеВыбора = КомпоновщикНастроекКомпоновкиДанных.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Объект");
	ПолеВыбора.Использование = Истина;
	
	КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
		"ВыбранныйКонтакт", ВыбранныйКонтакт);
		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
		КомпоновщикНастроекКомпоновкиДанных.Настройки,,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Для Каждого СтрокаРезультата Из ТаблицаРезультата Цикл
		Если СтрокаРезультата.Объект = ВыбранныйКонтакт Тогда
			Элементы.Список.ТекущаяСтрока = СтрокаРезультата.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоЛичныеАдресаты(ТекущиеДанные)
	
	Возврат ТекущиеДанные.Ссылка = ПредопределенноеЗначение("Справочник.АдреснаяКнига.ЛичныеАдресаты")
		ИЛИ ТекущиеДанные.ТипОбъекта = Тип("СправочникСсылка.ГруппыЛичныхАдресатов")
		ИЛИ ТекущиеДанные.ТипОбъекта = Тип("СправочникСсылка.ЛичныеАдресаты")
		ИЛИ ТекущиеДанные.ТипРодителяОбъекта = Тип("СправочникСсылка.ГруппыЛичныхАдресатов");
		
КонецФункции

&НаКлиенте
Функция ПараметрыТекущегоСписка(НеПолучатьПараметрыДляСпискаВыбранныеАдресаты = Истина)
	
	ПараметрыСписка = Новый Структура;
	ПараметрыСписка.Вставить("ВыделенныеСтроки");
	ПараметрыСписка.Вставить("ТаблицаФормы");
	ПараметрыСписка.Вставить("ИмяПоля_Объект");
	ПараметрыСписка.Вставить("ИмяПоля_ТипОбъекта");
	ПараметрыСписка.Вставить("ИмяПоля_КартинкиОбъекта");
	ПараметрыСписка.Вставить("ИмяПоля_ДействующаяЗапись");
	ПараметрыСписка.Вставить("ИмяПоля_РодительОбъекта", "");
	ПараметрыСписка.Вставить("ИмяПоля_ТипРодителяОбъекта", "");
	ПараметрыСписка.Вставить("ТекущиеДанные");
	
	Если Не НеПолучатьПараметрыДляСпискаВыбранныеАдресаты И ТекущийЭлемент = Элементы.ВыбранныеАдресаты Тогда
		ПараметрыСписка.ВыделенныеСтроки = Элементы.ВыбранныеАдресаты.ВыделенныеСтроки;
		ПараметрыСписка.ТаблицаФормы = Элементы.ВыбранныеАдресаты;
		ПараметрыСписка.ИмяПоля_Объект = "Контакт";
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСписок Тогда
		ПараметрыСписка.ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
		ПараметрыСписка.ТаблицаФормы = Элементы.Список;
		ПараметрыСписка.ИмяПоля_Объект = "Объект";
		ПараметрыСписка.ИмяПоля_ТипОбъекта = "ТипОбъекта";
		ПараметрыСписка.ИмяПоля_КартинкиОбъекта = "ПорядокОбъектаВСписке";
		ПараметрыСписка.ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		ПараметрыСписка.ИмяПоля_ДействующаяЗапись = "ОтображатьВАдреснойКниге";
		ПараметрыСписка.ИмяПоля_РодительОбъекта = "РодительОбъекта";
		ПараметрыСписка.ИмяПоля_ТипРодителяОбъекта = "ТипРодителяОбъекта";
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультатПоиска Тогда
		ПараметрыСписка.ВыделенныеСтроки = Элементы.РезультатПоиска.ВыделенныеСтроки;
		ПараметрыСписка.ТаблицаФормы = Элементы.РезультатПоиска;
		ПараметрыСписка.ИмяПоля_Объект = "ОбъектПоиска";
		ПараметрыСписка.ИмяПоля_ТипОбъекта = "ТипОбъектаПоиска";
		ПараметрыСписка.ИмяПоля_КартинкиОбъекта = "Картинка";
		ПараметрыСписка.ИмяПоля_ДействующаяЗапись = "ИспользоватьВПоиске";
		ПараметрыСписка.ТекущиеДанные = Элементы.РезультатПоиска.ТекущиеДанные;
	КонецЕсли;
	
	Возврат ПараметрыСписка;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПоиск()
	
	СтрокаПоиска = Элементы.СтрокаПоискаВФорме.ТекстРедактирования;
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		УстановитьПараметрыСпискаРезультатПоиска();
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультатПоиска;
		РезультатПоискаПриАктивизацииСтроки(Неопределено);
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСписок;
		СписокПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
	
	Элементы.РезультатПоиска.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуОбъекта()
	
	ПараметрыТекущегоСписка = ПараметрыТекущегоСписка();
	ВыделенныеСтроки = ПараметрыТекущегоСписка.ВыделенныеСтроки;
	ТекущиеДанные = ПараметрыТекущегоСписка.ТекущиеДанные;
	ИмяПоля_Объект = ПараметрыТекущегоСписка.ИмяПоля_Объект;
	ИмяПоля_ТипОбъекта = ПараметрыТекущегоСписка.ИмяПоля_ТипОбъекта;
	ИмяПоля_РодительОбъекта = ПараметрыТекущегоСписка.ИмяПоля_РодительОбъекта;
	ИмяПоля_ТипРодителяОбъекта = ПараметрыТекущегоСписка.ИмяПоля_ТипРодителяОбъекта;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные[ИмяПоля_Объект]) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДляОткрытия = ТекущиеДанные[ИмяПоля_Объект];
	
	Если ТекущиеДанные[ИмяПоля_ТипОбъекта] = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ОбъектДляОткрытия);
	
КонецПроцедуры

&НаСервере
Процедура ПоказыватьНедействительныхНаСервере()
	
	ПоказыватьНедействительных = Не ПоказыватьНедействительных;
	Элементы.СписокКонтекстноеМенюПоказыватьНедействительных.Пометка = ПоказыватьНедействительных;
	Элементы.РезультатПоискаКонтекстноеМенюПоказыватьНедействительных.Пометка = ПоказыватьНедействительных;
	
	УстановитьПараметрыСписка();
	УстановитьПараметрыСпискаРезультатПоиска();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаОбъектВАдреснойКниге(СсылкаНаОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АдреснаяКнига.Ссылка,
		|	АдреснаяКнига.Родитель.ПорядокОбъектаВСписке КАК ПорядокОбъектаВСписке
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.Объект = &СсылкаНаОбъект
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокОбъектаВСписке";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПеренестиОбъектыВГруппу(Знач Группа, Знач ПереносимыеОбъекты)
	
	ЭтоГруппаЛичныхАдресатов = Ложь;
	
	Если Группа.ТипОбъекта = Тип("СправочникСсылка.ГруппыЛичныхАдресатов") Тогда
		ЭтоГруппаЛичныхАдресатов = Истина;
	ИначеЕсли Группа.Ссылка = Справочники.АдреснаяКнига.ЛичныеАдресаты Тогда
		ЭтоГруппаЛичныхАдресатов = Истина;
		Группа.Объект = Справочники.ГруппыЛичныхАдресатов.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ЭтоГруппаЛичныхАдресатов Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Для Каждого Стр ИЗ ПереносимыеОбъекты Цикл
		Если Стр.ТипОбъекта = Тип("СправочникСсылка.ГруппыЛичныхАдресатов") Тогда
			Объект = Стр.Объект.ПолучитьОбъект();
			Объект.Родитель = Группа.Объект;
			Объект.Записать();
		ИначеЕсли Стр.ТипОбъекта = Тип("СправочникСсылка.ЛичныеАдресаты") Тогда
			Объект = Стр.Объект.ПолучитьОбъект();
			Объект.Группа = Группа.Объект;
			Объект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьВыделенныеОбъекты(Знач ОбъектыКУдалению)
	
	Для Каждого Стр ИЗ ОбъектыКУдалению Цикл
		
		НачатьТранзакцию();
		
		Попытка
		
			Если ТипЗнч(Стр.Объект) = Тип("СправочникСсылка.ГруппыЛичныхАдресатов")
				ИЛИ ТипЗнч(Стр.Объект) = Тип("СправочникСсылка.ЛичныеАдресаты") Тогда
				
				ЗаблокироватьДанныеДляРедактирования(Стр.Объект);
				
				ГруппаОбъект = Стр.Объект.ПолучитьОбъект();
				ГруппаОбъект.УстановитьПометкуУдаления(Истина);
				
				РазблокироватьДанныеДляРедактирования(Стр.Объект);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьКонтактыВСписокАдресатов(СписокАдресатов, Знач ОбъектыКДобавлению)
	
	НачатьТранзакцию();
	
	Для Каждого Объект Из ОбъектыКДобавлению Цикл
		
		Адрес = "";
		
		АдресаКонтакта = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(
			Объект, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				
		Если АдресаКонтакта.Количество() > 0 Тогда
			Адрес = АдресаКонтакта[0].Значение;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			Продолжить;
		КонецЕсли;
	
		Справочники.СпискиАдресовЭлектроннойПочты.ДобавитьВСписок(
			СписокАдресатов, Адрес);
			
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьАвтоподстановки_НаСервере()
	
	Справочники.АдреснаяКнига.ОбновитьСпискиАвтоподстановок();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьАдресатов()
	
	Если ВыбранныеАдресаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.УпрощенныйИнтерфейс Тогда
		
		Если Параметры.РежимРаботыФормы = 1 Тогда
			Результат = ВыбранныеАдресаты[0].Контакт;
		Иначе // подбор
			Результат = Новый Массив;
			Для Каждого ВыбранныйАдресат Из ВыбранныеАдресаты Цикл
				Результат.Добавить(ВыбранныйАдресат.Контакт);
			КонецЦикла;
		КонецЕсли;
			
	Иначе
	
		Результат = Новый Массив;
		Для Каждого ВыбранныйАдресат Из ВыбранныеАдресаты Цикл
			Группа = ?(ПустаяСтрока(ВыбранныйАдресат.Группа),
				Неопределено,
				ВыбранныйАдресат.Группа);
			СтруктураАдресата = Новый Структура(
				"Адрес, Представление, Контакт, ТипПолучателя",
				ВыбранныйАдресат.Адрес,
				ВыбранныйАдресат.Представление,
				ВыбранныйАдресат.Контакт,
				Группа);
			Результат.Добавить(СтруктураАдресата);
		КонецЦикла;
		
	КонецЕсли;
	
	ОповеститьОВыборе(Результат);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьДанныеАдреснойКнигиНаСервере()
	
	Справочники.АдреснаяКнига.ОчиститьАдреснуюКнигу();
	Справочники.АдреснаяКнига.ЗаполнитьАдреснуюКнигу();
	РегистрыСведений.ПоискВАдреснойКниге.ЗаполнитьСловаПоиска();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокПредставленийАвтогрупп()
	
	ПредставленияАвтогрупп = Новый Массив;
	Автогруппы = РаботаСАдреснойКнигой.ПолучитьСписокДоступныхФункций();
	Для Каждого Автогруппа Из Автогруппы Цикл
		ПредставленияАвтогрупп.Добавить(Автогруппа.Представление);
	КонецЦикла;
	
	Возврат ПредставленияАвтогрупп;
	
КонецФункции

// Заполняет таблицу ВыбранныеАдресаты согласно параметрам формы.
//
&НаСервере
Процедура ЗаполнитьВыбранныеАдресатыСогласноПараметрам()
	
	Если Не ЗначениеЗаполнено(Параметры.ВыбранныеАдресаты) Тогда
		Возврат;
	КонецЕсли;
		
	Если Параметры.УпрощенныйИнтерфейс Тогда
		
		Если Параметры.РежимРаботыФормы = 1 Тогда // выбор, передана ссылка
			
			ВыбранныйАдресат = Параметры.ВыбранныеАдресаты;
			
			УстановитьТекущуюСтрокуСписка(ВыбранныйАдресат);
			
		Иначе // подбор, передан массив ссылок
			
			Для Каждого ВыбранныйАдресат Из Параметры.ВыбранныеАдресаты Цикл
				
				СтрАдресат = Новый Структура("Контакт",
					ВыбранныйАдресат);
					
				Если Параметры.КонтролироватьДублиАдресатов
					И ВыбранныеАдресаты.НайтиСтроки(СтрАдресат).Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрАдресат = ВыбранныеАдресаты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрАдресат, СтрАдресат);
				
				НоваяСтрАдресат.НомерКартинки = НомерКартинкиКонтакта(НоваяСтрАдресат.Контакт);
				НоваяСтрАдресат.ПолноеПредставление = ПолучитьПолноеПредставлениеАдресата(
					НоваяСтрАдресат.Адрес, НоваяСтрАдресат.Контакт);
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе // не УпрощенныйИнтерфейс, передан массив структур
		
		Для Каждого ВыбранныйАдресат Из Параметры.ВыбранныеАдресаты Цикл
		
			Если Параметры.РежимРаботыФормы = 1 Тогда
				УстановитьТекущуюСтрокуСписка(ВыбранныйАдресат.Контакт);
				Возврат;
			КонецЕсли;
			
			Если Параметры.КонтролироватьДублиАдресатов
				И ВыбранныеАдресаты.НайтиСтроки(ВыбранныйАдресат).Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрАдресат = ВыбранныеАдресаты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрАдресат, ВыбранныйАдресат);
			
			НоваяСтрАдресат.НомерКартинки = НомерКартинкиКонтакта(НоваяСтрАдресат.Контакт);
			Если ЗначениеЗаполнено(НоваяСтрАдресат.Адрес) Тогда
				НоваяСтрАдресат.Представление = ВстроеннаяПочтаСервер.ПолучитьПочтовоеПредставлениеКонтакта(
					НоваяСтрАдресат.Контакт, НоваяСтрАдресат.Адрес);
			КонецЕсли;
			НоваяСтрАдресат.ПолноеПредставление = ПолучитьПолноеПредставлениеАдресата(
				НоваяСтрАдресат.Адрес, НоваяСтрАдресат.Контакт);
		
		КонецЦикла;
		
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_КарточкаКонтакта

&НаКлиенте
Процедура ОбновитьКарточкуКонтакта()
	
	ЦветФонаHTMLОписания = "";
	
	HTMLОписаниеКонтакта = "<html>"
		+ "<head>"
		+ ОбзорОбъектовКлиентСервер.СтильHTML()
		+ "<body %bgcolor%>";
		
	HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "<table>";
	HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "<tr>";
	
	Если ЗначениеЗаполнено(ТекущийКонтакт)
		И ТипЗнч(ТекущийКонтакт) <> Тип("Строка") Тогда
		
		ДанныеКонтакта = ПолучитьДанныеКонтакта(
			ТекущийКонтакт, УникальныйИдентификатор, ПоказыватьФотографии);
			
		// Фото контакта
		//Если ПоказыватьФотографии Тогда
		//	
		//	АдресФото = "";
		//	СсылкаПодФото = "";
		//	
		//	Если ДанныеКонтакта.ЕстьФото Тогда
		//		Картинка = Новый Картинка(ДанныеКонтакта.ДвоичныеДанныеФото);
		//		Расширение = Строка(Картинка.Формат());
		//		АдресФото = "data:image/" + Расширение + ";base64," + Base64Строка(ДанныеКонтакта.ДвоичныеДанныеФото);
		//		СсылкаПодФото = "v8doc:" + ПолучитьНавигационнуюСсылку(ТекущийКонтакт);
		//	ИначеЕсли ДанныеКонтакта.ВозможностьДобавленияФото Тогда
		//		Расширение = Строка(БиблиотекаКартинок.ПользовательБезФото.Формат());
		//		ДвоичныеДанныеФото = БиблиотекаКартинок.ПользовательБезФото.ПолучитьДвоичныеДанные();
		//		АдресФото = "data:image/" + Расширение + ";base64," + Base64Строка(ДвоичныеДанныеФото);
		//		СсылкаПодФото = "ДобавитьФото";
		//	КонецЕсли;
		//	
		//	Если СсылкаПодФото <> "" Тогда
		//		HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "<td width = ""20"">";
		//		HTMLОписаниеКонтакта = HTMLОписаниеКонтакта +
		//			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		//				"<a href=""%1""><img border=""1"" src=""%2"" height=""70"" style=""border-color: #bdbdbd"" ></a>", 
		//				СсылкаПодФото,
		//				АдресФото);
		//		HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</td>";
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
		// Описание контакта
		HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "<td>";
		
		HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "<b>";
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(
			HTMLОписаниеКонтакта,
			ТекущийКонтакт,
			"");
		HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</b>";
			
		HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "<br>";
		
		ОписаниеКонтакта_HTML = "";
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(
			ОписаниеКонтакта_HTML,
			ДанныеКонтакта.ОписаниеКонтакта,
			"");
		ОписаниеКонтакта_HTML = СтрЗаменить(ОписаниеКонтакта_HTML, Символы.ПС, "<br>");
		HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + ОписаниеКонтакта_HTML;
			
		HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</td>";
			
		Если ДанныеКонтакта.ОписаниеОтсутствия <> Неопределено Тогда
			
			ЦветФонаHTMLОписания = "bgcolor = ""#FFE1E1""";
			
			HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "<td align = right>";
			
			HTMLОписаниеКонтакта = HTMLОписаниеКонтакта
				+ СтрШаблон("<a href=v8doc:%1>%2</a>",
					ПолучитьНавигационнуюСсылку(ДанныеКонтакта.ОписаниеОтсутствия.Ссылка),
					РаботаС_HTML.ЗаменитьСпецСимволыHTML(ДанныеКонтакта.ОписаниеОтсутствия.Представление));
			
			HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</td>";
			
		КонецЕсли;
		
	КонецЕсли;
	
	HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</tr>";
	HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</table>";
	
	HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</body>";
	HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</html>";
	
	HTMLОписаниеКонтакта = СтрЗаменить(HTMLОписаниеКонтакта, "%bgcolor%", ЦветФонаHTMLОписания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеКонтакта(Контакт, УникальныйИдентификатор, ПолучатьФото)
	
	ДанныеКонтакта = Новый Структура;
	ДанныеКонтакта.Вставить("ДвоичныеДанныеФото", "");
	ДанныеКонтакта.Вставить("ОписаниеКонтакта", "");
	ДанныеКонтакта.Вставить("ЕстьФото", Ложь);
	ДанныеКонтакта.Вставить("ВозможностьДобавленияФото", Ложь);
	ДанныеКонтакта.Вставить("ОписаниеОтсутствия", Неопределено);
	
	ТипКонтакта = ТипЗнч(Контакт);
	
	Если ПолучатьФото Тогда
		//ДвоичныеДанныеФото = РаботаСФотографиями.ПолучитьДвоичныеДанныеФото(Контакт);
		//Если ЗначениеЗаполнено(ДвоичныеДанныеФото) Тогда
		//	ДанныеКонтакта.ЕстьФото = Истина;
		//	ДанныеКонтакта.ДвоичныеДанныеФото = ДвоичныеДанныеФото;
		//КонецЕсли;
	КонецЕсли;
		
	Если ТипКонтакта = Тип("СправочникСсылка.Пользователи")
		ИЛИ ТипКонтакта = Тип("СправочникСсылка.КонтактныеЛицаЗаказчиков")
		ИЛИ ТипКонтакта = Тип("СправочникСсылка.ЛичныеАдресаты") Тогда
		
		ДанныеКонтакта.ВозможностьДобавленияФото = Истина;
	ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.Заказчики") Тогда
		//РеквизитыКонтакта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		//	Контакт, "ЭтоГруппа");
		
		//ДанныеКонтакта.ВозможностьДобавленияФото = НЕ РеквизитыКонтакта.ЭтоГруппа 
		//	И РеквизитыКонтакта.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	Иначе
		ДанныеКонтакта.ВозможностьДобавленияФото = Ложь;
	КонецЕсли;
	
	//Если ДанныеКонтакта.ВозможностьДобавленияФото Тогда
	//	// Проверка на право изменения карточки контакта.
	//	ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(
	//		Контакт,
	//		ПользователиКлиентСервер.ТекущийПользователь());
	//	
	//	Если Не ПраваПоОбъекту.Изменение Тогда
	//		ДанныеКонтакта.ВозможностьДобавленияФото = Ложь;
	//	КонецЕсли;
	//КонецЕсли;
	
	//Если ТипКонтакта = Тип("СправочникСсылка.Пользователи") Тогда
	//	ДанныеКонтакта.ОписаниеОтсутствия = 
	//		Отсутствия.ПолучитьОписаниеТекущегоОтсутствияСотрудника(Контакт);
	//КонецЕсли;
	
	ДополнительноеОписаниеКонтакта = "";
	
	Если ТипКонтакта = Тип("СправочникСсылка.Пользователи") Тогда
		ДополнительноеОписаниеКонтакта = ОписаниеПользователяДляКарточки(Контакт);
	ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.ЛичныеАдресаты") Тогда
		ДополнительноеОписаниеКонтакта = ОписаниеЛичногоАдресатаДляКарточки(Контакт);
	ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.КонтактныеЛицаЗаказчиков") Тогда
		ДополнительноеОписаниеКонтакта = ОписаниеКонтактногоЛицаДляКарточки(Контакт);
	ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.Заказчики") Тогда
		ДополнительноеОписаниеКонтакта = ОписаниеЗаказчикаДляКарточки(Контакт);
	//ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.Организации") Тогда
	//	ДополнительноеОписаниеКонтакта = ОписаниеОрганизацииДляКарточки(Контакт);		
	//ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.РолиИсполнителей") Тогда
	//	ДополнительноеОписаниеКонтакта = ОписаниеРолиДляКарточки(Контакт);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительноеОписаниеКонтакта) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ДанныеКонтакта.ОписаниеКонтакта,
			Символы.ПС,
			ДополнительноеОписаниеКонтакта);
	КонецЕсли;
	
	Возврат ДанныеКонтакта;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеПользователяДляКарточки(Контакт)
	
	Результат = "";
	
	//СведенияПользователей = РегистрыСведений.СведенияОПользователяхДокументооборот.Получить(
	//	Новый Структура("Пользователь", Контакт));
	//ОписаниеПользователяПодразделение = Строка(СведенияПользователей.Подразделение);
	//
	//Если ЗначениеЗаполнено(ОписаниеПользователяПодразделение) Тогда
	//	ДобавитьЗначениеКСтрокеЧерезРазделитель(
	//		Результат, 
	//		Символы.ПС, 
	//		ОписаниеПользователяПодразделение);
	//КонецЕсли;	
	
	Должность = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контакт, "Роль"));
	Если ЗначениеЗаполнено(Должность) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			Должность);
	КонецЕсли;
	
	Телефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Контакт, 
		Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
		
	Если ЗначениеЗаполнено(Телефон) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='Тел: '") + Телефон);
	КонецЕсли;
	
	АдресЭП = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Контакт, 
		Справочники.ВидыКонтактнойИнформации.EmailПользователя);
		
	Если ЗначениеЗаполнено(АдресЭП) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='E-mail: '") + АдресЭП);
	КонецЕсли;
	
	//Добавление остальных полей контактной инфомрации
	Для Каждого СтрокаКИ Из Контакт.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя
				ИЛИ СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователя
				ИЛИ СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='"+СтрокаКИ.Вид+": '") + СтрокаКИ.Представление);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеЛичногоАдресатаДляКарточки(Контакт)
	
	Результат = "";
	
	Организация = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контакт, "Организация"));
	Если ЗначениеЗаполнено(Организация) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			Организация);
	КонецЕсли;		
	
	Должность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контакт, "Должность");
	Если ЗначениеЗаполнено(Должность) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			Должность);
	КонецЕсли;
	
	ТелефонКонтактногоЛица = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Контакт, 
		Справочники.ВидыКонтактнойИнформации.РабочийТелефонАдресата);
		
	Если ЗначениеЗаполнено(ТелефонКонтактногоЛица) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='Тел: '") + ТелефонКонтактногоЛица);
	КонецЕсли;
	
	АдресЭП = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Контакт, 
		Справочники.ВидыКонтактнойИнформации.EmailАдресата);
		
	Если ЗначениеЗаполнено(АдресЭП) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='E-mail: '") + АдресЭП);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеКонтактногоЛицаДляКарточки(Контакт)
	
	Результат = "";
	
	Должность = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контакт, "РольКонтактногоЛица"));
	Если ЗначениеЗаполнено(Должность) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			Должность);
	КонецЕсли;
	
	ТелефонКонтактногоЛица = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Контакт, 
		Справочники.ВидыКонтактнойИнформации.ТелефонКЛ);
		
	Если ЗначениеЗаполнено(ТелефонКонтактногоЛица) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='Тел: '") + ТелефонКонтактногоЛица);
	КонецЕсли;
	
	АдресЭП = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Контакт, 
		Справочники.ВидыКонтактнойИнформации.EmailКЛ);
		
	Если ЗначениеЗаполнено(АдресЭП) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='E-mail: '") + АдресЭП);
	КонецЕсли;
	
	//Добавление остальных полей контактной инфомрации
	Для Каждого СтрокаКИ Из Контакт.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКЛ
				ИЛИ СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКЛ
				ИЛИ СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='"+СтрокаКИ.Вид+": '") + СтрокаКИ.Представление);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеЗаказчикаДляКарточки(Контакт)
	
	Результат = "";
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контакт, "ЭтоГруппа") Тогда
		Возврат "";
	КонецЕсли;
	
	ТелефонКонтактногоЛица = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Контакт, 
		Справочники.ВидыКонтактнойИнформации.ТелефонЗаказчика);
		
	Если ЗначениеЗаполнено(ТелефонКонтактногоЛица) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='Тел: '") + ТелефонКонтактногоЛица);
	КонецЕсли;
	
	АдресЭП = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Контакт, 
		Справочники.ВидыКонтактнойИнформации.EmailЗаказчика);
		
	Если ЗначениеЗаполнено(АдресЭП) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='E-mail: '") + АдресЭП);
	КонецЕсли;
	
	//ФактическийАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
	//	Контакт, 
	//	Справочники.ВидыКонтактнойИнформации.ФактическийАдресКонтрагента);
	//	
	//Если ЗначениеЗаполнено(ФактическийАдрес) Тогда
	//	ДобавитьЗначениеКСтрокеЧерезРазделитель(
	//		Результат, 
	//		Символы.ПС, 
	//		НСтр("ru='Адрес: '") + ФактическийАдрес);
	//КонецЕсли;
	
	//Добавление остальных полей контактной инфомрации
	Для Каждого СтрокаКИ Из Контакт.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонЗаказчика
				ИЛИ СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailЗаказчика
				ИЛИ СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='"+СтрокаКИ.Вид+": '") + СтрокаКИ.Представление);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ВыборАдресатов

&НаКлиенте
Процедура ДобавитьВыделенныеКонтактыВСписокВыбранных(
	ОписаниеОповещенияПослеДобавления = Неопределено, Перетаскивание = Ложь)
	
	ПараметрыТекущегоСписка = ПараметрыТекущегоСписка(Перетаскивание);
	ВыделенныеСтроки = ПараметрыТекущегоСписка.ВыделенныеСтроки;
	ТаблицаФормы = ПараметрыТекущегоСписка.ТаблицаФормы;
	ИмяПоля_Объект = ПараметрыТекущегоСписка.ИмяПоля_Объект;
	ИмяПоля_ТипОбъекта = ПараметрыТекущегоСписка.ИмяПоля_ТипОбъекта;
	ИмяПоля_ДействующаяЗапись = ПараметрыТекущегоСписка.ИмяПоля_ДействующаяЗапись;
	ТекущиеДанные = ПараметрыТекущегоСписка.ТекущиеДанные;
	
	// Формирование списка выделенных объектов
	ВыделенныеОбъекты = Новый Массив;
	
	Если Параметры.РежимРаботыФормы = 1 Тогда
		
		ВыбранныеАдресаты.Очистить();
		
		Если ТекущиеДанные.ЭтоРаздел
			И ТекущиеДанные.Ссылка = ПредопределенноеЗначение("Справочник.АдреснаяКнига.Исполнители") Тогда
			
			ВыделеннаяСтрока = СтруктураВыделеннойСтроки();
			ВыделеннаяСтрока.Объект = ПредопределенноеЗначение("Справочник.ГруппыПользователей.ВсеПользователи");
			ВыделеннаяСтрока.ТипОбъекта = Тип("СправочникСсылка.ГруппыПользователей");
			ВыделеннаяСтрока.ЭтоАвтоподстановкаДляПроцессов = Ложь;
			ВыделеннаяСтрока.ЭтоАвтоподстановкаДляДокументов = Ложь;
			ВыделеннаяСтрока.ЭтоАвтогруппа = Ложь;
			ВыделеннаяСтрока.ЭтоРаздел = Ложь;
			ВыделенныеОбъекты.Добавить(ВыделеннаяСтрока);
			
		Иначе
			
			ДобавитьВыделенныйОбъектВМассив(
				ВыделенныеОбъекты, ТекущиеДанные, ИмяПоля_Объект, ИмяПоля_ТипОбъекта);
				
		КонецЕсли;
		
	Иначе
		Для Каждого Стр ИЗ ВыделенныеСтроки Цикл
			
			ДанныеСтроки = ТаблицаФормы.ДанныеСтроки(Стр);
			
			// Особым образом обрабатываем выбор раздела Сотрудники
			Если ДанныеСтроки.ЭтоРаздел
				И ДанныеСтроки.Ссылка = ПредопределенноеЗначение("Справочник.АдреснаяКнига.Исполнители") Тогда
				
				ВыделеннаяСтрока = СтруктураВыделеннойСтроки();
				ВыделеннаяСтрока.Объект = ПредопределенноеЗначение("Справочник.ГруппыПользователей.ВсеПользователи");
				ВыделеннаяСтрока.ТипОбъекта = Тип("СправочникСсылка.ГруппыПользователей");
				ВыделеннаяСтрока.ЭтоАвтоподстановкаДляПроцессов = Ложь;
				ВыделеннаяСтрока.ЭтоАвтоподстановкаДляДокументов = Ложь;
				ВыделеннаяСтрока.ЭтоАвтогруппа = Ложь;
				ВыделеннаяСтрока.ЭтоРаздел = Ложь;
				ВыделенныеОбъекты.Добавить(ВыделеннаяСтрока);
				
			Иначе
				ДобавитьВыделенныйОбъектВМассив(
					ВыделенныеОбъекты, ДанныеСтроки, ИмяПоля_Объект, ИмяПоля_ТипОбъекта);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	КонтактыОбъектов = КонтактыОбъектов(ВыделенныеОбъекты, Параметры);
	
	// Формирование списков контактов к добавлению
	КонтактыКДобавлению = Новый Массив;
	
	Если КонтактыОбъектов.Количество() = 1 Тогда
		
		Если Параметры.ВыбиратьЭлектронныеАдреса Тогда 
			Если КонтактыОбъектов[0].Адреса.Количество() = 0 Тогда
			
				МассивСтрок = Новый Массив;
				МассивСтрок.Добавить(НСтр("ru = 'У адресата ""'"));
				МассивСтрок.Добавить(
					Новый ФорматированнаяСтрока(
						Строка(КонтактыОбъектов[0].Контакт),,,,
						ПолучитьНавигационнуюСсылку(КонтактыОбъектов[0].Контакт)));
				МассивСтрок.Добавить(НСтр("ru = '"" нет электронной почты.'"));
				ТекстПредупреждения = Новый ФорматированнаяСтрока(МассивСтрок);
				ПоказатьПредупреждение(,ТекстПредупреждения);
				
				Возврат;
			КонецЕсли;
			
			Если КонтактыОбъектов[0].Адреса.Количество() > 1 Тогда
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Контакт", КонтактыОбъектов[0]);
				ПараметрыФормы.Вставить(
					"ВыборНесколькихАдресов", ?(Параметры.РежимРаботыФормы = 2, Истина, Ложь));
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ДобавитьКонтактыВСписокВыбранных", ЭтаФорма, ОписаниеОповещенияПослеДобавления);
				
				ОткрытьФорму(
					"Справочник.АдреснаяКнига.Форма.ВыбораАдресовКонтакта",
					ПараметрыФормы,,,,,
					ОписаниеОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		КонтактыКДобавлению.Добавить(КонтактыОбъектов[0]);
	Иначе
		Для Каждого КонтактОбъекта ИЗ КонтактыОбъектов Цикл
			
			// Контакты без электронных адресов пропускаем.
			Если КонтактОбъекта.Адреса.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КонтактыКДобавлению.Добавить(КонтактОбъекта);
		КонецЦикла;
	КонецЕсли;
	
	ДобавитьКонтактыВСписокВыбранных(КонтактыКДобавлению, ОписаниеОповещенияПослеДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыделенныеКонтактыИзСпискаВыбранных()
	
	ВыделенныеСтроки = Элементы.ВыбранныеАдресаты.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИндексВМассиве = ВыделенныеСтроки.Количество() - 1;
	
	Пока ИндексВМассиве >= 0 Цикл
		ВыделеннаяСтрока = ВыделенныеСтроки[ИндексВМассиве];
		Индекс = ВыбранныеАдресаты.Индекс(ВыбранныеАдресаты.НайтиПоИдентификатору(ВыделеннаяСтрока));
		ВыбранныеАдресаты.Удалить(Индекс);
		ИндексВМассиве = ИндексВМассиве - 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыделенныйОбъектВМассив(
	ВыделенныеОбъекты, ДанныеСтроки, ИмяПоля_Объект, ИмяПоля_ТипОбъекта)
	
	ВыделеннаяСтрока = СтруктураВыделеннойСтроки();
	
	ЗаполнитьЗначенияСвойств(ВыделеннаяСтрока, ДанныеСтроки);
	ВыделеннаяСтрока.Объект = ДанныеСтроки[ИмяПоля_Объект];
	ВыделеннаяСтрока.ТипОбъекта = ДанныеСтроки[ИмяПоля_ТипОбъекта];
	ВыделенныеОбъекты.Добавить(ВыделеннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураВыделеннойСтроки()
	
	ВыделеннаяСтрока = Новый Структура(
		"Объект, ТипОбъекта, ЭтоАвтоподстановкаДляПроцессов, ЭтоАвтоподстановкаДляДокументов, ЭтоАвтогруппа, ЭтоРаздел");
		
	Возврат ВыделеннаяСтрока;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьКонтактыВСписокВыбранных(
		КонтактыКДобавлению, ОписаниеОповещенияПослеДобавления) Экспорт
		
	Если КонтактыКДобавлению = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Контакт");
	Если Параметры.ВыбиратьЭлектронныеАдреса Тогда
		ПараметрыОтбора.Вставить("Адрес");
	КонецЕсли;
	
	ПредупреждатьОНаличииКонтактаВСписке = КонтактыКДобавлению.Количество() = 1;
	
	// Обработка списков контактов
	Для Каждого СтрКонтакт ИЗ КонтактыКДобавлению Цикл
		
		Если Параметры.КонтролироватьДублиАдресатов Тогда
		
			ПараметрыОтбора.Контакт = СтрКонтакт.Контакт;
			
			Если ПараметрыОтбора.Свойство("Адрес") Тогда
				ПараметрыОтбора.Адрес = СтрКонтакт.Адреса[0].Адрес;
			КонецЕсли;
			
			Если ВыбранныеАдресаты.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
				Если ПредупреждатьОНаличииКонтактаВСписке Тогда
					
					Если СтрКонтакт.ТипКонтакта = Тип("СправочникСсылка.Пользователи") Тогда
						ПредставлениеТипаКонтактаВЕдинственномЧисле = НСтр("ru = 'Пользователь'");
						СловоВыбран = НСтр("ru = 'выбран'");
					ИначеЕсли СтрКонтакт.ТипКонтакта = Тип("СправочникСсылка.Заказчики") Тогда
						ПредставлениеТипаКонтактаВЕдинственномЧисле = НСтр("ru = 'Заказчик'");
						СловоВыбран = НСтр("ru = 'выбран'");
					ИначеЕсли СтрКонтакт.ТипКонтакта = Тип("СправочникСсылка.ЛичныеАдресаты") Тогда
						ПредставлениеТипаКонтактаВЕдинственномЧисле = НСтр("ru = 'Личный адресат'");
						СловоВыбран = НСтр("ru = 'выбран'");
					//ИначеЕсли СтрКонтакт.ТипКонтакта = Тип("СправочникСсылка.ПолныеРоли") Тогда
					//	ПредставлениеТипаКонтактаВЕдинственномЧисле = НСтр("ru = 'Роль'");
					//	СловоВыбран = НСтр("ru = 'выбрана'");
					//ИначеЕсли СтрКонтакт.ТипКонтакта = Тип("СправочникСсылка.РабочиеГруппы") Тогда
					//	ПредставлениеТипаКонтактаВЕдинственномЧисле = НСтр("ru = 'Группа контактов'");
					//	СловоВыбран = НСтр("ru = 'выбрана'");
					//ИначеЕсли СтрКонтакт.ТипКонтакта = Тип("СправочникСсылка.СтруктураПредприятия") Тогда 
					//	ПредставлениеТипаКонтактаВЕдинственномЧисле = НСтр("ru = 'Подразделение'");
					//	СловоВыбран = НСтр("ru = 'выбрано'");
					ИначеЕсли СтрКонтакт.ТипКонтакта = Тип("СправочникСсылка.КонтактныеЛицаЗаказчиков") Тогда
						ПредставлениеТипаКонтактаВЕдинственномЧисле = НСтр("ru = 'Контактное лицо'");
						СловоВыбран = НСтр("ru = 'выбрано'");
					КонецЕсли;
					
					СтроковоеПредставлениеКонтакта = "" + СтрКонтакт.Контакт;
					
					ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 ""%2"" уже %3.'"),
						ПредставлениеТипаКонтактаВЕдинственномЧисле,
						СтроковоеПредставлениеКонтакта,
						СловоВыбран);
					
					ПоказатьПредупреждение(, ТекстПредупреждения);
					Возврат;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтр = ВыбранныеАдресаты.Добавить();
		//Если ТипЗнч(СтрКонтакт.Контакт) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		//	НоваяСтр.Контакт = ПолнаяРольБезОбъектаАдресации(СтрКонтакт.Контакт);
		//Иначе
			НоваяСтр.Контакт = СтрКонтакт.Контакт;
		//КонецЕсли;
		НоваяСтр.Адрес = СтрКонтакт.Адреса[0].Адрес;
		НоваяСтр.Представление = СтрКонтакт.Адреса[0].Представление;
		НоваяСтр.Группа = ГруппаПоУмолчанию;
		НоваяСтр.ПолноеПредставление = СтрКонтакт.Адреса[0].ПолноеПредставление;
		НоваяСтр.НомерКартинки = СтрКонтакт.НомерКартинки;
		
	КонецЦикла;
	
	ВыбранныеАдресаты.Сортировать("НомерКартинки Возр, ПолноеПредставление Возр");
	
	Если ОписаниеОповещенияПослеДобавления <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеДобавления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАвтоподстановкиВСписокВыбранных(
	СписокАвтоподстановок, ОписаниеОповещенияПослеДобавления) Экспорт
	
	Если СписокАвтоподстановок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтактыКДобавлению = Новый Массив;
	
	Для Каждого Автоподстановка Из СписокАвтоподстановок Цикл
		Если Автоподстановка.Пометка Тогда
			СтруктураКонтакта = СтруктураКонтакта();
			СтруктураКонтакта.Контакт = Автоподстановка.Значение;
			СтруктураКонтакта.НомерКартинки = НомерКартинкиКонтакта(Автоподстановка.Значение);
			СтруктураАдресаКонтакта = СтруктураАдресаКонтакта();
			СтруктураАдресаКонтакта.ПолноеПредставление = Автоподстановка.Значение;
			СтруктураКонтакта.Адреса.Добавить(СтруктураАдресаКонтакта);
			КонтактыКДобавлению.Добавить(СтруктураКонтакта);
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьКонтактыВСписокВыбранных(КонтактыКДобавлению, ОписаниеОповещенияПослеДобавления);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПолучениеКонтактовОбъектов

&НаСервереБезКонтекста
Функция КонтактыОбъектов(Знач ВыделенныеОбъекты, Знач Параметры)
	
	РазворачиватьГруппыОбъектов = 
		Параметры.РежимРаботыФормы = 2;
		
	АвтоподстановкиДляПроцессов = Новый Массив;
		//ШаблоныБизнесПроцессов.ПолучитьСписокДоступныхФункций(Параметры.ИменаПредметов.ВыгрузитьЗначения());
	
	КоличествоИменПредметов = Параметры.ИменаПредметов.Количество();
	
	ПредставленияАвтогрупп = ПолучитьСписокПредставленийАвтогрупп();
	
	// Разворачиваем группы объектов.
	КонтактыОбъектов = Новый Массив;
	
	Для Каждого Стр Из ВыделенныеОбъекты Цикл
		
		// Разделы адресной книги не обрабатываем
		Если Стр.ЭтоРаздел Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавляем автоподстановку процессов, если она одна.
		// Несколько автоподстановок может быть получено для нескольких предметов
		// и этот случай обрабатывается отдельно.
		Если Стр.ЭтоАвтоподстановкаДляПроцессов Тогда
			АвтоподстановкиСУчетомПредметов = Новый Массив;
			Для Каждого АвтоподстановкаДляПроцесса Из АвтоподстановкиДляПроцессов Цикл
				Если Найти(АвтоподстановкаДляПроцесса.Представление, Стр.Объект) <> 0 Тогда
					АвтоподстановкиСУчетомПредметов.Добавить(АвтоподстановкаДляПроцесса.Представление);
				КонецЕсли;
			КонецЦикла;
			Если АвтоподстановкиСУчетомПредметов.Количество() = 1 Тогда
				НайденнаяАвтоподстановка = АвтоподстановкиСУчетомПредметов[0];
				АвтоподстановкаЗависитОтПредмета = Найти(НайденнаяАвтоподстановка, ".") <> 0;
				Если Не АвтоподстановкаЗависитОтПредмета
					Или (АвтоподстановкаЗависитОтПредмета И КоличествоИменПредметов = 1) Тогда
					
					КонтактыОбъектов.Добавить(НайденнаяАвтоподстановка);
				КонецЕсли;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// Автоподстановки для документов добавляем всегда.
		Если Стр.ЭтоАвтоподстановкаДляДокументов Тогда
			КонтактыОбъектов.Добавить(Стр.Объект);
			Продолжить;
		КонецЕсли;
		
		Если РазворачиватьГруппыОбъектов Тогда // Если используется множественный выбор
			Если Стр.ЭтоАвтогруппа Тогда
				ДобавитьАвтогруппуВМассивКонтактов(Стр.Объект, КонтактыОбъектов);
			//ИначеЕсли Стр.ТипОбъекта = Тип("СправочникСсылка.ГруппыКонтактовПользователей") Тогда
			//	ОбъектыПапкиВИзбранном = ОбъектыПапкиВИзбранном(Стр.Объект);
			//	Для Каждого ОбъектПапкиВИзбранном Из ОбъектыПапкиВИзбранном Цикл
			//		ТипОбъектаПапкиВИзбранном = ТипЗнч(ОбъектПапкиВИзбранном);
			//		Если ТипОбъектаПапкиВИзбранном = Тип("Строка")
			//			И ПредставленияАвтогрупп.Найти(ОбъектПапкиВИзбранном) <> Неопределено Тогда
			//			
			//			ДобавитьАвтогруппуВМассивКонтактов(ОбъектПапкиВИзбранном, КонтактыОбъектов);
			//		Иначе
			//			ДобавитьОбъектВМассивКонтактов(
			//				ОбъектПапкиВИзбранном, ТипОбъектаПапкиВИзбранном, КонтактыОбъектов, Параметры);
			//		КонецЕсли;
			//	КонецЦикла;
			Иначе
				ДобавитьОбъектВМассивКонтактов(Стр.Объект, Стр.ТипОбъекта, КонтактыОбъектов, Параметры);
			КонецЕсли;
		Иначе
			Если Стр.ЭтоАвтогруппа Тогда
				Продолжить;
			Иначе
				Если КонтактыОбъектов.Найти(Стр.Объект) = Неопределено Тогда
					КонтактыОбъектов.Добавить(Стр.Объект);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ДопустимыеТипыДляВыбора = Новый Массив;
	
	Если Параметры.ОтображатьСотрудников Тогда
		ДопустимыеТипыДляВыбора.Добавить(Тип("СправочникСсылка.Пользователи"));
	КонецЕсли;
	
	Если Параметры.ОтображатьКонтрагентов Тогда
		Если Параметры.ВыбиратьЗаказчиков Тогда
			ДопустимыеТипыДляВыбора.Добавить(Тип("СправочникСсылка.Заказчики"));
		КонецЕсли;
		ДопустимыеТипыДляВыбора.Добавить(Тип("СправочникСсылка.КонтактныеЛицаЗаказчиков"));
	КонецЕсли;
	
	Если Параметры.ОтображатьЛичныхАдресатов Тогда
		ДопустимыеТипыДляВыбора.Добавить(Тип("СправочникСсылка.ЛичныеАдресаты"));
	КонецЕсли;
	
	Если Параметры.ВыбиратьГруппыПользователей Тогда
		ДопустимыеТипыДляВыбора.Добавить(Тип("СправочникСсылка.ГруппыПользователей"));
	КонецЕсли;
	
	Если Параметры.ВыбиратьЭлектронныеАдреса
		Или Параметры.ОтображатьАвтоподстановкиПоДокументам
		Или Параметры.ОтображатьАвтоподстановкиПоПроцессам Тогда
		
		ДопустимыеТипыДляВыбора.Добавить(Тип("Строка"));
	КонецЕсли;
	
	// Формируем массив адресатов с описанием
	КонтактыОбъектовСОписанием = Новый Массив;
	
	ПроверятьВСпискеОтбора = Параметры.СписокОтбора.Количество();
	
	Для Каждого Контакт ИЗ КонтактыОбъектов Цикл
		
		ТипКонтакта = ТипЗнч(Контакт);
		
		Если ДопустимыеТипыДляВыбора.Найти(ТипКонтакта) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПроверятьВСпискеОтбора Тогда
			Если Параметры.СписокОтбора.НайтиПоЗначению(Контакт) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Исключаем группы заказчиков.
		//Если ТипКонтакта = Тип("СправочникСсылка.Заказчики")
		//	И ЗначениеЗаполнено(Контакт) Тогда
		//	Продолжить;
		//КонецЕсли;
		
		ЭтоАдресЭлектроннойПочты = Ложь;
		Если ТипКонтакта = Тип("Строка") Тогда
			ЭтоАдресЭлектроннойПочты = РаботаСоСтроками.ЭтоАдресЭлектроннойПочты(Контакт);
			Если Не Параметры.ВыбиратьЭлектронныеАдреса
				И ЭтоАдресЭлектроннойПочты Тогда
				
				Продолжить;
			КонецЕсли;
			Если Параметры.ВыбиратьЭлектронныеАдреса
				И Не ЭтоАдресЭлектроннойПочты Тогда
				
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураКонтакта = СтруктураКонтакта();
		СтруктураКонтакта.Контакт = Контакт;
		СтруктураКонтакта.НомерКартинки = НомерКартинкиКонтакта(Контакт);
		СтруктураКонтакта.ТипКонтакта = ТипКонтакта;
		
		Если Параметры.ВыбиратьЭлектронныеАдреса Тогда
			
			Если ЭтоАдресЭлектроннойПочты Тогда
				СтруктураАдресаКонтакта = СтруктураАдресаКонтакта();
				СтруктураАдресаКонтакта.Адрес = Контакт;
				СтруктураАдресаКонтакта.ПолноеПредставление = ПолучитьПолноеПредставлениеАдресата(Контакт, "");
				СтруктураКонтакта.Адреса.Добавить(СтруктураАдресаКонтакта);
				СтруктураКонтакта.Контакт = "";
			ИначеЕсли Контакт.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация") <> Неопределено Тогда
				
				АдресаКонтакта = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(
				Контакт, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				АдресаКонтакта.Свернуть("Значение");
				Для Каждого АдресКонтакта ИЗ АдресаКонтакта Цикл
					СтруктураАдресаКонтакта = СтруктураАдресаКонтакта();
					СтруктураАдресаКонтакта.Адрес = АдресКонтакта.Значение;
					СтруктураАдресаКонтакта.Представление = 
					ВстроеннаяПочтаСервер.ПолучитьПочтовоеПредставлениеКонтакта(Контакт, АдресКонтакта.Значение);
					СтруктураАдресаКонтакта.ПолноеПредставление = 
					ПолучитьПолноеПредставлениеАдресата(АдресКонтакта.Значение, Контакт);
					
					СтруктураКонтакта.Адреса.Добавить(СтруктураАдресаКонтакта);
				КонецЦикла;
			Иначе
				СтруктураАдресаКонтакта = СтруктураАдресаКонтакта();
				СтруктураАдресаКонтакта.ПолноеПредставление = ПолучитьПолноеПредставлениеАдресата("", Контакт);
				СтруктураКонтакта.Адреса.Добавить(СтруктураАдресаКонтакта);
			КонецЕсли;
		Иначе
			СтруктураАдресаКонтакта = СтруктураАдресаКонтакта();
			СтруктураАдресаКонтакта.ПолноеПредставление = ПолучитьПолноеПредставлениеАдресата("", Контакт);
			СтруктураКонтакта.Адреса.Добавить(СтруктураАдресаКонтакта);
		КонецЕсли;
		
		КонтактыОбъектовСОписанием.Добавить(СтруктураКонтакта);
	КонецЦикла;
	
	Возврат КонтактыОбъектовСОписанием;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьАвтогруппуВМассивКонтактов(Объект, Контакты)
	
	КонтактыАвтоСписка = РаботаСАдреснойКнигой.ПолучитьЗначениеАвтоподстановки(Объект);
	
	Если КонтактыАвтоСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Контакт ИЗ КонтактыАвтоСписка Цикл
		Если Контакты.Найти(Контакт) = Неопределено Тогда
			Контакты.Добавить(Контакт);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьОбъектВМассивКонтактов(Объект, ТипОбъекта, Контакты, Параметры)
	
	ВыбиратьКонтейнерыПользователей = Параметры.ВыбиратьГруппыПользователей;
	
	//Если ТипОбъекта = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
	//	Если ВыбиратьКонтейнерыПользователей Тогда
	//		Если Контакты.Найти(Объект) = Неопределено Тогда
	//			Контакты.Добавить(Объект);
	//		КонецЕсли;
	//	Иначе
	//		ПользователиПодразделения = ПользователиПоОбъекту(
	//			Объект, Справочники.АдреснаяКнига.ПоСтруктуреПредприятия);
	//		Для Каждого ПользовательПодразделения ИЗ ПользователиПодразделения Цикл
	//			Если Контакты.Найти(ПользовательПодразделения) = Неопределено Тогда
	//				Контакты.Добавить(ПользовательПодразделения);
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	Если ТипОбъекта = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		ПользователиГруппы = ПользователиПоОбъекту(
			Объект, Справочники.АдреснаяКнига.Исполнители);
		Для Каждого ПользовательГруппы ИЗ ПользователиГруппы Цикл
			Если Контакты.Найти(ПользовательГруппы) = Неопределено Тогда
				Контакты.Добавить(ПользовательГруппы);
			КонецЕсли;
		КонецЦикла;
	//Если ТипОбъекта = Тип("СправочникСсылка.Проекты") Тогда
	//	ПользователиПроектов = ПользователиПоОбъекту(
	//		Объект, Справочники.АдреснаяКнига.ПоПроектам);
	//	Для Каждого ПользовательПроекта ИЗ ПользователиПроектов Цикл
	//		Если Контакты.Найти(ПользовательМероприятия) = Неопределено Тогда
	//			Контакты.Добавить(ПользовательПроекта);
	//		КонецЕсли;
	//	КонецЦикла;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Заказчики") Тогда
		Если Параметры.ВыбиратьЗаказчиков Тогда
			//Заказчики = ПодчиненныеКонтрагенты(Объект);
			//
			//Для Каждого Заказчик ИЗ Заказчики Цикл
			//	Если Контакты.Найти(Заказчик) = Неопределено Тогда
					Контакты.Добавить(Объект);
			//	КонецЕсли;
			//КонецЦикла;
		КонецЕсли;
		
		КонтактныеЛицаКонтрагента = КонтактныеЛицаКонтрагента(Объект);
		Для Каждого КонтактноеЛицо ИЗ КонтактныеЛицаКонтрагента Цикл
			Если Контакты.Найти(КонтактноеЛицо) = Неопределено Тогда
				Контакты.Добавить(КонтактноеЛицо);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ГруппыЛичныхАдресатов") Тогда
		ЛичныеАдресатыГруппы = ЛичныеАдресатыГруппы(Объект);
		Для Каждого ЛичныеАдресат ИЗ ЛичныеАдресатыГруппы Цикл
			Если Контакты.Найти(ЛичныеАдресат) = Неопределено Тогда
				Контакты.Добавить(ЛичныеАдресат);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если Контакты.Найти(Объект) = Неопределено Тогда
			Контакты.Добавить(Объект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПользователиПоОбъекту(Объект, РазделАдреснойКниги)
	
	СсылкаНаОбъектВАдреснойКниге = 
		Справочники.АдреснаяКнига.ПолучитьСсылкуНаОбъектВАдреснойКниге(
			Объект, ,РазделАдреснойКниги);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АдреснаяКнига.Объект
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.Ссылка В ИЕРАРХИИ(&СсылкаНаОбъектВАдреснойКниге)
		|	И АдреснаяКнига.ОтображатьВАдреснойКниге
		|	И АдреснаяКнига.Объект ССЫЛКА Справочник.Пользователи
		|
		|СГРУППИРОВАТЬ ПО
		|	АдреснаяКнига.Объект";
		
	Запрос.УстановитьПараметр("СсылкаНаОбъектВАдреснойКниге", СсылкаНаОбъектВАдреснойКниге);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодчиненныеКонтрагенты(Заказчик)
	
	СсылкаНаОбъектВАдреснойКниге = 
		Справочники.АдреснаяКнига.ПолучитьСсылкуНаОбъектВАдреснойКниге(
			Заказчик, , Справочники.АдреснаяКнига.Заказчики);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АдреснаяКнига.Объект
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.Ссылка В ИЕРАРХИИ(&СсылкаНаОбъектВАдреснойКниге)
		|	И АдреснаяКнига.ОтображатьВАдреснойКниге
		|	И АдреснаяКнига.Объект ССЫЛКА Справочник.Заказчики
		|	И АдреснаяКнига.ПорядокОбъектаВСписке = 2";
	Запрос.УстановитьПараметр("СсылкаНаОбъектВАдреснойКниге", СсылкаНаОбъектВАдреснойКниге);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
КонецФункции

&НаСервереБезКонтекста
Функция КонтактныеЛицаКонтрагента(Контрагент)
	
	СсылкаНаОбъектВАдреснойКниге = 
		Справочники.АдреснаяКнига.ПолучитьСсылкуНаОбъектВАдреснойКниге(
			Контрагент, , Справочники.АдреснаяКнига.Заказчики);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АдреснаяКнига.Объект
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.Ссылка В ИЕРАРХИИ(&СсылкаНаОбъектВАдреснойКниге)
		|	И АдреснаяКнига.ОтображатьВАдреснойКниге
		|	И АдреснаяКнига.Объект ССЫЛКА Справочник.КонтактныеЛицаЗаказчиков";
	Запрос.УстановитьПараметр("СсылкаНаОбъектВАдреснойКниге", СсылкаНаОбъектВАдреснойКниге);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
КонецФункции

&НаСервереБезКонтекста
Функция ЛичныеАдресатыГруппы(Группа)
	
	СсылкаНаОбъектВАдреснойКниге = 
		Справочники.АдреснаяКнига.ПолучитьСсылкуНаОбъектВАдреснойКниге(
			Группа, , Справочники.АдреснаяКнига.ЛичныеАдресаты);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АдреснаяКнига.Объект
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.Ссылка В ИЕРАРХИИ(&СсылкаНаОбъектВАдреснойКниге)
		|	И АдреснаяКнига.ОтображатьВАдреснойКниге
		|	И АдреснаяКнига.Объект ССЫЛКА Справочник.ЛичныеАдресаты";
	Запрос.УстановитьПараметр("СсылкаНаОбъектВАдреснойКниге", СсылкаНаОбъектВАдреснойКниге);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураКонтакта()
	
	СтруктураКонтакта = Новый Структура;
	СтруктураКонтакта.Вставить("Контакт");
	СтруктураКонтакта.Вставить("Адреса", Новый Массив);
	СтруктураКонтакта.Вставить("НомерКартинки");
	СтруктураКонтакта.Вставить("ТипКонтакта");
	СтруктураКонтакта.Вставить("Представление");
	
	Возврат СтруктураКонтакта;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураАдресаКонтакта()
	
	Возврат Новый Структура("Адрес, Представление, ПолноеПредставление");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПолноеПредставлениеАдресата(Адрес, Контакт)
	
	Представление = "";
	Разделитель = "";
	Если ЗначениеЗаполнено(Контакт) Тогда
		Представление = Строка(Контакт);
		Разделитель = " ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Адрес) Тогда
		Представление = Представление + Разделитель + "<" + Строка(Адрес) + ">";
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НомерКартинкиКонтакта(Контакт)
	
	НомерКартинки = 8;
	
	ТипКонтакта = ТипЗнч(Контакт);
	//Если ТипКонтакта = Тип("СправочникСсылка.РабочиеГруппы")
	//	Или ТипКонтакта = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
	//	
	//	НомерКартинки = 0;
	Если ТипКонтакта = Тип("СправочникСсылка.Заказчики") Тогда
		НомерКартинки = 3;
	ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.Пользователи") Тогда
		НомерКартинки = 5;
	ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.ЛичныеАдресаты")
		ИЛИ ТипКонтакта = Тип("СправочникСсылка.КонтактныеЛицаЗаказчиков") Тогда
			
		НомерКартинки = 6;
	//ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.Организации") Тогда
	//	НомерКартинки = 9;	
	КонецЕсли;
	
	Возврат НомерКартинки;
	
КонецФункции

#КонецОбласти

