
&НаКлиенте
Перем ПолноеИмяПеретаскиваемогоФайла;

&НаКлиенте
Перем ТекущееПоложениеНачало; // позиция начала выделения в блоке текста в HTML письме

&НаКлиенте
Перем ТекущееПоложениеКонец;  // позиция конца выделения в блоке текста в HTML письме

&НаКлиенте
Перем ТекущийНомерУзла; // номер текущего узла в HTML письме

&НаКлиенте
Перем ГоризонтальнаяПрокруткаHTML; // положение гор прокрутки в HTML письме

&НаКлиенте
Перем ВертикальнаяПрокруткаHTML; // положение вертикальной прокрутки в HTML письме


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("ПараметрыСообщения") Тогда
		ПараметрыСообщения = Параметры.ПараметрыСообщения;
	КонецЕсли;
	
	Элементы.ПолноеИмяТипаПараметраВводаНаОсновании.СписокВыбора.Добавить("Общий", НСтр("ru='Общий'"));
	НастройкиШаблоновСообщений = ШаблоныСообщенийСлужебныйПовтИсп.ПриОпределенииНастроек();
	Для каждого ПредметШаблона Из НастройкиШаблоновСообщений.ПредметыШаблонов Цикл
		Элементы.ПолноеИмяТипаПараметраВводаНаОсновании.СписокВыбора.Добавить(ПредметШаблона.Имя, ПредметШаблона.Представление);
	КонецЦикла;
	
	Если Параметры.Ключ = Неопределено Или Параметры.Ключ.Пустая() Тогда
		
		Если Параметры.ЗначениеКопирования = Справочники.ШаблоныПисем.ПустаяСсылка() Тогда
			
			ИнициализироватьНовыйШаблонСообщений(НастройкиШаблоновСообщений);
			
		Иначе
			
			Для каждого ПараметрыЗначениеКопирования Из Параметры.ЗначениеКопирования.Параметры Цикл
				Отбор = Новый Структура("ИмяПараметра", ПараметрыЗначениеКопирования.ИмяПараметра);
				НайденныеСтроки = Объект.Параметры.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденныеСтроки[0].ОписаниеТипа = ПараметрыЗначениеКопирования.ТипПараметра.Получить();
				КонецЕсли
			КонецЦикла;
			
			УстановитьТекстШаблона(Объект, СкопироватьВложенияИзИсточника());
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПисьмо;
	ЗагрузитьПолучателей();
	
	Если Получатели.Количество() <> 0 Тогда
		
		ТекущиеДанные = Получатели[0];
		ТекущийКонтакт = Получатели[0].Контакт;
		
		ТекущийАдресат = ТекущиеДанные.Адресат;
		ТекущийКонтакт = ТекущиеДанные.Контакт;
		ТекущийАдресатИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		ТекущийКонтактЗагружен = ТекущиеДанные.КонтактЗагружен;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Получатели.Количество() = 0 Тогда
		Элементы.Получатели.АктивизироватьПоУмолчанию = Истина;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Тема) Тогда
		Элементы.ТемаПисьма.АктивизироватьПоУмолчанию = Истина;
	Иначе
		Элементы.ТелоПисьмаВHTML.АктивизироватьПоУмолчанию = Истина;
	КонецЕсли;
	
	ОтображениеЭлементовФормы(НастройкиШаблоновСообщений.ФорматПисьма);
	
	ИнициализироватьФорматыСохранения();
	СформироватьСписокРеквизитовИПечатныхФорм();
	
	ИспользоватьПроизвольныеПараметры = НастройкиШаблоновСообщений.ИспользоватьПроизвольныеПараметры;
	
	Если НЕ ИспользоватьПроизвольныеПараметры Тогда
		Элементы.ГруппаРеквизитыКоманднаяПанель.Видимость = Ложь;
		Элементы.РеквизитыКонтекстноеМенюДобавить.Видимость = Ложь;
		Элементы.РеквизитыКонтекстноеМенюИзменить.Видимость = Ложь;
		Элементы.РеквизитыКонтекстноеМенюУдалить.Видимость = Ложь;
	КонецЕсли;
	
	//Если Параметры.Свойство("ВладелецШаблона") Тогда
	//	Элементы.ГруппаНазначение.Видимость                = Ложь;
	//	Элементы.ГруппаДоступ.Видимость                    = Ложь;
	//	Элементы.ФормаГруппаСообщениеФормируется.Видимость = Ложь;
	//	Элементы.Назначение.Видимость                      = Ложь;
	//КонецЕсли;
	
	// Определяем список выбора типа предмета
	СписокВыбора.Добавить(ПредопределенноеЗначение("Документ.Задачи.ПустаяСсылка"), НСтр("ru = 'Задача'"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка"), НСтр("ru = 'Файл'"));
	
	// Отображение шрифта
	НастройкаШрифтОтображения = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ШрифтОтображения");
	НастройкаОтображатьДругиеШрифтыВПисьмах = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ОтображатьДругиеШрифтыВПисьмах");
	ШрифтОтображения = НастройкаШрифтОтображения;
	
	УчетнаяЗаписьПроверитьПараметрыПочты();
	ЗаполнитьСписокВыбора();
	
	Если ПриложениеЯвляетсяВебКлиентом Тогда
		Элементы.ФормаПроверитьОрфографию.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УстановитьТекстШаблона(ТекущийОбъект);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		Если ВыбранныеФорматыСохранения.Количество() = 0 Тогда
			Для Каждого ФорматСохранения Из МодульУправлениеПечатью.ФорматыСохраненияТабличногоДокумента() Цикл
				ВыбранныеФорматыСохранения.Добавить(ФорматСохранения.ТипФайлаТабличногоДокумента, Строка(ФорматСохранения.Ссылка), Ложь, ФорматСохранения.Картинка);
			КонецЦикла;
		КонецЕсли;

		СписокФорматов = ТекущийОбъект.ФорматВложений.Получить();
		Если СписокФорматов <> Неопределено Тогда
			ВыбранныеФорматыСохранения.ЗаполнитьПометки(Ложь);
			Для Каждого ЭлементСписка Из СписокФорматов Цикл
				НайденноеЗначение = ВыбранныеФорматыСохранения.НайтиПоЗначению(ЭлементСписка.Значение);
				Если НайденноеЗначение <> Неопределено Тогда
					НайденноеЗначение.Пометка = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПроизвольныеПараметрыИзОбъекта(ТекущийОбъект);
	
	Если ПустаяСтрока(Объект.ПолноеИмяТипаПараметраВводаНаОсновании) Тогда
		Объект.Назначение = НСтр("ru='Общий'");
		Объект.ПредназначенДляВводаНаОсновании = Ложь;
		Объект.ПолноеИмяТипаПараметраВводаНаОсновании = НСтр("ru='Общий'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ЗначениеЗаполнено(Объект.Наименование) И ЗначениеЗаполнено(Объект.Тема) Тогда 
		Объект.Наименование = СокрЛП(Объект.Тема);
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ПоместитьФайлыИзЛокальнойФСВоВременноеХранилище(Вложения, УникальныйИдентификатор, Отказ);
	КонецЕсли;
	
	Если НЕ Объект.ПредназначенДляВводаНаОсновании Тогда
		Объект.ПолноеИмяТипаПараметраВводаНаОсновании = "";
		Объект.Назначение = НСтр("ru='Общий'");
	КонецЕсли;
	
	Если Объект.Пользователи.Количество() = 0 И Не Объект.Автор.Пустая() Тогда 
		Объект.ОбщийШаблон = Ложь;
	Иначе 
		Объект.ОбщийШаблон = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РезультатПроверкиШаблоны = РезультатПроверкиШаблоны();
	Если ЗначениеЗаполнено(РезультатПроверкиШаблоны) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Шаблон сообщения не может быть записан.'")
			+ Символы.ПС + РезультатПроверкиШаблоны);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТекущийОбъект.ПредназначенДляSMS Тогда
		ТекущийОбъект.ТекстШаблонаSMS = ТелоСообщенияОбычныйТекст.ПолучитьТекст();
		ТекущийОбъект.ФорматВложений = Неопределено;
	Иначе
		Если ТекущийОбъект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
			ТекстВHTML = "";
			ВложенияВHTML = Новый Структура();
			ТелоПисьмаВHTML.ПолучитьHTML(ТекстВHTML, ВложенияВHTML);
			ТекущийОбъект.ТекстШаблонаПисьмаHTML = ТекстВHTML;
			ТекущийОбъект.ТекстШаблонаПисьма = ТелоПисьмаВHTML.ПолучитьТекст();
		Иначе
			ТекущийОбъект.ТекстШаблонаПисьма = ТелоСообщенияОбычныйТекст.ПолучитьТекст();
			Если ПустаяСтрока(ТекущийОбъект.ТекстШаблонаПисьма) Тогда
				ТекущийОбъект.ТекстШаблонаПисьма = ТелоПисьмаВHTML.ПолучитьТекст();
			КонецЕсли;
			ТекущийОбъект.ТекстШаблонаПисьмаHTML = ТекущийОбъект.ТекстШаблонаПисьма;
		КонецЕсли;
		
		СписокФорматов = Новый СписокЗначений;
		Для каждого ЭлементСписка Из ВыбранныеФорматыСохранения Цикл
			Если ЭлементСписка.Пометка Тогда
				ЗаполнитьЗначенияСвойств(СписокФорматов.Добавить(), ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
		ТекущийОбъект.ФорматВложений = Новый ХранилищеЗначения(СписокФорматов);
		
	КонецЕсли;
	
	ТаблицаСоответствийИменВложенийИдентификаторам = Новый СписокЗначений;
	СтруктураВложений = Новый Структура;
	ТелоПисьмаВHTML.ПолучитьHTML(ТекущийОбъект.ТекстШаблонаПисьмаHTML, СтруктураВложений);
	Для каждого Вложение Из СтруктураВложений Цикл
		ТаблицаСоответствийИменВложенийИдентификаторам.Добавить(Вложение.Ключ, Новый УникальныйИдентификатор,, Вложение.Значение);
	КонецЦикла;
	
	ПараметрыЗаписи.Вставить("ВложенияHTML", ТаблицаСоответствийИменВложенийИдентификаторам);
	
	Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
			
			ДокументHTML = ШаблоныСообщенийСлужебный.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекущийОбъект.ТекстШаблонаПисьмаHTML);
			ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML( ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам);
			ТекущийОбъект.ТекстШаблонаПисьмаHTML = ШаблоныСообщенийСлужебный.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			
	КонецЕсли;
	
	ТекущийОбъект.ПечатныеФормыИВложения.Очистить();
	Для каждого Вложение Из Вложения Цикл
		Если Вложение.Выбрано = 1 Тогда
			НоваяСтрока = ТекущийОбъект.ПечатныеФормыИВложения.Добавить();
			НоваяСтрока.Идентификатор = Вложение.Идентификатор;
			НоваяСтрока.Имя = Вложение.ИмяПараметра;
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.Параметры.Очистить();
	Для каждого ПараметрШаблона Из Объект.Параметры Цикл
		НоваяСтрока = ТекущийОбъект.Параметры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрШаблона);
		НоваяСтрока.ТипПараметра = Новый ХранилищеЗначения(ПараметрШаблона.ОписаниеТипа);
	КонецЦикла;
	
	ПараметрыЗаписи.Вставить("ЭтоНовый", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	ТекущийОбъект.ПолучателиПисьма.Очистить();
	ТекущийОбъект.ПолучателиКопий.Очистить();
	ТекущийОбъект.ПолучателиСкрытыхКопий.Очистить();
	ТекущийОбъект.ПолучателиОтвета.Очистить();
	ТекущийОбъект.ГруппыПолучателей.Очистить();
	
	СчетчикСообщенийПользователю = 0;
	Для Счетчик = 0 По Получатели.Количество() - 1 Цикл
		
		Строка = Получатели[Счетчик];
		
		Если Не ЗначениеЗаполнено(Строка.Представление)Тогда
			Продолжить;
		КонецЕсли;
		
		// дозаполняем адрес и адресата (если руками введен текст)
		Если Не ЗначениеЗаполнено(Строка.Адресат) Тогда
			
			// Пытаемся получить адрес электронной почты.
			РазложенныйАдрес = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Строка.Представление);
			
			Если ПустаяСтрока(РазложенныйАдрес.Адрес) Тогда
				
				Попытка
					// Если адрес электронной почты получить не удалось, пытаемся получить адрес 1С-почты.
					ПочтовыеАдреса = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Строка.Представление);
					Если ПочтовыеАдреса.Количество() <> 0 Тогда
						РазложенныйАдрес.Адрес = ПочтовыеАдреса[0].Адрес;
					КонецЕсли;
				Исключение
					// Адреса 1С-почты может не быть, ничего здесь не предпринимаем.
				КонецПопытки;
				
			КонецЕсли;
			
			Если РаботаСоСтроками.ЭтоАдресЭлектроннойПочты(РазложенныйАдрес.Адрес) Тогда
				Строка.Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(РазложенныйАдрес.Адрес, Строка.Представление);
				Строка.Адрес = РазложенныйАдрес.Адрес;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Счетчик = 0 По Получатели.Количество() - 1 Цикл
		
		Строка = Получатели[Счетчик];
		
		Если ЗначениеЗаполнено(Строка.ГруппаПользователя) Тогда
			НоваяСтрока = ТекущийОбъект.ГруппыПолучателей.Добавить();
			НоваяСтрока.Группа = Строка.ГруппаПользователя;
			НоваяСтрока.ТипАдреса = Строка.ТипАдреса;
			НоваяСтрока.ПорядковыйНомер = Счетчик + 1;
			Продолжить;
			
		ИначеЕсли Не ЗначениеЗаполнено(Строка.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.ТипАдреса = НСтр("ru = 'Кому:'") Тогда
			НоваяСтрока = ТекущийОбъект.ПолучателиПисьма.Добавить();
		КонецЕсли;
		Если Строка.ТипАдреса = НСтр("ru = 'Копия:'") Тогда
			НоваяСтрока = ТекущийОбъект.ПолучателиКопий.Добавить();
		КонецЕсли;
		Если Строка.ТипАдреса = НСтр("ru = 'Скрытая копия:'") Тогда
			НоваяСтрока = ТекущийОбъект.ПолучателиСкрытыхКопий.Добавить();
		КонецЕсли;
		Если Строка.ТипАдреса = НСтр("ru = 'Обратный адрес:'") Тогда
			НоваяСтрока = ТекущийОбъект.ПолучателиОтвета.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Адресат = Строка.Адресат;
		НоваяСтрока.ПорядковыйНомер = Счетчик + 1;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийОбъект.ПолучателиПисьмаСтрокой =
		ВстроеннаяПочтаСервер.ТаблицаПолучателейВСтроку(ТекущийОбъект.ПолучателиПисьма);
		
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Добавим в список удаленных вложений ранее сохраненные картинки, отображаемые в теле форматированного документа.
	
	СписокФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ТекущийОбъект.Ссылка, СписокФайлов);
	Для каждого Вложение Из СписокФайлов Цикл
		Если ЗначениеЗаполнено(Вложение.ИДФайлаЭлектронногоПисьма) Тогда
			УдалитьПрисоединенныйФайл(Вложение.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	СохранитьКартинкиФорматированногоДокументаКакПрисоединенныеФайлы(ТекущийОбъект.Ссылка, 
		ТекущийОбъект.ТипТекста, ПараметрыЗаписи.ВложенияHTML, УникальныйИдентификатор);
	
	Индекс = Вложения.Количество() - 1;
	Пока Индекс >= 0 Цикл
		СтрокаТаблицыВложений = Вложения.Получить(Индекс);
		Если СтрокаТаблицыВложений.Статус = "ВнешнийУдаляемый" Тогда
			Если Не СтрокаТаблицыВложений.Ссылка.Пустая() Тогда
				УдалитьПрисоединенныйФайл(СтрокаТаблицыВложений.Ссылка);
			КонецЕсли;
			Если ПустаяСтрока(СтрокаТаблицыВложений.Реквизит) Тогда
				Вложения.Удалить(Индекс)
			Иначе
				СтрокаТаблицыВложений.Статус  = "";
				СтрокаТаблицыВложений.Выбрано = 2;
			КонецЕсли;
		ИначеЕсли СтрокаТаблицыВложений.Статус = "ВнешнийНовый" Тогда
			ИмяФайла = ?(ПустаяСтрока(СтрокаТаблицыВложений.Реквизит), СтрокаТаблицыВложений.Представление, СтрокаТаблицыВложений.Реквизит);
			СсылкаНаФайл = ШаблоныСообщенийСлужебный.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(ТекущийОбъект.Ссылка, СтрокаТаблицыВложений, ИмяФайла, 0);
			СтрокаТаблицыВложений.Ссылка = СсылкаНаФайл;
			СтрокаТаблицыВложений.Статус ="ВнешнийПрисоединенный";
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьПроизвольныеПараметрыИзОбъекта(ТекущийОбъект);
	ОтображениеЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ШаблоныСообщений", Объект.Ссылка, ЭтотОбъект);
	
	Если ПустаяСтрока(Объект.ПолноеИмяТипаПараметраВводаНаОсновании) Тогда
		Объект.Назначение = НСтр("ru='Общий'");
		Объект.ПредназначенДляВводаНаОсновании = Ложь;
		Объект.ПолноеИмяТипаПараметраВводаНаОсновании = НСтр("ru='Общий'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВыборФормата();
	СформироватьПредставлениеВыбранныхФорматов();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" И ТипЗнч(Источник) = Тип("СправочникСсылка.Файлы") Тогда
		ОбновитьСписокПечатныхФорм();
	КонецЕсли;
	
	Если ИмяСобытия = "ВставкаПолучателейПисьма_Добавить" И Источник = УникальныйИдентификатор Тогда 
		
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда 
			Результат = Параметр.МассивРезультата;
			Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() <> 0 Тогда
				ТипАдреса = Результат[0].ТипПолучателя;
				
				ПараметрыЗаполненияТекущейСтроки = Неопределено;
				
				ЗанестиВПолучателиВыбранныеСтроки(
					Результат, 
					-1, // идентификатор текущей строки
					ПараметрыЗаполненияТекущейСтроки,
					ТипАдреса);
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметр.ТекстОшибок) Тогда 
			ТекстОшибкиДобавленияПолучателя = Параметр.ТекстОшибок;
			ПодключитьОбработчикОжидания("ПоказатьФорматированноеСообщение", 0.2, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ДобавленыАдресаты" Тогда
		ОтменаРедактирования = Ложь;
		Элементы.Получатели.ЗакончитьРедактированиеСтроки(ОтменаРедактирования);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолноеИмяТипаПараметраВводаНаОснованииПриИзменении(Элемент)
	Объект.ПредназначенДляВводаНаОсновании = (Объект.ПолноеИмяТипаПараметраВводаНаОсновании <> "Общий");
	Объект.Назначение = Элементы.ПолноеИмяТипаПараметраВводаНаОсновании.ТекстРедактирования;
	СформироватьСписокРеквизитовИПечатныхФорм();
КонецПроцедуры

&НаКлиенте
Процедура ВнешняяОбработкаПриИзменении(Элемент)
	ОтображениеЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ФорматВложенийНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РезультатВыбораФорматов = Неопределено;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатьюСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеПечатьюСлужебныйКлиент");
		Оповещение = Новый ОписаниеОповещения("ФорматВложенийНажатиеЗавершение", ЭтотОбъект);
		МодульУправлениеПечатьюСлужебныйКлиент.ОткрытьФормуВыбораФорматаВложений(ВыбранныеНастройкиФормата(), Оповещение);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ТелоПисьмаВHTMLПриИзменении(Элемент)
	ТелоПисьмаВHTML.ПолучитьHTML(Объект.ТекстШаблонаПисьмаHTML, Новый Структура);
КонецПроцедуры

&НаКлиенте
Процедура ТелоСообщенияОбычныйТекстПриИзменении(Элемент)
	Объект.ТекстШаблонаПисьма = ТелоСообщенияОбычныйТекст.ПолучитьТекст();
КонецПроцедуры

&НаКлиенте
Процедура ТелоСообщенияОбычныйТекстSMSПриИзменении(Элемент)
	Объект.ТекстШаблонаSMS = ТелоСообщенияОбычныйТекст.ПолучитьТекст();
	ТелоСообщенияОбычныйТекст.УстановитьТекст(Объект.ТекстШаблонаSMS); // Тех. ограничение SMS 1024 символа.
КонецПроцедуры

&НаКлиенте
Процедура АвторПриИзменении(Элемент)
	Объект.ТолькоДляАвтора = ЗначениеЗаполнено(Объект.Автор);
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьПриИзменении(Элемент)
	
	УчетнаяЗаписьПроверитьПараметрыПочты();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВложения

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если Не Копирование Тогда
		ДобавитьВложениеВыполнить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	УдалитьВложениеВыполнить();
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Статус = "ПечатнаяФорма" Или ЗначениеЗаполнено(ТекущиеДанные.Реквизит) Тогда
		Элементы.ВложенияКонтекстноеМенюУдалить.Доступность          = Ложь;
		Элементы.ВложенияКонтекстноеМенюИзменитьВложение.Доступность = Ложь;
		Элементы.ВложенияИзменить.Доступность                        = Ложь;
		Элементы.ВложенияУдалить.Доступность                         = Ложь;
	Иначе
		Элементы.ВложенияКонтекстноеМенюУдалить.Доступность          = Истина;
		Элементы.ВложенияКонтекстноеМенюИзменитьВложение.Доступность = Истина;
		Элементы.ВложенияИзменить.Доступность                        = Ложь;
		Элементы.ВложенияУдалить.Доступность                         = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбранПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(ТекущиеДанные.Реквизит) Тогда
		Если ТекущиеДанные.Выбрано = 2 Тогда
			ТекущиеДанные.Выбрано = 0;
		КонецЕсли;
	Иначе
		Если ТекущиеДанные.Выбрано = 0 Тогда
			ТекущиеДанные.Выбрано = 2;
			ДобавитьВложениеВыполнить(ТекущиеДанные.Идентификатор);
		ИначеЕсли ТекущиеДанные.Выбрано = 2 Тогда
			ТекущиеДанные.Статус = "ВнешнийУдаляемый";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРеквизиты

&НаКлиенте
Процедура РеквизитыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если ИспользоватьПроизвольныеПараметры Тогда
		ДополнительныеПараметры = Новый Структура("Добавление", Истина);
		ОповещениеОЗакрытие = Новый ОписаниеОповещения("ПослеЗакрытияФормыПараметра", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("СписокПараметров, ПолноеИмяТипаПараметраВводаНаОсновании", Объект.Параметры, Объект.ПолноеИмяТипаПараметраВводаНаОсновании);
		ОткрытьФорму("Справочник.ШаблоныПисем.Форма.ПроизвольныйПараметр", ПараметрыФормы,,,,, ОповещениеОЗакрытие);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.Реквизиты.ТекущиеДанные;
	ДоступностьФорматированногоВывода = Ложь;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ПроизвольныйПараметр Тогда
			Элементы.РеквизитыКонтекстноеМенюУдалить.Доступность = Истина;
			Элементы.Удалить.Доступность = Истина;
		Иначе
			Элементы.РеквизитыКонтекстноеМенюУдалить.Доступность = Ложь;
			Элементы.Удалить.Доступность = Ложь;
		КонецЕсли;
		Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
			ИзменитьДоступностьКонтекстногоМенюРеквизитов(Ложь);
		Иначе
			ИзменитьДоступностьКонтекстногоМенюРеквизитов(Истина);
			Для каждого Тип Из ТекущиеДанные.Тип.Типы() Цикл
				Если Тип = Тип("Дата") Или Тип = Тип("Число") Или Тип = Тип("Булево") Тогда
					ДоступностьФорматированногоВывода = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если Элементы.ФорматОтображенияРеквизита.Доступность <> ДоступностьФорматированногоВывода Тогда
		Элементы.ФорматОтображенияРеквизита.Доступность = ДоступностьФорматированногоВывода;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ИспользоватьПроизвольныеПараметры Тогда
		Реквизит = Реквизиты.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если Реквизит.ПроизвольныйПараметр Тогда
			ДополнительныеПараметры = Новый Структура("Добавление, ВыбраннаяСтрока", Ложь, ВыбраннаяСтрока);
			ПараметрыФормы = Новый Структура("ИмяПараметра, ПредставлениеПараметра, ОписаниеТипа", Реквизит.Имя, Реквизит.Представление, Реквизит.Тип);
			ПараметрыФормы.Вставить("СписокПараметров", Объект.Параметры);
			ПараметрыФормы.Вставить("ПолноеИмяТипаПараметраВводаНаОсновании", Объект.ПолноеИмяТипаПараметраВводаНаОсновании);
			
			ОповещениеОЗакрытие = Новый ОписаниеОповещения("ПослеЗакрытияФормыПараметра", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Справочник.ШаблоныПисем.Форма.ПроизвольныйПараметр", ПараметрыФормы,,,,, ОповещениеОЗакрытие);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ПеретаскиваемыеОбъекты = ПараметрыПеретаскивания.Значение;
	ТекстДляВставки = "";
	Разделитель = "";
	Для каждого ПеретаскиваемыйОбъект Из ПеретаскиваемыеОбъекты Цикл
		ЭлементДерева = Реквизиты.НайтиПоИдентификатору(ПеретаскиваемыйОбъект);
		Если ЭлементДерева.ПолучитьЭлементы().Количество() = 0 Тогда
			ФорматВывода = ?(ПустаяСтрока(ЭлементДерева.Формат), "", "{" + ЭлементДерева.Формат +"}");
			ТекстДляВставки = ТекстДляВставки + Разделитель + "[" + ЭлементДерева.Имя + ФорматВывода + "]";
			Разделитель = " ";
		КонецЕсли;
	КонецЦикла;
	ПараметрыПеретаскивания.Значение = ТекстДляВставки;
	
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПередУдалением(Элемент, Отказ)
	Если ИспользоватьПроизвольныеПараметры Тогда
		
		ТекущиеДанные = Элементы.Реквизиты.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено ИЛИ НЕ ТекущиеДанные.ПроизвольныйПараметр Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если СтрНачинаетсяС(ТекущиеДанные.Имя, ШаблоныСообщенийКлиентСервер.ЗаголовокПроизвольныхПараметров()) Тогда
			Отбор = Новый Структура("ИмяПараметра", Сред(ТекущиеДанные.Имя, СтрДлина(ШаблоныСообщенийКлиентСервер.ЗаголовокПроизвольныхПараметров()) + 2));
		Иначе
			Отбор = Новый Структура("ИмяПараметра", ТекущиеДанные.Имя);
		КонецЕсли;
		НайденныеСтроки = Объект.Параметры.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Объект.Параметры.Удалить(НайденныеСтроки[0]);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПользователи

&НаКлиенте
Процедура ПользователиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ПользовательИлиГруппа = 
			ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		Объект.Пользователи.Очистить();
		Для каждого ГруппаСтрока Из ВыбранноеЗначение Цикл
			
			Строка = Объект.Пользователи.Добавить();
			Строка.ПользовательИлиГруппа = ГруппаСтрока.Исполнитель;
			
		КонецЦикла;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
		Или ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей") Тогда  
		ТекущаяСтрока = Элементы.Пользователи.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = Объект.Пользователи.НайтиПоИдентификатору(ТекущаяСтрока);
			ТекущиеДанные.ПользовательИлиГруппа = ВыбранноеЗначение;
			Модифицированность = Истина;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПользовательИлиГруппаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьПользователей(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПользовательИлиГруппаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь; 
		ДанныеВыбора = ПодобратьПользователя(Текст);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолучатели

&НаКлиенте
Процедура ПолучателиПредставлениеПриИзменении(Элемент)
	
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);

	СтрокаДанных.РедактированиеЗавершено = Истина;
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено 
		И Элементы.Получатели.ТекущиеДанные.Представление = "" Тогда
		
		Элементы.Получатели.ТекущиеДанные.Контакт = Неопределено;
		Элементы.Получатели.ТекущиеДанные.Адресат = Неопределено;
		Элементы.Получатели.ТекущиеДанные.Адрес = "";
		
	КонецЕсли;	
	
	ПолучателиПриАктивизацииСтрокиВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьИзАдреснойКниги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	Если ЗначениеЗаполнено(СтрокаДанных.Контакт) Тогда
		ПоказатьЗначение(, СтрокаДанных.Контакт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение.Адресат) 
			И ТипЗнч(ВыбранноеЗначение.Адресат) <> Тип("СправочникСсылка.АдресатыПочтовыхСообщений") Тогда
			
			// выбрана группа
			//!!!!!!!!!!
			АдресатыГруппы = Новый Массив;
			ИспользованныеАдреса = Новый Соответствие;
			ВстроеннаяПочтаСервер.РазвернутьГруппуВАдресаты(ВыбранноеЗначение.Адресат, АдресатыГруппы, ИспользованныеАдреса);
			
			ТекущаяСтрока = Элементы.Получатели.ТекущаяСтрока;
			СтрокаДанных = Получатели.НайтиПоИдентификатору(ТекущаяСтрока);
			ТипАдреса = СтрокаДанных.ТипАдреса;

			ПараметрыЗаполненияТекущейСтроки = Неопределено;
			ДобавленыАдресаты = ЗанестиВПолучателиВыбранныеСтроки(
				АдресатыГруппы, 
				ТекущаяСтрока, 
				ПараметрыЗаполненияТекущейСтроки,
				ТипАдреса);
			
			Если ПараметрыЗаполненияТекущейСтроки <> Неопределено Тогда
				
				Если СтрокаДанных <> Неопределено Тогда
					СтрокаДанных.Адресат = ПараметрыЗаполненияТекущейСтроки.Адресат;
					СтрокаДанных.Адрес =  ПараметрыЗаполненияТекущейСтроки.Адрес;
					СтрокаДанных.Контакт = ПараметрыЗаполненияТекущейСтроки.Контакт;
					СтрокаДанных.Представление = ПараметрыЗаполненияТекущейСтроки.Представление;
				КонецЕсли;
				
			КонецЕсли;	

			ВыбранноеЗначение = СтрокаДанных.Представление;
			Модифицированность = Истина;
			СтандартнаяОбработка = Ложь;
			
			ОтменаРедактирования = Ложь;
			Элементы.Получатели.ЗакончитьРедактированиеСтроки(ОтменаРедактирования);
			
			Возврат;
			
		КонецЕсли;	
		
		СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
		СтрокаДанных.Адресат = ВыбранноеЗначение.Адресат;
		СтрокаДанных.Контакт = ВыбранноеЗначение.Контакт;
		СтрокаДанных.КонтактЗагружен = Истина;
		СтрокаДанных.Представление = ВыбранноеЗначение.Представление;
		Если ВыбранноеЗначение.Свойство("Адрес") Тогда
			СтрокаДанных.Адрес = ВыбранноеЗначение.Адрес;
		Иначе
			СтрокаДанных.Адрес = 
				ОбщегоНазначенияСУЗВызовСервера.ЗначениеРеквизитаОбъекта(
					СтрокаДанных.Адресат, "Адрес");
		КонецЕсли;
		СтрокаДанных.РедактированиеЗавершено = Истина;
		Модифицированность = Истина;
		
	#Если Не ВебКлиент Тогда
		
		ТекущийКонтакт = СтрокаДанных.Контакт;
		
	#КонецЕсли

		ТелоПисьмаВHTMLПриИзменении(Неопределено);
		
		ВремяОкончанияРедактированияПолучателей = ТекущаяДата();
		
		ВыбранноеЗначение = СтрокаДанных.Представление;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, 
	Ожидание, СтандартнаяОбработка)	
	
	Если ПустаяСтрока(Текст) Тогда
		
		ДанныеВыбора = Новый СписокЗначений;
		
		Для Каждого Строка Из ПолучателиПредставлениеСписокВыбора Цикл
			ДанныеВыбора.Добавить(
				Строка.Значение, Строка.Представление, Строка.Пометка, Строка.Картинка);
		КонецЦикла;	
		
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если СтрДлина(Текст) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлемента = Элемент.Имя;
	ТекстДляПолученияДанныхВыбора = "";
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	
	ПодстрокиВведенногоТекста = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ";");
	
	ПодстрокиДанныхОбъекта =
		СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаДанных.Представление, ";");

	Для Инд = 0 По (ПодстрокиВведенногоТекста.Количество()-1) Цикл
		Если Инд > (ПодстрокиДанныхОбъекта.Количество()-1)
			Или ПодстрокиВведенногоТекста[Инд] <> ПодстрокиДанныхОбъекта[инд] Тогда
			ТекстДляПолученияДанныхВыбора = 
				СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ПодстрокиВведенногоТекста[инд], " ");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстДляПолученияДанныхВыбора) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	Иначе
		Текст = ТекстДляПолученияДанныхВыбора;
	КонецЕсли;
	
	ЭтоВебКлиент = Ложь;
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#КонецЕсли
	
	ДанныеВыбора = ВстроеннаяПочтаСервер.ПолучитьДанныеВыбораДляЭлектронногоПисьма(
		Текст, 
		ТекущийПользователь, 
		ЭтоВебКлиент);

	ВстроеннаяПочтаКлиент.ЗаполнитьКартинкиВСпискеВыбора(ДанныеВыбора);	
		
	Если ДанныеВыбора.Количество() <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	СтрокаДанных.Контакт = Неопределено;
	СтрокаДанных.Адресат = Неопределено;
	СтрокаДанных.Адрес = "";

	НовыйТекст = Текст;
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		РезультатВыбораЗначение = Неопределено;
		
		АдресИнфо = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Текст);
		Если Не ПустаяСтрока(АдресИнфо.Адрес) Тогда
			
			РезультатВыбораЗначение = ВстроеннаяПочтаСервер.ПолучитьПараметрыАдресатаПоАдресуИПредставлению(
				АдресИнфо.Адрес, 
				АдресИнфо.ОтображаемоеИмя);
			
		Иначе
			
			ЭтоВебКлиент = Ложь;
			#Если ВебКлиент Тогда
				ЭтоВебКлиент = Истина;
			#КонецЕсли
			
			РезультатВыбора = Неопределено;
			
			ДанныеВыбора = ВстроеннаяПочтаСервер.ПолучитьДанныеВыбораДляЭлектронногоПисьма(
				Текст, 
				ТекущийПользователь,
				ЭтоВебКлиент);
				
			ВстроеннаяПочтаКлиент.ЗаполнитьКартинкиВСпискеВыбора(ДанныеВыбора);		
				
			Если ДанныеВыбора.Количество() = 1 Тогда
				
				РезультатВыбора = ДанныеВыбора[0];
				
				
			ИначеЕсли ДанныеВыбора.Количество() > 1 Тогда
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("НовыйТекст", НовыйТекст);
				ДополнительныеПараметры.Вставить("СтрокаДанных", СтрокаДанных);
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ЗавершениеВыбораПолучателяИзСписка", 
					ЭтотОбъект,
					ДополнительныеПараметры);
				ПоказатьВыборИзСписка(
					ОписаниеОповещения,
					ДанныеВыбора, 
					Элементы.Получатели);
					
				Возврат;	
				
			КонецЕсли;
			
			Если РезультатВыбора <> Неопределено Тогда
				РезультатВыбораЗначение = РезультатВыбора.Значение;
			КонецЕсли;
		
		КонецЕсли;	
		
		Если РезультатВыбораЗначение <> Неопределено Тогда
			
			СтрокаДанных.Контакт = РезультатВыбораЗначение.Контакт;
			СтрокаДанных.КонтактЗагружен = Истина;
			СтрокаДанных.Адресат = РезультатВыбораЗначение.Адресат;
			НовыйТекст = "";
			
			Если ЗначениеЗаполнено(СтрокаДанных.Контакт) И ЗначениеЗаполнено(РезультатВыбораЗначение.Представление) Тогда
				НовыйТекст = РезультатВыбораЗначение.Представление;
			Иначе	
				НовыйТекст = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(СтрокаДанных.Адресат).Представление;
			КонецЕсли;	
			
			СтрокаДанных.Представление = НовыйТекст;
			СтрокаДанных.Адрес = РезультатВыбораЗначение.Адрес;
			
			ТекущийКонтакт = СтрокаДанных.Контакт;
			
			ТелоПисьмаВHTMLПриИзменении(Неопределено);
			
			Модифицированность = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПродолжитьПолучателиПредставлениеОкончаниеВводаТекста(НовыйТекст, СтрокаДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораПолучателяИзСписка(РезультатВыбора, Параметры) Экспорт

	Если РезультатВыбора <> Неопределено Тогда
		
		СтрокаДанных = Параметры.СтрокаДанных;
		СтрокаДанных.Контакт = РезультатВыбора.Значение.Контакт;
		СтрокаДанных.Адресат = РезультатВыбора.Значение.Адресат;
		НовыйТекст = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(СтрокаДанных.Адресат).Представление;
		СтрокаДанных.Представление = НовыйТекст;
		СтрокаДанных.Адрес = РезультатВыбора.Значение.Адрес;
		
		ТекущийПолучатель = СтрокаДанных.Контакт;
		
		ТелоПисьмаВHTMLПриИзменении(Неопределено);
		
		Модифицированность = Истина;
		
		Возврат;
			
	КонецЕсли;
	
	ПродолжитьПолучателиПредставлениеОкончаниеВводаТекста(
		Параметры.НовыйТекст, 
		Параметры.СтрокаДанных);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПродолжитьПолучателиПредставлениеОкончаниеВводаТекста(НовыйТекст, СтрокаДанных)	
	
	АдресИнфо = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(НовыйТекст);
	
	Если ЗначениеЗаполнено(АдресИнфо.Адрес) Тогда
		ИмяАдресата = ?(ЗначениеЗаполнено(АдресИнфо.ОтображаемоеИмя), АдресИнфо.ОтображаемоеИмя, АдресИнфо.Адрес);
		СтрокаДанных.Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(АдресИнфо.Адрес, ИмяАдресата);
		ПредставлениеАдресата = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(СтрокаДанных.Адресат);
		СтрокаДанных.Представление = ПредставлениеАдресата.Представление;
		СтрокаДанных.Контакт = ПредставлениеАдресата.Контакт;
		СтрокаДанных.Адрес = АдресИнфо.Адрес;
	Иначе
		СтрокаДанных.Представление = НовыйТекст;
	КонецЕсли;
	СтрокаДанных.РедактированиеЗавершено = Истина;
	
	ТекущийПолучатель = СтрокаДанных.Контакт;
	
	ТелоПисьмаВHTMLПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриАктивизацииСтроки(Элемент)
	
	ПолучателиПриАктивизацииСтрокиВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	РежимДобавленияАдресата = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередНачаломИзменения(Элемент, Отказ)
	
	АвтоматическиНачатоРедактированиеАдреса = Ложь;
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередУдалением(Элемент, Отказ)
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено Тогда
		
		Если Получатели.Количество() = Элементы.Получатели.ВыделенныеСтроки.Количество() Тогда
			
			Отказ = Истина;
			
			ЧислоУдаляемыхПолучателей = Получатели.Количество() - 1;
			
			Для Индекс = 0 По ЧислоУдаляемыхПолучателей - 1 Цикл
				Получатели.Удалить(ЧислоУдаляемыхПолучателей - Индекс);
			КонецЦикла;
			
			Если Получатели.Количество() = 1 Тогда
				Строка = Получатели[0];
				Строка.Адресат = "";
				Строка.Контакт = "";
				Строка.Представление = "";
			КонецЕсли;
			
			ТекущийКонтакт = Неопределено;
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если РежимДобавленияАдресата Тогда
		Элемент.ТекущийЭлемент = Элементы.ПолучателиПредставление;
		РежимДобавленияАдресата = Ложь;
	КонецЕсли;
	
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	СтрокаДанных.РедактированиеЗавершено = Ложь;
	КоличествоАдресатовДоДобавления = Получатели.Количество();
	
	ПредыдущаяСтрокаТипАдреса = НСтр("ru = 'Кому:'");
	
	Если Получатели.Количество() >= 2 Тогда
		
		ПредыдущаяСтрокаТипАдреса = Получатели[Получатели.Количество() - 2].ТипАдреса;
		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(СтрокаДанных.ТипАдреса) Тогда
		Если КоличествоАдресатовДоДобавления = 1 Тогда
			СтрокаДанных.ТипАдреса = НСтр("ru = 'Кому:'");
		Иначе
			СтрокаДанных.ТипАдреса = ПредыдущаяСтрокаТипАдреса;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДанных.НомерСпособаАдресации = ОпределитьНомерСпособаАдресации(СтрокаДанных.ТипАдреса);

КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элементы.Получатели.ТекущаяСтрока <> Неопределено Тогда
		СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
		Если СтрокаДанных <> Неопределено Тогда
			СтрокаДанных.РедактированиеЗавершено = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	ВремяОкончанияРедактированияПолучателей = ТекущаяДата();
	ТелоПисьмаВHTMLПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриАктивизацииСтрокиВыполнить()
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Элементы.ПолучателиПредставление.КнопкаОткрытия = ЗначениеЗаполнено(ТекущиеДанные.Контакт);
		
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Адресат = ТекущиеДанные.Адресат;
		
		Если ТекущийАдресат <> Адресат Тогда
			
			ТекущийАдресат = Адресат;
			ТекущийКонтакт = ТекущиеДанные.Контакт;
			ТекущийАдресатИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
			ТекущийКонтактЗагружен = ТекущиеДанные.КонтактЗагружен;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиТипАдресаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТипАдреса = ТекущиеДанные.ТипАдреса;
	ТекущиеДанные.НомерСпособаАдресации = ОпределитьНомерСпособаАдресации(ТипАдреса);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЭлектронноеПисьмоОбычныйТекст(Команда)
	УстановитьЭлектронноеПисьмоОбычныйТекст(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЭлектронноеПисьмоHTML(Команда)
	УстановитьЭлектронноеПисьмоHTML(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьШаблон(Команда)
	
	ОчиститьСообщения();
	РезультатПроверкиШаблоны = РезультатПроверкиШаблоны();
	Если ЗначениеЗаполнено(РезультатПроверкиШаблоны) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверкиШаблоны);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Шаблон заполнен корректно'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнейОбработкой(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораДополнительныеОтчетыИОбработки", ЭтотОбъект);
		ИмяВида = "ВидыДополнительныхОтчетовИОбработок.ШаблонСообщения";
		ЗначениеОтбора = Новый Структура("Вид", ПредопределенноеЗначение("Перечисление." + ИмяВида));
		ПараметрыФормы = Новый Структура("Отбор", ЗначениеОтбора);
		ИмяФормыДополнительныеОтчетыИОбработки = "ДополнительныеОтчетыИОбработки.ФормаВыбора";
		ОткрытьФорму("Справочник." + ИмяФормыДополнительныеОтчетыИОбработки, ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоШаблону(Команда)
	
	Элементы.Страницы.ТекущаяСтраница         = Элементы.СообщениеЭлектронноеПисьмоHTML;
	
	Элементы.ГруппаВнешняяОбработка.Видимость = Ложь;
	Элементы.ГруппаПараметры.Видимость        = Истина;
	Элементы.ФормаПоШаблону.Пометка           = Истина;
	Элементы.ФормаВнешнейОбработкой.Пометка   = Ложь;
	Элементы.ТемаПисьма.ТолькоПросмотр        = Ложь;
	Объект.ШаблонПоВнешнейОбработке           = Ложь;
	Объект.ВнешняяОбработка                   = Неопределено;
	ОтображениеЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматВывода(Команда)
	
	ТекущиеДанные = Элементы.Реквизиты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ДополнительныеПараметры = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
		Обработчик = Новый ОписаниеОповещения("ПослеВыбораФорматаРеквизита", ЭтотОбъект, ДополнительныеПараметры);
		
		Диалог = Новый КонструкторФорматнойСтроки;
		Диалог.ДоступныеТипы = ТекущиеДанные.Тип;
		Диалог.Текст         = ТекущиеДанные.Формат;
		Диалог.Показать(Обработчик);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФорматаРеквизита(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Реквизит = Реквизиты.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		Если Реквизит <> Неопределено Тогда
			Реквизит.Формат = Результат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПараметрВТекстСообщения(Команда)
	
	Если Элементы.Реквизиты.ВыделенныеСтроки <> Неопределено Тогда
		Текст = "";
		Для каждого НомерСтроки Из Элементы.Реквизиты.ВыделенныеСтроки Цикл
			НайденнаяСтрока = Реквизиты.НайтиПоИдентификатору(НомерСтроки);
			Если НайденнаяСтрока <> Неопределено Тогда
				ФорматВывода = ?(ПустаяСтрока(НайденнаяСтрока.Формат), "", "{" + НайденнаяСтрока.Формат +"}");
				Текст = Текст + "[" + НайденнаяСтрока.Имя + ФорматВывода + "] ";
			КонецЕсли;
		КонецЦикла;
		Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
			Если ПустаяСтрока(Элементы.ТелоПисьмаВHTML.ВыделенныйТекст) Тогда
				ЗакладкаДляВставкиНачало = Неопределено;
				ЗакладкаДляВставкиКонец = Неопределено;
				Элементы.ТелоПисьмаВHTML.ПолучитьГраницыВыделения(ЗакладкаДляВставкиНачало, ЗакладкаДляВставкиКонец);
				ТелоПисьмаВHTML.Вставить(ЗакладкаДляВставкиКонец, Текст);
			Иначе
				Элементы.ТелоПисьмаВHTML.ВыделенныйТекст = Текст;
			КонецЕсли;
		Иначе
			Если Объект.ПредназначенДляSMS Тогда
				Элементы.ТелоСообщенияОбычныйТекстSMS.ВыделенныйТекст = Текст;
			Иначе
				Элементы.ТелоСообщенияОбычныйТекст.ВыделенныйТекст = Текст;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПараметрВТему(Команда)
	
	ТекущиеДанные = Элементы.Реквизиты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ФорматВывода = ?(ПустаяСтрока(ТекущиеДанные.Формат), "", "{" + ТекущиеДанные.Формат +"}");
		НачалоПараметра = ?(Прав(Объект.Тема, 1) = " ", "[", " [");
		Объект.Тема = Объект.Тема + НачалоПараметра + ТекущиеДанные.Имя + ФорматВывода + "]";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВложение(Команда)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИдентификаторВКоллекции = Элементы.Вложения.ТекущаяСтрока;
	
	Если ТекущиеДанные.Ссылка = ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка") Тогда
		ДополнительныеПараметры = Новый Структура("ТекущийИндексВКоллекции", ТекущийИдентификаторВКоллекции);
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ИзменитьВложениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Свойства файла доступны только после его записи. Записать?'");
		ПоказатьВопрос(ОбработчикОповещенияОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьСвойстваВложения(ТекущийИдентификаторВКоллекции);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВложение(Команда)
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = Элементы.Вложения.ТекущаяСтрока;
	
	Если ТекущиеДанные.Ссылка = ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка") Тогда
		ДополнительныеПараметры = Новый Структура("ТекущийИндексВКоллекции", Идентификатор);
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("СкопироватьВложениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Файл возможно скопировать только после записи шаблона сообщения. Записать?'");
		ПоказатьВопрос(ОбработчикОповещенияОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		СкопироватьФайлВложения(Идентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьПользователей(Команда)
	ВыбратьПользователей(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАдресата(Команда)
	
	Элементы.Получатели.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПолучателейСписком(Команда)
	
	ПараметрыФормы = Новый Структура(
		"УникальныйИдентификаторРодительскойФормы",
		УникальныйИдентификатор);
	
	ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ВставкаПолучателейПисьма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Письмо(Команда)
	
	Если Модифицированность Тогда 
		Записать();
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.СоздатьПисьмоНаОсновании(Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыПараметра(ОписаниеПараметра, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ОписаниеПараметра) = Тип("Структура") Тогда
		Модифицированность = Истина;
		Если ДополнительныеПараметры.Добавление Тогда
			ДобавитьПроизвольныйПараметр(ОписаниеПараметра);
		Иначе
			Реквизит = Реквизиты.НайтиПоИдентификатору(ДополнительныеПараметры.ВыбраннаяСтрока);
			Если СтрНачинаетсяС(Реквизит.Имя, ШаблоныСообщенийКлиентСервер.ЗаголовокПроизвольныхПараметров()) Тогда
				Отбор = Новый Структура("ИмяПараметра", Сред(Реквизит.Имя, СтрДлина(ШаблоныСообщенийКлиентСервер.ЗаголовокПроизвольныхПараметров()) + 2));
			Иначе
				Отбор = Новый Структура("ИмяПараметра", Реквизит.Имя);
			КонецЕсли;
			НайденныеСтроки = Объект.Параметры.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Объект.Параметры.Удалить(НайденныеСтроки[0]);
			КонецЕсли;
			ДобавитьПроизвольныйПараметр(ОписаниеПараметра);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьКонтекстногоМенюРеквизитов(НовоеЗначение)
	
	Если Элементы.РеквизитыКонтекстноеМенюДобавитьПараметрВТекстСообщения.Доступность <> НовоеЗначение Тогда
		Элементы.РеквизитыКонтекстноеМенюДобавитьПараметрВТекстСообщения.Доступность = НовоеЗначение;
		Элементы.РеквизитыКонтекстноеМенюДобавитьПараметрВТему.Доступность = НовоеЗначение;
		Элементы.ДобавитьПараметрВТему.Доступность = НовоеЗначение;
		Элементы.РеквизитыДобавитьПараметрВТекстСообщения.Доступность = НовоеЗначение;
		Элементы.РеквизитыКонтекстноеМенюДобавитьПараметрВТекстСообщенияДляSMS.Доступность = НовоеЗначение;
		Элементы.РеквизитыМенюДобавитьПараметрВТекстСообщенияSMS.Доступность = НовоеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбранныеНастройкиФормата()
	
	ФорматыСохранения = Новый Массив;
	
	Для Каждого ВыбранныйФормат Из ВыбранныеФорматыСохранения Цикл
		Если ВыбранныйФормат.Пометка Тогда
			ФорматыСохранения.Добавить(ВыбранныйФормат.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("УпаковатьВАрхив", Объект.УпаковатьВАрхив);
	Результат.Вставить("ФорматыСохранения", ФорматыСохранения);
	Результат.Вставить("Получатели", Новый Массив);
	Результат.Вставить("ПереводитьИменаФайловВТранслит", Объект.ТранслитерироватьИменаФайлов);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВыборФормата(Знач ФорматыСохранения = Неопределено)
	
	Если Объект.ПредназначенДляSMS Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьВыбранныйФормат = Ложь;
	Для Каждого ВыбранныйФормат Из ВыбранныеФорматыСохранения Цикл
		Если ФорматыСохранения <> Неопределено Тогда
			ВыбранныйФормат.Пометка = ФорматыСохранения.Найти(ВыбранныйФормат.Значение) <> Неопределено;
		КонецЕсли;
			
		Если ВыбранныйФормат.Пометка Тогда
			ЕстьВыбранныйФормат = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьВыбранныйФормат Тогда
		ВыбранныеФорматыСохранения[0].Пометка = Истина;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматВложенийНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатВыбораФорматов = Результат;
	Если РезультатВыбораФорматов <> КодВозвратаДиалога.Отмена И РезультатВыбораФорматов <> Неопределено Тогда
		УстановитьВыборФормата(РезультатВыбораФорматов.ФорматыСохранения);
		Объект.УпаковатьВАрхив                          = РезультатВыбораФорматов.УпаковатьВАрхив;
		Объект.ТранслитерироватьИменаФайлов             = РезультатВыбораФорматов.ПереводитьИменаФайловВТранслит;
		СформироватьПредставлениеВыбранныхФорматов();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеВыбранныхФорматов()
	
	ФорматПечатныхФорм = "";
	КоличествоФорматов = 0;
	Для Каждого ВыбранныйФормат Из ВыбранныеФорматыСохранения Цикл
		Если ВыбранныйФормат.Пометка Тогда
			Если Не ПустаяСтрока(ФорматПечатныхФорм) Тогда
				ФорматПечатныхФорм = ФорматПечатныхФорм + ", ";
			КонецЕсли;
			ФорматПечатныхФорм = ФорматПечатныхФорм + ВыбранныйФормат.Представление;
			КоличествоФорматов = КоличествоФорматов + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПроизвольныйПараметр(ОписаниеПараметра)
	НоваяПараметр = Объект.Параметры.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяПараметр, ОписаниеПараметра);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ОписаниеПараметра.ТипПараметра);
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	НоваяПараметр.ОписаниеТипа = ОписаниеТипа;
	
	СформироватьСписокРеквизитовИПечатныхФорм();
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьНовыйШаблонСообщений(Знач НастройкиШаблоновСообщений)
	
	ВидСообщения = Параметры.ВидСообщения;
	
	Если ЗначениеЗаполнено(Параметры.ПолноеИмяТипаОснования)
		 И ШаблоныСообщенийСлужебный.ОбъектЯвляетсяПредметомШаблона(Параметры.ПолноеИмяТипаОснования) Тогда
		
		// Контекстный вызов
		Объект.ПолноеИмяТипаПараметраВводаНаОсновании = Параметры.ПолноеИмяТипаОснования;
		Элементы.ГруппаНазначение.Видимость = Ложь;
		Объект.ПредназначенДляВводаНаОсновании = Истина;
		
		ИмяВНазначение = Параметры.ПолноеИмяТипаОснования;
		НазначениеШаблона = НастройкиШаблоновСообщений.ПредметыШаблонов.Найти(ИмяВНазначение, "Представление");
		Если НазначениеШаблона = Неопределено Тогда
			НазначениеШаблона = НастройкиШаблоновСообщений.ПредметыШаблонов.Найти(ИмяВНазначение, "Имя");
		КонецЕсли;
		Если НазначениеШаблона <> Неопределено Тогда
			Объект.ПолноеИмяТипаПараметраВводаНаОсновании = НазначениеШаблона.Имя;
			Объект.Назначение                             = НазначениеШаблона.Представление;
		Иначе
			Объект.ПолноеИмяТипаПараметраВводаНаОсновании = ИмяВНазначение;
			Объект.Назначение                             = ИмяВНазначение;
		КонецЕсли;
		
	ИначеЕсли Параметры.ПараметрыВыбора.Количество() > 0 Тогда
		
		ИмяВНазначение = ?(Параметры.ПараметрыВыбора.Свойство("Назначение"), Параметры.ПараметрыВыбора.Назначение, "");
		
		Если Параметры.ПараметрыВыбора.Свойство("ПолноеИмяТипаПараметраВводаНаОсновании") Тогда
			ИмяВНазначение = Параметры.ПараметрыВыбора.ПолноеИмяТипаПараметраВводаНаОсновании;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ИмяВНазначение) Тогда
			НазначениеШаблона = НастройкиШаблоновСообщений.ПредметыШаблонов.Найти(ИмяВНазначение, "Представление");
			Если НазначениеШаблона = Неопределено Тогда
				НазначениеШаблона = НастройкиШаблоновСообщений.ПредметыШаблонов.Найти(ИмяВНазначение, "Имя");
			КонецЕсли;
			Если НазначениеШаблона <> Неопределено Тогда
				Объект.ПолноеИмяТипаПараметраВводаНаОсновании = НазначениеШаблона.Имя;
				Объект.Назначение                             = НазначениеШаблона.Представление;
				Объект.ПредназначенДляВводаНаОсновании        = Истина;
				Элементы.ГруппаНазначение.Видимость           = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.ПараметрыВыбора.Свойство("ПредназначенДляЭлектронныхПисем") 
			И Параметры.ПараметрыВыбора.ПредназначенДляЭлектронныхПисем Тогда
			ВидСообщения = "Письмо"
		ИначеЕсли Параметры.ПараметрыВыбора.Свойство("ПредназначенДляSMS")
			И Параметры.ПараметрыВыбора.ПредназначенДляSMS Тогда
			ВидСообщения = "СообщениеSMS"
		КонецЕсли;
		
	ИначеЕсли Параметры.Основание = Неопределено Тогда
		
		Объект.ПредназначенДляВводаНаОсновании = Ложь;
		Объект.ПолноеИмяТипаПараметраВводаНаОсновании = "Общий";
		
	КонецЕсли;
	
	Если Параметры.Основание = Неопределено Тогда
		
		Если ВидСообщения = "СообщениеSMS" Тогда
			Объект.ПредназначенДляSMS = Истина;
			Объект.ПредназначенДляЭлектронныхПисем = Ложь;
		Иначе
			Объект.ПредназначенДляSMS = Ложь;
			Объект.ПредназначенДляЭлектронныхПисем = Истина;
			Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML;
		КонецЕсли;
		Объект.ТолькоДляАвтора = Ложь;
		
	Иначе
		Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
			СтруктураВложений = Новый Структура;
			ТелоПисьмаВHTML.УстановитьHTML(Объект.ТекстШаблонаПисьмаHTML, СтруктураВложений);
		Иначе
			ТелоСообщенияОбычныйТекст.УстановитьТекст(Объект.ТекстШаблонаПисьма);
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Свойство("ВладелецШаблона", Объект.ВладелецШаблона);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФорматыСохранения()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		Если ВыбранныеФорматыСохранения.Количество() = 0 Тогда
			Для Каждого ФорматСохранения Из МодульУправлениеПечатью.ФорматыСохраненияТабличногоДокумента() Цикл
				ВыбранныеФорматыСохранения.Добавить(ФорматСохранения.ТипФайлаТабличногоДокумента, Строка(ФорматСохранения.Ссылка), Ложь, ФорматСохранения.Картинка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьТекстШаблона(ТекущийОбъект, СписокФайлов = Неопределено)
	
	Если ТекущийОбъект.ПредназначенДляSMS Тогда
		ТелоСообщенияОбычныйТекст.УстановитьТекст(ТекущийОбъект.ТекстШаблонаSMS);
	Иначе
		Если ТекущийОбъект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
			УстановитьHTMLДляФорматированногоДокумента(ТекущийОбъект.ТекстШаблонаПисьмаHTML, ТекущийОбъект.Ссылка, СписокФайлов);
		Иначе
			ТелоСообщенияОбычныйТекст.УстановитьТекст(ТекущийОбъект.ТекстШаблонаПисьма);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтображениеЭлементовФормы(ФорматаПисьма = "")
	
	Если Объект.ПредназначенДляSMS Тогда
		СуффиксЗаголовка = НСтр("ru = 'Шаблон сообщения SMS'");
		Элементы.ФормаВидТекстаЭлектронногоПисьма.Видимость = Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СообщениеSMS;
		Элементы.ТемаПисьма.Видимость = Ложь;
		Элементы.СкрытыйЗаголовокПараметры.Видимость = Ложь;
		Элементы.ГруппаВложения.Видимость = Ложь;
		Элементы.РеквизитыКонтекстноеМенюДобавитьПараметрПочта.Видимость = Ложь;
		Элементы.РеквизитыМенюДобавитьПараметрПочта.Видимость = Ложь;
		Элементы.РеквизитыКонтекстноеМенюДобавитьПараметрВТекстСообщенияДляSMS.Видимость = Истина;
		Элементы.РеквизитыМенюДобавитьПараметрВТекстСообщенияSMS.Видимость = Истина;
		Элементы.СкрытыйЗаголовокСообщениеSMS.Видимость = Истина;
	Иначе
		СуффиксЗаголовка = НСтр("ru = 'Шаблон сообщения электронного письма'");
		Элементы.ГруппаВложения.Видимость = Истина;
		Элементы.РеквизитыКонтекстноеМенюДобавитьПараметрПочта.Видимость = Истина;
		Элементы.РеквизитыМенюДобавитьПараметрПочта.Видимость = Истина;
		Элементы.РеквизитыКонтекстноеМенюДобавитьПараметрВТекстСообщенияДляSMS.Видимость = Ложь;
		Элементы.РеквизитыМенюДобавитьПараметрВТекстСообщенияSMS.Видимость = Ложь;
		
		Если НЕ ФорматаПисьмаПредопределен(ФорматаПисьма) Тогда
			Если Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
				УстановитьЭлектронноеПисьмоHTML();
			Иначе
				УстановитьЭлектронноеПисьмоОбычныйТекст();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Заголовок = Объект.Наименование + " (" + СуффиксЗаголовка + ")";
	Иначе
		Заголовок = СуффиксЗаголовка + " (" + НСтр("ru = 'создание'")+ ")";
	КонецЕсли;
	
	Если Объект.ШаблонПоВнешнейОбработке Тогда
		Элементы.ГруппаНазначение.Доступность = Ложь;
		Элементы.ТемаПисьма.ТолькоПросмотр = Истина;
		Элементы.ГруппаВнешняяОбработка.Видимость = Истина;
		Элементы.ГруппаПараметры.Видимость = Ложь;
		Элементы.ФормаВнешнейОбработкой.Пометка = Истина;
		Элементы.ФормаПоШаблону.Пометка = Ложь;
		ЗаполнитьШаблонПоВнешнейОбработке();
	Иначе
		Элементы.ПолноеИмяТипаПараметраВводаНаОсновании.Доступность = Истина;
		Элементы.ТемаПисьма.ТолькоПросмотр = Ложь;
		Элементы.ГруппаВнешняяОбработка.Видимость = Ложь;
		Элементы.ГруппаПараметры.Видимость = Истина;
		Элементы.ФормаВнешнейОбработкой.Пометка = Ложь;
		Элементы.ФормаПоШаблону.Пометка = Истина;
	КонецЕсли;
	
	Элементы.ГруппаДоступ.Видимость = 
		НЕ ПараметрыДоступа("Изменение", Метаданные.Справочники.ШаблоныПисем, "Ссылка").ОграничениеУсловием;
		
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		Элементы.ФормаГруппаСообщениеФормируется.Видимость = МодульДополнительныеОтчетыИОбработки.ИспользуютсяДополнительныеОтчетыИОбработки();
	Иначе
		Элементы.ФормаГруппаСообщениеФормируется.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		Элементы.ГруппаНастройкиВложений.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФорматаПисьмаПредопределен(Знач ФорматаПисьма)
	
	Если ЗначениеЗаполнено(ФорматаПисьма) Тогда
		Если ФорматаПисьма = "ТолькоHTML" Тогда
			Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML;
			УстановитьЭлектронноеПисьмоHTML();
			Элементы.ФормаЭлектронноеПисьмоHTML.Видимость = Ложь;
			Возврат Истина;
		ИначеЕсли ФорматаПисьма = "ТолькоОбычныйТекст" Тогда
			Объект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст;
			УстановитьЭлектронноеПисьмоОбычныйТекст();
			Элементы.ФормаЭлектронноеПисьмоHTML.Видимость = Ложь;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

&НаСервере
Процедура УстановитьHTMLДляФорматированногоДокумента(ТекстШаблонаПисьмаHTML, СсылкаНаТекущийОбъект, СписокФайлов = Неопределено)
	
	ПараметрШаблона = Новый Структура("Шаблон, УникальныйИдентификатор");
	ПараметрШаблона.Шаблон = СсылкаНаТекущийОбъект;
	ПараметрШаблона.УникальныйИдентификатор = УникальныйИдентификатор;
	Сообщение = ШаблоныСообщенийСлужебный.КонструкторСообщения();
	Сообщение.Текст = ТекстШаблонаПисьмаHTML;
	ШаблоныСообщенийСлужебный.ОбработатьHTMLДляФорматированногоДокумента(ПараметрШаблона, Сообщение, Истина, СписокФайлов);
	СтруктураВложений = Новый Структура();
	Если СписокФайлов <> Неопределено Тогда
		Для каждого Вложение Из СписокФайлов Цикл
				Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
					Если ЗначениеЗаполнено(Вложение.ИДФайлаЭлектронногоПисьма) Тогда
						МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
						СведенияОФайле = МодульРаботаСФайлами.ДанныеФайла(Вложение, УникальныйИдентификатор);
						Изображение = Новый Картинка(ПолучитьИзВременногоХранилища(СведенияОФайле.СсылкаНаДвоичныеДанныеФайла));
						СтруктураВложений.Вставить(СведенияОФайле.Наименование, Изображение);
					КонецЕсли;
				КонецЕсли;
		КонецЦикла;
	Иначе
		Для каждого ВложениеВHTML Из Сообщение.Вложения Цикл
			Изображение = Новый Картинка(ПолучитьИзВременногоХранилища(ВложениеВHTML.АдресВоВременномХранилище));
			СтруктураВложений.Вставить(ВложениеВHTML.Представление, Изображение);
		КонецЦикла;
	КонецЕсли;
	ТелоПисьмаВHTML.УстановитьHTML(Сообщение.Текст, СтруктураВложений);
	
КонецПроцедуры

// бизнес-логика

&НаСервере
Процедура СформироватьСписокРеквизитовИПечатныхФорм()
	
	ПараметрыШаблона = ШаблоныСообщенийСлужебный.ПараметрыШаблона(Объект);
	СведенияОШаблоне = ШаблоныСообщенийСлужебный.СведенияОШаблоне(ПараметрыШаблона);
	ПараметрыШаблона.ПараметрыСообщения = ПараметрыСообщения;
	
	Реквизиты.ПолучитьЭлементы().Очистить();
	СписокРеквизитов = РеквизитФормыВЗначение("Реквизиты");
	ЗаполнитьДеревоРеквизитов(СписокРеквизитов, СведенияОШаблоне.Реквизиты);
	ЗаполнитьДеревоРеквизитов(СписокРеквизитов, СведенияОШаблоне.ОбщиеРеквизиты, Истина);
	ЗначениеВРеквизитФормы(СписокРеквизитов, "Реквизиты");
	
	СформироватьСписокПечатныхФорм(СведенияОШаблоне);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокПечатныхФорм(СведенияОШаблоне)
	
	Перем Вложение, ВнутренниеВложение, ВыбранныеПечатныеФормыИВложения, Выбрано, НесохраненныеФайл, НесохраненныеФайлы, НоваяСтрока, Отбор, Расширение, ФайлВложение;
	
	ВыбранныеПечатныеФормыИВложения = Объект.ПечатныеФормыИВложения.Выгрузить(, "Идентификатор").ВыгрузитьКолонку("Идентификатор");
	
	Отбор = Новый Структура("Статус", "ВнешнийНовый");
	НесохраненныеФайлы = Вложения.НайтиСтроки(Отбор);
	Вложения.Очистить();
	
	Для каждого Вложение Из СведенияОШаблоне.Вложения Цикл
		
		ВнутренниеВложение = Ложь;
		Для каждого ФайлВложение Из НесохраненныеФайлы Цикл
			Если ФайлВложение.Идентификатор = Вложение.Идентификатор Тогда
				ВнутренниеВложение = Истина;
				Расширение = ?(ПустаяСтрока(Вложение.ТипФайла), "mxl", Вложение.ТипФайла);
				ФайлВложение.ИндексКартинки = ПолучитьИндексПиктограммыФайла(Расширение);
				ФайлВложение.Реквизит       = Вложение.Реквизит;
				ФайлВложение.Выбрано        = 1;
				ФайлВложение.Представление  = Вложение.Представление;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ВнутренниеВложение Тогда
			Продолжить;
		КонецЕсли;
		
		Выбрано = 0;
		Если ВыбранныеПечатныеФормыИВложения.Найти(Вложение.Идентификатор) <> Неопределено Тогда
			Выбрано = 1;
		ИначеЕсли ЗначениеЗаполнено(Вложение.Реквизит) Тогда
			Выбрано = 2;
		КонецЕсли;
		
		НоваяСтрока = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Вложение);
		Расширение = ?(ПустаяСтрока(Вложение.ТипФайла), "mxl", Вложение.ТипФайла);
		НоваяСтрока.ИндексКартинки = ПолучитьИндексПиктограммыФайла(Расширение);
		НоваяСтрока.Выбрано        = Выбрано;
		
	КонецЦикла;
	
	ЗаполнитьВложения();
	Для каждого НесохраненныеФайл Из НесохраненныеФайлы Цикл
		НоваяСтрока = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НесохраненныеФайл);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокПечатныхФорм()
	
	ПараметрыШаблона = ШаблоныСообщенийСлужебный.ПараметрыШаблона(Объект);
	СведенияОШаблоне = ШаблоныСообщенийСлужебный.СведенияОШаблоне(ПараметрыШаблона);
	
	СформироватьСписокПечатныхФорм(СведенияОШаблоне);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИндексПиктограммыФайла(Расширение)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиСлужебныйКлиентСервер = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиСлужебныйКлиентСервер");
		Возврат МодульРаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИндексПиктограммыФайлаКлиент(Расширение)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиСлужебныйКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиСлужебныйКлиентСервер");
		Возврат МодульРаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоРеквизитов(Приемник, Источник, ЭтоОбщиеИлиПроизвольныеРеквизиты = Неопределено)
	
	Для Каждого СтрокаДерева Из Источник.Строки Цикл
		
		Если ЭтоОбщиеИлиПроизвольныеРеквизиты = Неопределено Тогда
			Если СтрокаДерева.Имя = ШаблоныСообщенийКлиентСервер.ЗаголовокПроизвольныхПараметров()
				ИЛИ СтрокаДерева.Имя = ШаблоныСообщенийСлужебный.ЗаголовокОбщиеРеквизиты() Тогда
				ОбщиеИлиПроизвольныеРеквизиты = Истина;
			Иначе
				
				ОбщиеИлиПроизвольныеРеквизиты = Ложь;
			КонецЕсли;
		Иначе
			ОбщиеИлиПроизвольныеРеквизиты = ЭтоОбщиеИлиПроизвольныеРеквизиты;
		КонецЕсли;
		
		ИндексКартинкиЭлемент = ?(ОбщиеИлиПроизвольныеРеквизиты, 1, 3);
		ИндексКартинкиУзел = ?(ОбщиеИлиПроизвольныеРеквизиты, 0, 2);
		
		НоваяСтрока = Приемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			НоваяСтрока.ИндексКартинки = ИндексКартинкиУзел;
			ЗаполнитьДеревоРеквизитов(НоваяСтрока, СтрокаДерева, ОбщиеИлиПроизвольныеРеквизиты);
		Иначе
			НоваяСтрока.ИндексКартинки = ИндексКартинкиЭлемент;
		КонецЕсли;
	КонецЦикла;
	Приемник.Строки.Сортировать("Представление", Истина);
	
КонецПроцедуры

// проверить шаблон
&НаСервере
Функция РезультатПроверкиШаблоны()
	
	ПараметрыШаблона = ШаблоныСообщенийСлужебный.ПараметрыШаблона(Объект);
	СведенияОШаблоне = ШаблоныСообщенийСлужебный.СведенияОШаблоне(ПараметрыШаблона);
	
	ОшибочныеРеквизиты = Новый Массив;
	ПараметрыТекстаСообщения = ШаблоныСообщенийСлужебный.ПараметрыИзТекстаСообщения(ПараметрыШаблона);
	ШаблоныСообщенийСлужебный.ОпределитьОшибочныеРеквизиты(ПараметрыТекстаСообщения, ОшибочныеРеквизиты, СведенияОШаблоне);
	
	ТекстОшибки = "";
	Если ОшибочныеРеквизиты.Количество() > 0 Тогда
		ТекстОшибки = ?(ОшибочныеРеквизиты.Количество() = 1,
			НСтр("ru = 'Некорректный реквизит в шаблоне сообщения:'"),
			НСтр("ru = 'Некорректные реквизиты в шаблоне сообщения:'")) + " ";
		Разделитель = "";
		Для каждого ОшибочныйРеквизит Из ОшибочныеРеквизиты Цикл
			ТекстОшибки = ТекстОшибки + Разделитель + СокрЛП(ОшибочныйРеквизит);
			Разделитель = ", ";
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

// Вынужденная установка свойств на сервере

&НаСервере
Процедура УстановитьЭлектронноеПисьмоHTML(ТребуетсяПереносТекста = Ложь)
	
	Элементы.ФормаВидТекстаЭлектронногоПисьма.Заголовок = "HTML";
	Элементы.СообщениеЭлектронноеПисьмо.Видимость = Ложь;
	Элементы.СообщениеЭлектронноеПисьмоHTML.Видимость = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СообщениеЭлектронноеПисьмоHTML;
	Элементы.ФормаЭлектронноеПисьмоОбычныйТекст.Пометка = Ложь;
	Элементы.ФормаЭлектронноеПисьмоHTML.Пометка = Истина;
	Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML");
	Если ТребуетсяПереносТекста Тогда
		ВложенияФорматированныйДокумент = Новый Структура;
		ТелоСообщенияОбычныйТекстВHTML = СтрЗаменить(ТелоСообщенияОбычныйТекст.ПолучитьТекст(), Символы.ПС, "<br>");
		ТелоПисьмаВHTML.УстановитьHTML(ТелоСообщенияОбычныйТекстВHTML, ВложенияФорматированныйДокумент);
	КонецЕсли;
	
	Элементы.СкрытыйЗаголовокПараметры.Видимость = Истина;
	Элементы.СтраницыЗаголовокПараметры.ТекущаяСтраница = Элементы.СтраницаЗаголовокПараметры;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЭлектронноеПисьмоОбычныйТекст(ТребуетсяПереносТекста = Ложь)
	Элементы.ФормаВидТекстаЭлектронногоПисьма.Заголовок = НСтр("ru = 'Обычный текст'");
	Элементы.СообщениеЭлектронноеПисьмоHTML.Видимость = Ложь;
	Элементы.СообщениеЭлектронноеПисьмо.Видимость = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СообщениеЭлектронноеПисьмо;
	Элементы.ФормаЭлектронноеПисьмоОбычныйТекст.Пометка = Истина;
	Элементы.ФормаЭлектронноеПисьмоHTML.Пометка = Ложь;
	Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.ПростойТекст");
	Если ТребуетсяПереносТекста Тогда
		ТелоСообщенияОбычныйТекст.УстановитьТекст(ТелоПисьмаВHTML.ПолучитьТекст());
	КонецЕсли;
	
	Элементы.СкрытыйЗаголовокПараметры.Видимость = Ложь;
	Элементы.СкрытыйЗаголовокСообщениеSMS.Видимость = Ложь;
	Элементы.СтраницыЗаголовокПараметры.ТекущаяСтраница = Элементы.СтраницаЗаголовокПараметры;
КонецПроцедуры

// Вложения

&НаКлиенте
Процедура ДобавитьВложениеВыполнить(Идентификатор = Неопределено)
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		
		Диалог                    = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.МножественныйВыбор = Истина;
		ДополнительныеПараметры   = Новый Структура("Идентификатор", Идентификатор);
		ОписаниеОповещение        = Новый ОписаниеОповещения("ДиалогВыбораФайловПослеВыбора", ЭтотОбъект, ДополнительныеПараметры);
		Диалог.Показать(ОписаниеОповещение);
		
	Иначе
		
		Адрес         = "";
		ВыбранныйФайл = "";
		ДополнительныеПараметры       = Новый Структура("Идентификатор", Идентификатор);
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ПомещениеФайлаПриОкончании", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайла(ОбработчикОповещенияОЗакрытии, Адрес, ВыбранныйФайл, Истина, УникальныйИдентификатор);
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогВыбораФайловПослеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиСлужебныйКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиСлужебныйКлиентСервер");
		
		МассивИменФайловСОшибками = Новый Массив;
		
		НоваяСтрока = Неопределено;
		
		Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
			
			ОбъектФайл = Новый Файл(ВыбранныйФайл);
			Если МодульРаботаСФайламиСлужебныйКлиентСервер.ПроверитьВозможностьЗагрузкиФайла(ОбъектФайл, Ложь, МассивИменФайловСОшибками) Тогда
				
				ИмяФайла                   = "";
				ПолучитьКаталогИИмяФайла(ВыбранныйФайл, "", ИмяФайла);
				Расширение                 = ПолучитьРасширениеФайла(ИмяФайла);
				
				НоваяСтрока                = Вложения.Добавить();
				НоваяСтрока.Статус         = "ВнешнийНовый";
				НоваяСтрока.Выбрано        = 1;
				НоваяСтрока.Имя            = ВыбранныйФайл;
				НоваяСтрока.Представление  = ИмяФайла;
				НоваяСтрока.Идентификатор  = ИмяФайла;
				НоваяСтрока.ИндексКартинки = ПолучитьИндексПиктограммыФайлаКлиент(Расширение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НоваяСтрока <> Неопределено Тогда
			Элементы.Вложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Модифицированность              = Истина;
		КонецЕсли;
		
		Если МассивИменФайловСОшибками.Количество() > 0 Тогда
			Для каждого ОписаниеОшибки Из МассивИменФайловСОшибками Цикл
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Добавление вложения %1 отменено по причине: %2'"),
					ОписаниеОшибки.ИмяФайла, ОписаниеОшибки.Ошибка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеФайлаПриОкончании(РезультатПомещения, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	Если РезультатПомещения = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Вложения.Добавить();
	НоваяСтрока.Имя = Адрес;
	НоваяСтрока.Представление = ВыбранноеИмяФайла;
	
	Расширение = ПолучитьРасширениеФайла(ВыбранноеИмяФайла);
	НоваяСтрока.ИндексКартинки = ПолучитьИндексПиктограммыФайлаКлиент(Расширение);
	НоваяСтрока.Статус = "ВнешнийНовый";
	
	Элементы.Вложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	ОбновитьОтображениеДанных();

КонецПроцедуры

// Получает каталог и имя файла для переданного полного имени файла.
//
// Параметры:
//  ПолноеИмяФайла  - Строка - полное имя файла, из которого будут получены имя каталога и имя файла.
//  ИмяКаталога     - Строка - в данную переменную будет помещено полученное имя каталога.
//  ИмяФайла        - Строка - в данную переменную будет помещено полученное имя файла.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПолучитьКаталогИИмяФайла(Знач ПолноеИмяФайла, ИмяКаталога, ИмяФайла)
	
	ИмяФайла = ПолноеИмяФайла;
	ИмяКаталога = "";
	
	Пока Истина Цикл
		
		Позиция = Макс(СтрНайти(ИмяФайла, "\"), СтрНайти(ИмяФайла, "/"));
		Если Позиция = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ИмяКаталога = ИмяКаталога + Лев(ИмяФайла, Позиция);
		ИмяФайла = Сред(ИмяФайла, Позиция+1);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает расширение для переданного имени файла.
//
// Параметры:
//  ИмяФайла  - Строка - имя файла, для которого необходимо получить расширение.
//
// Возвращаемое значение:
//   Строка   - расширение, полученное из переданного имени файла.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьРасширениеФайла(Знач ИмяФайла)
	
	РасширениеФайла = "";
	МассивСтрок = СтрРазделить(ИмяФайла, ".", Ложь);
	Если МассивСтрок.Количество() > 1 Тогда
		РасширениеФайла = МассивСтрок[МассивСтрок.Количество() - 1];
	КонецЕсли;
	
	Возврат РасширениеФайла;
	
КонецФункции

&НаКлиенте
Процедура ПоместитьФайлыИзЛокальнойФСВоВременноеХранилище(Вложения, УникальныйИдентификатор, Отказ)
	
	Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
		Если СтрокаТаблицыВложений.Статус = "ВнешнийНовый" Тогда
			Попытка
				
				ЗагружаемыйФайл           = Новый Файл(СтрокаТаблицыВложений.Имя);
				Если НЕ СтрНачинаетсяС(СтрокаТаблицыВложений.Имя, "e1cib") Тогда
					Данные                    = Новый ДвоичныеДанные(СтрокаТаблицыВложений.Имя);
					СтрокаТаблицыВложений.Имя = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
				КонецЕсли;
				
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),, "Вложения",, Отказ);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвойстваВложения(Идентификатор)
	
	ТекущиеДанные = Вложения.НайтиПоИдентификатору(Идентификатор);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Вложения.ТекущаяСтрока = Идентификатор;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ОткрытьФормуФайла(ТекущиеДанные.Ссылка);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьФайлВложения(Идентификатор)
	
	ТекущиеДанные = Вложения.НайтиПоИдентификатору(Идентификатор);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Вложения.ТекущаяСтрока = Идентификатор;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.СкопироватьФайл(Объект.Ссылка, ТекущиеДанные.Ссылка);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВложениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
		ОткрытьСвойстваВложения(ДополнительныеПараметры.ТекущийИндексВКоллекции);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВложениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если Записать() Тогда
			СкопироватьФайлВложения(ДополнительныеПараметры.ТекущийИндексВКоллекции);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложения(ПереданныеПараметры = Неопределено)
	
	СписокФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Объект.Ссылка, СписокФайлов);
	Для Каждого СсылкаНаФайл Из СписокФайлов Цикл
		СведенияОФайле = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаФайл, "ИДФайлаЭлектронногоПисьма, ИндексКартинки, Наименование, Расширение");
		Если ПустаяСтрока(СведенияОФайле.ИДФайлаЭлектронногоПисьма) Тогда
			Отбор = Новый Структура("Реквизит", СведенияОФайле.Наименование);
			НайденныеСтроки = Вложения.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Вложения.Добавить();
				НоваяСтрока.Представление = СведенияОФайле.Наименование + "." + СведенияОФайле.Расширение;
				НоваяСтрока.ИндексКартинки = СведенияОФайле.ИндексКартинки;
				НоваяСтрока.Ссылка = СсылкаНаФайл;
				НоваяСтрока.Статус = "ВнешнийПрисоединенный";
			Иначе
				НайденныеСтроки[0].Ссылка = СсылкаНаФайл;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СкопироватьВложенияИзИсточника()
	
	СписокФайлов = Новый Массив;
	СписокОшибок = Неопределено;
	ОписаниеОшибки = НСтр("ru='Не удалось скопировать вложение по причине: %1'");
	
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Параметры.ЗначениеКопирования, СписокФайлов);
	Для каждого Вложение Из СписокФайлов Цикл
		Если ПустаяСтрока(Вложение.ИДФайлаЭлектронногоПисьма) Тогда
			Попытка
				ДанныеФайла = РаботаСФайлами.ДанныеФайла(Вложение, УникальныйИдентификатор, Истина);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияШаблоныСообщений(), ИнформацияОбОшибке, НСтр("ru='Не удалось извлечь и записать присоединенный файл  для копирования."));
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Вложения", ТекстОшибки, "Вложения",, ТекстОшибки);
				Продолжить;
			КонецПопытки;
			НоваяСтрока                = Вложения.Добавить();
			НоваяСтрока.Имя            = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
			НоваяСтрока.Представление  = Вложение.Наименование + "." + Вложение.Расширение;
			НоваяСтрока.ИндексКартинки = ПолучитьИндексПиктограммыФайла(Вложение.Расширение);
			НоваяСтрока.Статус         = "ВнешнийНовый";
			НоваяСтрока.Идентификатор  = Вложение.Описание;
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
	
	Возврат СписокФайлов;
	
КонецФункции

&НаКлиенте
Процедура УдалитьВложениеВыполнить()

	Вложение = Элементы.Вложения.ТекущиеДанные;
	Если Вложение <> Неопределено Тогда
		Если Вложение.Статус = "ВнешнийПрисоединенный" ИЛИ Вложение.Статус = "ВнешнийНовый" Тогда
			Вложение.Статус = "ВнешнийУдаляемый";
			Вложение.ИндексКартинки = Вложение.ИндексКартинки + 1;
			Модифицированность = Истина;
		ИначеЕсли Вложение.Статус = "ВнешнийУдаляемый" Тогда
			Вложение.ИндексКартинки = Вложение.ИндексКартинки - 1;
			Вложение.Статус = ?(ЗначениеЗаполнено(Вложение.Ссылка), "ВнешнийПрисоединенный", "ВнешнийНовый");
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПрисоединенныйФайл(ПрисоединенныйФайл)
	ОбъектВложение = ПрисоединенныйФайл.ПолучитьОбъект();
	УстановитьПривилегированныйРежим(Истина);
	ОбъектВложение.Удалить();
КонецПроцедуры

&НаСервере
Процедура ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(ДокументHTML, ТаблицаСоответствий)
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		НайденнаяСтрока = ТаблицаСоответствий.НайтиПоЗначению(АтрибутИсточникКартинки.ТекстовоеСодержимое);
		Если НайденнаяСтрока <> Неопределено Тогда
			
			НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
			НовыйАтрибутКартинки.ТекстовоеСодержимое = Строка("cid:" + НайденнаяСтрока.Представление);
			Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет картинки форматированного документа как присоединенные файлы объекта.
//
// Параметры:
//  Ссылка  - ДокументСсылка - ссылка на владельца присоединенных файлов.
//  ТипТекстаПисьма  - Перечисление.ТипыТекстовПочтовыхСообщений - для определения необходимости выполнения преобразований.
//  ТаблицаСоответствийИменВложенийИдентификаторам  - ТаблицаЗначений - позволяет определить какому вложению
//                                                                      соответствует какая картинка.
//  УникальныйИдентификатор  - УникальныйИдентификатор - уникальный идентификатор формы из которого выполняется сохранение.
//
&НаСервере
Процедура СохранитьКартинкиФорматированногоДокументаКакПрисоединенныеФайлы(Ссылка, ТипТекстаПисьма,
	                                                                        ТаблицаСоответствийИменВложенийИдентификаторам,
	                                                                        УникальныйИдентификатор)
	
	Если ТипТекстаПисьма = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		Для каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
			
			ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
			АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
			ПрисоединенныйФайл = ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(Ссылка, АдресКартинкиВоВременномХранилище,
				"_" + СтрЗаменить(Вложение.Представление, "-", "_"), ДвоичныеДанныеКартинки.Размер());
			
			Если ПрисоединенныйФайл <> Неопределено Тогда
				ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.Представление;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(Письмо, АдресВоВременномХранилище, ИмяФайла,
		Размер, КоличествоПустыхИменВоВложениях = 0)
		
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
		
		ИмяФайлаДляРазбора = ИмяФайла;
		РасширениеБезТочки = ПолучитьРасширениеФайла(ИмяФайлаДляРазбора);
		ИмяБезРасширения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаДляРазбора);
		Если ПустаяСтрока(ИмяБезРасширения) Тогда
			
			ИмяФайлаБезРасширения = НСтр("ru = 'Вложение без имени'") 
				+ ?(КоличествоПустыхИменВоВложениях = 0, ""," " + Строка(КоличествоПустыхИменВоВложениях + 1));
			КоличествоПустыхИменВоВложениях = КоличествоПустыхИменВоВложениях + 1;
			
		Иначе
			ИмяБезРасширения = ?(РасширениеБезТочки = "", ИмяБезРасширения,
				Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - СтрДлина(РасширениеБезТочки) - 1));
		КонецЕсли;
			
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВладелецФайлов",              Письмо);
		ПараметрыФайла.Вставить("Автор",                       Неопределено);
		ПараметрыФайла.Вставить("ИмяБезРасширения",            ИмяБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки",          РасширениеБезТочки);
		ПараметрыФайла.Вставить("ВремяИзменения",              Неопределено);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
		Возврат МодульРаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВоВременномХранилище, "");
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВложенияВыбран.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Вложения.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = "Внешний";
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Вложения.Реквизит");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВложенияПредставление.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВложенияВыбран.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Вложения.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = "ВнешнийУдаляемый";

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДополнительныеОтчетыИОбработки(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Элементы.ГруппаВнешняяОбработка.Видимость = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СообщениеВнешняяОбработка;
		Элементы.ГруппаПараметры.Видимость = Ложь;
		Элементы.ФормаПоШаблону.Пометка = Ложь;
		Элементы.ФормаВнешнейОбработкой.Пометка = Истина;
		Объект.ШаблонПоВнешнейОбработке = Истина;
		Объект.ВнешняяОбработка = Результат;
		ОтображениеЭлементовФормы();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытия, ИнформацияОбОшибке, ТекстСобытия)
	
	Комментарий = ТекстСобытия + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ШаблоныПисем,, Комментарий);
	
КонецПроцедуры

&НаСервере
Функция ИмяСобытияШаблоныСообщений()
	
	Возврат НСтр("ru = 'Шаблоны сообщений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПроизвольныеПараметрыИзОбъекта(Знач ТекущийОбъект)
	
	Перем НайденныеСтроки, Отбор, ПараметрШаблонаТекущийОбъект;
	
	Для каждого ПараметрШаблонаТекущийОбъект Из ТекущийОбъект.Параметры Цикл
		Отбор = Новый Структура("ИмяПараметра", ПараметрШаблонаТекущийОбъект.ИмяПараметра);
		НайденныеСтроки = Объект.Параметры.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ОписаниеТипа = ПараметрШаблонаТекущийОбъект.ТипПараметра.Получить();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Внешняя обработка

&НаСервере
Процедура ЗаполнитьШаблонПоВнешнейОбработке()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		
		ОчиститьШаблон(ЭтотОбъект);
		ВнешнийОбъект = МодульДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(Объект.ВнешняяОбработка);
		Если Объект.ВнешняяОбработка.Вид <> Перечисления["ВидыДополнительныхОтчетовИОбработок"].ШаблонСообщения Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураДанныхВнешнейОбработки = ВнешнийОбъект.СтруктураДанныхДляОтображенияВШаблоне();
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(СтруктураДанныхВнешнейОбработки.ПолноеИмяТипаПараметраВводаНаОсновании);
		Если МетаданныеОбъекта <> Неопределено Тогда
			ЭлементНазначения = Элементы.ПолноеИмяТипаПараметраВводаНаОсновании.СписокВыбора.НайтиПоЗначению(СтруктураДанныхВнешнейОбработки.ПолноеИмяТипаПараметраВводаНаОсновании);
			Если ЭлементНазначения = Неопределено Тогда
				ВнешняяОбработка = Неопределено;
				ОписаниеОшибки = НСтр("ru = 'Предмет %1 определенный в внешней обработке не найдено. Внешняя обработка не может быть подключена.'");
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, СтруктураДанныхВнешнейОбработки.ПолноеИмяТипаПараметраВводаНаОсновании);
				Возврат
			КонецЕсли;
			Объект.ШаблонПоВнешнейОбработке = Истина;
			Объект.ПолноеИмяТипаПараметраВводаНаОсновании = ЭлементНазначения.Значение;
			Объект.Назначение = ЭлементНазначения.Представление;
			Объект.ПредназначенДляВводаНаОсновании = Истина;
		КонецЕсли;

		// Определить тип html 
		Объект.Тема = СтруктураДанныхВнешнейОбработки.Тема;
		Если СтруктураДанныхВнешнейОбработки.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
			УстановитьЭлектронноеПисьмоHTML(Истина);
			СтруктураВложения = Новый Структура;
			ТелоПисьмаВHTML.УстановитьHTML(СтруктураДанныхВнешнейОбработки.ТекстШаблонаПисьмаHTML, СтруктураВложения);
		Иначе
			УстановитьЭлектронноеПисьмоОбычныйТекст(Истина);
			ТелоСообщенияОбычныйТекст.УстановитьТекст(СтруктураДанныхВнешнейОбработки.ТекстШаблонаПисьмаHTML);
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьШаблон(Форма)
	
	Форма.Объект.Параметры.Очистить();
	Форма.Объект.ПредназначенДляЭлектронныхПисем        = Истина;
	Форма.Объект.ПредназначенДляSMS                     = Ложь;
	Форма.Объект.ПредназначенДляВводаНаОсновании        = Ложь;
	Форма.Объект.ПолноеИмяТипаПараметраВводаНаОсновании = "";
	Форма.Объект.Тема                             = "";
	Форма.Объект.ТекстШаблонаSMS                        = "";
	Форма.Объект.ТекстШаблонаПисьма                     = "";
	Форма.Объект.ТекстШаблонаПисьмаHTML                 = "<html></html>";
	Форма.Объект.ТипТекста                        = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.ПростойТекст");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_2

&НаКлиенте
Процедура УстановитьТекущийЭлементПолучатель()
		
	АвтоматическиНачатоРедактированиеАдреса = Истина;
	Элементы.Получатели.ДобавитьСтроку();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементТема()
	
	ТекущийЭлемент = Элементы.Тема;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьНомерСпособаАдресации(ТипАдреса)
	
	Если ТипАдреса = НСтр("ru = 'Кому:'") Тогда
		Возврат 1;
	КонецЕсли;

	Если ТипАдреса = НСтр("ru = 'Копия:'") Тогда
		Возврат 2;
	КонецЕсли;
	
	Если ТипАдреса = НСтр("ru = 'Скрытая копия:'") Тогда
		Возврат 3;
	КонецЕсли;

	Возврат 0;
	
КонецФункции

&НаСервере
Процедура ДобавитьПолучателя(ТипАдреса, Адресат, СоответствиеДанныхАдресатов = Неопределено)
	
	НоваяСтрока = Получатели.Добавить();
	Если СоответствиеДанныхАдресатов <> Неопределено Тогда
		ДанныеПолучателя = СоответствиеДанныхАдресатов.Получить(Адресат);
		Если ДанныеПолучателя = Неопределено Тогда
			Возврат;
		КонецЕсли;	
	Иначе
		ДанныеПолучателя = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(Адресат);
	КонецЕсли;
	НоваяСтрока.Представление = ДанныеПолучателя.Представление;
	НоваяСтрока.Контакт = ДанныеПолучателя.Контакт;
	НоваяСтрока.ТипАдреса = ТипАдреса;
	НоваяСтрока.Адресат = Адресат;
	НоваяСтрока.НомерСпособаАдресации = ОпределитьНомерСпособаАдресации(ТипАдреса);

	Если ЗначениеЗаполнено(Адресат) Тогда
		Если СоответствиеДанныхАдресатов <> Неопределено Тогда
			НоваяСтрока.Адрес = ДанныеПолучателя.Адрес;
		Иначе	
			НоваяСтрока.Адрес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Адресат, "Адрес");
		КонецЕсли;
	КонецЕсли;
	НоваяСтрока.РедактированиеЗавершено = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолучателейКомуКопия()
		
	ТаблицаЗначений = ВстроеннаяПочтаСервер.ПолучитьТаблицуПолучателейКомуКопияСкрытаяУИсходящегоПисьма(
		Объект.Ссылка, Ложь, Истина);
	
	КС = Новый КвалификаторыСтроки(80);
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБ = Новый ОписаниеТипов(МассивБулево);
	ТаблицаЗначений.Колонки.Добавить("КонтактЗагружен", ОписаниеТиповБ);
	
	КЧ = Новый КвалификаторыЧисла(1);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , КЧ);
	ТаблицаЗначений.Колонки.Добавить("НомерСпособаАдресации", ОписаниеТиповЧ);
	
	ТаблицаЗначений.Колонки.Добавить("ГруппаПользователя");
	
	Для Каждого Строка Из Объект.ГруппыПолучателей Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить();
		НоваяСтрока.ГруппаПользователя = Строка.Группа;
		НоваяСтрока.ТипАдреса = Строка.ТипАдреса;
		НоваяСтрока.Представление = СокрЛП(Строка.Группа);
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		Строка.НомерСпособаАдресации = ОпределитьНомерСпособаАдресации(Строка.ТипАдреса);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаЗначений, "Получатели");
	
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьПолучателей()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ЗаполнитьПолучателейКомуКопия();
	Иначе	
		МассивАдресатов = Новый Массив;
		Для каждого Строка Из Объект.ПолучателиПисьма Цикл
			МассивАдресатов.Добавить(Строка.Адресат);
		КонецЦикла;
		Для каждого Строка Из Объект.ПолучателиКопий Цикл
			МассивАдресатов.Добавить(Строка.Адресат);
		КонецЦикла;
		Для каждого Строка Из Объект.ПолучателиСкрытыхКопий Цикл
			МассивАдресатов.Добавить(Строка.Адресат);
		КонецЦикла;
		Для каждого Строка Из Объект.ПолучателиОтвета Цикл
			МассивАдресатов.Добавить(Строка.Адресат);
		КонецЦикла;
		
		СоответствиеДанныхАдресатов = 
			ВстроеннаяПочтаСервер.ПолучитьСоответствиеСПредставлениямиИКонтактамиМассиваАдресатов(МассивАдресатов);
		
		Для каждого Строка Из Объект.ПолучателиПисьма Цикл
			ДобавитьПолучателя(Перечисления.ТипыАдресатов.Кому, Строка.Адресат, СоответствиеДанныхАдресатов);
		КонецЦикла;
		Для каждого Строка Из Объект.ПолучателиКопий Цикл
			ДобавитьПолучателя(Перечисления.ТипыАдресатов.Копия, Строка.Адресат, СоответствиеДанныхАдресатов);
		КонецЦикла;
		Для каждого Строка Из Объект.ПолучателиСкрытыхКопий Цикл
			ДобавитьПолучателя(Перечисления.ТипыАдресатов.СкрытаяКопия, Строка.Адресат, СоответствиеДанныхАдресатов);
		КонецЦикла;
		Для каждого Строка Из Объект.ПолучателиОтвета Цикл
			ДобавитьПолучателя(Перечисления.ТипыАдресатов.ОбратныйАдрес, Строка.Адресат, СоответствиеДанныхАдресатов);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПрименитьНастройкиОтображения(ТекстПисьма, ТипТекста, ШрифтОтображения, ОтображатьДругиеШрифтыВПисьмах, ШрифтОтображенияУстановлен)
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
	
	Если ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		Если ШрифтОтображенияУстановлен Тогда
			РаботаС_HTML.ПрименитьНастройкиОтображениеПисьма(
				ТекстПисьма, ШрифтОтображения, Ложь, Истина);
		Иначе
			РаботаС_HTML.ПрименитьНастройкиОтображениеПисьма(
				ТекстПисьма, ШрифтОтображения, ОтображатьДругиеШрифтыВПисьмах, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзАдреснойКниги(ПараметрМножественныйВыбор = Неопределено)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана учетная запись. Рекомендуется в настройках почты установить учетную запись по умолчанию.'"));
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗаполненыПараметрыEmailУчетнойЗаписи Тогда
		
		ПоказатьПредупреждение(, НСтр("ru ='Для отправки почты нужно настроить параметры подключения к почтовому серверу.'"));
		Возврат;
		
	КонецЕсли;
	
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	Представление = СтрокаДанных.Представление;
	
	Если Элементы.Получатели.ТекущийЭлемент <> Неопределено Тогда
		Представление = Элементы.Получатели.ТекущийЭлемент.ТекстРедактирования;
	КонецЕсли;	
	
	МножественныйВыбор = Ложь;
	ТипАдреса = НСтр("ru = 'Копия:'");
	Контакт = Неопределено;
	ТекущаяСтрока = -1;
	
	Если Не ЗначениеЗаполнено(ПараметрМножественныйВыбор) Тогда
		
		СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
		МножественныйВыбор = Не ЗначениеЗаполнено(СтрокаДанных.Представление);
		ТипАдреса = СтрокаДанных.ТипАдреса;
		Контакт = СтрокаДанных.Контакт;
		ТекущаяСтрока = Элементы.Получатели.ТекущаяСтрока;
		
	Иначе
		МножественныйВыбор = ПараметрМножественныйВыбор;
	КонецЕсли;	
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("РежимРаботыФормы", ?(МножественныйВыбор, 2, 1));
	ПараметрыОткрытия.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыОткрытия.Вставить("ОтображатьЛичныхАдресатов", Истина);
	ПараметрыОткрытия.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыОткрытия.Вставить("ОтображатьРоли", Истина);
	ПараметрыОткрытия.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
	ПараметрыОткрытия.Вставить("ВыбиратьЭлектронныеАдреса", Истина);
	ПараметрыОткрытия.Вставить("УчетнаяЗаписьПочты", Объект.УчетнаяЗапись);
	ПараметрыОткрытия.Вставить("ПоказыватьТипАдресов", Истина);
	ПараметрыОткрытия.Вставить("ГруппаПоУмолчанию", СтрокаДанных.ТипАдреса);
	ПараметрыОткрытия.Вставить("КонтекстОткрытия", Объект.Ссылка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МножественныйВыбор", МножественныйВыбор);
	ДополнительныеПараметры.Вставить("СтрокаДанных", СтрокаДанных);
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("ТипАдреса",ТипАдреса);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораИзАдреснойКниги", ЭтотОбъект, ДополнительныеПараметры);
	
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыОткрытия, ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораИзАдреснойКниги(Результат, Параметры) Экспорт

	Если (ТипЗнч(Результат) <> Тип("Массив")) И (ТипЗнч(Результат) <> Тип("Соответствие")) Тогда
		Возврат;
	КонецЕсли;
	
	МножественныйВыбор = Параметры.МножественныйВыбор;
	СтрокаДанных = Параметры.СтрокаДанных;
	ТекущаяСтрока = Параметры.ТекущаяСтрока;
	ТипАдреса = Параметры.ТипАдреса;
	
	Модифицированность = Истина;
	
	// Заполнение адресатов
	Если Не МножественныйВыбор Тогда
		
		Если Результат.Количество() > 0 Тогда
			
			Представление = Строка(Результат[0].Контакт);
			Если ТипЗнч(Результат[0].Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
				Представление = ОбщегоНазначенияСУЗВызовСервера.ЗначениеРеквизитаОбъекта(
					Результат[0].Контакт,
					"ПредставлениеВПерепискеСРангом");
				Представление = Представление + " <" + Результат[0].Адрес + ">";
			
			ИначеЕсли ТипЗнч(Результат[0].Контакт) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				СтрокаДанных.ГруппаПользователя = Результат[0].Контакт;
				
			Иначе 
				Представление = Представление + " <" + Результат[0].Адрес + ">";
			КонецЕсли;
			
			Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
				Результат[0].Адрес, Представление);
			СтрокаДанных.Адресат = Адресат;
			СведенияОбАдресате = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(Адресат);
			СтрокаДанных.Контакт = СведенияОбАдресате.Контакт;
			СтрокаДанных.Представление = СведенияОбАдресате.Представление;
			СтрокаДанных.Адрес = Результат[0].Адрес;	
			
			ТекущийПолучатель = СтрокаДанных.Контакт;
			
		КонецЕсли;
		
	Иначе
		
		ПараметрыЗаполненияТекущейСтроки = Неопределено;
		ДобавленыАдресаты = ЗанестиВПолучателиВыбранныеСтроки(
			Результат, 
			ТекущаяСтрока, 
			ПараметрыЗаполненияТекущейСтроки,
			ТипАдреса);
		
		Если ПараметрыЗаполненияТекущейСтроки <> Неопределено Тогда
			
			Если СтрокаДанных <> Неопределено Тогда
				СтрокаДанных.Адресат = ПараметрыЗаполненияТекущейСтроки.Адресат;
				СтрокаДанных.Адрес =  ПараметрыЗаполненияТекущейСтроки.Адрес;
				СтрокаДанных.Контакт = ПараметрыЗаполненияТекущейСтроки.Контакт;
				СтрокаДанных.Представление = ПараметрыЗаполненияТекущейСтроки.Представление;
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Оповестить("ДобавленыАдресаты");
	
КонецПроцедуры

&НаСервере
// На сервере заполняет получателей после выбора и адресной книги
// Параметры
//
// ВыбранныеАдресаты - массив структур с адресатами, который вернула адресная книга
// ИдТекущаяСтрока - идентификатор текущй строки
// ВозвращаемыйПараметрыЗаполненияТекущейСтроки - данные для заполнения текущей строки (на сервере нельзя это сделать)
// ТипАдреса - тип адреса для вновь создаваемых получателей
Функция ЗанестиВПолучателиВыбранныеСтроки(ВыбранныеАдресаты, ИдТекущаяСтрока, 
	ВозвращаемыйПараметрыЗаполненияТекущейСтроки, ТипАдреса)
	
	ДобавленыАдресаты = Ложь;
	
	Если ИдТекущаяСтрока <> Неопределено Тогда
		СтрокаДанных = Получатели.НайтиПоИдентификатору(ИдТекущаяСтрока);
	КонецЕсли;	
	
	АдресаПолучателей = Новый Соответствие;
	КонтактыПолучателей = Новый Соответствие;
	
	Для Каждого Строка Из Получатели Цикл
		
		Если ЗначениеЗаполнено(Строка.Адресат) Тогда
			
			АдресаПолучателей[НРег(Строка.Адресат.Адрес)] = Строка.Контакт;
			КонтактыПолучателей[Строка.Контакт] = НРег(Строка.Адресат.Адрес);
			
		КонецЕсли;	
			
	КонецЦикла;	
	
	СоответствиеАдресатов = 
		ВстроеннаяПочтаСервер.ПолучитьСоответствиеАдресатовПоАдресуИКонтакту(ВыбранныеАдресаты);
	
	Индекс = 0;
	ИспользованаТекущаяСтрока = Ложь;
	Для Индекс = 0 По ВыбранныеАдресаты.Количество() - 1 Цикл
		
		Строка = ВыбранныеАдресаты[Индекс];
		
		КодВозврата = "";
		
		Если ЗначениеЗаполнено(Строка.Адрес) Тогда 
			Адрес = Строка.Адрес;
		ИначеЕсли Строка.Свойство("МассивАдресатов") И ЗначениеЗаполнено(Строка.МассивАдресатов) Тогда 
			Адрес = Строка.МассивАдресатов[0].Адрес;
		КонецЕсли;
		
		НайденАдресПоКонтакту = КонтактыПолучателей.Получить(Строка.Контакт);
		НайденКонтактПоАдресу = АдресаПолучателей.Получить(НРег(Адрес));
		Если НайденАдресПоКонтакту <> Неопределено И НайденКонтактПоАдресу <> Неопределено Тогда
			КодВозврата = "ПолныйДубль";
		ИначеЕсли НайденАдресПоКонтакту = Неопределено И НайденКонтактПоАдресу <> Неопределено Тогда	
			КодВозврата = "ТотЖеАдресДругойКонтакт";
		КонецЕсли;	
			
		Если КодВозврата = "ПолныйДубль" Тогда // эту строку не добавляем - она уже есть
			Продолжить;
		КонецЕсли;	
		
		ДобавленыАдресаты = Истина;
		
		Если КодВозврата = "ТотЖеАдресДругойКонтакт" Тогда // сообщим об ошибке, но строку все же добавим
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Адрес ""%1"" встречается в адресатах письма дважды (""%2"" и ""%3"")'"),
					Строка.Адрес, Строка.Контакт, НайденКонтактПоАдресу);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,,
				"Получатели");
				
		КонецЕсли;	
		
		НоваяСтрока = Неопределено;
		ЭтоТекущаяСтрока = Ложь;
		Если Не ИспользованаТекущаяСтрока И СтрокаДанных <> Неопределено Тогда
			НоваяСтрока = СтрокаДанных;
			ИспользованаТекущаяСтрока = Истина;
			ЭтоТекущаяСтрока = Истина;
		Иначе
			НоваяСтрока = Получатели.Добавить();
			НоваяСтрока.ТипАдреса = ТипАдреса;
		КонецЕсли;
		
		ЭтоГруппа = Ложь;
		Представление = Строка(Строка.Контакт);
		Если ТипЗнч(Строка.Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
			Представление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Строка.Контакт, "ПредставлениеВПерепискеСРангом");
				
		//ИначеЕсли ТипЗнч(Строка.Контакт) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
		//	СтрокаДанных.ГруппаПользователя = Строка.Контакт;
		//	ЭтоГруппа = Истина;
			
		КонецЕсли;
		
		Если Не ЭтоГруппа Тогда 
			Если Не ПустаяСтрока(Представление) Тогда
				Представление = Представление + " <" + Строка.Адрес + ">";
			Иначе
				Представление = Строка.Адрес;
			КонецЕсли;
		КонецЕсли;
		
		АдресатСтруктура = СоответствиеАдресатов[НРег(Адрес)];
		Адресат = Неопределено;
		Если АдресатСтруктура <> Неопределено Тогда
			Адресат = АдресатСтруктура.Адресат;
		Иначе
			Адресат = ВстроеннаяПочтаСервер.ПолучитьПочтовогоАдресата(Адрес, Представление);
		КонецЕсли;
		
		НоваяСтрока.Адресат = Адресат;
		НоваяСтрока.Контакт = Строка.Контакт;
		
		Если ПустаяСтрока(Представление) Тогда
			НоваяСтрока.Представление = Строка.Адрес;
		Иначе	
			НоваяСтрока.Представление = Представление;
		КонецЕсли;
		
		НоваяСтрока.Адрес = Адрес;
		
		Если ЭтоТекущаяСтрока Тогда
			ВозвращаемыйПараметрыЗаполненияТекущейСтроки = 
				Новый Структура("Адресат, Контакт, Представление, Адрес",
				НоваяСтрока.Адресат, НоваяСтрока.Контакт, НоваяСтрока.Представление, НоваяСтрока.Адрес);
		КонецЕсли;	
		
		НоваяСтрока.НомерСпособаАдресации = ОпределитьНомерСпособаАдресации(ТипАдреса);
	КонецЦикла;
	
	Возврат ДобавленыАдресаты;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбора()
	
	// заполнение списка выбора адресатов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
		|	ИспользованиеАдресатовПользователями.Адресат,
		|	ЕСТЬNULL(СведенияОбАдресатах.Контакт, НЕОПРЕДЕЛЕНО) КАК Контакт,
		|	ЕСТЬNULL(СведенияОбАдресатах.Представление, АдресатыПочтовыхСообщений.Наименование) КАК Представление,
		|	АдресатыПочтовыхСообщений.Адрес,
		|	ЛичныеАдресаты.Пользователь
		|ИЗ
		|	РегистрСведений.ИспользованиеАдресатовПользователями КАК ИспользованиеАдресатовПользователями
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АдресатыПочтовыхСообщений КАК АдресатыПочтовыхСообщений
		|		ПО ИспользованиеАдресатовПользователями.Адресат = АдресатыПочтовыхСообщений.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛичныеАдресаты КАК ЛичныеАдресаты
		|			ПО СведенияОбАдресатах.Контакт = ЛичныеАдресаты.Ссылка
		|		ПО ИспользованиеАдресатовПользователями.Адресат = СведенияОбАдресатах.АдресатСообщения
		|ГДЕ
		|	ИспользованиеАдресатовПользователями.Пользователь = &Пользователь
		|	И (ЛичныеАдресаты.Пользователь ЕСТЬ NULL 
		|			ИЛИ ЛичныеАдресаты.Пользователь = &Пользователь)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИспользованиеАдресатовПользователями.ДатаПоследнегоИспользования УБЫВ";
		
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Выборка = Запрос.Выполнить().Выбрать();
	ПолучателиПредставлениеСписокВыбора.Очистить();
	Пока Выборка.Следующий() Цикл
		
		Значение = Новый Структура;
		Значение.Вставить("Адресат", Выборка.Адресат);
		Значение.Вставить("Адрес", Выборка.Адрес);		
		Значение.Вставить("Контакт", Выборка.Контакт);
		Значение.Вставить("Представление",  Выборка.Представление);
		
		КартинкаВыбора = БиблиотекаКартинок.ВнешнийАдресат16;
		//КартинкаВыбора = БиблиотекаКартинок.ВнутреннийАдресат16;
		
		Если ЗначениеЗаполнено(Выборка.Представление) Тогда
			Если ПриложениеЯвляетсяВебКлиентом Тогда 
				ПолучателиПредставлениеСписокВыбора.Добавить(Значение, Выборка.Представление);
			Иначе
				ПолучателиПредставлениеСписокВыбора.Добавить(Значение, Выборка.Представление,,КартинкаВыбора);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ПолучателиПредставление.КнопкаВыпадающегоСписка =
		(ПолучателиПредставлениеСписокВыбора.Количество() > 0);
	
КонецПроцедуры

&НаСервере
Процедура УчетнаяЗаписьПроверитьПараметрыПочты()
	
	Если ЗначениеЗаполнено(Объект.УчетнаяЗапись)
		И Объект.УчетнаяЗапись.ИспользоватьДляОтправки
		И ЗначениеЗаполнено(Объект.УчетнаяЗапись.СерверИсходящейПочты) Тогда
		
		ЗаполненыПараметрыEmailУчетнойЗаписи = Истина;
		
	Иначе
		ЗаполненыПараметрыEmailУчетнойЗаписи = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершениеПроверитьОрфографиюТекст(Результат, Параметры) Экспорт
	
	Если Результат.ТекстИзменен Тогда
		ТекстПисьма = Результат.ТекстПисьма;
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОрфографиюHTML(ОтправкаПисьма = Ложь)
	
	ТекстHTMLОригинальный = "<html><body>" + ТелоПисьмаВHTML.ПолучитьТекст() + "</body></html>";//ПолучитьТекстПисьмаВПоле();
	ТекстHTMLИзмененный = ТекстHTMLОригинальный;
	ТекстДляПроверки = РаботаС_HTML.ПолучитьТекстИзHTML(ТекстHTMLОригинальный);
	
	СловЗаменено = 0;
	СловПропущено = 0;
	НайденоОшибок = 0;
	
	Попытка
		Word = Новый COMОбъект("Word.Application");
		
		Если Word.Documents.Count = 0 Тогда
			Word.Documents.Add();
		КонецЕсли;
		
	Исключение
		ТелоПисьмаВHTMLПриИзменении(Неопределено);
		Word = Неопределено;
		Возврат;
	КонецПопытки;
		
	Исключения = Новый Соответствие;
	СловаЗамены = Новый Соответствие;
	ПорядокСлов = Новый Соответствие;
	
	Текст = ТекстДляПроверки;
	НомерСтрокиНачальный = 1;
	ПозицияВСтроке = -1;
	СловоЗамены = "";
	СловоОригинальное = "";
	НомерСлова = -1;
	НомерСтрокиТекущий = -1;
	
	ПараметрыПроверкиОрфографии = Новый Структура;
	ПараметрыПроверкиОрфографии.Вставить("Текст", Текст);
	ПараметрыПроверкиОрфографии.Вставить("НомерСтрокиНачальный", НомерСтрокиНачальный);
	ПараметрыПроверкиОрфографии.Вставить("ПозицияВСтроке", ПозицияВСтроке); 
	ПараметрыПроверкиОрфографии.Вставить("СловоОригинальное", СловоОригинальное);
	ПараметрыПроверкиОрфографии.Вставить("СловоЗамены", СловоЗамены);
	ПараметрыПроверкиОрфографии.Вставить("НомерСлова", НомерСлова);
	ПараметрыПроверкиОрфографии.Вставить("ТекстДляПроверки", ТекстДляПроверки);
	ПараметрыПроверкиОрфографии.Вставить("ТекстHTMLОригинальный", ТекстHTMLОригинальный); 
	ПараметрыПроверкиОрфографии.Вставить("ТекстHTMLИзмененный", ТекстHTMLИзмененный); 
	ПараметрыПроверкиОрфографии.Вставить("Word", Word);
	ПараметрыПроверкиОрфографии.Вставить("Исключения", Исключения); 
	ПараметрыПроверкиОрфографии.Вставить("СловаЗамены", СловаЗамены); 
	ПараметрыПроверкиОрфографии.Вставить("ПорядокСлов", ПорядокСлов);
	ПараметрыПроверкиОрфографии.Вставить("НомерСтрокиТекущий", НомерСтрокиТекущий);
	ПараметрыПроверкиОрфографии.Вставить("СловЗаменено", СловЗаменено);
	ПараметрыПроверкиОрфографии.Вставить("СловПропущено", СловПропущено);
	ПараметрыПроверкиОрфографии.Вставить("НайденоОшибок", НайденоОшибок);
	ПараметрыПроверкиОрфографии.Вставить("ОтправкаПисьма", ОтправкаПисьма);
	
	ПроверитьОрфографиюВБлокеТекста();
	
КонецПроцедуры

&НаКлиенте
Функция ЗаменитьСлово(ТекстHTMLИзмененный, СловоОригинальное, СловоЗамены, НомерПредыдушегоСлова)
	
	НовыйТекстHTML = "";
	
	Если НомерПредыдушегоСлова = -1 Или НомерПредыдушегоСлова = Неопределено Тогда
		НомерПредыдушегоСлова = 0;
	КонецЕсли;	
	
	Если НомерПредыдушегоСлова <> 0 Тогда
		
		ПозицияНачалаСлова = -1;
		ТекущийНомерСлова = 0;
		
		Пока Истина Цикл
			
			ПозицияНачалаСлова = РаботаСоСтроками.НайтиПосле(ТекстHTMLИзмененный, СловоОригинальное, ПозицияНачалаСлова + 1);
			Если ПозицияНачалаСлова = 0 Тогда
				Возврат ТекстHTMLИзмененный;
			КонецЕсли;
			
			ТекущийНомерСлова = ТекущийНомерСлова + 1;
			Если ТекущийНомерСлова = НомерПредыдушегоСлова + 1 Тогда
				
				НовыйТекстHTML = Лев(ТекстHTMLИзмененный, ПозицияНачалаСлова - 1)
					+ СловоЗамены
					+ Сред(ТекстHTMLИзмененный, ПозицияНачалаСлова + СтрДлина(СловоОригинальное));
					
				Возврат НовыйТекстHTML;	
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	Иначе // просто первое вхождение слова	
		
		ПозицияНачалаСлова = Найти(ТекстHTMLИзмененный, СловоОригинальное);
		Если ПозицияНачалаСлова = 0 Тогда
			Возврат ТекстHTMLИзмененный;
		КонецЕсли;	
		
		НовыйТекстHTML = Лев(ТекстHTMLИзмененный, ПозицияНачалаСлова - 1)
			+ СловоЗамены
			+ Сред(ТекстHTMLИзмененный, ПозицияНачалаСлова + СтрДлина(СловоОригинальное));
		
	КонецЕсли;	
	
	Возврат НовыйТекстHTML;
	
КонецФункции	

&НаКлиенте
Функция ЗаменитьВсеСловаПосле(ТекстHTMLИзмененный, СловоОригинальное, СловоЗамены, НомерПредыдушегоСлова, СловЗаменено)
	
	НовыйТекстHTML = ТекстHTMLИзмененный;
	
	Если НомерПредыдушегоСлова = -1 Или НомерПредыдушегоСлова = Неопределено Тогда
		НомерПредыдушегоСлова = 0;
	КонецЕсли;	
	
	ПозицияНачалаСлова = -1;
	ТекущийНомерСлова = 0;
	ЧислоЗамен = 0;
	СимволыРазделители = ВстроеннаяПочтаКлиент.ПолучитьСимволыРазделители();
	
	Пока Истина Цикл
		
		ПозицияНачалаСлова = РаботаСоСтроками.НайтиПосле(НовыйТекстHTML, СловоОригинальное, ПозицияНачалаСлова + 1);
		Если ПозицияНачалаСлова = 0 Тогда
			Возврат НовыйТекстHTML;
		КонецЕсли;
		
		ТекущийНомерСлова = ТекущийНомерСлова + 1;
		Если ТекущийНомерСлова >= НомерПредыдушегоСлова + 1 Тогда
			
			ИспользоватьСлово = Истина;
			
			Если ПозицияНачалаСлова > 1 Тогда
				СимволДо = Сред(НовыйТекстHTML, ПозицияНачалаСлова - 1, 1);
				Если Найти(СимволыРазделители, СимволДо) = 0 Тогда
					ИспользоватьСлово = Ложь;
				КонецЕсли;		
			КонецЕсли;	
			
			ПозицияКонцаСлова = ПозицияНачалаСлова + СтрДлина(СловоОригинальное);
			Если ПозицияКонцаСлова < СтрДлина(НовыйТекстHTML) Тогда
				СимволПосле = Сред(НовыйТекстHTML, ПозицияКонцаСлова, 1);
				Если Найти(СимволыРазделители, СимволПосле) = 0 Тогда
					ИспользоватьСлово = Ложь;
				КонецЕсли;		
			КонецЕсли;	
			
			Если ИспользоватьСлово Тогда
				
				Если ЧислоЗамен <> 0 Тогда
					СловЗаменено = СловЗаменено + 1;
				КонецЕсли;	
				ЧислоЗамен = ЧислоЗамен + 1;
				
				НовыйТекстHTML = Лев(НовыйТекстHTML, ПозицияНачалаСлова - 1)
					+ СловоЗамены
					+ Сред(НовыйТекстHTML, ПозицияНачалаСлова + СтрДлина(СловоОригинальное));
					
			Иначе
				ПозицияНачалаСлова = ПозицияНачалаСлова + 1;
			КонецЕсли;		
			
		КонецЕсли;	
		
	КонецЦикла;	
		
	Возврат НовыйТекстHTML;
	
КонецФункции	

&НаКлиенте
Процедура ПроверитьОрфографиюВБлокеТекста()
	
	СимволыРазделители = ВстроеннаяПочтаКлиент.ПолучитьСимволыРазделители();
	
	Если Не ПараметрыПроверкиОрфографии.Свойство("ТекстовыйДокумент") Тогда 
		ПараметрыПроверкиОрфографии.Вставить("ТекстовыйДокумент", Новый ТекстовыйДокумент());	
	КонецЕсли;		
	ПараметрыПроверкиОрфографии.ТекстовыйДокумент.УстановитьТекст(ПараметрыПроверкиОрфографии.Текст);
	
	Если Не ПараметрыПроверкиОрфографии.Свойство("КоличествоСтрокТекста") Тогда 
		ПараметрыПроверкиОрфографии.Вставить(
			"КоличествоСтрокТекста", 
			ПараметрыПроверкиОрфографии.ТекстовыйДокумент.КоличествоСтрок());
	КонецЕсли;	
	
	Если Не ПараметрыПроверкиОрфографии.Свойство("НомерСтроки") Тогда 
		ПараметрыПроверкиОрфографии.Вставить("НомерСтроки", ПараметрыПроверкиОрфографии.НомерСтрокиНачальный);
	КонецЕсли;	
	
	Если Не ПараметрыПроверкиОрфографии.Свойство("НомерПервогоСимвола") Тогда 
		ПараметрыПроверкиОрфографии.Вставить("НомерПервогоСимвола", 1);
	КонецЕсли;	
	
	Если Не ПараметрыПроверкиОрфографии.Свойство("НомерАнализируемогоСимвола") Тогда 
		ПараметрыПроверкиОрфографии.Вставить("НомерАнализируемогоСимвола", 1);
	КонецЕсли;	
	
	// Перебор строк
	Для СчСтроки = ПараметрыПроверкиОрфографии.НомерСтроки 
		По ПараметрыПроверкиОрфографии.КоличествоСтрокТекста Цикл
		
		ПараметрыПроверкиОрфографии.НомерСтроки = СчСтроки;
		
		СтрокаСостояние = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru= 'Всего в тексте %1 строк. Проверяется %2 строка.'"),
			Строка(ПараметрыПроверкиОрфографии.КоличествоСтрокТекста), 
			Строка(ПараметрыПроверкиОрфографии.НомерСтроки));
		Состояние(СтрокаСостояние);
		
		// Получение строки, которую далее будем проверять
		СтрокаИзТекста = ПараметрыПроверкиОрфографии.ТекстовыйДокумент.ПолучитьСтроку(ПараметрыПроверкиОрфографии.НомерСтроки);
		
		Если ПараметрыПроверкиОрфографии.ПозицияВСтроке <> -1 
			И (ПараметрыПроверкиОрфографии.НомерСтроки = ПараметрыПроверкиОрфографии.НомерСтрокиНачальный) Тогда
			ПараметрыПроверкиОрфографии.НомерПервогоСимвола = ПараметрыПроверкиОрфографии.ПозицияВСтроке;
		Иначе	
			ПараметрыПроверкиОрфографии.НомерПервогоСимвола = Найти(СтрокаИзТекста, """");
			Если ПараметрыПроверкиОрфографии.НомерПервогоСимвола <> 0 Тогда
				ПараметрыПроверкиОрфографии.НомерПервогоСимвола = ПараметрыПроверкиОрфографии.НомерПервогоСимвола + 1;
			Иначе
				ПараметрыПроверкиОрфографии.НомерПервогоСимвола = 1;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыПроверкиОрфографии.НомерСтрокиТекущий = ПараметрыПроверкиОрфографии.НомерСтроки;
		
		ДлинаСтроки = СтрДлина(СтрокаИзТекста);
		НоваяСтрока = Лев(СтрокаИзТекста, ПараметрыПроверкиОрфографии.НомерПервогоСимвола - 1);
		Слово = "";
		СловоСобрано = Ложь;
		
		// Посимвольный обход строки для выделения и проверки слов
		Для СчСимволов = ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола 
			По ДлинаСтроки Цикл
			
			ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола = СчСимволов;
			
			ПозицияВСтроке = ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола;
			Символ = Сред(СтрокаИзТекста, ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола, 1);
			
			Если Найти(СимволыРазделители, Символ) <> 0 Тогда
				
				Если СтрДлина(Слово) = 0 Тогда
					НоваяСтрока = НоваяСтрока + Символ;
				Иначе
					ДобавочныйСимвол = Символ;
					СловоСобрано = Истина;
				КонецЕсли;
				
			Иначе
				
				Слово = Слово + Символ;
				Если ДлинаСтроки = ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола Тогда 
					СловоСобрано = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ПараметрыПроверкиОрфографии.Свойство("Слово") Тогда 
				ПараметрыПроверкиОрфографии.Вставить("Слово", "");
			КонецЕсли;	
			
			ПараметрыПроверкиОрфографии.Слово = Слово;
			
			Если СловоСобрано Тогда
				
				Результат = ОрфографияОбработатьСлово(Слово, СтрокаИзТекста);
				Слово = "";
				СловоСобрано = Ложь;
				ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола = 
					ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола + 1;
				
				Если Не Результат Тогда
					// Процедура проверки прервана модальным окном и будет продолжена при его закрытии
					Возврат;
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола = 1;
		
	КонецЦикла;
	
	ЗавершитьПроверкуОрфографии();
	
КонецПроцедуры

&НаКлиенте
Функция ОрфографияОбработатьСлово(Слово, СтрокаИзТекста)
				
	СловоНужноПроверитьWord = Истина;
	НеСовпадаетЧислоВхожденийВТекстеИHtml = Ложь;
	
	ЧислоВТексте = СтрЧислоВхождений(ПараметрыПроверкиОрфографии.ТекстДляПроверки, Слово);
	ЧислоВHTML = СтрЧислоВхождений(ПараметрыПроверкиОрфографии.ТекстHTMLОригинальный, Слово);
	Если ЧислоВHTML <> ЧислоВТексте Тогда
		НеСовпадаетЧислоВхожденийВТекстеИHtml = Истина;
	КонецЕсли;	
	
	НаличиеСлова = ПараметрыПроверкиОрфографии.Исключения.Получить(Слово);
	Если НаличиеСлова <> Неопределено Тогда
		СловоНужноПроверитьWord = Ложь;
		ПараметрыПроверкиОрфографии.СловПропущено = ПараметрыПроверкиОрфографии.СловПропущено + 1;
	КонецЕсли;	
	
	ЗамененноеСлово = ПараметрыПроверкиОрфографии.СловаЗамены.Получить(Слово);
	Если ЗамененноеСлово <> Неопределено Тогда
		Слово = ЗамененноеСлово;
		ПараметрыПроверкиОрфографии.СловЗаменено = ПараметрыПроверкиОрфографии.СловЗаменено + 1;
	КонецЕсли;	
	
	Если СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(Слово) Тогда
		СловоНужноПроверитьWord = Ложь;
		ПараметрыПроверкиОрфографии.СловПропущено = ПараметрыПроверкиОрфографии.СловПропущено + 1;
	КонецЕсли;	
	
	Если СловоНужноПроверитьWord Тогда
		
		Если Не ПараметрыПроверкиОрфографии.Word.CheckSpelling(Слово) Тогда
			
			СписокВариантов = Новый СписокЗначений;
			
			Если НеСовпадаетЧислоВхожденийВТекстеИHtml = Ложь Тогда
				
				ВариантыЗамены = ПараметрыПроверкиОрфографии.Word.getSpellingSuggestions(Слово);
				
				Если ВариантыЗамены.Count <> 0 Тогда
					Для НомерВарианта = 1 По ВариантыЗамены.Count Цикл
						СписокВариантов.Добавить(ВариантыЗамены.Item(НомерВарианта).Name);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура("ИсходнаяСтрока,СловоЗамены,СписокВариантов,НеСовпадаетЧислоВхожденийВТекстеИHtml");
			ПараметрыФормы.ИсходнаяСтрока = СокрЛП(СтрокаИзТекста);
			ПараметрыФормы.СловоЗамены = Слово;
			ПараметрыФормы.СписокВариантов = СписокВариантов.Скопировать();
			ПараметрыФормы.НеСовпадаетЧислоВхожденийВТекстеИHtml = НеСовпадаетЧислоВхожденийВТекстеИHtml;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПроверкиОрфографииВБлокеТекста", ЭтотОбъект);
			ОткрытьФорму(
				"Документ.ИсходящееПисьмо.Форма.ПроверкаОрфографии", 
				ПараметрыФормы,
				ЭтаФорма,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
			Возврат Ложь;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Слово = "";
	СловоСобрано = Ложь;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьПроверкуОрфографии()
	
	ПараметрыПроверкиОрфографии.Word.Quit();
	ПараметрыПроверкиОрфографии.Word = Неопределено;
	
	Если СокрЛП(ПараметрыПроверкиОрфографии.ТекстHTMLОригинальный) <> СокрЛП(ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный) Тогда
		
		ТекстПисьма = ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный;
		Модифицированность = Истина;
		ТелоПисьмаВHTMLПриИзменении(Неопределено);
		
	КонецЕсли;
	
	Состояние();
		
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Проверка орфографии завершена. 
		|Заменено слов: %1, пропущено слов: %2.'"),
		ПараметрыПроверкиОрфографии.СловЗаменено, ПараметрыПроверкиОрфографии.СловПропущено);
		
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПроверкиОрфографииВБлокеТекста(КодВозврата, Параметр) Экспорт
						
	Если ТипЗнч(КодВозврата) <> Тип("Структура") Тогда
		ЗавершитьПроверкуОрфографии();
		Возврат;
	КонецЕсли;	
	
	СловоИсходное = ПараметрыПроверкиОрфографии.Слово;
	Кнопка = КодВозврата.Кнопка;
	
	Если Кнопка = "Завершить" Тогда
		ЗавершитьПроверкуОрфографии();
		Возврат;
	КонецЕсли;
	
	Если Кнопка = "ПропуститьВсе" Тогда
		ПараметрыПроверкиОрфографии.Исключения.Вставить(ПараметрыПроверкиОрфографии.Слово, 1);
		ПараметрыПроверкиОрфографии.СловПропущено = ПараметрыПроверкиОрфографии.СловПропущено + 1;
	КонецЕсли;
	
	Если Кнопка = "Пропустить" Тогда
		ПараметрыПроверкиОрфографии.СловПропущено = ПараметрыПроверкиОрфографии.СловПропущено + 1;
	КонецЕсли;
	
	Если Кнопка = "Заменить" Тогда
		
		ПараметрыПроверкиОрфографии.СловоОригинальное = ПараметрыПроверкиОрфографии.Слово;
		ПараметрыПроверкиОрфографии.СловоЗамены = КодВозврата.СловоЗамены;
		
		ПараметрыПроверкиОрфографии.ПозицияВСтроке = ПараметрыПроверкиОрфографии.ПозицияВСтроке 
			+ 1 
			+ СтрДлина(ПараметрыПроверкиОрфографии.СловоЗамены) 
			- СтрДлина(ПараметрыПроверкиОрфографии.СловоОригинальное);
		ПараметрыПроверкиОрфографии.НомерСлова = 
			ПараметрыПроверкиОрфографии.ПорядокСлов.Получить(СловоИсходное);
		
		ПараметрыПроверкиОрфографии.СловЗаменено = ПараметрыПроверкиОрфографии.СловЗаменено + 1;
		ПараметрыПроверкиОрфографии.НайденоОшибок = ПараметрыПроверкиОрфографии.НайденоОшибок + 1;
		
		ПроверкаОрфографииЗаменить();
		Возврат;
		
	КонецЕсли;
	
	Если Кнопка = "ЗаменитьВсе" Тогда
		
		ПараметрыПроверкиОрфографии.СловоЗамены = КодВозврата.СловоЗамены;
		ПараметрыПроверкиОрфографии.СловаЗамены.Вставить(ПараметрыПроверкиОрфографии.Слово, ПараметрыПроверкиОрфографии.СловоЗамены);
		ПараметрыПроверкиОрфографии.ПозицияВСтроке = ПараметрыПроверкиОрфографии.ПозицияВСтроке 
			+ 1 
			+ СтрДлина(ПараметрыПроверкиОрфографии.СловоЗамены) 
			- СтрДлина(ПараметрыПроверкиОрфографии.СловоОригинальное);
		ПараметрыПроверкиОрфографии.СловоОригинальное = ПараметрыПроверкиОрфографии.Слово;
		ПараметрыПроверкиОрфографии.НомерСлова = 
			ПараметрыПроверкиОрфографии.ПорядокСлов.Получить(СловоИсходное);
		
		ПараметрыПроверкиОрфографии.СловЗаменено = ПараметрыПроверкиОрфографии.СловЗаменено + 1;
		ПараметрыПроверкиОрфографии.НайденоОшибок = ПараметрыПроверкиОрфографии.НайденоОшибок + 1;
		
		ПроверкаОрфографииЗаменитьВсе();
		Возврат;
		
	КонецЕсли;
	
	Если Кнопка = "ДобавитьИсключение" Тогда
		
		ПараметрыПроверкиОрфографии.Исключения.Вставить(ПараметрыПроверкиОрфографии.Слово, 1);
		ВстроеннаяПочтаКлиент.ДобавитьСловоВИсключенияWord(
			ПараметрыПроверкиОрфографии.Word, 
			ПараметрыПроверкиОрфографии.Слово);
		
	КонецЕсли;
	
	НомерСлова = ПараметрыПроверкиОрфографии.ПорядокСлов.Получить(СловоИсходное);
	Если ПараметрыПроверкиОрфографии.НомерСлова = Неопределено
		Или ПараметрыПроверкиОрфографии.НомерСлова = -1 Тогда
		ПараметрыПроверкиОрфографии.НомерСлова = 0;
	КонецЕсли;	
	ПараметрыПроверкиОрфографии.НомерСлова = ПараметрыПроверкиОрфографии.НомерСлова + 1;
	ПараметрыПроверкиОрфографии.ПорядокСлов.Вставить(СловоИсходное, ПараметрыПроверкиОрфографии.НомерСлова);
	
	ПроверитьОрфографиюВБлокеТекста(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаОрфографииЗаменить()
	
	// Заменяем не все вхождения слова, а только одно
	ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный = ЗаменитьСлово(
		ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный, 
		ПараметрыПроверкиОрфографии.СловоОригинальное, 
		ПараметрыПроверкиОрфографии.СловоЗамены, 
		ПараметрыПроверкиОрфографии.НомерСлова);
		
	ПараметрыПроверкиОрфографии.Текст = РаботаС_HTML.ПолучитьТекстИзHTML(
		ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный);
		
	// Продолжение проверки	
	ПроверитьОрфографиюВБлокеТекста();
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаОрфографииЗаменитьВсе()
	
	// Заменяем все вхождения слова
	ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный = ЗаменитьВсеСловаПосле(
		ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный, 
		ПараметрыПроверкиОрфографии.СловоОригинальное, 
		ПараметрыПроверкиОрфографии.СловоЗамены, 
		ПараметрыПроверкиОрфографии.НомерСлова, 
		ПараметрыПроверкиОрфографии.СловЗаменено);
		
	ПараметрыПроверкиОрфографии.Текст = РаботаС_HTML.ПолучитьТекстИзHTML(
		ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный);			
	
	// Продолжение проверки	
	ПроверитьОрфографиюВБлокеТекста();	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодобратьПользователя(Текст)
	
	Возврат Пользователи.СформироватьДанныеВыбора(Текст, Истина);
	
КонецФункции

&НаКлиенте
Процедура ВыбратьПользователей(МножественныйВыбор)
	
	РабочаяГруппа = Новый Массив;
	
	Если МножественныйВыбор Тогда
		Для Каждого ТаблицаСтрока Из Объект.Пользователи Цикл
			Участник = РаботаСАдреснойКнигойКлиент.СтруктураВыбранногоАдресата();
			РабочаяГруппа.Добавить(Участник);
		КонецЦикла;
		
		РежимРаботыФормы = 2;
		ЗаголовокФормы = НСтр("ru = 'Подбор пользователей группы доступа общего шаблона письма'");
		ЗаголовокСпискаВыбранных = НСтр("ru = 'Выбранные пользователи/группы:'");
	Иначе
		РежимРаботыФормы = 1;
		ЗаголовокФормы = НСтр("ru = 'Выбор участника группы доступа'");
		ЗаголовокСпискаВыбранных = "";
		
		ТекущиеДанные = Элементы.Пользователи.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Участник = РаботаСАдреснойКнигойКлиент.СтруктураВыбранногоАдресата();
			РабочаяГруппа.Добавить(Участник);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	ПараметрыФормы.Вставить("ЗаголовокСпискаВыбранных", ЗаголовокСпискаВыбранных);
	ПараметрыФормы.Вставить("РежимРаботыФормы", РежимРаботыФормы);
	ПараметрыФормы.Вставить("ВыбранныеАдресаты", РабочаяГруппа);
	ПараметрыФормы.Вставить("КонтекстОткрытия", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершениеПодбораПользователей", ЭтотОбъект, МножественныйВыбор);
	
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПодбораПользователей(ВыбранныеПользователи, МножественныйВыбор) Экспорт
	
	Если ВыбранныеПользователи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МножественныйВыбор Тогда
		Объект.Пользователи.Очистить();
		Для Каждого ГруппаСтрока Из ВыбранныеПользователи Цикл
			Строка = Объект.Пользователи.Добавить();
			Строка.ПользовательИлиГруппа = ГруппаСтрока.Контакт;
		КонецЦикла;
	Иначе
		ТекущаяСтрока = Элементы.Пользователи.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = Объект.Пользователи.НайтиПоИдентификатору(ТекущаяСтрока);
			ТекущиеДанные.ПользовательИлиГруппа = ВыбранныеПользователи[0].Контакт;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

