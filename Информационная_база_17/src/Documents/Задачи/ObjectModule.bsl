
Процедура ПриЗаписи(Отказ)
	
	Перем ИзмененСтатус, ЗначенияДоЗаписи;
	
	УстановитьПривилегированныйРежим(Истина);
	ДополнительныеСвойства.Свойство("ЗначенияДоЗаписи", ЗначенияДоЗаписи);
	
	ИзмененСтатус = ЗначенияДоЗаписи.Статус <> Статус;
	ИзмененИсполнитель = ЗначенияДоЗаписи.Исполнитель <> Исполнитель;
	
	Если ИзмененСтатус Тогда
		Запись = РегистрыСведений.ИсторияЗадач.СоздатьМенеджерЗаписи();
		Запись.Задача = Ссылка;
		Запись.Период = ДатаСтатуса;
		Запись.Статус = Статус;
		Запись.Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
		Запись.Записать();
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыЗадач.ВОчереди Тогда
		Если ИзмененСтатус Тогда
			Если СистемаУчетаЗадачПовтИсп.ПолучитьИспользоватьАвтоматическуюОчередьЗадач() Тогда
				РегистрыСведений.ПорядокЗадачВОчереди.СортироватьЗадачи();
			Иначе
				МассивСтатусовВКонец = Новый Массив;
				МассивСтатусовВКонец.Добавить(Неопределено);
				МассивСтатусовВКонец.Добавить(Перечисления.СтатусыЗадач.ПустаяСсылка());
				МассивСтатусовВКонец.Добавить(Перечисления.СтатусыЗадач.Новая);
				МассивСтатусовВКонец.Добавить(Перечисления.СтатусыЗадач.Ожидание);
				ВКонец = МассивСтатусовВКонец.Найти(ЗначенияДоЗаписи.Статус) <> Неопределено;
				РегистрыСведений.ПорядокЗадачВОчереди.Разместить(Ссылка, ВКонец);
			КонецЕсли;
		ИначеЕсли ИзмененИсполнитель Тогда
			РегистрыСведений.ПорядокЗадачВОчереди.Разместить(Ссылка, Ложь);
		КонецЕсли;
	ИначеЕсли ЗначенияДоЗаписи.Статус = Перечисления.СтатусыЗадач.ВОчереди Тогда
		Если ИзмененСтатус Тогда
			РегистрыСведений.ПорядокЗадачВОчереди.УбратьИзПорядка(Ссылка);
		КонецЕсли;
	КонецЕсли;

	//Заполнение связи с письмом
	Для Каждого СтрокаТЧ Из Предметы Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Предмет) Тогда
			Продолжить;
		КонецЕсли;
		ИмяПредмета = СтрокаТЧ.Предмет.Метаданные().Имя;
		Если ИмяПредмета <> "ВходящееПисьмо" И ИмяПредмета <> "ИсходящееПисьмо" Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.Предмет.Предмет) Тогда
			Продолжить;
		КонецЕсли;
		ПисьмоОбъект = СтрокаТЧ.Предмет.ПолучитьОбъект();
		ПисьмоОбъект.Предмет = Ссылка;
		ПисьмоОбъект.Записать();
	КонецЦикла;
	
	МассивИсполнительЗаказчик = Новый Массив;
	МассивИсполнительЗаказчик.Добавить(Исполнитель);
	МассивИсполнительЗаказчик.Добавить(ЗначенияДоЗаписи.Исполнитель);
	РегистрыСведений.НепрочитанныеЗадачи.ОтметитьНепрочитанной(МассивИсполнительЗаказчик, Ссылка);
	
	//Оповещения по задаче
	АвторизованныйПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	Событие = Новый Структура("ВидСобытия",Неопределено);
	Событие.Вставить("Источник",Ссылка);
	УведомитьИсполнителя = НЕ Исполнитель.Пустая() И Не Исполнитель.Недействителен И Исполнитель <> АвторизованныйПользователь;
	Если УведомитьИсполнителя Тогда
		//Новая задача другому исполнителю, но не автору
		Если ИзмененИсполнитель Тогда
			Событие.ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи;
		//Задача закрыта
		ИначеЕсли ИзмененСтатус И Документы.Задачи.ЗадачаЗакрыта(Ссылка) Тогда
			Событие.ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи; //Это выполнение моей задачи для исполнителя
		//Уведомление, если статус завершенной задачи изменяется.	
		ИначеЕсли Перечисления.СтатусыЗадач.ЭтоСтатусОткрытойЗадачи(Статус) 
				И Перечисления.СтатусыЗадач.ЭтоСтатусЗакрытойЗадачи(ЗначенияДоЗаписи.Статус) Тогда
			Событие.ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи;
		КонецЕсли;
		Если ЗначениеЗаполнено(Событие.ВидСобытия) Тогда
			РаботаСУведомлениями.ОбработатьБизнесСобытие(Событие);
		КонецЕсли;
	КонецЕсли;
	
	//Оповещение предыдущего исполнителя задачи. В задаче изменен исполнитель на другого исполнителя, т.е. задача перенаправлена
	Если Не ДополнительныеСвойства.ЭтоНовый 
			И Не ЗначенияДоЗаписи.Исполнитель.Пустая()
			И ИзмененИсполнитель 
			И ЗначенияДоЗаписи.Исполнитель <> АвторизованныйПользователь Тогда
		Событие.ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи;//Перечисления.СобытияУведомлений.ПеренаправлениеМоейЗадачи; 
		Событие.Вставить("БылИсполнитель",ЗначенияДоЗаписи.Исполнитель);
		Событие.Вставить("СталИсполнитель",Исполнитель);
		РаботаСУведомлениями.ОбработатьБизнесСобытие(Событие);
	КонецЕсли;
	
	//Уведомление заказчика
	
	УведомитьЗаказчика = СистемаУчетаЗадачПовтИсп.ПолучитьИспользоватьУведомленияЗаказчиков()
			И Не КонтактноеЛицоЗаказчика.Владелец.НеУведомлять И Не КонтактноеЛицоЗаказчика.НеУведомлять 
			И КонтактноеЛицоЗаказчика.Владелец.Актуален И КонтактноеЛицоЗаказчика.Актуален 
			И ?(ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя(), 
					АвторизованныйПользователь.ОбъектАвторизации <> КонтактноеЛицоЗаказчика, Истина);
					
	Событие.ВидСобытия = Неопределено;
	Если УведомитьЗаказчика Тогда
		Событие.Вставить("УведомитьЗаказчика",КонтактноеЛицоЗаказчика);
		//Новая задача поставленная не контактным лицом заказчика
		Если ДополнительныеСвойства.ЭтоНовый
				ИЛИ КонтактноеЛицоЗаказчика <> ЗначенияДоЗаписи.КонтактноеЛицоЗаказчика Тогда
			Событие.ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи;
		//Задача закрыта
		ИначеЕсли ИзмененСтатус И Документы.Задачи.ЗадачаЗакрыта(Ссылка) Тогда
			Событие.ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи; //Это выполнение задачи для заказчика
		//Уведомление, если статус завершенной задачи изменяется.	
		ИначеЕсли Перечисления.СтатусыЗадач.ЭтоСтатусОткрытойЗадачи(Статус) 
				И Перечисления.СтатусыЗадач.ЭтоСтатусЗакрытойЗадачи(ЗначенияДоЗаписи.Статус) Тогда
			Событие.ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи;
		КонецЕсли;
		Если ЗначениеЗаполнено(Событие.ВидСобытия) Тогда
			РаботаСУведомлениями.ОбработатьБизнесСобытие(Событие);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Перем Ошибки;
	
	 //++КИТ-ИНТ ЗайцевНС 03.02.2023
	 
	 Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		 
		 Для Каждого СтрРабота Из Работы Цикл
			 
			 Если НЕ ЗначениеЗаполнено(СтрРабота.ИсполнительТЧ) Тогда
				 
				 СтрРабота.ИсполнительТЧ = Исполнитель; 
				 
			 КонецЕсли;
			 
		 КонецЦикла;
		 
	 КонецЕсли;

	//--КИТ-ИНТ ЗайцевНС 03.02.2023
	
	//++КИТ-ИНТ ЗайцевНС 01.02.2023
	
	Для Каждого СтрРабот Из Работы Цикл 
		
		Если Не ЗначениеЗаполнено(СтрРабот.ИсполнительТЧ) Тогда
			
			Сообщить("Заполните всех исполнителей в таблице фактических трудозатрат!");
			
			Отказ = Истина;		
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//--КИТ-ИНТ ЗайцевНС 01.02.2023
		
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Статус) Тогда
		Статус = Перечисления.СтатусыЗадач.Новая;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		ПометкаУдаления = Ложь;
		Статус = Перечисления.СтатусыЗадач.Отменена;
	КонецЕсли;
	
	//Подсистема календарь
	Если Не ЗначениеЗаполнено(КалендарьСотрудника) Тогда
		КалендарьСотрудника = Исполнитель.ОсновнойКалендарь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияДоЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Статус,Исполнитель,Заказчик,КонтактноеЛицоЗаказчика,ОценкаТрудозатрат");
	ДополнительныеСвойства.Вставить("ЗначенияДоЗаписи", ЗначенияДоЗаписи);
	ДополнительныеСвойства.Вставить("ЭтоНовый",ЭтоНовый());
	
	Если Статус <> ЗначенияДоЗаписи.Статус Тогда
		ДатаСтатуса = ТекущаяДата();
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//Запуск таймера задачи
	ОстановитьЗапуститьНаряд(Статус = Перечисления.СтатусыЗадач.ВРаботе И ЗначенияДоЗаписи.Статус <> Перечисления.СтатусыЗадач.ВРаботе);
	
	СтатусыНеПроверятьИсполнителя = Документы.Задачи.ПолучитьСтатусыБезПроверкиИсполнителя();
	Если СтатусыНеПроверятьИсполнителя.Найти(Статус) = Неопределено И Не ЗначениеЗаполнено(Исполнитель) Тогда
		//Заполнение исполнителя текущим
		Если Не ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
			Исполнитель = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		Если Исполнитель.Пустая() Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнен исполнитель!'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.Исполнитель", ТекстОшибки, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыЗадач.ВРаботе И 
			(Статус <> ЗначенияДоЗаписи.Статус ИЛИ Исполнитель <> ЗначенияДоЗаписи.Исполнитель) И
			СистемаУчетаЗадачПовтИсп.ПолучитьОграничиватьКоличествоЗадачВРаботе() Тогда
		ПриостановитьДругиеЗадачиИсполнителя(Ошибки);
	КонецЕсли;
	
	//Проверка обязательных тегов
	ПроверитьОбязательныеТеги(Ошибки, Отказ);
		
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	//Удаление своих задач могут удалять только сами исполнители и только в статусе Отменена
	Если Статус <> Перечисления.СтатусыЗадач.Отменена Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Задача """+Наименование+""" не может быть удалена. Удалить задачу можно только в статусе Отменена.",,,,Отказ);
		Возврат;
	КонецЕсли;
	Если Исполнитель <> ПользователиКлиентСервер.ТекущийПользователь() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Задача """+Наименование+""" не может быть удалена. Удалить задачу может только "+Исполнитель+".",,,,Отказ);
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Ссылка);
	ИсключенныеМетаданные = Новый Массив;
	ИсключенныеМетаданные.Добавить(Метаданные.РегистрыСведений.ИсторияЗадач);
	ИсключенныеМетаданные.Добавить(Метаданные.РегистрыСведений.НепрочитанныеЗадачи);
	ТаблицаНайденныхОбъектов = НайтиПоСсылкам(МассивЗадач);
	НайденыСсылки = Ложь;
	Для Каждого СтрокаТЗ Из ТаблицаНайденныхОбъектов Цикл
		Если ИсключенныеМетаданные.Найти(СтрокаТЗ.Метаданные) = Неопределено Тогда
			НайденыСсылки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НайденыСсылки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Задача """+Наименование+""" не может быть удалена. Есть объекты, которые ее используют.",,,,Отказ);
	Иначе
		//Очистка информации о задаче
		ОчиститьЗаписиРегистраЗадачи("ИсторияЗадач");
		ОчиститьЗаписиРегистраЗадачи("НепрочитанныеЗадачи");
	КонецЕсли;
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Срок = Неопределено;
	Дата = Неопределено;
	ДатаСтатуса = Неопределено;
	Статус = Неопределено;
	Работы.Очистить();
	Предметы.Очистить();
	Документы.Задачи.ОпределитьСрокОценкуЗадачи(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Адресат = Справочники.АдресатыПочтовыхСообщений.ПустаяСсылка();
	ЗаполнениеПоШаблону = Ложь;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Заказчик") Тогда
			Заказчик = ДанныеЗаполнения.Заказчик;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("Проект") Тогда
			Проект = ДанныеЗаполнения.Проект;
			Если Заказчик.Пустая() Тогда
				Заказчик = ЗадачиВызовСервера.ПолучитьОсновногоЗаказчикаПроекта(Проект);
			КонецЕсли;
		КонецЕсли;
		
		//Заполнение из календаря
		Если ДанныеЗаполнения.Свойство("ДанныеЗаписиКалендаря") Тогда
			Наименование = ДанныеЗаполнения.ДанныеЗаписиКалендаря.Наименование;
			Описание = ДанныеЗаполнения.ДанныеЗаписиКалендаря.Описание;
			КалендарьСотрудника = ДанныеЗаполнения.ДанныеЗаписиКалендаря.Календарь;
			НовыйПлан = План.Добавить();
			НовыйПлан.ДатаНачала = ДанныеЗаполнения.ДанныеЗаписиКалендаря.Начало;
			НовыйПлан.ДатаОкончания = ДанныеЗаполнения.ДанныеЗаписиКалендаря.Окончание;
			НовыйПлан.Продолжительность = (НовыйПлан.ДатаОкончания - НовыйПлан.ДатаНачала) / 3600;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ПунктЧекЛиста") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.Задача,"Заказчик, Проект, КонтактноеЛицоЗаказчика, КалендарьСотрудника");
			НовыйПредмет = Предметы.Добавить();
			НовыйПредмет.Предмет = ДанныеЗаполнения.Задача;
			Наименование = ДанныеЗаполнения.ПунктЧекЛиста;
			Если СтрДлина(ДанныеЗаполнения.ПунктЧекЛиста) > 150 Тогда
				Описание = ДанныеЗаполнения.ПунктЧекЛиста;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Работы") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект,ДанныеЗаполнения.Задача,"Наименование, Описание, Заказчик, Проект, КонтактноеЛицоЗаказчика, КалендарьСотрудника");
			НовыйПредмет = Предметы.Добавить();
			НовыйПредмет.Предмет = ДанныеЗаполнения.Задача;
			Для Каждого СтрокаРабот Из ДанныеЗаполнения.Работы Цикл
				НоваяСтрока = Работы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРабот);
			КонецЦикла;
			ЗадачиКлиентСервер.СформироватьРешение(ЭтотОбъект);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Заказчики") Тогда
		Заказчик = ДанныеЗаполнения;
		Проект = Справочники.Проекты.ПолучитьОсновнойПроектЗаказчика(Заказчик);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Проекты") Тогда
		Заказчик = ДанныеЗаполнения.ОсновнойЗаказчик;
		Проект = ДанныеЗаполнения;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.КонтактныеЛицаЗаказчиков") Тогда
		Заказчик = ДанныеЗаполнения.Владелец;
		Проект = Справочники.Проекты.ПолучитьОсновнойПроектЗаказчика(Заказчик);
		КонтактноеЛицоЗаказчика = ДанныеЗаполнения;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Задачи") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ДанныеЗаполнения,"Наименование, Описание, Заказчик, Проект, КонтактноеЛицоЗаказчика, КалендарьСотрудника");
		НовыйПредмет = Предметы.Добавить();
		НовыйПредмет.Предмет = ДанныеЗаполнения;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ШаблоныЗадач") Тогда
		
		ЗаполнениеПоШаблону = Истина;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ДанныеЗаполнения);
		Наименование = ДанныеЗаполнения.НаименованиеЗадачи;
		Срок = ТекущаяДата() + ДанныеЗаполнения.СрокВДнях * 86400;
		
		//Теги из шаблона
		Для Каждого СтрокаТег Из ДанныеЗаполнения.Теги Цикл
			НовыеДанныеТега = Теги.Добавить();
			НовыеДанныеТега.Тег = СтрокаТег.Тег;
		КонецЦикла;
		//Чек-лист
		Для Каждого СтрокаТЧ Из ДанныеЗаполнения.ЧекЛист Цикл
			НоваяСтрока = ЧекЛист.Добавить();
			НоваяСтрока.Описание = СтрокаТЧ.Описание;
		КонецЦикла;
		//Доп. реквизиты
		Если ДанныеЗаполнения.ДополнительныеРеквизиты.Количество() > 0 Тогда
			ДополнительныеРеквизиты.Очистить();
			Для Каждого СтрокаТЧ Из ДанныеЗаполнения.ДополнительныеРеквизиты Цикл
				НоваяСтрока = ДополнительныеРеквизиты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
		Наименование = ДанныеЗаполнения.Тема;
		Описание = ДанныеЗаполнения.ТекстПисьмаПростойТекстХранилище.Получить();
		Адресат = ДанныеЗаполнения.ОтправительАдресат;
		НовыйПредмет = Предметы.Добавить();
		НовыйПредмет.Предмет = ДанныеЗаполнения;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		Наименование = ДанныеЗаполнения.Тема;
		Описание = ДанныеЗаполнения.ТекстХранилище.Получить();
		Если ДанныеЗаполнения.ПолучателиПисьма.Количество() > 0 Тогда
			Адресат = ДанныеЗаполнения.ПолучателиПисьма[0].Адресат;
		КонецЕсли;
		НовыйПредмет = Предметы.Добавить();
		НовыйПредмет.Предмет = ДанныеЗаполнения;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ЗаписиКалендаряСотрудника") Тогда
		Наименование = ДанныеЗаполнения.Наименование;
		Описание = ДанныеЗаполнения.Описание;
		КалендарьСотрудника = ДанныеЗаполнения.Календарь;
		Если ЗначениеЗаполнено(ДанныеЗаполнения.Источник) И ТипЗнч(ДанныеЗаполнения.Источник) = Тип("ДокументСсылка.Задачи") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект,ДанныеЗаполнения.Источник,"Описание, Заказчик, Проект, КонтактноеЛицоЗаказчика");
			НовыйПредмет = Предметы.Добавить();
			НовыйПредмет.Предмет = ДанныеЗаполнения;
		КонецЕсли;
		//НовыйПлан = План.Добавить();
		//НовыйПлан.ДатаНачала = ДанныеЗаполнения.Начало;
		//НовыйПлан.ДатаОкончания = ДанныеЗаполнения.Окончание;
		//НовыйПлан.Продолжительность = (НовыйПлан.ДатаОкончания - НовыйПлан.ДатаНачала) / 3600;
	КонецЕсли;
	
	Если Не Адресат.Пустая() Тогда
		Контакт = РаботаСЛичнымиАдресатами.НайтиКонтактПоАдресату(Адресат);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,Контакт);
	КонецЕсли;
	
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		Заказчик = ПользователиКлиентСервер.АвторизованныйПользователь().ОбъектАвторизации.Владелец;
		//Поиск исполнителя за последние месяцы
		Исполнитель = СистемаУчетаЗадачСервер.ИсполнительПоУмолчанию(ЭтотОбъект);
	ИначеЕсли Исполнитель.Пустая() Тогда
		Исполнитель = ПользователиКлиентСервер.АвторизованныйПользователь();
	КонецЕсли;
	
	//Теги из заказчика
	Для Каждого СтрокаТег Из Заказчик.Теги Цикл
		Если Теги.НайтиСтроки(Новый Структура("Тег", СтрокаТег.Тег)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		НовыеДанныеТега = Теги.Добавить();
		НовыеДанныеТега.Тег = СтрокаТег.Тег;
	КонецЦикла;
	
	//Теги из проекта
	Для Каждого СтрокаТег Из Проект.Теги Цикл
		Если Теги.НайтиСтроки(Новый Структура("Тег", СтрокаТег.Тег)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		НовыеДанныеТега = Теги.Добавить();
		НовыеДанныеТега.Тег = СтрокаТег.Тег;
	КонецЦикла;
	
	Если Статус.Пустая() Тогда
		Статус = Перечисления.СтатусыЗадач.Новая;
	КонецЕсли;
	
	Если НЕ ЗаполнениеПоШаблону Тогда
		Документы.Задачи.ЗаполнитьМинимальныйПриоритетЗадачи(ЭтотОбъект);
		Документы.Задачи.ОпределитьСрокОценкуЗадачи(ЭтотОбъект);
		Документы.Задачи.УпроститьОписаниеЗадачи(ЭтотОбъект);
	КонецЕсли;
	
	//Подсистема календарь
	Если Не ЗначениеЗаполнено(КалендарьСотрудника) Тогда
		КалендарьСотрудника = Исполнитель.ОсновнойКалендарь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриостановитьДругиеЗадачиИсполнителя(Ошибки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Задачи.Ссылка
	|ИЗ
	|	Документ.Задачи КАК Задачи
	|ГДЕ
	|	Задачи.Статус = &Статус
	|	И Задачи.Исполнитель = &Исполнитель
	|	И Ссылка <> &Ссылка";
	Запрос.УстановитьПараметр("Статус", Статус);
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если Ложь Тогда ЗадачаОбъект = Документы.Задачи.СоздатьДокумент(); КонецЕсли;
		Попытка
			ЗадачаОбъект.Заблокировать();
			ЗадачаОбъект.Статус = Перечисления.СтатусыЗадач.ВОчереди;
			ЗадачаОбъект.Записать();
		Исключение
			ТекстОшибки = НСтр("ru = 'Не удалось изменить статус <%1>: %2'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ЗадачаОбъект, ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.Статус", ТекстОшибки, Неопределено);
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Процедура ОстановитьЗапуститьНаряд(Запустить)
	ТекущаяДата = ТекущаяДата();
	НезаконченныеРаботы = Работы.НайтиСтроки(Новый Структура("ДатаОкончания",'00010101'));
	Если (Запустить И НезаконченныеРаботы.Количество() > 0)
			ИЛИ (не Запустить И Статус = Перечисления.СтатусыЗадач.ВРаботе) Тогда
		Возврат; //Задача уже запущена
	КонецЕсли;
	Для Каждого НезаконченнаяРабота Из НезаконченныеРаботы Цикл
		//+++++++++++++++++++
		//НезаконченнаяРабота.ДатаОкончания = ТекущаяДата;
		//НезаконченнаяРабота.Трудозатраты = (НезаконченнаяРабота.ДатаОкончания - НезаконченнаяРабота.ДатаНачала)/3600;
		
		Если НЕ НезаконченнаяРабота.Трудозатраты = 0 Тогда
			НезаконченнаяРабота.ДатаНачала = ?(ЗначениеЗаполнено(НезаконченнаяРабота.ДатаНачала), НезаконченнаяРабота.ДатаНачала, ТекущаяДата());
			НезаконченнаяРабота.ДатаОкончания = НезаконченнаяРабота.ДатаНачала + НезаконченнаяРабота.Трудозатраты * 3600;
		Иначе
			НезаконченнаяРабота.ДатаОкончания = ТекущаяДата;
			НезаконченнаяРабота.Трудозатраты = (НезаконченнаяРабота.ДатаОкончания - НезаконченнаяРабота.ДатаНачала)/3600;
		КонецЕсли;
		//+++++++++++++
	КонецЦикла;
	
	Если Запустить Тогда
		Работа = Работы.Добавить();
		Работа.ДатаНачала = ТекущаяДата;
		
		//++КИТ-ИНТ ЗайцевНС 01.02.2023
		
		Работа.ИсполнительТЧ =  Исполнитель;
		
		//--КИТ-ИНТ ЗайцевНС 01.02.2023

	КонецЕсли;
КонецПроцедуры	

#Область ПрограммныйИнтерфейсКалендаряСотрудника

Процедура ОбновитьЗаписьКалендаряПриЗаписиИсточника(ЗаписиПоИсточнику) Экспорт
	
	// Отмена всех существующих записей календарей по событию в случае очистки календаря в событии или установки пометки удаления
	Если ПометкаУдаления Или Не ЗначениеЗаполнено(КалендарьСотрудника) Тогда
	
		Для Каждого ЗаписьКалендаря Из ЗаписиПоИсточнику Цикл
			ЗаписьКалендаря = ЗаписьКалендаря.ПолучитьОбъект();
			ЗаписьКалендаря.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоЗаписейКалендаря = ЗаписиПоИсточнику.Количество();
	Для Каждого СтрокаПлана Из План Цикл
		
		Если СтрокаПлана.НомерСтроки > КоличествоЗаписейКалендаря Тогда
			
			ЗаписьКалендаря = Справочники.ЗаписиКалендаряСотрудника.СоздатьЭлемент();
			ЗаписьКалендаря.УстановитьНовыйКод();
			
		Иначе
			
			ЗаписьКалендаря = ЗаписиПоИсточнику[СтрокаПлана.НомерСтроки-1].ПолучитьОбъект();
			
			Если ЗаписьКалендаря.ПометкаУдаления Тогда
				ЗаписьКалендаря.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
		ОбменСGoogle.ОбработатьСменуКалендаря(ЗаписьКалендаря, КалендарьСотрудника);
		
		ЗаписьКалендаря.Наименование		= Наименование;// + ?(Срок = '00010101',""," Срок: "+Формат(Срок,"ДФ=dd.MM.yyyy"));
		ЗаписьКалендаря.Источник			= Ссылка;
		ЗаписьКалендаря.Календарь			= КалендарьСотрудника;
		ЗаписьКалендаря.Начало				= СтрокаПлана.ДатаНачала;
		ЗаписьКалендаря.Окончание			= СтрокаПлана.ДатаОкончания;
		ЗаписьКалендаря.Описание			= "Заказчик: "+Заказчик.Наименование + ", 
				|Проект: " + Проект.Наименование
				+ ?(ПустаяСтрока(СтрокаПлана.ПланируемыеДействия),"",", 
				|" + СтрокаПлана.ПланируемыеДействия);
		ЗаписьКалендаря.НомерСтрокиИсточника = СтрокаПлана.НомерСтроки;
		
		ЗаписьКалендаря.Записать();
		
	КонецЦикла;
	
	//Удаление лишних записей по источнику
	КоличествоВПлане = План.Количество();
	Если КоличествоВПлане < КоличествоЗаписейКалендаря Тогда
		Разница = КоличествоЗаписейКалендаря - КоличествоВПлане;
		Для Сч = 1 По Разница Цикл
			ЗаписьКалендаря = ЗаписиПоИсточнику[КоличествоВПлане - 1 + Сч].ПолучитьОбъект();
			ЗаписьКалендаря.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьИсточникПриИзмененииЗаписиКалендаря(ЭлементыПланировщика) Экспорт
	
	Для Каждого ДанныеЭлемента Из ЭлементыПланировщика Цикл
		СтрокаПлана = План.Получить(ДанныеЭлемента.НомерСтрокиИсточника-1);
		СтрокаПлана.ДатаНачала		= ДанныеЭлемента.Начало;
		СтрокаПлана.ДатаОкончания	= ДанныеЭлемента.Конец;
		СтрокаПлана.Продолжительность = (СтрокаПлана.ДатаОкончания - СтрокаПлана.ДатаНачала) / 3600;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьИсточникПриУдаленииЗаписиКалендаря(ЭлементыПланировщика) Экспорт
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого ДанныеЭлемента Из ЭлементыПланировщика Цикл
		СтрокиКУдалению.Добавить(План.Получить(ДанныеЭлемента.НомерСтрокиИсточника-1));
	КонецЦикла;
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		План.Удалить(СтрокаКУдалению);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

Процедура ПроверитьОбязательныеТеги(Ошибки, Отказ)
	
	Если Статус <> Перечисления.СтатусыЗадач.Завершена Тогда
		Возврат;
	КонецЕсли;
	//Поиск всех обязательных групп и их тегов
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТегиЗадачи", Теги.ВыгрузитьКолонку("Тег"));
	Запрос.Текст = "ВЫБРАТЬ
	               |	Теги.Ссылка КАК Тег
	               |ПОМЕСТИТЬ втТеги
	               |ИЗ
	               |	Справочник.Теги КАК Теги
	               |ГДЕ
	               |	Теги.Актуален
	               |	И НЕ Теги.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втТеги.Тег КАК ОбязательныйТег
	               |ПОМЕСТИТЬ втГруппы
	               |ИЗ
	               |	втТеги КАК втТеги
	               |ГДЕ
	               |	втТеги.Тег.Обязателен
	               |	И втТеги.Тег.ЭтоГруппа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втТеги.Тег КАК Тег
	               |ИЗ
	               |	втТеги КАК втТеги
	               |ГДЕ
	               |	НЕ втТеги.Тег.ЭтоГруппа
	               |	И втТеги.Тег В ИЕРАРХИИ
	               |			(ВЫБРАТЬ
	               |				втГруппы.ОбязательныйТег КАК ОбязательныйТег
	               |			ИЗ
	               |				втГруппы КАК втГруппы)
	               |	И втТеги.Тег В(&ТегиЗадачи)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втГруппы.ОбязательныйТег КАК ОбязательныйТег
	               |ИЗ
	               |	втГруппы КАК втГруппы";
	МассивЗапросов = Запрос.ВыполнитьПакет();
	
	//Если нет обязательных групп тегов
	Если МассивЗапросов[3].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивЗапросов[2].Пустой() Тогда
		ТекстОшибки = НСтр("ru = 'В классификации не указаны теги из обязательных групп тегов!'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстОшибки, Неопределено);
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Неопределено, "ПолеВводаТега", , Отказ);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОчиститьЗаписиРегистраЗадачи(ИмяРегистра)
	
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задача.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры
