#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Печать

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Задание исполнителю
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаданиеИсполнителю";
	КомандаПечати.Представление = НСтр("ru = 'Задание исполнителю'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;

	// Задание для заказчика
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаданиеДляЗаказчика";
	КомандаПечати.Представление = НСтр("ru = 'Задание для заказчика'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;

КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаданиеИсполнителю") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ЗаданиеИсполнителю",
			НСтр("ru = 'Задание исполнителю'"),
			СформироватьПечатнуюФормуЗаданиеИсполнителю(МассивОбъектов, ОбъектыПечати));
				
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаданиеДляЗаказчика") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ЗаданиеДляЗаказчика",
			НСтр("ru = 'Задание для заказчика'"),
			СформироватьПечатнуюФормуЗаданиеИсполнителю(МассивОбъектов, ОбъектыПечати, Истина));
				
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область ШаблоныСообщений

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Подсказка      - Строка - Расширенная информация о реквизите.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** Подсказка      - Строка - Расширенная информация о вложении.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: 
//				"pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
		
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "НомерЧислом";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Представление номера задания числом.'");
	НовыйРеквизит.Представление = НСтр("ru = 'Номер числом'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
	
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "ДобавленныйКомментарийНомерЧислом";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Представление номера добавленного комментария числом.'");
	НовыйРеквизит.Представление = НСтр("ru = 'Добавленный комментарий номер числом'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");	
	
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "ДобавленныйКомментарийТекст";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Добавленный комментарий (в текстовом формате).'");
	НовыйРеквизит.Представление = НСтр("ru = 'Добавленный комментарий (в текстовом формате)'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
	
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "ПоследнийОбычныйКомментарийТекст";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Последний обычный комментарий (в текстовом формате).'");
	НовыйРеквизит.Представление = НСтр("ru = 'Последний обычный комментарий (в текстовом формате)'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
	
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "ПредыдущийИсполнитель";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Предыдущий исполнитель в задаче.'");
	НовыйРеквизит.Представление = НСтр("ru = 'Предыдущий исполнитель в задаче'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
	
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "ПредыдущийЗаказчик";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Предыдущий заказчик в задаче.'");
	НовыйРеквизит.Представление = НСтр("ru = 'Предыдущий заказчик в задаче'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
	
	//РеквизитТекстHTML 					  = Реквизиты.Найти("Задание.ТекстHTML");
	//Реквизиты.Удалить(РеквизитТекстHTML);
	//РеквизитИдентификаторСообщения 		  = Реквизиты.Найти("Задание.ИдентификаторСообщения");
	//Реквизиты.Удалить(РеквизитИдентификаторСообщения);
	//РеквизитУчетнаяЗаписьЭлектроннойПочты = Реквизиты.Найти("Задание.УчетнаяЗаписьЭлектроннойПочты");
	//Реквизиты.Удалить(РеквизитУчетнаяЗаписьЭлектроннойПочты);
	
	Если ДополнительныеПараметры.ТипШаблона = "Письмо"
		И ДополнительныеПараметры.ФорматПисьма = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		НовыйРеквизит     			= Реквизиты.Добавить();
		НовыйРеквизит.Имя 			= "ОписаниеЗаданияHTML";
		НовыйРеквизит.Подсказка		= НСтр("ru = 'Представление описания задания (в формате HTML).'");
		НовыйРеквизит.Представление = НСтр("ru = 'Описание задания (в формате HTML)'");
		НовыйРеквизит.ПроизвольныйПараметр  = Истина;
		НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
		
		НовыйРеквизит     			= Реквизиты.Добавить();
		НовыйРеквизит.Имя 			= "ДобавленныйКомментарийHTML";
		НовыйРеквизит.Подсказка		= НСтр("ru = 'Добавленный комментарий (в формате HTML).'");
		НовыйРеквизит.Представление = НСтр("ru = 'Добавленный комментарий (в формате HTML)'");
		НовыйРеквизит.ПроизвольныйПараметр  = Истина;
		НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
		
		НовыйРеквизит     			= Реквизиты.Добавить();
		НовыйРеквизит.Имя 			= "ПоследнийОбычныйКомментарийHTML";
		НовыйРеквизит.Подсказка		= НСтр("ru = 'Последний обычный комментарий (в формате HTML).'");
		НовыйРеквизит.Представление = НСтр("ru = 'Последний обычный комментарий (в формате HTML)'");
		НовыйРеквизит.ПроизвольныйПараметр  = Истина;
		НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
		
	КонецЕсли;	
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
	Сообщение.Вставить("Предмет", ПредметСообщения);	
	
	// Внешняя ссылка. 
	Если Сообщение.ЗначенияРеквизитов.Получить("ВнешняяСсылкаНаОбъект") <> Неопределено Тогда
		ЗначениеВнешнейСсылки = Сообщение.ЗначенияРеквизитов.Получить("ВнешняяСсылкаНаОбъект");
		ТекстЗаголовка = ?(ПустаяСтрока(ПредметСообщения.Тема), Строка(ПредметСообщения.Номер) + " от " + Строка(Формат(ПредметСообщения.Дата, "ДФ=dd.MM.yy")), ПредметСообщения.Тема);  
		Сообщение.ЗначенияРеквизитов["ВнешняяСсылкаНаОбъект"] = "<a href=" + Строка(ЗначениеВнешнейСсылки) + ">" + ТекстЗаголовка + "</a></p>";
	КонецЕсли;		
	
	Для Каждого КлючЗначение Из Сообщение.ДополнительныеПараметры Цикл		
		Если Сообщение.ЗначенияРеквизитов.Получить(КлючЗначение.Ключ) <> Неопределено Тогда
			Сообщение.ЗначенияРеквизитов[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиSMS, ПредметСообщения, "КонтактноеЛицоЗаказчика", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиПисьма, ПредметСообщения, "КонтактноеЛицоЗаказчика");
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсКалендаряСотрудника

// Функция определяет пиктограмму для элемента записи календаря
//
// Параметры:
//  Событие	 - ДокументСсылка.Событие	 - событие, для записи календаря которого подбирается картинка
// 
// Возвращаемое значение:
//  Картинка - пиктограмма записи календаря
//
Функция КартинкаЗаписиКалендаря(Событие) Экспорт
	
	Картинка = Неопределено;
	//ТипСобытия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Событие, "ТипСобытия");
	//СоответствиеТиповКартинкам = ПолучитьСоответствиеТиповСобытийКартинкам();
	//Картинка = СоответствиеТиповКартинкам[ТипСобытия];
	Если Картинка = Неопределено Тогда
		Картинка = Новый Картинка;
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

// Функция определяет цвет текста для элемента записи календаря
//
// Параметры:
//  Событие	 - ДокументСсылка.Событие	 - событие, для записи календаря которого подбирается цвет
// 
// Возвращаемое значение:
//  Цвет - цвет текста записи календаря
//
Функция ЦветТекстаЗаписиКалендаря(Задача) Экспорт
	
	//Серым цветом подсвечивается текст выполненой задачи или задачи на подтверждении
	ЦветСостояния = Новый Цвет;
	Если Перечисления.СтатусыЗадач.ЭтоСтатусВыполненойЗадачи(Задача.Статус) Тогда
		ЦветСостояния = WebЦвета.Серый;
	КонецЕсли;
	
	Возврат ЦветСостояния;
	
КонецФункции

// Функция определяет цвет текста для элемента записи календаря
//
// Параметры:
//  Событие	 - ДокументСсылка.Событие	 - событие, для записи календаря которого подбирается цвет
// 
// Возвращаемое значение:
//  Цвет - цвет текста записи календаря
//
Функция ДополнитьПодсказкуЗаписиКалендаря(Задача) Экспорт
	
	//Серым цвтом подсвечивается текст выполненой задачи или задачи на подтверждении
	Подсказка = ?(Задача.КонтактноеЛицоЗаказчика.Пустая(),"","Контактное лицо: "+Задача.КонтактноеЛицоЗаказчика.Наименование);
	
	ПодсказкаЧасы = ?(Задача.ОценкаТрудозатрат=0,"","Трудоемкость (ч): "+Задача.ОценкаТрудозатрат);
	Подсказка = Подсказка + ?(ПустаяСтрока(Подсказка),"","
		|") + ПодсказкаЧасы;
	
	ПодсказкаСрок = ?(Задача.Срок='00010101',"","Срок: "+Формат(Задача.Срок,"ДФ=dd.MM.yyyy"));
	Подсказка = Подсказка + ?(ПустаяСтрока(Подсказка),"","
		|") + ПодсказкаСрок;
	
	
	Возврат Подсказка;
	
КонецФункции

// Процедура заполняет таблицу описаний расширенного ввода записи календаря
//
// Параметры:
//  ТаблицаОписаний	 - ТаблицаЗначений	 - описание колонок см. Справочник.ЗаписиКалендаряСотрудника.ПриЗаполненииРасширенногоВводаЗаписиКалендаря()
//
Процедура ПриЗаполненииРасширенногоВводаЗаписиКалендаря(ТаблицаОписаний) Экспорт
	
	НоваяСтрока = ТаблицаОписаний.Добавить();
	НоваяСтрока.ИмяФормы = "Документ.Задачи.Форма.ФормаЭлемента";
	//НоваяСтрока.ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("ТипСобытия", Перечисления.ТипыСобытий.ЛичнаяВстреча));
	НоваяСтрока.Представление = НСтр("ru='Новая задача'");
	
	//НоваяСтрока = ТаблицаОписаний.Добавить();
	//НоваяСтрока.ИмяФормы = "Документ.Событие.Форма.ФормаСобытия";
	//НоваяСтрока.ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("ТипСобытия", Перечисления.ТипыСобытий.ТелефонныйЗвонок));
	//НоваяСтрока.Представление = НСтр("ru='Событие: Телефонный звонок'");
	//
	//НоваяСтрока = ТаблицаОписаний.Добавить();
	//НоваяСтрока.ИмяФормы = "Документ.Событие.Форма.ФормаСобытия";
	//НоваяСтрока.ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("ТипСобытия", Перечисления.ТипыСобытий.Прочее));
	//НоваяСтрока.Представление = НСтр("ru='Событие: Прочее'");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьПечатнуюФормуЗаданиеИсполнителю(МассивОбъектов, ОбъектыПечати, ЗаданиеДляЗаказчика = Ложь)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Наименование КАК Наименование,
	|	Документ.Заказчик КАК Заказчик,
	|	Документ.Проект КАК Проект,
	|	Документ.КонтактноеЛицоЗаказчика КАК КонтактноеЛицоЗаказчика,
	|	Документ.Исполнитель КАК Исполнитель,
	|	Документ.Срок КАК Срок,
	|	Документ.ОценкаТрудозатрат КАК ОценкаТрудозатрат
	|ИЗ
	|	Документ.Задачи КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Задачи_ЗаданиеИсполнителю";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Задачи.ПФ_MXL_ЗаданиеИсполнителю");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьТеги = Макет.ПолучитьОбласть("Теги");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьЗаголовокРаздела = Макет.ПолучитьОбласть("ЗаголовокРаздела");
	ОбластьРаздел = Макет.ПолучитьОбласть("Раздел");
	
	ПервыйДокумент = Истина;
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаПоДокументам);
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = "Задание № " + ВыборкаПоДокументам.Номер + " от " + Формат(ВыборкаПоДокументам.Дата,"ДФ=dd.MM.yyyy")
				+ ". " + ВыборкаПоДокументам.Наименование;
		Контакты = Документы.Задачи.ПолучитьКонтакты(ВыборкаПоДокументам.Заказчик);
		ОбластьЗаголовок.Параметры.ЗаказчикПредставление = ВыборкаПоДокументам.Заказчик.Наименование +?(ПустаяСтрока(Контакты),"",", "+ Контакты);
		Контакты = Документы.Задачи.ПолучитьКонтакты(ВыборкаПоДокументам.КонтактноеЛицоЗаказчика);
		ОбластьЗаголовок.Параметры.КонтакноеЛицоПредставление = ВыборкаПоДокументам.КонтактноеЛицоЗаказчика.Наименование +?(ПустаяСтрока(Контакты),"",", "+ Контакты);
		ТабДокумент.Вывести(ОбластьЗаголовок);
		
		// Вывод описания.
		ОписаниеЗадачи = ВыборкаПоДокументам.Ссылка.Описание;
		Если Не ПустаяСтрока(ОписаниеЗадачи) Тогда
			ОбластьЗаголовокРаздела.Параметры.ЗаголовокРаздела = "Описание задания: ";
			ТабДокумент.Вывести(ОбластьЗаголовокРаздела);
			Для Сч = 1 По СтрЧислоСтрок(ОписаниеЗадачи) Цикл
				ОбластьРаздел.Параметры.ОписаниеРаздела = СтрПолучитьСтроку(ОписаниеЗадачи, Сч);
				ТабДокумент.Вывести(ОбластьРаздел);
			КонецЦикла;
		КонецЕсли;
		
		Если ЗаданиеДляЗаказчика Тогда
			//Вывод комментария
			РешениеЗадачи = ВыборкаПоДокументам.Ссылка.РезультатВыполнения;
			Если Не ПустаяСтрока(РешениеЗадачи) Тогда
				ОбластьЗаголовокРаздела.Параметры.ЗаголовокРаздела = "Результат выполнения: ";
				ТабДокумент.Вывести(ОбластьЗаголовокРаздела);
				Для Сч = 1 По СтрЧислоСтрок(РешениеЗадачи) Цикл
					ОбластьРаздел.Параметры.ОписаниеРаздела = СтрПолучитьСтроку(РешениеЗадачи, Сч);
					ТабДокумент.Вывести(ОбластьРаздел);
				КонецЦикла;
			КонецЕсли;
		Иначе
			//Вывод параметров проекта
			ПараметрыПроекта = ПолучитьТекстыФайловПроекта(ВыборкаПоДокументам.Проект);
			Если НЕ ПустаяСтрока(ПараметрыПроекта) Тогда
				ОбластьЗаголовокРаздела.Параметры.ЗаголовокРаздела = "Параметры проекта: ";
				ТабДокумент.Вывести(ОбластьЗаголовокРаздела);
				Для Сч = 1 По СтрЧислоСтрок(ПараметрыПроекта) Цикл
					ОбластьРаздел.Параметры.ОписаниеРаздела = СтрПолучитьСтроку(ПараметрыПроекта, Сч);
					ТабДокумент.Вывести(ОбластьРаздел);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		//Вывод заинтересованных лиц
		Если ВыборкаПоДокументам.Ссылка.Лица.Количество()>0 Тогда
			ОбластьЗаголовокРаздела.Параметры.ЗаголовокРаздела = "Заинтересованные лица: ";
			ТабДокумент.Вывести(ОбластьЗаголовокРаздела);
			Для Каждого СтрокаЛицо Из ВыборкаПоДокументам.Ссылка.Лица Цикл
				Контакты = Документы.Задачи.ПолучитьКонтакты(СтрокаЛицо.Лицо);
				ОбластьРаздел.Параметры.ОписаниеРаздела = СтрокаЛицо.Лицо.Наименование 
					+?(ЗначениеЗаполнено(СтрокаЛицо.Роль),"",", "+ СтрокаЛицо.Роль)
					+?(ПустаяСтрока(Контакты),"",", "+ Контакты);
				ТабДокумент.Вывести(ОбластьРаздел);
			КонецЦикла;
		КонецЕсли;
		
		//Вывод подвала
		ОбластьПодвал.Параметры.Исполнитель = ВыборкаПоДокументам.Исполнитель;
		ТабДокумент.Вывести(ОбластьПодвал);
		
		//Вывод тегов
		Если ВыборкаПоДокументам.Ссылка.Теги.Количество()>0 Тогда
			Теги = "";
			Для Каждого СтрокаТег Из ВыборкаПоДокументам.Ссылка.Теги Цикл
				Теги = Теги + СтрокаТег.Тег + ", ";
			КонецЦикла;
			Теги = Лев(Теги, СтрДлина(Теги)-2)+".";
			ОбластьТеги.Параметры.Теги = Теги;
			ТабДокумент.Вывести(ОбластьТеги);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

// Заполняет список команд отправки по электронной почте.
// 
// Параметры:
//  КомандыОтправки - ТаблицаЗначений - состав полей см. в функции ОтправкаПочтовыхСообщений.КомандыОтправки
//
Процедура ДобавитьКомандыОтправки(КомандыОтправки) Экспорт
	
	// Задание исполнителю
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "ЗаданиеИсполнителю";
	КомандаОтправки.Представление = НСтр("ru='Задание исполнителю'");
	КомандаОтправки.СписокФорм    = "ФормаСписка,ФормаЭлемента";
	КомандаОтправки.Порядок       = 10; 
	
	// Задание для заказчика
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "ЗаданиеДляЗаказчика";
	КомандаОтправки.Представление = НСтр("ru='Задание для заказчика'");
	КомандаОтправки.СписокФорм    = "ФормаСписка,ФормаЭлемента";
	КомандаОтправки.Порядок       = 12; 
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьТекстыФайловПроекта(Проект) 
	
	Текст = Проект.Описание;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПроектыПрисоединенныеФайлы.Ссылка КАК Файл
	               |ИЗ
	               |	Справочник.ПроектыПрисоединенныеФайлы КАК ПроектыПрисоединенныеФайлы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.СписокРасширенийТекстовыхФайлов КАК СписокРасширенийТекстовыхФайлов
	               |		ПО (ИСТИНА)
	               |ГДЕ
	               |	ПроектыПрисоединенныеФайлы.ВладелецФайла = &Проект
	               |	И СписокРасширенийТекстовыхФайлов.Значение ПОДОБНО ""%"" + ПроектыПрисоединенныеФайлы.Расширение + ""%""
	               |	И ПроектыПрисоединенныеФайлы.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.Извлечен)";
	Запрос.УстановитьПараметр("Проект",Проект);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Текст = Текст + "
		|" +Выборка.Файл.Наименование+"
		|" + Выборка.Файл.ТекстХранилище.Получить()+"
		|";
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

#КонецЕсли

Процедура УстановитьУсловноеОформление(ОформляемыйСписок, БазовыйШрифт, ПоляОформленияДаты = "") Экспорт
	
	УсловноеОформление = ОформляемыйСписок.УсловноеОформление;
	
	// непрочитанные
	ПараметрПользователь = Новый ПараметрКомпоновкиДанных("Пользователь");
	ДоступныйПараметр = ОформляемыйСписок.Параметры.ДоступныеПараметры.НайтиПараметр(ПараметрПользователь);
	Если ДоступныйПараметр <> Неопределено Тогда 
		ОформляемыйСписок.Параметры.УстановитьЗначениеПараметра(ПараметрПользователь, ПользователиКлиентСервер.АвторизованныйПользователь());
	КонецЕсли;
	
	Если УсловноеОформление.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Непрочитана")) <> Неопределено Тогда
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, "Непрочитана", ВидСравненияКомпоновкиДанных.Равно, Истина);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(БазовыйШрифт, , , Истина));
	КонецЕсли;
	
	// пустой исполнитель
	Если УсловноеОформление.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Исполнитель")) <> Неопределено Тогда
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, "Исполнитель", ВидСравненияКомпоновкиДанных.НеЗаполнено, Неопределено);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Исполнитель>'"));
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Исполнитель");
	КонецЕсли;
	
	// пустой заказчик
	Если УсловноеОформление.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Заказчик")) <> Неопределено Тогда
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, "Заказчик", ВидСравненияКомпоновкиДанных.НеЗаполнено, Неопределено);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Заказчик>'"));
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Заказчик");
	КонецЕсли;
	
	МассивПолейОформленияДаты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляОформленияДаты, ",", Истина, Истина);
	//МассивПолейОформленияОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляОформленияОшибки, ",", Истина, Истина);
	
	Если МассивПолейОформленияДаты.Количество() <> 0 Тогда
		ЭлементОформленияДата = УсловноеОформление.Элементы.Добавить();
		ЭлементОформленияДата.Оформление.УстановитьЗначениеПараметра("Формат", "ДЛФ=D");
		Для каждого ПолеОформления Из МассивПолейОформленияДаты Цикл
			ЭлементОформленияДата.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ПолеОформления);
			
			ЭлементОформленияВремя = УсловноеОформление.Элементы.Добавить();
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформленияВремя.Отбор, ПолеОформления, ВидСравненияКомпоновкиДанных.Больше, НачалоДня(ТекущаяДата()));
			ЭлементОформленияВремя.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=ЧЧ:мм");
			ЭлементОформленияВремя.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ПолеОформления);
		КонецЦикла;
	КонецЕсли;
	
	// По статусам
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ВыполненнаяЗадача);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, "Статус", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусыЗадач.Завершена);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементОформления.Отбор, "Статус", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтатусыЗадач.Отменена);
	
КонецПроцедуры

Функция ПолучитьСтатусыБезПроверкиИсполнителя() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.СтатусыЗадач.Новая);
	Массив.Добавить(Перечисления.СтатусыЗадач.Отменена);
	Массив.Добавить(Перечисления.СтатусыЗадач.Ожидание);
	Возврат Массив;
КонецФункции

Процедура УстановитьСтатусИсполнителяЗадач(Знач МассивЗадач, Знач Статус, Знач Исполнитель = Неопределено) Экспорт
	Перем Ошибки, Отказ;
	
	Для Каждого Задача Из МассивЗадач Цикл
		Попытка
			Объект = Задача.ПолучитьОбъект();
			Объект.Заблокировать();
			Объект.Статус = Статус;
			Если Не ЗначениеЗаполнено(Объект.Исполнитель) И ЗначениеЗаполнено(Исполнитель) Тогда
				Объект.Исполнитель = Исполнитель;
			КонецЕсли;
			Объект.Записать();
		Исключение
			Инфо = ИнформацияОбОшибке();
			Текст = НСтр("ru = 'Ошибка изменения задачи <%1>: %2'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Объект, Инфо.Причина.Описание);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", Текст, Неопределено);
		КонецПопытки;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	Представление = Данные.Наименование;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	Поля.Очистить();
	Поля.Добавить("Наименование");
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Параметры:
//  Данные    - ссылка задачи, выводимого в списке связанных документов.
//  Представление - Строка - поместить в этот параметр рассчитанное представление объекта. 
//  СтандартнаяОбработка - Булево - поместить в этот параметр Ложь, если установлено значение параметра Представление.
Процедура ПредставлениеВСтруктуреПодчиненности(Данные, Представление, СтандартнаяОбработка) Экспорт
	Представление = "Задача: " + Данные.Наименование + " (" + Данные.Статус + ", исполнитель: "+?(Данные.Исполнитель.Пустая(),"<Не указан>",Данные.Исполнитель)+")";
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ОпределитьСрокОценкуЗадачи(Задача) Экспорт
	
	ТекущаяДата = ТекущаяДата();
	
	Если Задача.ОценкаТрудозатрат > 0 И Задача.Срок > ТекущаяДата Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СРЕДНЕЕ(РАЗНОСТЬДАТ(ИсторияЗадачСрезПоследних.Задача.Дата, ИсторияЗадачСрезПоследних.Период, СЕКУНДА)) КАК РазницаДляСрока,
		|	СРЕДНЕЕ(ИсторияЗадачСрезПоследних.Задача.ОценкаТрудозатрат) КАК ЧасовКОплате
		|ИЗ
		|	РегистрСведений.ИсторияЗадач.СрезПоследних(
		|			,
		|			(&Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|				ИЛИ Задача.Исполнитель = &Исполнитель)
		|				И ВЫБОР
		|					КОГДА &Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
		|						ТОГДА Задача.Заказчик = &Заказчик
		|					ИНАЧЕ Задача.Проект = &Проект
		|				КОНЕЦ
		|				И Задача.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадач.Завершена)
		|				И Задача <> &Задача) КАК ИсторияЗадачСрезПоследних
		|ГДЕ
		|	ИсторияЗадачСрезПоследних.Задача.Дата >= &Дата";
	
	Запрос.УстановитьПараметр("Задача", Задача.Ссылка);
	Запрос.УстановитьПараметр("Заказчик", Задача.Заказчик);
	Запрос.УстановитьПараметр("Исполнитель", Задача.Исполнитель);
	Запрос.УстановитьПараметр("Проект", Задача.Проект);
	Запрос.УстановитьПараметр("Дата", ДобавитьМесяц(ТекущаяДата(),-12));
	
	
	ЧасовНаВыполнение = 0;
	ЧасовКОплате = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Выборка.РазницаДляСрока = NULL Тогда
		Возврат;
	КонецЕсли;
	Если Задача.Срок <= ТекущаяДата Тогда
		Задача.Срок = ?(Задача.Дата = '00010101',ТекущаяДата,Задача.Дата) + Выборка.РазницаДляСрока;
	КонецЕсли;
	Если Задача.ОценкаТрудозатрат = 0 Тогда
		Задача.ОценкаТрудозатрат = Выборка.ЧасовКОплате;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМинимальныйПриоритетЗадачи(Задача) Экспорт
	Задача.Приоритет = Мин(Задача.Приоритет,?(Задача.Заказчик.МинимальныйПриоритет = 0, 9, Задача.Заказчик.МинимальныйПриоритет),
			?(Задача.Проект.МинимальныйПриоритет = 0, 9, Задача.Проект.МинимальныйПриоритет));
КонецПроцедуры

Процедура УпроститьОписаниеЗадачи(Задача) Экспорт
	//2 и более пустые строки подряд будут удаляться из описания
	НовоеОписание = "";
	ПредыдущаяСтрокаПустая = Истина;
	ВсегоСтрок = СтрЧислоСтрок(Задача.Описание);
	Для Счетчик = 1 По ВсегоСтрок Цикл
		
		ТекущаяСтрока = СтрПолучитьСтроку(Задача.Описание, Счетчик);
		ТекущаяСтрокаПустая = ПустаяСтрока(ТекущаяСтрока);
		
		//Первые пустые строки пропускаем
		Если Счетчик = 1 И ТекущаяСтрокаПустая Тогда
			Продолжить;
		КонецЕсли;
		
		Если Счетчик > 1 И ТекущаяСтрокаПустая И ПустаяСтрока(СтрПолучитьСтроку(Задача.Описание, Счетчик-1)) Тогда
			Продолжить;
		КонецЕсли;
		
		НовоеОписание = НовоеОписание + ТекущаяСтрока + ?(Счетчик = ВсегоСтрок, "", Символы.ПС);
	КонецЦикла;
	Задача.Описание = НовоеОписание;
КонецПроцедуры

Функция ПолучитьКонтакты(КонтактноеЛицо) Экспорт
	
	Если Не ЗначениеЗаполнено(КонтактноеЛицо) ИЛИ ТипЗнч(КонтактноеЛицо) = Тип("Строка") Тогда
		Возврат "";
	КонецЕсли;
	
	Контакты = "";
	АдресаЭП = "";
	Телефоны = "";
	Для Каждого СтрокаТЧ ИЗ КонтактноеЛицо.КонтактнаяИнформация Цикл
		Если СтрокаТЧ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			АдресаЭП = АдресаЭП + СтрокаТЧ.Представление+", ";
		КонецЕсли;
		Если СтрокаТЧ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			Телефоны = Телефоны + СтрокаТЧ.Представление+", ";
		КонецЕсли;
	КонецЦикла;
	Если Не ПустаяСтрока(АдресаЭП) Тогда
		Контакты = "E-mail: "+Лев(АдресаЭП,СтрДлина(АдресаЭП)-2);
	КонецЕсли;
	Если Не ПустаяСтрока(Телефоны) Тогда
		Контакты = ?(ПустаяСтрока(Контакты),"Телефон: ",Контакты + ", телефон: ")+Лев(Телефоны,СтрДлина(Телефоны)-2);
	КонецЕсли;
	Возврат Контакты;
	
КонецФункции

Функция ЗадачаЗакрыта(Задача) Экспорт
	Возврат Задача.Статус = Перечисления.СтатусыЗадач.Завершена ИЛИ Задача.Статус = Перечисления.СтатусыЗадач.Отменена;
КонецФункции

Функция ПолучитьАвтора(Задача) Экспорт
	Набор = РегистрыСведений.ИсторияЗадач.СоздатьНаборЗаписей();
	Набор.Отбор.Задача.Установить(Задача);
	Набор.Прочитать();
	Если Набор.Количество() > 0 Тогда
		Возврат Набор[0].Пользователь;
	КонецЕсли;
	Возврат Справочники.Пользователи.ПустаяСсылка();
КонецФункции