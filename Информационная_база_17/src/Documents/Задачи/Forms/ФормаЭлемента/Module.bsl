
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, Новый Структура("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты"));
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПриСозданииПриЧтенииНаСервере();
		
	КонецЕсли;
	
	ЭтоВнешнийПользователь = ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя();
	
	Если Не ЭтоВнешнийПользователь Тогда
		//Система календаря
		ОповеститьРабочийКалендарь = Ложь;
		ИнициализироватьКалендарь();
		ОбменСGoogle.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	КонецЕсли;
	
	//Режим редактирования текстовых полей
	ЗадачиКлиентСервер.НастройкаРедактированияТекстовогоПоля(ЭтаФорма, Элементы.Описание);
	ЗадачиКлиентСервер.НастройкаРедактированияТекстовогоПоля(ЭтаФорма, Элементы.РезультатВыполнения);
	Элементы["РезультатВыполнения_ВводТекста"].ПодсказкаВвода = "Ввести результат выполнения...";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриИзмененииПроектаСервер(Истина);
	КонецЕсли;
	
	УстановитьКартинкуСостоянияЭтапаТрудозатрат();
	ОбновитьИнформациюОСроке();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииПриЧтенииНаСервере();
	
	РегистрыСведений.НепрочитанныеЗадачи.ОтметитьПрочтенной(ТекущийОбъект.Ссылка);
	СтатусДоИзменения = Объект.Статус;
	ПриоритетПриИзмененииНаСервере();
	ПолучитьФакт();

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗадачиКлиентСервер.РежимРедактированияТекстовогоПоля(ЭтаФорма, Объект.Описание, Элементы.Описание, "Сохранить");
	ОписаниеПриИзменении(Неопределено);
	
	//Если кнопка изменения текста невидимая
	Если Не Элементы["РезультатВыполнения_ИзменитьТекст"].Видимость 
			И Не ПустаяСтрока(ЭтаФорма["РезультатВыполнения_ВводТекста"]) Тогда
		Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗадач.ВРаботе") Тогда
			Элементы["РезультатВыполнения_ИзменитьТекст"].Видимость = Истина;
			Элементы["РезультатВыполнения_ГруппаВводаТекста"].Видимость = Ложь;
			Элементы["РезультатВыполнения"].Видимость = Истина;
		КонецЕсли;
		ЗадачиКлиентСервер.ВнестиОписаниеРешения(Объект, ЭтаФорма["РезультатВыполнения_ВводТекста"], Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	//Подсистема календарь
	Если Модифицированность Тогда
		ОповеститьРабочийКалендарь = Истина;
	КонецЕсли;
	
	ЗаписатьДанныеТегов(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ЭтоВнешнийПользователь Тогда
		ОбменСGoogle.УвеличитьЗначениеСчетчикаПодсказок(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если СтатусДоИзменения <> Объект.Статус Тогда
		Оповестить("Задачи.ИзменениеСтатуса", СтатусДоИзменения, ЭтаФорма);
		Оповестить("Задачи.ИзменениеСтатуса", Объект.Статус, ЭтаФорма);
	
		СтатусДоИзменения = Объект.Статус;
	КонецЕсли;
	
	Если ИсполнительДоИзменения <> Объект.Исполнитель Тогда
		ИсполнительДоИзменения = Объект.Исполнитель;
	КонецЕсли;

	УстановитьКартинкуСостоянияЭтапаТрудозатрат();
	
	ЦветСтраницы(Элементы.ГруппаРаботы);
	
	//Подсистема календарь
	Оповестить("Запись_ИсточникЗаписейКалендаряСотрудника");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Файлы
	ЗначениеПараметра = Файлы.Параметры.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("ВладелецФайла"));
	Если Не ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда 
		Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.Ссылка);
	КонецЕсли;
	
	ЗаполнитьТипыПредметов();
	
	Если Элементы.ГруппаОсновная.ТекущаяСтраница = Элементы.ГруппаЛица Тогда
		ЗаполнитьКонтактыЛиц();
	КонецЕсли;
	
	ПолучитьФакт();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// чтобы в ДС сбросилось оформление непрочтенных задач
		ОповеститьОбИзменении(Объект.Ссылка);
	КонецЕсли;
	
	//Система календаря
	Если ОповеститьРабочийКалендарь Тогда
		Оповестить("ИзмененоСобытие", Объект.Исполнитель);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Перем ВладелецФайла;
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" И ТипЗнч(Источник) = Тип("Структура")
		И Источник.ВладелецФайлов = Объект.Ссылка Тогда
		ОбработатьОповещениеОНовыхФайлахСервер();
		Если Параметр <> Неопределено Тогда
			Элементы.Файлы.ТекущаяСтрока = Параметр;
		КонецЕсли;
		Элементы.ГруппаОсновная.ТекущаяСтраница = Элементы.ГруппаФайлы;
		УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" Тогда //И Параметр.Событие = "СозданФайл" Тогда
		ВладелецФайла = Неопределено;
		Если Параметр.Свойство("ВладелецФайла", ВладелецФайла) Тогда
			Если ВладелецФайла = Объект.Ссылка Тогда
				ОбработатьОповещениеОНовыхФайлахСервер();
				ФайлСозданный = Неопределено;
				Если Параметр.Свойство("Файл", ФайлСозданный) Тогда
					Элементы.Файлы.ТекущаяСтрока = ФайлСозданный;
				КонецЕсли;
				Элементы.ГруппаОсновная.ТекущаяСтраница = Элементы.ГруппаФайлы;
				УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииПриЧтенииНаСервере() Экспорт
	
	// 1. Инициализация реквизитов формы
	
	ИсполнительДоИзменения = Объект.Исполнитель;
	ПредметыНаОсновании.Параметры.УстановитьЗначениеПараметра("Задача", Объект.Ссылка);
	
	// 2. Чтение дополнительных данных
	
	ПрочитатьДанныеТегов();
	ОбновитьЭлементыТегов();
	ЗаполнитьТипыПредметов();
	ЗаполнитьКонтакты();
	
	ОбновитьФайлыЗадачи();

КонецПроцедуры

#КонецОбласти

#Область РеквизитыФормы
	
&НаКлиенте
Процедура СрокПриИзменении(Элемент)
	ОбновитьИнформациюОСроке();
КонецПроцедуры

&НаКлиенте
Процедура ДатаСтатусаПриИзменении(Элемент)
	ОбновитьИнформациюОСроке();
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Попытка
	    Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКОписанию(Команда)
	ТекущийЭлемент = Элементы.Описание;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКРезультату(Команда)
	ТекущийЭлемент = Элементы.РезультатВыполнения;
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	//Заказчик = ЗадачиВызовСервера.ПолучитьОсновногоЗаказчикаПроекта(Объект.Проект);
	//Если ЗначениеЗаполнено(Заказчик) И Заказчик <> Объект.Заказчик Тогда
	//	Объект.Заказчик = Заказчик;
	//КонецЕсли;
	ПриИзмененииПроектаСервер();
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоЗаказчикаПриИзменении(Элемент)
	ЗаполнитьКонтакты();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтакты()
	Контакты = Документы.Задачи.ПолучитьКонтакты(Объект.КонтактноеЛицоЗаказчика);
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПроектаСервер(ЗаполнениеПриОткрытии = Ложь)
	Если Объект.КонтактноеЛицоЗаказчика.Пустая() Тогда
		Если ЭтоВнешнийПользователь Тогда
			Объект.КонтактноеЛицоЗаказчика = Пользователи.АвторизованныйПользователь().ОбъектАвторизации;
		Иначе
			Объект.КонтактноеЛицоЗаказчика = Объект.Проект.ОсновноеКонтактноеЛицо;
		КонецЕсли;
		ЗаполнитьКонтакты();
	КонецЕсли;
	Документы.Задачи.ЗаполнитьМинимальныйПриоритетЗадачи(Объект);
	ПриоритетПриИзмененииНаСервере();
	//При создании новой задачи заполнение срока и оценки происходит в модуле задачи 
	Если Не ЗаполнениеПриОткрытии Тогда
		Документы.Задачи.ОпределитьСрокОценкуЗадачи(Объект);
	КонецЕсли;
	Для Каждого СтрокаТег Из Объект.Проект.Теги Цикл
		ПрикрепитьТегНаСервере(СтрокаТег.Тег);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	ИсполнительПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ИсполнительПриИзмененииСервер()
	Если Объект.ОценкаТрудозатрат = 0 Тогда
		Документы.Задачи.ОпределитьСрокОценкуЗадачи(Объект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикПриИзменении(Элемент)
	
	ЗаказчикПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаказчикПриИзмененииСервер()
	
	Для Каждого СтрокаТег Из Объект.Заказчик.Теги Цикл
		ПрикрепитьТегНаСервере(СтрокаТег.Тег);
	КонецЦикла;
	Объект.Проект = ПолучитьОсновнойПроектЗаказчика(Объект.Заказчик);
	ПриИзмененииПроектаСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриоритетПриИзмененииНаСервере()
	ЦветПриоритета = РегистрыСведений.ЦветаПриоритетов.ПолучитьЦветПриоритета(Объект.Приоритет);
КонецПроцедуры

&НаКлиенте
Процедура ПриоритетПриИзменении(Элемент)
	ПриоритетПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	Если ПустаяСтрока(Объект.Наименование) И Не ПустаяСтрока(Объект.Описание) Тогда
		Объект.Наименование = СтрПолучитьСтроку(Объект.Описание,1);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Описание_ИзменитьТекст(Команда)
	ЗадачиКлиентСервер.РежимРедактированияТекстовогоПоля(ЭтаФорма, Объект.Описание, Элементы.Описание, "Изменить");
КонецПроцедуры

&НаКлиенте
Процедура Описание_СохранитьТекст(Команда)
	Записать();
КонецПроцедуры

&НаКлиенте
Процедура Описание_ОтменитьТекст(Команда)
	ЗадачиКлиентСервер.РежимРедактированияТекстовогоПоля(ЭтаФорма, Объект.Описание, Элементы.Описание, "Отменить");
КонецПроцедуры

&НаКлиенте
Процедура Описание_РазвернутьСвернуть(Команда)
	
	КомандаИмя = Команда.Имя;
	Элементы[КомандаИмя].Пометка   = Не Элементы[КомандаИмя].Пометка;
	Элементы[КомандаИмя].Заголовок = ?(Элементы[КомандаИмя].Пометка, "Развернуть", "Свернуть");
	
	ЗадачиКлиентСервер.РазвернутьСвернуть(ЭтаФорма, Элементы.ГруппаОписание, "Описание");
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыполнения_ИзменитьТекст(Команда)
	Элементы["РезультатВыполнения_ИзменитьТекст"].Видимость = Ложь;
	Элементы["РезультатВыполнения_ГруппаВводаТекста"].Видимость = Истина;
	ТекущийЭлемент = Элементы["РезультатВыполнения_ВводТекста"];
	
	Если СистемаУчетаЗадачПовтИсп.ПолучитьФормироватьРезультатЗадачПоДням() Тогда
		ВсегоРабот = Объект.Работы.Количество();
		ЭтаФорма["РезультатВыполнения_ВводТекста"] = ?(ВсегоРабот = 0, "", Объект.Работы[ВсегоРабот-1].ВыполненныеДействия);
	Иначе
		Элементы["РезультатВыполнения"].Видимость = Ложь;
		ЭтаФорма["РезультатВыполнения_ВводТекста"] = Объект.РезультатВыполнения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыполнения_СохранитьТекст(Команда)
	Записать();
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыполнения_ОтменитьТекст(Команда)
	Элементы["РезультатВыполнения_ИзменитьТекст"].Видимость = Истина;
	Элементы["РезультатВыполнения_ГруппаВводаТекста"].Видимость = Ложь;
	ТекущийЭлемент = Элементы.РезультатВыполнения;
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыполнения_РазвернутьСвернуть(Команда)
	
	КомандаИмя = Команда.Имя;
	Элементы[КомандаИмя].Пометка   = Не Элементы[КомандаИмя].Пометка;
	Элементы[КомандаИмя].Заголовок = ?(Элементы[КомандаИмя].Пометка, "Развернуть", "Свернуть");
	
	ЗадачиКлиентСервер.РазвернутьСвернуть(ЭтаФорма, Элементы.ГруппаРезультатВыполнения, "РезультатВыполнения");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКартинкуСостоянияЭтапаТрудозатрат()
	
	Если ЭтоВнешнийПользователь Тогда
		Возврат;
	КонецЕсли;
	
	КолТрудозатраты = Объект.Работы.Количество();
	НарядЗавершен = Истина;
	Если КолТрудозатраты > 0 Тогда
		НарядЗавершен = (Объект.Работы[КолТрудозатраты-1].ДатаОкончания <> '00010101');
	КонецЕсли;
	
	Элементы.ФормаЗапуститьОстановить.Картинка = ?(НарядЗавершен, БиблиотекаКартинок.Выполнить, БиблиотекаКартинок.Пауза); 
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОстановить(Команда)
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадач.ВРаботе") тогда
		Элементы.ФормаЗапуститьОстановить.Картинка = БиблиотекаКартинок.Выполнить;
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадач.ВОчереди");
	Иначе
		Элементы.ФормаЗапуститьОстановить.Картинка = БиблиотекаКартинок.Пауза;
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадач.ВРаботе");
	КонецЕсли;
	
	Попытка
	    Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Прочитать();
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = "ОсновнойИсполнитель" Тогда
		СтандартнаяОбработка = Ложь;
		ЗаполнитьОсновногоИсполнителя(); 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОсновногоИсполнителя()
	Объект.Исполнитель = СистемаУчетаЗадачСервер.ИсполнительПоУмолчанию(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВставитьШаблонТекста(Команда)
	
	ПараметрыФормы = Новый Структура("ОбластьПрименения", 
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.Задача"));
	ПараметрыФормы.Вставить("Заголовок", "Выбор шаблона текста для задачи");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВставкиШаблонаТекста", ЭтотОбъект);
	ОткрытьФорму("Справочник.ШаблоныТекстов.Форма.ФормаВыбора",ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьТекстШаблона_ТипТекста(Шаблон, ТипТекста)
	
	ТипТекста = ОбщегоНазначенияСУЗВызовСервера.ЗначениеРеквизитаОбъекта(Шаблон, "ТипТекста");
	
	Возврат Справочники.ШаблоныТекстов.ПолучитьТекстШаблона(Шаблон, Объект);
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеВставкиШаблонаТекста(ШаблонСсылка, Параметры) Экспорт

	Если ШаблонСсылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипТекста = Неопределено;
	ШаблонТекста = ПолучитьТекстШаблона_ТипТекста(ШаблонСсылка, ТипТекста);
	
	Если ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
		
		ШаблонТекста = РаботаС_HTML.ПолучитьТекстИзHTML(ШаблонТекста);
		
	КонецЕсли;	
		
	ТекущийЭлемент.ВыделенныйТекст = ШаблонТекста;
	//Установка курсора в конец текста
	КонецТекста = СтрДлина(ТекущийЭлемент.ТекстРедактирования);
	ТекущийЭлемент.ОбновитьТекстРедактирования();
	ТекущийЭлемент.УстановитьГраницыВыделения(КонецТекста+1,КонецТекста+1);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ГруппаОсновнаяПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.ГруппаЛица Тогда
		ЗаполнитьКонтактыЛиц();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуПродолжение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ШаблоныЗадач.ФормаВыбора",,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПродолжение(ШаблонЗадачи, Параметры) Экспорт 
	
	Если ЗначениеЗаполнено(ШаблонЗадачи) И ТипЗнч(ШаблонЗадачи) = Тип("СправочникСсылка.ШаблоныЗадач") Тогда 
		ЗаполнитьПоШаблонуНаСервере(ШаблонЗадачи);
		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуНаСервере(ШаблонЗадачи)
	ЗадачаОбъект = РеквизитФормыВЗначение("Объект");
	ЗадачаОбъект.Заполнить(ШаблонЗадачи);
	ЗначениеВРеквизитФормы(ЗадачаОбъект,"Объект");
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтаФорма, Объект);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗадачу(Команда)
	ОткрытьФорму("Документ.Задачи.ФормаВыбора",
		Новый Структура("РежимВыбора, МножественныйВыбор", Истина, Истина),
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("ДобавитьПредметЗавершение", ЭтотОбъект, Неопределено), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПисьмоВходящее(Команда)
	ОткрытьФорму("Документ.ВходящееПисьмо.ФормаВыбора",
		Новый Структура("РежимВыбора, МножественныйВыбор", Истина, Истина),
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("ДобавитьПредметЗавершение", ЭтотОбъект, Неопределено), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПисьмоИсходящее(Команда)
	ОткрытьФорму("Документ.ИсходящееПисьмо.ФормаВыбора",
		Новый Структура("РежимВыбора, МножественныйВыбор", Истина, Истина),
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("ДобавитьПредметЗавершение", ЭтотОбъект, Неопределено), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредметЗавершение(ВыбранныеЗадачи, ДопПараметры) Экспорт
	Если ВыбранныеЗадачи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ВыбраннаяЗадача Из ВыбранныеЗадачи Цикл
		НоваяСтрока = Объект.Предметы.Добавить();
		НоваяСтрока.Предмет = ВыбраннаяЗадача;
		НоваяСтрока.ТипПредмета = ТипЗнч(НоваяСтрока.Предмет);
		НоваяСтрока.Дата = НоваяСтрока.Предмет.Дата;
	КонецЦикла;
	ЦветСтраницы(Элементы.ГруппаПредметы);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗадачуИзБуфера(Команда)
	
	ОбъектДляБуфера = Новый COMОбъект("htmlfile");
    ТекстИзБуфера = ОбъектДляБуфера.ParentWindow.ClipboardData.Getdata("Text");
	
	Если ЗаполнитьЗадачуИзБуфераНаСервере(ТекстИзБуфера) Тогда
		Состояние("Копирование из буфера",,"Задача заполнена из оперативной памяти.", БиблиотекаКартинок.БуферОбмена);
	Иначе
		ПоказатьПредупреждение(, "Буфер обмена не содержит информацию для заполнения задачи.", 30);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемыСвойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбменСGoogle

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_ОбработкаВыбора(
	ЭтотОбъект,
	Элемент,
	ВыбранноеЗначение,
	СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_АвтоПодбор(
	ЭтотОбъект,
	Элемент,
	Текст,
	ДанныеВыбора,
	Параметры,
	Ожидание,
	СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ЧекЛист
	
&НаКлиенте
Процедура ЧекЛистПриИзменении(Элемент)
	ЦветСтраницы(Элементы.ГруппаЧекЛист);
	ПроцентВыполненияЧекЛиста();
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистВыполненПриИзменении(Элемент)
	УстановитьОтборСтрокЧекЛиста();
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистОписаниеПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЧекЛист(Команда)
	
	ТекстДляРазбора = Элементы.Описание.ВыделенныйТекст;
	Если ПустаяСтрока(ТекстДляРазбора) Тогда
		ТекстДляРазбора = Объект.Описание;
	КонецЕсли;
	
	ВсегоСтрок = СтрЧислоСтрок(ТекстДляРазбора);
	Для Счетчик = 1 По ВсегоСтрок Цикл
		
		ТекущаяСтрока = СтрПолучитьСтроку(ТекстДляРазбора, Счетчик);
		Если ПустаяСтрока(ТекущаяСтрока) Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйПункт = Объект.ЧекЛист.Добавить();
		НовыйПункт.Описание = СокрЛП(ТекущаяСтрока);;
		
	КонецЦикла;
	
	ЦветСтраницы(Элементы.ГруппаЧекЛист);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьПунктыЧекЛиста(Команда)
	Если Элементы.ЧекЛистПоказатьСкрытьПунктыЧекЛиста.Заголовок = "Скрыть отмеченные элементы" Тогда //Скрыть пункты
		Элементы.ЧекЛистПоказатьСкрытьПунктыЧекЛиста.Заголовок = "Показать отмеченные элементы ("+КоличествоВыполненныхПунктовЧекЛиста+")";
	Иначе
		Элементы.ЧекЛистПоказатьСкрытьПунктыЧекЛиста.Заголовок = "Скрыть отмеченные элементы";
	КонецЕсли;
	УстановитьОтборСтрокЧекЛиста();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокЧекЛиста()
	Если Элементы.ЧекЛистПоказатьСкрытьПунктыЧекЛиста.Заголовок = "Скрыть отмеченные элементы" Тогда 
		Элементы.ЧекЛист.ОтборСтрок = Неопределено;
	Иначе
		Элементы.ЧекЛист.ОтборСтрок = Новый ФиксированнаяСтруктура("Выполнен", Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроцентВыполненияЧекЛиста()
	
	ВсегоСтрок = 0;
	Выполненные = 0;
	Для Каждого СтрокаТЧ Из Объект.ЧекЛист Цикл
		ВсегоСтрок = ВсегоСтрок + 1;
		Если СтрокаТЧ.Выполнен Тогда
			Выполненные = Выполненные + 1;
		КонецЕсли;
	КонецЦикла;
	КоличествоВыполненныхПунктовЧекЛиста = Выполненные;
	Если ВсегоСтрок > 0 Тогда
		ПроцентВыполненияЧекЛиста = Окр(Выполненные / ВсегоСтрок * 100);
		Элементы.ЧекЛистЗаполнитьОписаниеПунктамиЧекЛиста.Видимость = Истина;
	Иначе
		ПроцентВыполненияЧекЛиста = 0;
		Элементы.ЧекЛистЗаполнитьОписаниеПунктамиЧекЛиста.Видимость = Ложь;
	КонецЕсли;
	
	Если Выполненные > 0 Тогда
		Элементы.ЧекЛистПоказатьСкрытьПунктыЧекЛиста.Видимость = Истина;
		Если НЕ Элементы.ЧекЛистПоказатьСкрытьПунктыЧекЛиста.Заголовок = "Скрыть отмеченные элементы" Тогда 
			Элементы.ЧекЛистПоказатьСкрытьПунктыЧекЛиста.Заголовок = "Показать отмеченные элементы ("+КоличествоВыполненныхПунктовЧекЛиста+")";
		КонецЕсли;
	Иначе
		Элементы.ЧекЛистПоказатьСкрытьПунктыЧекЛиста.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьВЗадачуПунктЧекЛиста(Команда)
	Основание = Новый Структура;
	Основание.Вставить("Задача", Объект.Ссылка);
	Основание.Вставить("ПунктЧекЛиста", Элементы.ЧекЛист.ТекущиеДанные.Описание);
	ОткрытьФорму("Документ.Задачи.ФормаОбъекта", Новый Структура("Основание", Основание));
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьПунктыЧекЛистаВРезультатВыполнения(Команда)
	
	ТекстСообщения = "";
	Для Каждого СтрокаТЧ Из Элементы.ЧекЛист.ВыделенныеСтроки Цикл
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС;
		КонецЕсли;
		Пункт = Объект.ЧекЛист.НайтиПоИдентификатору(СтрокаТЧ).Описание;
		Если Не ПустаяСтрока(Пункт) Тогда
			ТекстСообщения = ТекстСообщения + "Выполнен пункт: """ + Пункт + """.";
		КонецЕсли;
	КонецЦикла;
	
	ЗадачиКлиентСервер.ВнестиОписаниеРешения(Объект, ТекстСообщения);
	ЭтаФорма["РезультатВыполнения_ВводТекста"] = ?(ПустаяСтрока(ЭтаФорма["РезультатВыполнения_ВводТекста"]), "", ЭтаФорма["РезультатВыполнения_ВводТекста"] + "
		|") + ТекстСообщения; 
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОписаниеПунктамиЧекЛиста(Команда)
	
	Если ПустаяСтрока(Объект.Описание) Тогда
		ЗаполнитьОписаниеПунктамиЧекЛистаЗавершение(КодВозвратаДиалога.Да);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьОписаниеПунктамиЧекЛистаЗавершение", ЭтотОбъект, Неопределено);
		ПоказатьВопрос(Оповещение, "Описание задачи не пустое, перезаполнить его?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОписаниеПунктамиЧекЛистаЗавершение(Ответ, ПараметрыВопроса = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "";
	Для Каждого СтрокаТЧ Из Объект.ЧекЛист Цикл
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС;
		КонецЕсли;
		Если Не ПустаяСтрока(СтрокаТЧ.Описание) Тогда
			ТекстСообщения = ТекстСообщения + СтрокаТЧ.Описание;
		КонецЕсли;
	КонецЦикла;
	
	Объект.Описание = ТекстСообщения;
	Описание_ВводТекста = ТекстСообщения;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Работы
	
&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ДатаНачала = ТекущаяДата();
		Элемент.ТекущиеДанные.ДатаОкончания = '00010101';
		
		//++КИТ-ИНТ ЗайцевНС 01.02.2023
		
		Элемент.ТекущиеДанные.ИсполнительТЧ = Объект.Исполнитель;
		
		//--КИТ-ИНТ ЗайцевНС 01.02.2023
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаботыДатаОкончанияПриИзменении(Элемент)
	ТекДанные = Элементы.Работы.ТекущиеДанные;
	ТекДанные.Трудозатраты = (ТекДанные.ДатаОкончания - ТекДанные.ДатаНачала) / 3600;
	Если ТекДанные.Трудозатраты < 0 Тогда
		ТекДанные.Трудозатраты = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаботыВыполненныеДействияПриИзменении(Элемент)
	//Заполнение поля Решение
	ЗадачиКлиентСервер.СформироватьРешение(Объект);
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриИзменении(Элемент)
	ЦветСтраницы(Элементы.ГруппаРаботы);
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьВЗадачуСтрокиТрудозатрат(Команда)
	
	МассивСтрок = Новый Массив;
	Для Каждого ИдентификаторТЧ Из Элементы.Работы.ВыделенныеСтроки Цикл
		СтрокаТЧ = Объект.Работы.НайтиПоИдентификатору(ИдентификаторТЧ);
		СтруктураСтроки = Новый Структура("ДатаНачала, ДатаОкончания, Трудозатраты, ВыполненныеДействия");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТЧ);
		МассивСтрок.Добавить(СтруктураСтроки);
		
		//Удаление выделенных строк
		Объект.Работы.Удалить(Объект.Работы.Индекс(СтрокаТЧ));
		Модифицированность = Истина;
	КонецЦикла;
	
	Основание = Новый Структура;
	Основание.Вставить("Задача", Объект.Ссылка);
	Основание.Вставить("Работы", МассивСтрок);
	ОткрытьФорму("Документ.Задачи.ФормаОбъекта", Новый Структура("Основание", Основание));
	
КонецПроцедуры

#КонецОбласти

#Область План

&НаКлиенте
Процедура ПланПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ДатаСеанса = ТекущаяДата();
		Элемент.ТекущиеДанные.ДатаНачала = НачалоЧаса(ДатаСеанса);
		Элемент.ТекущиеДанные.ДатаОкончания = КонецЧаса(ДатаСеанса);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланДатаОкончанияПриИзменении(Элемент)
	
	ТекДанные = Элементы.План.ТекущиеДанные;
	Если Элемент.Имя = "ПланДатаНачала" И ТекДанные.ДатаОкончания < ТекДанные.ДатаНачала Тогда
		ТекДанные.ДатаОкончания = ТекДанные.ДатаНачала + 3600;
	ИначеЕсли Элемент.Имя = "ПланДатаОкончания" И ТекДанные.ДатаОкончания < ТекДанные.ДатаНачала Тогда
		ТекДанные.ДатаНачала = ТекДанные.ДатаОкончания - 3600;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;
	ТекДанные.Продолжительность = (ТекДанные.ДатаОкончания - ТекДанные.ДатаНачала) / 3600;
	Записать();
	ОбновитьОтображениеКалендарь();
КонецПроцедуры

&НаКлиенте
Процедура ПланПриАктивизацииСтроки(Элемент)
	ОбновитьОтображениеКалендарь();
КонецПроцедуры

&НаКлиенте
Процедура ПланПриИзменении(Элемент)
	ЦветСтраницы(Элементы.ГруппаПлан);
КонецПроцедуры

#КонецОбласти

#Область Календарь

&НаСервере
Процедура ИнициализироватьКалендарь()
	
	НастройкиОтображения = РаботаСКалендаремСервер.ПолучитьНастройкиОтображения();
	
	ОбновитьОтображениеКалендарь();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеКалендарь()
	
	Если ЭтоВнешнийПользователь Тогда
		Возврат;
	КонецЕсли;
		
	ТекДанные = Элементы.План.ТекущаяСтрока;
	Если Объект.План.Количество() = 0 Тогда
		ТекДанные = Новый Структура("ДатаНачала,ДатаОкончания, НомерСтроки",НачалоЧаса(ТекущаяДата()),КонецЧаса(ТекущаяДата()), 1);
	иначеЕсли ТекДанные = Неопределено Тогда
		ТекДанные = Объект.План[0];
	Иначе
		ТекДанные = Объект.План.НайтиПоИдентификатору(ТекДанные);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекДанные.ДатаНачала) Тогда
		//Элементы.Планировщик.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.Планировщик.Доступность = Истина;
	
	ОбновитьНастройкиОтображения(ТекДанные);
	
	РаботаСКалендаремСервер.ОтобразитьКалендарь(Планировщик, НастройкиОтображения);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиОтображения(ТекДанные)
	
	НастройкиОтображения.ОтобразитьТекущуюЗапись = Истина;
	НастройкиОтображения.ЗапретСоздания = Истина;
	НастройкиОтображения.ТекущаяЗаписьСсылка = Объект.Ссылка;
	НастройкиОтображения.НомерСтрокиТекущейЗаписи = ТекДанные.НомерСтроки;
	НастройкиОтображения.ТекущаяЗаписьДатаНачала = ТекДанные.ДатаНачала;
	НастройкиОтображения.ТекущаяЗаписьДатаОкончания = ТекДанные.ДатаОкончания;
	НастройкиОтображения.Календари = Новый Массив;
	НастройкиОтображения.Календари.Добавить(Объект.КалендарьСотрудника);
	
	НачалоОтображаемогоПериода = НачалоДня(ТекДанные.ДатаНачала);
	ОтображаемаяДата = НачалоОтображаемогоПериода;
	КонецОтображаемогоПериода = НачалоДня(ТекДанные.ДатаОкончания);
	ОтображаемыйПериод = (КонецОтображаемогоПериода - НачалоОтображаемогоПериода) / 86400 + 1;
	НастройкиОтображения.ОтображаемаяДата = ОтображаемаяДата;
	НастройкиОтображения.ВыделенныеДаты.Очистить();
	КоличествоДат = 0;
	Пока ОтображаемаяДата <= КонецОтображаемогоПериода Цикл
		НастройкиОтображения.ВыделенныеДаты.Добавить(ОтображаемаяДата);
		ОтображаемаяДата = ОтображаемаяДата + 86400;
		КоличествоДат = КоличествоДат + 1;
		Если КоличествоДат > 31 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	НоваяСтрокаПлана = Объект.План.Добавить();
	НоваяСтрокаПлана.ДатаНачала = Начало;
	НоваяСтрокаПлана.ДатаОкончания = Конец;
	НоваяСтрокаПлана.Продолжительность = (НоваяСтрокаПлана.ДатаОкончания - НоваяСтрокаПлана.ДатаНачала) / 3600;
	Записать();
	
	Элементы.План.ТекущаяСтрока = НоваяСтрокаПлана.ПолучитьИдентификатор();
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)

	ОбрабатываемыеЭлементы = Новый Массив;
	
	Для Каждого ВыделенныйЭлемент Из Элемент.ВыделенныеЭлементы Цикл
		
		ИзмЗадача = ВыделенныйЭлемент.Значение.Предмет;
		НомерСтрокиВЗадаче = ВыделенныйЭлемент.Значение.НомерСтрокиПредмета;
		
		Если ИзмЗадача = Объект.Ссылка Тогда
			ИзмСтрока = Объект.План[НомерСтрокиВЗадаче-1];
			ИзмСтрока.ДатаНачала = ВыделенныйЭлемент.Начало;
			ИзмСтрока.ДатаОкончания = ВыделенныйЭлемент.Конец;
			ИзмСтрока.Продолжительность = (ИзмСтрока.ДатаОкончания - ИзмСтрока.ДатаНачала) / 3600;
			Записать();
			Продолжить;
		КонецЕсли;
			
		ОбрабатываемыйЭлемент = Новый Структура;
		ОбрабатываемыйЭлемент.Вставить("ЗаписьКалендаря",		ВыделенныйЭлемент.Значение.Ссылка);
		ОбрабатываемыйЭлемент.Вставить("Источник",				ВыделенныйЭлемент.Значение.Предмет);
		ОбрабатываемыйЭлемент.Вставить("НомерСтрокиИсточника",	ВыделенныйЭлемент.Значение.НомерСтрокиПредмета);
		ОбрабатываемыйЭлемент.Вставить("Начало",				ВыделенныйЭлемент.Начало);
		ОбрабатываемыйЭлемент.Вставить("Конец",					ВыделенныйЭлемент.Конец);
		
		ОбрабатываемыеЭлементы.Добавить(ОбрабатываемыйЭлемент);
		
	КонецЦикла;
	
	ОтменаРедактирования = Не СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	
	ОбрабатываемыеЭлементы = Новый Массив;
	
	Для Каждого ВыделенныйЭлемент Из Элемент.ВыделенныеЭлементы Цикл
		
		ИзмЗадача = ВыделенныйЭлемент.Значение.Предмет;
		НомерСтрокиВЗадаче = ВыделенныйЭлемент.Значение.НомерСтрокиПредмета;
		
		Если ИзмЗадача = Объект.Ссылка Тогда
			Объект.План.Удалить(НомерСтрокиВЗадаче-1);
			Записать();
			Продолжить;
		КонецЕсли;
			
		ОбрабатываемыйЭлемент = Новый Структура;
		ОбрабатываемыйЭлемент.Вставить("ЗаписьКалендаря",		ВыделенныйЭлемент.Значение.Ссылка);
		ОбрабатываемыйЭлемент.Вставить("Источник",				ВыделенныйЭлемент.Значение.Предмет);
		ОбрабатываемыйЭлемент.Вставить("НомерСтрокиИсточника",	ВыделенныйЭлемент.Значение.НомерСтрокиПредмета);
		ОбрабатываемыйЭлемент.Вставить("ПометкаУдаления",		Истина);
		
		ОбрабатываемыеЭлементы.Добавить(ОбрабатываемыйЭлемент);
		
	КонецЦикла;
	
	Отказ = Не СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	//Создание строки плана, если ее нет, при клике на текущую запись
	Если Элемент.ВыделенныеЭлементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСобытия = Элемент.ВыделенныеЭлементы[0].Значение;
	Если Объект.План.Количество() = 0 и ДанныеСобытия.ЭтоТекущаяЗапись Тогда
		НоваяСтрокаПлана = Объект.План.Добавить();
		НоваяСтрокаПлана.ДатаНачала = ДанныеСобытия.ДатаНачала;
		НоваяСтрокаПлана.ДатаОкончания = ДанныеСобытия.ДатаОкончания;
		НоваяСтрокаПлана.Продолжительность = (НоваяСтрокаПлана.ДатаОкончания - НоваяСтрокаПлана.ДатаНачала) / 3600;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы)
	
	Возврат Справочники.ЗаписиКалендаряСотрудника.СохранитьИзмененияЗаписейКалендарей(ОбрабатываемыеЭлементы);
	
КонецФункции

#КонецОбласти

#Область Предметы

&НаКлиенте
Процедура ПредметыПриИзменении(Элемент)
	ЦветСтраницы(Элементы.ГруппаПредметы);
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПредметПриИзменении(Элемент)
	ТекущаяСтрокаПредмет = Элементы.Предметы.ТекущиеДанные;
	Если ТекущаяСтрокаПредмет <> НЕопределено Тогда
		ТекущаяСтрокаПредмет.ТипПредмета = ТипЗнч(ТекущаяСтрокаПредмет.Предмет);
		ТекущаяСтрокаПредмет.Дата = ТекущаяСтрокаПредмет.Предмет.Дата;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредметыНаОснованииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Элементы.ПредметыНаОсновании.ДанныеСтроки(ВыбраннаяСтрока).Предмет);
КонецПроцедуры

#КонецОбласти

#Область ЗаинтересованныеЛица

&НаКлиенте
Процедура ЛицаЛицоПриИзменении(Элемент)
	ЛицаЛицоПриИзмененииСервер(Элементы.Лица.ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ЛицаЛицоПриИзмененииСервер(ТекущаяСтрока)
	ТекДанные = Объект.Лица.НайтиПоИдентификатору(ТекущаяСтрока);
	ТекДанные.Контакты = Документы.Задачи.ПолучитьКонтакты(ТекДанные.Лицо);
	Если ТипЗнч(ТекДанные.Лицо) = Тип("СправочникСсылка.Пользователи") Тогда
		ТекДанные.Роль = ТекДанные.Лицо.Роль;
	ИначеЕсли ТипЗнч(ТекДанные.Лицо) = Тип("СправочникСсылка.КонтактныеЛицаЗаказчиков") Тогда
		ТекДанные.Роль = ТекДанные.Лицо.РольКонтактногоЛица;
	Иначе
		ТекДанные.Роль = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЛицаЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбратьИзАдреснойКниги();
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	ВыбратьИзАдреснойКниги(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЛицаПриИзменении(Элемент)
	ЦветСтраницы(Элементы.ГруппаЛица);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзАдреснойКниги(МножественныйВыбор = Ложь)
	
	РабочаяГруппа = Новый Массив;
	ТекущиеДанные = Элементы.Лица.ТекущиеДанные;
	
	Если МножественныйВыбор Или Не ЗначениеЗаполнено(ТекущиеДанные.Лицо) Тогда
		Для Каждого ЛицаСтрока Из Объект.Лица Цикл
			Если ЗначениеЗаполнено(ЛицаСтрока.Лицо) Тогда 
				Участник = Новый Структура("Контакт", ЛицаСтрока.Лицо);
				РабочаяГруппа.Добавить(Участник);
			КонецЕсли;
		КонецЦикла;
		
		РежимРаботыФормы = 2;
		ЗаголовокФормы = НСтр("ru = 'Подбор заинтересованных лиц'");
		ЗаголовокСпискаВыбранных = НСтр("ru = 'Выбранные участники:'");
		ЗаголовокСпискаАдреснойКниги = НСтр("ru = 'Все контактные лица:'");
		МножественныйВыбор = Истина;
	Иначе
		РежимРаботыФормы = 1;
		ЗаголовокФормы = НСтр("ru = 'Выбор заинтересованного лица'");
		ЗаголовокСпискаВыбранных = "";
		ЗаголовокСпискаАдреснойКниги = "";
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", РежимРаботыФормы);
	ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ОтображатьЛичныхАдресатов", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
	ПараметрыФормы.Вставить("ВыбиратьЗаказчиков", Истина);
	ПараметрыФормы.Вставить("ВыбиратьГруппыПользователей", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	ПараметрыФормы.Вставить("ЗаголовокСпискаВыбранных", ЗаголовокСпискаВыбранных);
	ПараметрыФормы.Вставить("ЗаголовокСпискаАдреснойКниги", ЗаголовокСпискаАдреснойКниги);
	ПараметрыФормы.Вставить("ВыбранныеАдресаты", РабочаяГруппа);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", ЭтаФорма);
	ДопПараметры.Вставить("МножественныйВыбор", МножественныйВыбор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораИзАдреснойКниги", ЭтотОбъект, ДопПараметры);
	
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтаФорма, ОписаниеОповещения);

КонецПроцедуры	

&НаКлиенте
Процедура ЗавершениеВыбораИзАдреснойКниги(ВыбранныеУчастники, ДопПараметры) Экспорт

	Если ВыбранныеУчастники = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДопПараметры.Форма;
	
	Если ДопПараметры.МножественныйВыбор Тогда
		
		КоличествоСтрок = Объект.Лица.Количество();
		
		// Удаление лишних строк.
		Для Инд = 1 По КоличествоСтрок Цикл
			
			Строка = Объект.Лица[КоличествоСтрок - Инд];
			УдалитьУчастника = Истина;
			
			Для Каждого ВыбранныйИсполнитель Из ВыбранныеУчастники Цикл
				Если Строка.Лицо = ВыбранныйИсполнитель.Контакт Тогда
					
					УдалитьУчастника = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если УдалитьУчастника Тогда
				Объект.Лица.Удалить(Строка);
			КонецЕсли;
			
		КонецЦикла;
		
		ИндексИзмененнойСтроки = Объект.Лица.Количество();
		
		// Добавление новых строк.
		Для Каждого ВыбранныйАдресат Из ВыбранныеУчастники Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Лицо", ВыбранныйАдресат.Контакт);
			
			НайденныеСтроки = Объект.Лица.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				НоваяСтрока = Объект.Лица.Добавить();
				//ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбранныйАдресат);
				НоваяСтрока.Лицо = ВыбранныйАдресат.Контакт;
				ЛицаЛицоПриИзмененииСервер(НоваяСтрока.ПолучитьИдентификатор());

			КонецЕсли;
			
		КонецЦикла;
	
	Иначе
		
		ТекущаяСтрока = Элементы.Лица.ТекущаяСтрока;
		ТекущиеДанные = Объект.Лица.НайтиПоИдентификатору(ТекущаяСтрока);
		//ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыбранныеУчастники[0]);
		ТекущиеДанные.Лицо = ВыбранныеУчастники[0].Контакт;
		ЛицаЛицоПриИзмененииСервер(ТекущаяСтрока);
		
	КонецЕсли;
	
	ЦветСтраницы(Элементы.ГруппаЛица);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактыЛиц()
	Для Каждого СтрокаТЧ Из Объект.Лица Цикл
		СтрокаТЧ.Контакты = Документы.Задачи.ПолучитьКонтакты(СтрокаТЧ.Лицо);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Файлы
	
#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	
	ПерсональныеНастройкиРаботыСФайлами =
		ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами();
	КакОткрывать = ПерсональныеНастройкиРаботыСФайлами.ДействиеПоДвойномуЩелчкуМыши;
	
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ВыбраннаяСтрока, 
		Неопределено, ЭтаФорма.УникальныйИдентификатор);//, Неопределено, ПредыдущийАдресФайла);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения(
		"СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения(
			"УстановитьДоступностьКомандКлиент", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(
			Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:.'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайла = Объект.Ссылка;
	ФайлОснование = Элементы.Файлы.ТекущаяСтрока;
	
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = 2;
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, ЭтаФорма, РежимСоздания, Истина);
		Исключение
			Инфо = ИнформацияОбОшибке();
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка создания нового файла: %1'"),
				КраткоеПредставлениеОшибки(Инфо));
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецПопытки;
	Иначе
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	Элементы.Файлы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент,
	ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Файлы.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:.'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайлаСписка = Объект.Ссылка;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;	
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(
		ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
	Элементы.Файлы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриИзменении(Элемент)
	
	ОбновитьФайлыЗадачи();
	ЦветСтраницы(Элементы.ГруппаФайлы);
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыФайлы

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Записать();
	КонецЕсли;
	
	Попытка
		РежимСоздания = 2;
		РаботаСФайламиКлиент.ДобавитьНесколькоФайлов(
			Неопределено, Объект.Ссылка, ЭтотОбъект, РежимСоздания, Истина);
		ФайлыПриИзменении(НЕопределено);
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка создания нового файла: %1'"),
			КраткоеПредставлениеОшибки(Инфо));
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПомеченныеНаУдаление(Команда)
	
	ПоказатьПомеченныеНаУдаление = Не ПоказатьПомеченныеНаУдаление;
	ПоказатьПомеченныеНаУдалениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Объект.Ссылка.Пустая()
		И Элементы.ФайлыДобавленные.ТекущаяСтрока <> Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
			ТекущийФайлВСпискеДобавленных = ПолучитьИзВременногоХранилища(
				Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
			Записать();
		Иначе			
			РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
				Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
		КонецЕсли;	
	Иначе
		Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
			
		Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
		//РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, Элементы.Файлы.ТекущаяСтрока);
		РаботаСФайламиСлужебныйКлиент.РедактироватьСОповещением(Обработчик, Элементы.Файлы.ТекущаяСтрока);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
	
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Обработчик,
		Элементы.Файлы.ТекущаяСтрока, 
		ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.Файлы.ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из Элементы.Файлы.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
		
	Иначе
		//ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
		//	Элементы.Файлы.ТекущаяСтрока, Неопределено, ЭтаФорма.УникальныйИдентификатор);
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляСохранения(
			Элементы.Файлы.ТекущаяСтрока, Неопределено, ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;	
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Неопределено, 
		Элементы.Файлы.ТекущаяСтрока, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
	ПараметрыОбновленияФайла.Кодировка = ТекущиеДанные.Кодировка;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
	РаботаСФайламиКлиент.ЗанятьСОповещением(Обработчик, Элементы.Файлы.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(Обработчик, 
		Элементы.Файлы.ТекущаяСтрока);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;	
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;	
	ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
		
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла =
		РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(Элементы.Файлы.ТекущаяСтрока);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ЧислоФайлов = 0;
	СкопироватьСтрокиНаСервере(ЧислоФайлов);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) скопированы в буфер обмена.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Копирование в буфер'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	Если Модифицированность Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЧислоФайлов = 0;
	ВставитьСтрокиНаСервере(ЧислоФайлов);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ФайлыПриИзменении(Неопределено);
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) вставлены из буфера обмена.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Вставка из буфера'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ЧислоФайлов)
	
	ЧислоФайлов = Элементы.Файлы.ВыделенныеСтроки.Количество();
	ОбщегоНазначения.СкопироватьФайлыВБуферОбменаИзСпискаФайлов(Элементы.Файлы.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ЧислоФайлов)
	
	Если ОбщегоНазначения.ПустойБуферОбмена() Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеИзБуфераОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	МассивФайлов = ДанныеИзБуфераОбмена.Данные;
	
	ЧислоФайлов = МассивФайлов.Количество();
	
	ВладелецФайла = Объект.Ссылка;
	
	//РаботаСФайламиВызовСервера.СкопироватьФайлы(МассивФайлов, ВладелецФайла);
	РаботаСФайламиСлужебныйВызовСервера.СкопироватьФайлы(МассивФайлов, ВладелецФайла);
	Элементы.Файлы.Обновить();
	
	НайтиИПоказатьКоличествоФайлов();
	
КонецПроцедуры

#КонецОбласти

#Область ФайлыДополнительно

&НаСервере
Процедура НайтиИПоказатьКоличествоФайлов()
	
	КоличествоФайлов = 0;
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоФайлов = РаботаСФайламиВызовСервераПереопределяемый.КоличествоФайлов(Объект.Ссылка);
	
КонецПроцедуры	

&НаСервере
Процедура ПоказатьПомеченныеНаУдалениеНаСервере()
	
	НастроитьПоказПомеченныхНаУдалениеФайлов();
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ЭтаФорма.ИмяФормы,
		"ПоказатьПомеченныеНаУдаление",
		ПоказатьПомеченныеНаУдаление);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПоказПомеченныхНаУдалениеФайлов()
	
	Элементы.ФайлыПоказатьПомеченныеНаУдаление.Пометка = ПоказатьПомеченныеНаУдаление;
	
	Если ПоказатьПомеченныеНаУдаление Тогда
		ПараметрПометкиУдаления = Новый ПараметрКомпоновкиДанных("НеПоказыватьПомеченныеНаУдаление");
		Для Каждого Элемент Из Файлы.Параметры.Элементы Цикл
			Если Элемент.Параметр = ПараметрПометкиУдаления Тогда
				Элемент.Использование = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Файлы.Параметры.УстановитьЗначениеПараметра("НеПоказыватьПомеченныеНаУдаление", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФайлыЗадачи()
	
	КоличествоФайлов = 0;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	//МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Объект.Ссылка, Ложь);
	//КоличествоФайлов = МассивФайлов.Количество();
	
	// Файлы
	ТекущийПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.Ссылка);
	Файлы.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
	РаботаСФайламиВызовСервера.ЗаполнитьУсловноеОформлениеСпискаФайлов(Файлы);
	
	// Показ помеченных на удаление файлов
	ПоказатьПомеченныеНаУдаление = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ЭтаФорма.ИмяФормы,
		"ПоказатьПомеченныеНаУдаление",
		Ложь);
	НастроитьПоказПомеченныхНаУдалениеФайлов();
	
	Запрос = Новый Запрос(Файлы.ТекстЗапроса);
	Для Каждого СтрокаПараметр Из Файлы.Параметры.Элементы Цикл
		Запрос.УстановитьПараметр(Строка(СтрокаПараметр.Параметр), СтрокаПараметр.Значение);
	КонецЦикла;
	//КоличествоФайлов = Запрос.Выполнить().Выбрать().Количество();
	КоличествоФайлов = ?(Запрос.Выполнить().Пустой(), 0, 1);
	
	Если КоличествоФайлов > 0 Тогда
		Элементы.Файлы.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	//ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Элементы.Файлы.ТекущаяСтрока, 
	//	Неопределено, ЭтаФорма.УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
	//	
	//КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	ФайлРедактируется = ЗначениеЗаполнено(Элементы.Файлы.ТекущиеДанные.Редактирует)
		И Элементы.Файлы.ТекущиеДанные.Редактирует = ПользователиКлиентСервер.АвторизованныйПользователь();
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(
			Элементы.Файлы.ТекущаяСтрока, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор);//, Неопределено, ПредыдущийАдресФайла);
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, ФайлРедактируется);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандКлиент(
	Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	ОбновитьФайлыЗадачи();
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если (ТекущиеДанные = Неопределено)
		ИЛИ ТипЗнч(Элементы.Файлы.ТекущаяСтрока) <> Тип("СправочникСсылка.Файлы") Тогда
		
		УстановитьДоступностьКоманды(Элементы.ОткрытьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОткрытьФайл, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Редактировать, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыРедактировать, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ЗакончитьРедактирование, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыЗакончитьРедактирование, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Изменить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Занять, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыЗанять, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьИзменения, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыСохранитьИзменения, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Удалить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьКак, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыСохранитьКак, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Освободить, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОсвободить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ОбновитьИзФайлаНаДиске, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске, Ложь);
			
	Иначе	
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		
		УстановитьДоступностьКоманды(Элементы.ОткрытьФайл, Истина);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОткрытьФайл, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Редактировать, Редактирует.Пустая() И Не ЭтоВнешнийПользователь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыРедактировать, 
			Редактирует.Пустая() И Не ЭтоВнешнийПользователь);
		
		УстановитьДоступностьКоманды(Элементы.ЗакончитьРедактирование, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыЗакончитьРедактирование,
			РедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(Элементы.Изменить, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Занять,
			Редактирует.Пустая() И Не ЭтоВнешнийПользователь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыЗанять,
			Редактирует.Пустая() И Не ЭтоВнешнийПользователь);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьИзменения,
			РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыСохранитьИзменения,
			РедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(Элементы.Удалить, Истина);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьКак, Истина);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыСохранитьКак, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Освободить,
			Не Редактирует.Пустая() И Не ЭтоВнешнийПользователь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОсвободить,
			Не Редактирует.Пустая() И Не ЭтоВнешнийПользователь);
		
		УстановитьДоступностьКоманды(Элементы.ОбновитьИзФайлаНаДиске,
			Истина И Не ЭтоВнешнийПользователь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске,
			Истина И Не ЭтоВнешнийПользователь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Команда.Доступность = Доступность;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОповещениеОНовыхФайлахСервер()
	
	ОбновитьФайлыЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КомпонентаУстановлена = РаботаСКартинкамиКлиент.ПроинициализироватьКомпоненту();
	Если Не КомпонентаУстановлена Тогда
		
		Обработчик = Новый ОписаниеОповещения("ВставитьКартинкуИзБуфераЗавершение", ЭтотОбъект);		
		РаботаСКартинкамиКлиент.УстановитьКомпоненту(Обработчик);
		Возврат;
		
	КонецЕсли;
	
	ВставитьКартинкуИзБуфераЗавершение(Истина, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		
		ПутьКФайлу = КомпонентаПолученияКартинкиИзБуфера.ПолучитьКартинкуИзБуфера();
	
		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
			
			НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
			РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(
				ПутьКФайлу, Объект.Ссылка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
			ФайлыПриИзменении(Неопределено);
				
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Буфер обмена не содержит картинки'"));
		КонецЕсли;
	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Теги

&НаСервере
Процедура ПрочитатьДанныеТегов()
	
	//Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	Возврат;
	//КонецЕсли;
	ДанныеТегов.Очистить();
	
	Для Каждого СтрокаТЧ Из Объект.Теги Цикл
		
		НовыеДанныеТега = ДанныеТегов.Добавить();
		НавигационнаяСсылкаФС = "Тег_" + НовыеДанныеТега.ПолучитьИдентификатор();
		
		НовыеДанныеТега.Тег = СтрокаТЧ.Тег;
		НовыеДанныеТега.ПометкаУдаления = СтрокаТЧ.Тег.ПометкаУдаления;
		НовыеДанныеТега.ПредставлениеТега = ФорматированнаяСтрокаПредставленияТега(СтрокаТЧ.Тег.Наименование, СтрокаТЧ.Тег.ПометкаУдаления, НавигационнаяСсылкаФС);
		НовыеДанныеТега.ДлинаТега = СтрДлина(СтрокаТЧ.Тег.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыТегов() Экспорт
	
	ФС = ДанныеТегов.Выгрузить(, "ПредставлениеТега").ВыгрузитьКолонку("ПредставлениеТега");
	
	Индекс = ФС.Количество()-1;
	Пока Индекс > 0 Цикл
		ФС.Вставить(Индекс, "  ");
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Элементы.ОблакоТегов.Заголовок	= Новый ФорматированнаяСтрока(ФС);
	
	ВидимостьЭлементов = (ФС.Количество() > 0);
	Элементы.ОблакоТегов.Видимость	= ВидимостьЭлементов;
	Элементы.ТегиИОтступ.Видимость = ВидимостьЭлементов;
	Элементы.Теги.Отображение = ?(ВидимостьЭлементов, ОтображениеОбычнойГруппы.Нет, ОтображениеОбычнойГруппы.СильноеВыделение);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеТегов(ТекущийОбъект)
	
	ТекущийОбъект.Теги.Загрузить(ДанныеТегов.Выгрузить(,"Тег"));
	
КонецПроцедуры

&НаСервере
Процедура ПрикрепитьТегНаСервере(Тег)
	
	Если ДанныеТегов.НайтиСтроки(Новый Структура("Тег", Тег)).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТега = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Тег, "Наименование, ПометкаУдаления");
	
	СтрокаТегов = ДанныеТегов.Добавить();
	НавигационнаяСсылкаФС = "Тег_" + СтрокаТегов.ПолучитьИдентификатор();
	
	СтрокаТегов.Тег = Тег;
	СтрокаТегов.ПометкаУдаления = ДанныеТега.ПометкаУдаления;
	СтрокаТегов.ПредставлениеТега = ФорматированнаяСтрокаПредставленияТега(ДанныеТега.Наименование, ДанныеТега.ПометкаУдаления, НавигационнаяСсылкаФС);
	СтрокаТегов.ДлинаТега = СтрДлина(ДанныеТега.Наименование);
	
	ОбновитьЭлементыТегов();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьИПрикрепитьТегНаСервере(знач ЗаголовокТега)
	
	Тег = НайтиСоздатьТег(ЗаголовокТега);
	ПрикрепитьТегНаСервере(Тег);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСоздатьТег(Знач ЗаголовокТега)
	
	Тег = Справочники.Теги.НайтиПоНаименованию(ЗаголовокТега, Истина);
	
	Если Тег.Пустая() Тогда
		
		ТегОбъект = Справочники.Теги.СоздатьЭлемент();
		ТегОбъект.Наименование = ЗаголовокТега;
		ТегОбъект.Актуален = Истина;
		ТегОбъект.Записать();
		Тег = ТегОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат Тег;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФорматированнаяСтрокаПредставленияТега(НаименованиеТега, ПометкаУдаления, НавигационнаяСсылкаФС)
	
	#Если Клиент Тогда
	Цвет = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ТекстВторостепеннойНадписи");
	БазовыйШрифт = ОбщегоНазначенияКлиентПовтИсп.ШрифтСтиля("ОбычныйШрифтТекста");
	#Иначе
	Цвет = ЦветаСтиля.ТекстВторостепеннойНадписи;
	БазовыйШрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
	#КонецЕсли
	
	Шрифт = Новый Шрифт(БазовыйШрифт,,,Истина,,?(ПометкаУдаления, Истина, Неопределено));
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НаименованиеТега + Символы.НПП, Шрифт, Цвет));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить, , , , НавигационнаяСсылкаФС));
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС);
	
КонецФункции

&НаКлиенте
Процедура ПолеВводаТегаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Теги") Тогда
		ПрикрепитьТегНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	Элемент.ОбновитьТекстРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаТегаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		СоздатьИПрикрепитьТегНаСервере(Текст);
		ТекущийЭлемент = Элементы.ПолеВводаТега;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОблакоТеговОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТегИД = Сред(НавигационнаяСсылкаФорматированнойСтроки, СтрДлина("Тег_")+1);
	СтрокаТегов = ДанныеТегов.НайтиПоИдентификатору(ТегИД);
	ДанныеТегов.Удалить(СтрокаТегов);
	
	ОбновитьЭлементыТегов();
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	Если ЭтоВнешнийПользователь Тогда
		Элементы.Заказчик.ТолькоПросмотр = Истина;
		Элементы.Статус.ТолькоПросмотр = Ложь;
		Элементы.Приоритет.ТолькоПросмотр = Истина;
		Элементы.ОценкаТрудозатрат.ТолькоПросмотр = Истина;
		Элементы.ФормаЗапуститьОстановить.Видимость = Ложь;
		Элементы.Факт.Видимость = Ложь;
		Элементы.ГруппаРаботы.Видимость = Ложь;
		Элементы.ГруппаДополнительныеРеквизиты.Видимость = Ложь;
		Элементы.ВводимыйРезультатВыполнения.Видимость = Ложь;
		//Вкладка План
		Элементы.Планировщик.Видимость = Ложь;
		Элементы.КалендарьСотрудника.Видимость = Ложь;
		Элементы.ОценкаТрудозатрат.ТолькоПросмотр = Истина;
		Элементы.План.ТолькоПросмотр = Истина;
		
		ТолькоПросмотр = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадач.ВОчереди")
				ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадач.ВРаботе");
	КонецЕсли;

	Если СистемаУчетаЗадачПовтИсп.ПолучитьФормироватьРезультатЗадачПоДням() Тогда
		Элементы.РезультатВыполнения.Видимость = Истина;
	КонецЕсли;
	
	//Подсветка закладок
	Для Каждого Элемент Из Элементы.ГруппаОсновная.ПодчиненныеЭлементы Цикл
		ЦветСтраницы(Элемент);
	КонецЦикла;

	Элементы.Исполнитель.СписокВыбора.Добавить("ОсновнойИсполнитель","Выбрать исполнителя по умолчанию",,БиблиотекаКартинок.СостояниеПользователя08);
	
	ПроцентВыполненияЧекЛиста();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДругиеЗадачиВРаботе(Ссылка, Исполнитель)
	Запрос = Новый ПостроительЗапроса;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Документ.Задачи КАК Задачи
	|ГДЕ
	|	Задачи.Статус = &Статус
	|	И Задачи.Ссылка <> &Ссылка
	|{ГДЕ
	|	Задачи.Исполнитель.*}";
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Запрос.Параметры.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыЗадач.ВРаботе"));
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		Запрос.Отбор.Добавить("Исполнитель").Установить(Исполнитель, Истина);
	КонецЕсли;
	Возврат Не Запрос.Результат.Пустой();
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОсновнойПроектЗаказчика(Заказчик)
	
	Возврат Справочники.Проекты.ПолучитьОсновнойПроектЗаказчика(Заказчик);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТипыПредметов()
	Для Каждого СтрокаТЧ Из Объект.Предметы Цикл
		СтрокаТЧ.ТипПредмета = ТипЗнч(СтрокаТЧ.Предмет);
		
		Если НЕ СтрокаТЧ.Предмет = Неопределено Тогда //+++++++++
			СтрокаТЧ.Дата = СтрокаТЧ.Предмет.Дата;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//Страница - Имя элемента, который нужно подсветить серым цветом, если в нем пусто
&НаКлиенте
Процедура ЦветСтраницы(Страница)
	
	Если Страница = Элементы.ГруппаОписания Тогда
		Возврат;
	КонецЕсли;
	
	//Подсветка закладок
	АвтоЦвет = Новый Цвет();
	//ЦветПоУмолчанию = ЦветаСтиля.ЦветФонаФормы;
	
	Если Страница = Элементы.ГруппаФайлы Тогда
		Страница.ЦветФона = ?(КоличествоФайлов = 0, WebЦвета.СветлоСерый, АвтоЦвет);
	Иначе
		ИмяТЧ = СтрЗаменить(Страница.Имя, "Группа", "");
		Страница.ЦветФона = ?(Объект[ИмяТЧ].Количество() = 0, WebЦвета.СветлоСерый, АвтоЦвет);
	КонецЕсли;
	
КонецПроцедуры

//Выводит на форму количество дней, которое осталось до окончания срока
&НаКлиенте
Процедура ОбновитьИнформациюОСроке()
	
	ТекДата = НачалоДня(?(Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Завершена"),Объект.ДатаСтатуса,ТекущаяДата()));
	ОсталосьДней = Цел((Объект.Срок - ТекДата) / 86400);
	Если Объект.Срок = '00010101' ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Отменена") Тогда
		Инфо = "";
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Завершена") Тогда
		Если ОсталосьДней > 0 Тогда
			Инфо = "выполнено в срок";
		ИначеЕсли ОсталосьДней < 0 Тогда
			Инфо = "просрочено на " + Формат(-ОсталосьДней,"ЧГ=0") + " д.";
		Иначе
			Инфо = "просрочено";
		КонецЕсли;
	ИначеЕсли ОсталосьДней > 0 Тогда
		Инфо = "осталось " + Формат(ОсталосьДней,"ЧГ=0") + " д.";
	ИначеЕсли ОсталосьДней < 0 Тогда
		Инфо = "просрочено на " + Формат(-ОсталосьДней,"ЧГ=0") + " д.";
	Иначе
		Инфо = "истекает сегодня";
	КонецЕсли;
	Элементы.ДекорацияОсталось.Заголовок = Инфо;
	
КонецПроцедуры

// Получает общее фактическое время по задаче на текущий момент
//
&НаСервере
Процедура ПолучитьФакт()

	Факт = Объект.Работы.Итог("Трудозатраты");
	КоличествоСтрок = Объект.Работы.Количество();
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадач.ВРаботе") 
			И КоличествоСтрок > 0 Тогда
		ПослСтрока = Объект.Работы[КоличествоСтрок-1];
		ФактПослСтроки = (ТекущаяДата() - ПослСтрока.ДатаНачала) / 3600;
		Если ФактПослСтроки > 0 Тогда
			Факт = Факт + ФактПослСтроки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПолучитьФакт()

&НаСервере
Функция ЗаполнитьЗадачуИзБуфераНаСервере(ТекстИзБуфера)
	//Возврат Задача.Наименование + Символы.ПС
	//	+ "Заказчик: " + Задача.Заказчик + Символы.ПС
	//	+ "Проект: " + Задача.Проект + Символы.ПС
	//	+ "Контактное лицо: " + Задача.КонтактноеЛицоЗаказчика + Символы.ПС
	//	+ Задача.Описание;

	ВсегоСтрок = СтрЧислоСтрок(ТекстИзБуфера);
	Если ВсегоСтрок < 4 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаНаименование = СтрПолучитьСтроку(ТекстИзБуфера, 1);
	СтрокаЗаказчик = СтрПолучитьСтроку(ТекстИзБуфера, 2);
	СтрокаПроект = СтрПолучитьСтроку(ТекстИзБуфера, 3);
	СтрокаКонтакт = СтрПолучитьСтроку(ТекстИзБуфера, 4);
	
	ЗадачаИзБуфера = СтрНачинаетсяС(СтрокаЗаказчик, "Заказчик: ") И СтрНачинаетсяС(СтрокаПроект, "Проект: ")
		И СтрНачинаетсяС(СтрокаКонтакт, "Контактное лицо: ");
		
	Если Не ЗадачаИзБуфера Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	Если Не ПустаяСтрока(СтрокаНаименование) Тогда
		Объект.Наименование = СтрокаНаименование;
	КонецЕсли;
	
	ЗаказчикНаименование = СтрЗаменить(СтрокаЗаказчик, "Заказчик: ", "");
	ПроектНаименование = СтрЗаменить(СтрокаПроект, "Проект: ", "");
	КонтактНаименование = СтрЗаменить(СтрокаКонтакт, "Контактное лицо: ", "");
	
	Описание = "";
	//Заказчик
	Заказчик = Справочники.Заказчики.НайтиПоНаименованию(ЗаказчикНаименование);
	Проект = Справочники.Проекты.ПустаяСсылка();
	Контакт = Справочники.КонтактныеЛицаЗаказчиков.ПустаяСсылка();
	Если Заказчик.Пустая() Тогда
		Описание = ?(ПустаяСтрока(ЗаказчикНаименование), "", СтрокаЗаказчик);
	Иначе
		Если Объект.Заказчик <> Заказчик Тогда
			Объект.Заказчик = Заказчик;
			ЗаказчикПриИзмененииСервер();
		КонецЕсли;
		//Проект
		Проект = Справочники.Проекты.ПроектЗаказчикаПоНаименованию(ПроектНаименование, Объект.Заказчик);
		Если Объект.Проект <> Проект И Не Проект.Пустая() Тогда
			Объект.Проект = Проект;
			ПриИзмененииПроектаСервер();
		КонецЕсли;
		//Контактное лицо
		Контакт = Справочники.КонтактныеЛицаЗаказчиков.НайтиПоНаименованию(КонтактНаименование,,,Объект.Заказчик);
		Если Объект.КонтактноеЛицоЗаказчика <> Контакт И Не Контакт.Пустая() Тогда
			Объект.КонтактноеЛицоЗаказчика = Контакт;
			ЗаполнитьКонтакты();
		КонецЕсли;
	КонецЕсли;
	
	Если Проект.Пустая() И Не ПустаяСтрока(ПроектНаименование) Тогда
		Описание = Описание + ?(ПустаяСтрока(Описание), "", Символы.ПС) + СтрокаПроект;
	КонецЕсли;
	Если Контакт.Пустая() И Не ПустаяСтрока(КонтактНаименование) Тогда
		Описание = Описание + ?(ПустаяСтрока(Описание), "", Символы.ПС) + СтрокаКонтакт;
	КонецЕсли;
	Для Сч = 5 По ВсегоСтрок Цикл
		Описание = Описание + ?(ПустаяСтрока(Описание), "", Символы.ПС) + СтрПолучитьСтроку(ТекстИзБуфера, Сч);
	КонецЦикла;
	Объект.Описание = Описание;
	ЭтаФорма["Описание_ВводТекста"] = Описание;
	Модифицированность = Истина;
	
	Возврат Истина;
КонецФункции

#КонецОбласти

