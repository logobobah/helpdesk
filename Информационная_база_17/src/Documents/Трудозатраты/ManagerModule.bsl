#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Печать

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Трудозатраты
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Трудозатраты";
	КомандаПечати.Представление = НСтр("ru = 'Трудозатраты'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТрудозатратыСПечатью";
	КомандаПечати.Представление = НСтр("ru = 'Трудозатраты с печатью'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;

	// Трудозатраты сокращенные
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТрудозатратыСокращенные";
	КомандаПечати.Представление = НСтр("ru = 'Трудозатраты сокращенные'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТрудозатратыСокращенныеСПечатью";
	КомандаПечати.Представление = НСтр("ru = 'Трудозатраты сокращенные с печатью'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;

	 //Счет на оплату
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Счет";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетСПечатью";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату с печатью'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
	// Акт
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Акт";
	КомандаПечати.Представление = НСтр("ru = 'Акт об оказании услуг'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктСПечатью";
	КомандаПечати.Представление = НСтр("ru = 'Акт об оказании услуг с печатью'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Трудозатраты") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"Трудозатраты",
			НСтр("ru = 'Трудозатраты'"),
			ПечатьТрудозатраты(МассивОбъектов, ОбъектыПечати),,
			"Документ.Трудозатраты.ПФ_MXL_Бланк"
		);
				
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТрудозатратыСПечатью") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ТрудозатратыСПечатью",
			НСтр("ru = 'Трудозатраты'"),
			ПечатьТрудозатраты(МассивОбъектов, ОбъектыПечати, Истина),,
			"Документ.Трудозатраты.ПФ_MXL_Бланк"
		);
				
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТрудозатратыСокращенные") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ТрудозатратыСокращенные",
			НСтр("ru = 'Трудозатраты'"),
			ПечатьТрудозатраты(МассивОбъектов, ОбъектыПечати,,Истина),,
			"Документ.Трудозатраты.ПФ_MXL_Бланк"
		);
				
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТрудозатратыСокращенныеСПечатью") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ТрудозатратыСокращенныеСПечатью",
			НСтр("ru = 'Трудозатраты'"),
			ПечатьТрудозатраты(МассивОбъектов, ОбъектыПечати, Истина, Истина),,
			"Документ.Трудозатраты.ПФ_MXL_Бланк"
		);
				
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Счет") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"Счет",
			НСтр("ru = 'Счет на оплату'"),
			ПечатьСчет(МассивОбъектов, ОбъектыПечати),,
			"Документ.Трудозатраты.ПФ_MXL_Счет"
		);
				
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетСПечатью") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"СчетСПечатью",
			НСтр("ru = 'Счет на оплату'"),
			ПечатьСчет(МассивОбъектов, ОбъектыПечати, Истина),,
			"Документ.Трудозатраты.ПФ_MXL_Счет"
		);
				
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Акт") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"Акт",
			НСтр("ru = 'Акт об оказании услуг'"),
			ПечатьАкт(МассивОбъектов, ОбъектыПечати),,
			"Документ.Трудозатраты.ПФ_MXL_Акт"
		);
				
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСПечатью") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"АктСПечатью",
			НСтр("ru = 'Акт об оказании услуг'"),
			ПечатьАкт(МассивОбъектов, ОбъектыПечати, Истина),,
			"Документ.Трудозатраты.ПФ_MXL_Акт"
		);
				
	КонецЕсли;
	
	УправлениеПечатью.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
		
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПечатьТрудозатраты(МассивОбъектов, ОбъектыПечати, СПечатью = Ложь, Сокращенные = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТрудозатратыРаботы.Задача.ДатаСтатуса, ДЕНЬ) КАК День,
	|	ТрудозатратыРаботы.Исполнитель КАК Исполнитель,
	|	ТрудозатратыРаботы.Задача КАК Задача,
	|	СУММА(ТрудозатратыРаботы.Количество) КАК Количество,
	|	ТрудозатратыРаботы.Цена КАК Цена,
	|	СУММА(ТрудозатратыРаботы.Сумма) КАК Сумма,
	|	ТрудозатратыРаботы.Проект КАК Проект,
	|	ТрудозатратыРаботы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Трудозатраты.Работы КАК ТрудозатратыРаботы
	|ГДЕ
	|	ТрудозатратыРаботы.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТрудозатратыРаботы.Исполнитель,
	|	ТрудозатратыРаботы.Задача,
	|	ТрудозатратыРаботы.Цена,
	|	ТрудозатратыРаботы.Проект,
	|	ТрудозатратыРаботы.Ссылка,
	|	НАЧАЛОПЕРИОДА(ТрудозатратыРаботы.Задача.ДатаСтатуса, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	День,
	|	Исполнитель
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Сумма)
	|ПО
	|	Ссылка,
	|	Проект,
	|	День";
	
	Шапка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.АвтоМасштаб = Истина; // масштаб по ширине страницы
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Трудозатраты_Трудозатраты";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Трудозатраты.ПФ_MXL_Бланк_2");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
	
	Если Сокращенные Тогда
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыУпрощ");
		ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицыУпрощ");
		ОбластьДень = Макет.ПолучитьОбласть("ДеньУпрощ");
		ОбластьПроект = Макет.ПолучитьОбласть("ПроектУпрощ");
		ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("ДеталиУпрощ");
	Иначе
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
		ОбластьДень = Макет.ПолучитьОбласть("День");
		ОбластьПроект = Макет.ПолучитьОбласть("Проект");
		ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
	
		ОбластьЗаголовок.Параметры.Услуга = ?(
			ПустаяСтрока(Шапка.Ссылка.Заказчик.Организация.ОписаниеУслуги), 
			?(ПустаяСтрока(Шапка.Ссылка.Организация.ОписаниеУслуги),
				"","Услуга: "+Шапка.Ссылка.Организация.ОписаниеУслуги+"."
			),
			"Услуга: "+Шапка.Ссылка.Заказчик.Организация.ОписаниеУслуги+"."
		);
		ОбластьЗаголовок.Параметры.Период = Формат(Шапка.Ссылка.Дата,"ДФ='MMMM yyyy'");
		ОбластьЗаголовок.Параметры.Клиент = Шапка.Ссылка.Заказчик.Наименование;
		ТабДок.Вывести(ОбластьЗаголовок);
		ТабДок.Вывести(ОбластьШапкаТаблицы);
		ТабДок.НачатьАвтогруппировкуСтрок();

		ВыборкаПроект = Шапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПроект.Следующий() Цикл
			
			ОбластьПроект.Параметры.Заполнить(ВыборкаПроект);
			Если ВыборкаПроект.Проект.Пустая() Тогда
				ОбластьПроект.Параметры.Проект = "<Проект не указан>";
			КонецЕсли;
			ТабДок.Вывести(ОбластьПроект, ВыборкаПроект.Уровень());
			
			ВыборкаДень = ВыборкаПроект.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДень.Следующий() Цикл
				ОбластьДень.Параметры.Заполнить(ВыборкаДень);
				ТабДок.Вывести(ОбластьДень, ВыборкаДень.Уровень());
				ВыборкаДетальныеЗаписи = ВыборкаДень.Выбрать();

				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
					Если Не Сокращенные Тогда
						ОбластьДетальныхЗаписей.Параметры.Описание = ВыборкаДетальныеЗаписи.Задача.Наименование + Символы.ПС + ВыборкаДетальныеЗаписи.Задача.Описание;
						ОбластьДетальныхЗаписей.Параметры.Решение = ВыборкаДетальныеЗаписи.Задача.РезультатВыполнения;
						ОбластьДетальныхЗаписей.Параметры.Номер = ВыборкаДетальныеЗаписи.Задача.Номер;
						ОбластьДетальныхЗаписей.Параметры.КонтакноеЛицо = ВыборкаДетальныеЗаписи.Задача.КонтактноеЛицоЗаказчика;
					КонецЕсли;
					ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетальныеЗаписи.Уровень());
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		ТабДок.ЗакончитьАвтогруппировкуСтрок();
		ОбластьПодвалТаблицы.Параметры.Количество = Шапка.Количество;
		ОбластьПодвалТаблицы.Параметры.Сумма = Шапка.Сумма;
		ТабДок.Вывести(ОбластьПодвалТаблицы);
		//Вывод подписей
		ОбластьПодписи.Параметры.ОрганизацияИсполнителя = Шапка.Ссылка.Организация.НаименованиеПолное;
		ОбластьПодписи.Параметры.ОрганизацияЗаказчика = Шапка.Ссылка.Заказчик.Организация.НаименованиеПолное;
		ОбластьПодписи.Параметры.ФИОИсполнителя = ?(ПустаяСтрока(Шапка.Ссылка.Организация.ФИОРуководителя),
				"                      ",
				ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Шапка.Ссылка.Организация.ФИОРуководителя));
		ОбластьПодписи.Параметры.ФИОРуководителяЗаказчика = ?(ПустаяСтрока(Шапка.Ссылка.Заказчик.Организация.ФИОРуководителя),
				"                      ",
				ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Шапка.Ссылка.Заказчик.Организация.ФИОРуководителя));
				
		//Предварительно нужно удалить печати
		Если НЕ СПечатью Тогда
			УправлениеПечатью.УдалитьВсеОбластиФаксимиле(ОбластьПодписи);
		КонецЕсли;
		ТабДок.Вывести(ОбластьПодписи);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
		Если СПечатью Тогда
			ПараметрыПечати = Новый Структура;
			УправлениеПечатью.ДополнитьДокументПодписьюИПечатью(ТабДок, Шапка, ОбъектыПечати, ПараметрыПечати);
		КонецЕсли;
	КонецЦикла;
		
	Возврат ТабДок;
КонецФункции

// Процедура печати документа.
//
// Параметры:
//  МассивОбъектов - Массив - объекты, по которым требуется сформировать печатную форму;
//  ОбъектыПечати  - СписокЗначений - разметка табличных документов по печатаемым объектам:
//   * Значение      - ЛюбаяСсылка - печатаемый объект;
//   * Представление - Строка - имя области, соответствующее объекту.
//  ИмяМакета      - Строка - "Счет" или "Заказ".
//  ВыводитьПлатежныеРеквизиты - Булево - если Истина, выводит шапку с платежными реквизитами в счете.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьСчет(МассивОбъектов, ОбъектыПечати, СПечатью = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТрудозатратыРаботы.Исполнитель КАК Исполнитель,
	|	СУММА(ТрудозатратыРаботы.Количество) КАК Количество,
	|	ТрудозатратыРаботы.Цена КАК Цена,
	|	СУММА(ТрудозатратыРаботы.Сумма) КАК Сумма,
	|	ТрудозатратыРаботы.Проект КАК Проект,
	|	ТрудозатратыРаботы.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ИСТИНА) КАК СуммаВключаетНДС,
	|	СУММА(ТрудозатратыРаботы.Сумма * ТрудозатратыРаботы.Ссылка.Организация.СтавкаНДСОказанияУслуг / 100) КАК СуммаНДС,
	|	ТрудозатратыРаботы.Ссылка.Организация.СтавкаНДСОказанияУслуг КАК СтавкаНДС
	|ИЗ
	|	Документ.Трудозатраты.Работы КАК ТрудозатратыРаботы
	|ГДЕ
	|	ТрудозатратыРаботы.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТрудозатратыРаботы.Исполнитель,
	|	ТрудозатратыРаботы.Цена,
	|	ТрудозатратыРаботы.Проект,
	|	ТрудозатратыРаботы.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Исполнитель
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Сумма),
	|	МАКСИМУМ(СуммаВключаетНДС),
	|	СУММА(СуммаНДС)
	|ПО
	|	Ссылка,
	|	Проект";
	
	Шапка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Трудозатраты_Счет";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Трудозатраты.ПФ_MXL_Счет");
	
	Пока Шапка.Следующий() Цикл
		
		Если ТабДок.ВысотаТаблицы > 0 Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		ДанныеПечати = Новый Структура;
		
		ДанныеПечати.Вставить("ИНН", Шапка.Ссылка.Организация.ИНН);
		ДанныеПечати.Вставить("КПП", Шапка.Ссылка.Организация.КПП);
		
		ДанныеПечати.Вставить("БанкПолучателяПредставление", СокрЛП(Шапка.Ссылка.Организация.ПредставлениеБанка));
		ДанныеПечати.Вставить("НаименованиеПоставщика", СокрЛП(Шапка.Ссылка.Организация.НаименованиеПолное));
		ДанныеПечати.Вставить("БИКБанкаПолучателя", СокрЛП(Шапка.Ссылка.Организация.БИКБанка));
		ДанныеПечати.Вставить("СчетБанкаПолучателяПредставление", СокрЛП(Шапка.Ссылка.Организация.КоррСчетБанка));
		ДанныеПечати.Вставить("СчетПолучателяПредставление", СокрЛП(Шапка.Ссылка.Организация.СчетБанка));
		
		ТекстЗаголовка = ОбщегоНазначенияСУЗВызовСервера.СформироватьЗаголовокДокумента(Шапка.Ссылка, НСтр("ru = 'Счет на оплату'"));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("Поставщик", Шапка.Ссылка.Организация);
		ДанныеПечати.Вставить("ПредставлениеПоставщика", Шапка.Ссылка.Организация.ПредставлениеПолное);
		ДанныеПечати.Вставить("Покупатель", Шапка.Ссылка.Заказчик);
		ДанныеПечати.Вставить("ПредставлениеПокупателя", 
				?(ПустаяСтрока(Шапка.Ссылка.Заказчик.Организация.ПредставлениеПолное),
				Шапка.Ссылка.Заказчик.Наименование, Шапка.Ссылка.Заказчик.Организация.ПредставлениеПолное)
		);
		
		ДанныеПечати.Вставить("Всего", Шапка.Сумма);
		ДанныеПечати.Вставить("ВсегоНДС", ?(Шапка.СуммаНДС = 0, "-", Шапка.СуммаНДС));
		
		ДанныеПечати.Вставить("ИтоговаяСумма", ДанныеПечати.Всего + ?(Шапка.СуммаВключаетНДС, 0, ДанныеПечати.ВсегоНДС));
		ДанныеПечати.Вставить("СуммаПрописью", 
			ЧислоПрописью(ДанныеПечати.ИтоговаяСумма, "ДП=Ложь", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2")
		);
		
		ВыборкаПроект = Шапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ДанныеПечати.Вставить("ИтоговаяСтрока", 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Всего наименований %1, на сумму %2 руб.'"),
				Формат(ВыборкаПроект.Количество(), "ЧН=0; ЧГ=0"),
				ДанныеПечати.ИтоговаяСумма
			)
		);
		ДанныеПечати.Вставить("НДС", ?(Шапка.СуммаНДС = 0,
				"Без налога (НДС)", ?(Шапка.СуммаВключаетНДС, 
					НСтр("ru = 'В том числе НДС:'"), НСтр("ru = 'Сумма НДС:'"))
				)
		);
		
		ДанныеПечати.Вставить("ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Шапка.Ссылка.Организация.ФИОРуководителя));
		ДанныеПечати.Вставить("ФИОБухгалтера",   ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Шапка.Ссылка.Организация.ФИОБухгалтера));
		
		ДанныеПечати.Вставить("Единица", 
					?(ПустаяСтрока(Шапка.Ссылка.Заказчик.Организация.ОписаниеУслуги), 
							Шапка.Ссылка.Организация.ЕдиницаИзмеренияУслуги,
							Шапка.Ссылка.Заказчик.Организация.ЕдиницаИзмеренияУслуги
					)
		);
		
		МассивОбластейМакета = Новый Массив;
		
		МассивОбластейМакета.Добавить("ЗаголовокСчета");
		МассивОбластейМакета.Добавить("Заголовок");
		МассивОбластейМакета.Добавить("Поставщик");
		МассивОбластейМакета.Добавить("Покупатель");
		МассивОбластейМакета.Добавить("ШапкаТаблицы");
		МассивОбластейМакета.Добавить("Строка");
		МассивОбластейМакета.Добавить("Итого");
		МассивОбластейМакета.Добавить("ИтогоНДС");
		МассивОбластейМакета.Добавить("СуммаПрописью");
		Если Шапка.Ссылка.Сумма > Шапка.Ссылка.СуммаОплатыЗаказчиком И Шапка.Ссылка.СуммаОплатыЗаказчиком > 0 Тогда
			МассивОбластейМакета.Добавить("ШапкаТаблицыЭтапыОплаты");
		КонецЕсли;
		Если УправлениеПечатью.ЭтоЮрЛицо(Шапка.Ссылка.Организация) Тогда
			МассивОбластейМакета.Добавить("ПодвалСчета");
		Иначе
			МассивОбластейМакета.Добавить("ПодвалСчетаПредприниматель");
		КонецЕсли;
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			//Предварительно нужно удалить печати
			Если (ИмяОбласти = "ПодвалСчета" ИЛИ ИмяОбласти = "ПодвалСчетаПредприниматель") И НЕ СПечатью Тогда
				УправлениеПечатью.УдалитьВсеОбластиФаксимиле(ОбластьМакета);
			КонецЕсли;
			// Вывести этапы графика оплаты
			Если ИмяОбласти = "ШапкаТаблицыЭтапыОплаты" Тогда
				
				ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыОплаты");
				ТабДок.Вывести(ОбластьШапкаТаблицы);
				ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ИтогоЭтапыОплаты");
				
				ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплаты");
				
				НомерЭтапа = 1;
				Для Каждого ТекЭтап Из Шапка.Ссылка.Оплата Цикл
					
					Если ТекЭтап.Сумма >= 0 Или ТекЭтап.Дата = '00010101' Тогда
						Продолжить;
					КонецЕсли;
					
					ПараметрыСтроки = Новый Структура("НомерСтроки, ДатаПлатежа, ПроцентПлатежа, СуммаПлатежа, ТекстНДС", 
						НомерЭтапа, ТекЭтап.Дата, 
						?(Шапка.Ссылка.Сумма = 0, "-", -Окр(100 * ТекЭтап.Сумма / Шапка.Ссылка.Сумма, 2)), 
						-ТекЭтап.Сумма, "");
							
					ПараметрыСтроки.ТекстНДС = ?(Шапка.СуммаНДС = 0, 
						"Без налога (НДС)", 
						?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС:'"), НСтр("ru = 'Сумма НДС:'"))
						+ НСтр("ru='НДС("+Шапка.СтавкаНДС+") "+Формат(Шапка.СтавкаНДС / 100 * ПараметрыСтроки.СуммаПлатежа, "ЧДЦ=2")+"'")
					);
							
					ОбластьСтрокаТаблицы.Параметры.Заполнить(ПараметрыСтроки);
					
					ТабДок.Вывести(ОбластьСтрокаТаблицы);
					
					НомерЭтапа = НомерЭтапа + 1;
					
				КонецЦикла;
				ОбластьПодвалТаблицы.Параметры.ВсегоКОплате = "Итого к оплате " + (Шапка.Ссылка.Сумма - Шапка.Ссылка.СуммаОплатыЗаказчиком) + " руб.";
				ТабДок.Вывести(ОбластьПодвалТаблицы);
				
			ИначеЕсли ИмяОбласти <> "Строка" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабДок.Вывести(ОбластьМакета);
			Иначе
				Сч = 1;
				Пока ВыборкаПроект.Следующий() Цикл
					ОбластьМакета.Параметры.НомерСтроки = Сч;
					ОбластьМакета.Параметры.Товар = ПолучитьОписаниеУслуги(ВыборкаПроект.Ссылка, ВыборкаПроект.Проект);
					ОбластьМакета.Параметры.Количество = ВыборкаПроект.Количество;
					ОбластьМакета.Параметры.Цена = ?(ВыборкаПроект.Количество = 0, 0, ВыборкаПроект.Сумма / ВыборкаПроект.Количество);
					ОбластьМакета.Параметры.Сумма = ВыборкаПроект.Сумма;
					ТабДок.Вывести(ОбластьМакета);
					Сч = Сч + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
		Если СПечатью Тогда
			ПараметрыПечати = Новый Структура;
			УправлениеПечатью.ДополнитьДокументПодписьюИПечатью(ТабДок, Шапка, ОбъектыПечати, ПараметрыПечати);
		КонецЕсли;
	КонецЦикла;
		
	Возврат ТабДок;
КонецФункции

Функция ПечатьАкт(МассивОбъектов, ОбъектыПечати, СПечатью = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТрудозатратыРаботы.Исполнитель КАК Исполнитель,
	|	СУММА(ТрудозатратыРаботы.Количество) КАК Количество,
	|	ТрудозатратыРаботы.Цена КАК Цена,
	|	СУММА(ТрудозатратыРаботы.Сумма) КАК Сумма,
	|	ТрудозатратыРаботы.Проект КАК Проект,
	|	ТрудозатратыРаботы.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ИСТИНА) КАК СуммаВключаетНДС,
	|	СУММА(ТрудозатратыРаботы.Сумма * ТрудозатратыРаботы.Ссылка.Организация.СтавкаНДСОказанияУслуг / 100) КАК СуммаНДС
	|ИЗ
	|	Документ.Трудозатраты.Работы КАК ТрудозатратыРаботы
	|ГДЕ
	|	ТрудозатратыРаботы.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТрудозатратыРаботы.Исполнитель,
	|	ТрудозатратыРаботы.Цена,
	|	ТрудозатратыРаботы.Проект,
	|	ТрудозатратыРаботы.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Исполнитель
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Сумма),
	|	МАКСИМУМ(СуммаВключаетНДС),
	|	СУММА(СуммаНДС)
	|ПО
	|	Ссылка,
	|	Проект";
	
	Шапка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Трудозатраты_Акт";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Трудозатраты.ПФ_MXL_Акт");
	
	Пока Шапка.Следующий() Цикл
		
		Если ТабДок.ВысотаТаблицы > 0 Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		ДанныеПечати = Новый Структура;
		
		ТекстЗаголовка = ОбщегоНазначенияСУЗВызовСервера.СформироватьЗаголовокДокумента(Шапка.Ссылка, НСтр("ru = 'Акт'"));
		ДанныеПечати.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДанныеПечати.Вставить("Поставщик", Шапка.Ссылка.Организация);
		ДанныеПечати.Вставить("ПредставлениеПоставщика", Шапка.Ссылка.Организация.ПредставлениеПолное);
		ДанныеПечати.Вставить("Покупатель", Шапка.Ссылка.Заказчик);
		ДанныеПечати.Вставить("ПредставлениеПокупателя", 
				?(ПустаяСтрока(Шапка.Ссылка.Заказчик.Организация.ПредставлениеПолное),
				Шапка.Ссылка.Заказчик.Наименование, Шапка.Ссылка.Заказчик.Организация.ПредставлениеПолное)
		);
		ДанныеПечати.Вставить("Основание", Шапка.Ссылка.Заказчик.Организация.ДоговорОснование);
		
		ДанныеПечати.Вставить("Всего", Шапка.Сумма);
		ДанныеПечати.Вставить("ВсегоНДС", ?(Шапка.СуммаНДС = 0, "-", Шапка.СуммаНДС));
		
		ДанныеПечати.Вставить("ИтоговаяСумма", ДанныеПечати.Всего + ?(Шапка.СуммаВключаетНДС, 0, ДанныеПечати.ВсегоНДС));
		ДанныеПечати.Вставить("СуммаПрописью", 
			ЧислоПрописью(ДанныеПечати.ИтоговаяСумма, "ДП=Ложь", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2")
		);
		
		ВыборкаПроект = Шапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ДанныеПечати.Вставить("ИтоговаяСтрока", 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Всего наименований %1, на сумму %2 руб.'"),
				Формат(ВыборкаПроект.Количество(), "ЧН=0; ЧГ=0"),
				ДанныеПечати.ИтоговаяСумма
			)
		);
		ДанныеПечати.Вставить("НДС", ?(Шапка.СуммаНДС = 0,
				"Без налога (НДС)", ?(Шапка.СуммаВключаетНДС, 
					НСтр("ru = 'В том числе НДС:'"), НСтр("ru = 'Сумма НДС:'"))
				)
		);
		
		ДанныеПечати.Вставить("ФИОРуководителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Шапка.Ссылка.Организация.ФИОРуководителя));
		ДанныеПечати.Вставить("ДолжностьИНазваниеОрганизации",   Шапка.Ссылка.Организация.НаименованиеПолное);
		ДанныеПечати.Вставить("НазваниеЗаказчика", Шапка.Ссылка.Заказчик.Организация.НаименованиеПолное);
		ДанныеПечати.Вставить("ПредставительЗаказчика", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Шапка.Ссылка.Заказчик.Организация.ФИОРуководителя));
		
		ДанныеПечати.Вставить("Единица", 
					?(ПустаяСтрока(Шапка.Ссылка.Заказчик.Организация.ОписаниеУслуги), 
							Шапка.Ссылка.Организация.ЕдиницаИзмеренияУслуги,
							Шапка.Ссылка.Заказчик.Организация.ЕдиницаИзмеренияУслуги
					)
		);
		
		МассивОбластейМакета = Новый Массив;
		
		МассивОбластейМакета.Добавить("Заголовок");
		МассивОбластейМакета.Добавить("Поставщик");
		МассивОбластейМакета.Добавить("Покупатель");
		МассивОбластейМакета.Добавить("ШапкаТаблицы");
		МассивОбластейМакета.Добавить("Строка");
		МассивОбластейМакета.Добавить("Итого");
		МассивОбластейМакета.Добавить("ИтогоНДС");
		МассивОбластейМакета.Добавить("СуммаПрописью");
		МассивОбластейМакета.Добавить("Подписи");
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			//Предварительно нужно удалить печати
			Если ИмяОбласти = "Подписи" И НЕ СПечатью Тогда
				УправлениеПечатью.УдалитьВсеОбластиФаксимиле(ОбластьМакета);
			КонецЕсли;
			Если ИмяОбласти <> "Строка" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабДок.Вывести(ОбластьМакета);
			Иначе
				Сч = 1;
				Пока ВыборкаПроект.Следующий() Цикл
					ОбластьМакета.Параметры.НомерСтроки = Сч;
					ОбластьМакета.Параметры.НоменклатураНаименование = ПолучитьОписаниеУслуги(ВыборкаПроект.Ссылка, ВыборкаПроект.Проект);
					ОбластьМакета.Параметры.Количество = ВыборкаПроект.Количество;
					ОбластьМакета.Параметры.Цена = ?(ВыборкаПроект.Количество = 0, 0, ВыборкаПроект.Сумма / ВыборкаПроект.Количество);
					ОбластьМакета.Параметры.Сумма = ВыборкаПроект.Сумма;
					ТабДок.Вывести(ОбластьМакета);
					Сч = Сч + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
		Если СПечатью Тогда
			ПараметрыПечати = Новый Структура;
			УправлениеПечатью.ДополнитьДокументПодписьюИПечатью(ТабДок, Шапка, ОбъектыПечати, ПараметрыПечати);
		КонецЕсли;
	КонецЦикла;
		
	Возврат ТабДок;
КонецФункции

// Заполняет список команд отправки по электронной почте.
// 
// Параметры:
//  КомандыОтправки - ТаблицаЗначений - состав полей см. в функции ОтправкаПочтовыхСообщений.КомандыОтправки
//
Процедура ДобавитьКомандыОтправки(КомандыОтправки) Экспорт
	
	// Трудозатраты
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "Трудозатраты";
	КомандаОтправки.Представление = НСтр("ru='Трудозатраты'");
	КомандаОтправки.СписокФорм    = "ФормаСписка,ФормаДокумента";
	КомандаОтправки.Порядок       = 10; 
	
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "ТрудозатратыСПечатью";
	КомандаОтправки.Представление = НСтр("ru='Трудозатраты с печатью'");
	КомандаОтправки.СписокФорм    = "ФормаСписка,ФормаДокумента";
	КомандаОтправки.Порядок       = 30; 
	
	//Сокращенные трудозатраты
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "ТрудозатратыСокращенные";
	КомандаОтправки.Представление = НСтр("ru='Трудозатраты сокращенные'");
	КомандаОтправки.СписокФорм    = "ФормаСписка,ФормаДокумента";
	КомандаОтправки.Порядок       = 15; 
	
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "ТрудозатратыСокращенныеСПечатью";
	КомандаОтправки.Представление = НСтр("ru='Трудозатраты сокращенные с печатью'");
	КомандаОтправки.СписокФорм    = "ФормаСписка,ФормаДокумента";
	КомандаОтправки.Порядок       = 40; 
	
	// Счет
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "Счет";
	КомандаОтправки.Представление = НСтр("ru='Счет на оплату'");
	КомандаОтправки.СписокФорм    = "ФормаСписка,ФормаДокумента";
	КомандаОтправки.Порядок       = 20;
	
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "СчетСПечатью";
	КомандаОтправки.Представление = НСтр("ru='Счет на оплату с печатью'");
	КомандаОтправки.СписокФорм    = "ФормаСписка,ФормаДокумента";
	КомандаОтправки.Порядок       = 50;

	// Акт об оказании услуг
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "Акт";
	КомандаОтправки.Представление = НСтр("ru='Акт об оказании услуг'");
	КомандаОтправки.СписокФорм    = "ФормаСписка,ФормаДокумента";
	КомандаОтправки.Порядок       = 30;
	
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "АктСПечатью";
	КомандаОтправки.Представление = НСтр("ru='Акт об оказании услуг с печатью'");
	КомандаОтправки.СписокФорм    = "ФормаСписка,ФормаДокумента";
	КомандаОтправки.Порядок       = 60;

КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Подсказка      - Строка - Расширенная информация о реквизите.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** Подсказка      - Строка - Расширенная информация о вложении.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: 
//				"pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
		
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "НомерЧислом";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Представление номера задания числом.'");
	НовыйРеквизит.Представление = НСтр("ru = 'Номер числом'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Строка");
	
	НовыйРеквизит     			= Реквизиты.Добавить();
	НовыйРеквизит.Имя 			= "СуммаКОплате";
	НовыйРеквизит.Подсказка		= НСтр("ru = 'Оставшаяся по документу сумма к оплате заказчиком.'");
	НовыйРеквизит.Представление = НСтр("ru = 'Сумма к оплате'");
	НовыйРеквизит.ПроизвольныйПараметр  = Истина;
	НовыйРеквизит.Тип 			= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
	Сообщение.Вставить("Предмет", ПредметСообщения);	
	
	// Внешняя ссылка. 
	Если Сообщение.ЗначенияРеквизитов.Получить("ВнешняяСсылкаНаОбъект") <> Неопределено Тогда
		ЗначениеВнешнейСсылки = Сообщение.ЗначенияРеквизитов.Получить("ВнешняяСсылкаНаОбъект");
		ТекстЗаголовка = ?(ПустаяСтрока(ПредметСообщения.Тема), Строка(ПредметСообщения.Номер) + " от " + Строка(Формат(ПредметСообщения.Дата, "ДФ=dd.MM.yy")), ПредметСообщения.Тема);  
		Сообщение.ЗначенияРеквизитов["ВнешняяСсылкаНаОбъект"] = "<a href=" + Строка(ЗначениеВнешнейСсылки) + ">" + ТекстЗаголовка + "</a></p>";
	КонецЕсли;		
	
	// Сумма к оплате. 
	Если Сообщение.ЗначенияРеквизитов.Получить("СуммаКОплате") <> Неопределено Тогда
		Сообщение.ЗначенияРеквизитов["СуммаКОплате"] = ПредметСообщения.Сумма - ПредметСообщения.СуммаОплатыЗаказчиком;
	КонецЕсли;		
	
	Для Каждого КлючЗначение Из Сообщение.ДополнительныеПараметры Цикл		
		Если Сообщение.ЗначенияРеквизитов.Получить(КлючЗначение.Ключ) <> Неопределено Тогда
			Сообщение.ЗначенияРеквизитов[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
	//ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиSMS, ПредметСообщения, "КонтактноеЛицоЗаказчика", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электронной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
	//ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиПисьма, ПредметСообщения, "КонтактноеЛицоЗаказчика");
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьОписаниеУслуги(Трудозатраты, Проект, НаименованиеУслуги = "") Экспорт
	НаименованиеУслуги = ?(
			ПустаяСтрока(Трудозатраты.Заказчик.Организация.ОписаниеУслуги), 
			Трудозатраты.Организация.ОписаниеУслуги,
			Трудозатраты.Заказчик.Организация.ОписаниеУслуги
	);
	Возврат НаименованиеУслуги + ?(ЗначениеЗаполнено(Проект),
		", проект: " + Проект.Наименование, "");
КонецФункции

Процедура ЗапросыФормированияТрудозатрат(Запрос, ЗапросИзДокумента)
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Пользователи.Пользователь КАК Пользователь
	               |ПОМЕСТИТЬ ПользователиГруппы
	               |ИЗ
	               |	Справочник.ГруппыПользователей.Состав КАК Пользователи
	               |ГДЕ
	               |	Пользователи.Ссылка В ИЕРАРХИИ(&Отдел)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Пользователи.Ссылка
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	&Отдел В (ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ТрудозатратыРаботы.Задача КАК Задача
	               |ПОМЕСТИТЬ ИсклЗадачи
	               |ИЗ
	               |	Документ.Трудозатраты.Работы КАК ТрудозатратыРаботы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПользователиГруппы КАК ПользователиГруппы
	               |		ПО ТрудозатратыРаботы.Исполнитель = ПользователиГруппы.Пользователь
	               |ГДЕ
	               |	&УсловиеДляДокумента1
	               |	И ТрудозатратыРаботы.Ссылка.Проведен
	               |	И ТрудозатратыРаботы.Ссылка.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияТрудозатрат.Отменен)
	               |	И ТрудозатратыРаботы.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Задачи.Ссылка КАК Задача,
	               |	Задачи.Проект КАК Проект,
	               |	Задачи.Исполнитель КАК Исполнитель,
	               |	Задачи.ОценкаТрудозатрат КАК Количество,
	               |	Задачи.Заказчик КАК Заказчик
	               |ПОМЕСТИТЬ втЗадачи
	               |ИЗ
	               |	ПользователиГруппы КАК ПользователиГруппы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задачи КАК Задачи
	               |		ПО ПользователиГруппы.Пользователь = Задачи.Исполнитель
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ИсклЗадачи КАК ИсклЗадачи
	               |		ПО (Задачи.Ссылка = ИсклЗадачи.Задача)
	               |ГДЕ
	               |	&УсловиеДляДокумента2
	               |	И Задачи.ДатаСтатуса МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И НЕ Задачи.ПометкаУдаления
	               |	И Задачи.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадач.Завершена)
	               |	И ИсклЗадачи.Задача ЕСТЬ NULL
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Задачи.Исполнитель,
	               |	Задачи.ОценкаТрудозатрат,
	               |	Задачи.Ссылка,
	               |	Задачи.Проект,
	               |	Задачи.Заказчик
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЧасовыеСтавкиЗадач.Период КАК Период,
	               |	ЧасовыеСтавкиЗадач.Заказчик КАК Заказчик,
	               |	ЧасовыеСтавкиЗадач.Проект КАК Проект,
	               |	ЧасовыеСтавкиЗадач.Исполнитель КАК Исполнитель,
	               |	ЧасовыеСтавкиЗадач.Ставка КАК Ставка
	               |ПОМЕСТИТЬ втСтавки
	               |ИЗ
	               |	РегистрСведений.ЧасовыеСтавкиЗадач КАК ЧасовыеСтавкиЗадач
	               |ГДЕ
	               |	&УсловиеДляДокумента3
	               |	И ЧасовыеСтавкиЗадач.Период МЕЖДУ &НачалоПериода И &КонецПериода
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЧасовыеСтавкиЗадачСрезПоследних.Период,
	               |	ЧасовыеСтавкиЗадачСрезПоследних.Заказчик,
	               |	ЧасовыеСтавкиЗадачСрезПоследних.Проект,
	               |	ЧасовыеСтавкиЗадачСрезПоследних.Исполнитель,
	               |	ЧасовыеСтавкиЗадачСрезПоследних.Ставка
	               |ИЗ
	               |	РегистрСведений.ЧасовыеСтавкиЗадач.СрезПоследних(ДОБАВИТЬКДАТЕ(&НачалоПериода, СЕКУНДА, -1), &УсловиеДляДокумента4) КАК ЧасовыеСтавкиЗадачСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВложенныйЗапрос.Задача КАК Задача,
	               |	МАКСИМУМ(втСтавки.Ставка) КАК Ставка
	               |ПОМЕСТИТЬ втСтавкиЗадач
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		втЗадачи.Задача КАК Задача,
	               |		МАКСИМУМ(втСтавки.Период) КАК Период,
	               |		МАКСИМУМ(втСтавки.Заказчик) КАК Заказчик,
	               |		втСтавки.Проект КАК Проект,
	               |		втСтавки.Исполнитель КАК Исполнитель
	               |	ИЗ
	               |		втЗадачи КАК втЗадачи
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтавки КАК втСтавки
	               |			ПО втЗадачи.Задача.ДатаСтатуса > втСтавки.Период
	               |				И втЗадачи.Задача.Заказчик = втСтавки.Заказчик
	               |				И (ВЫБОР
	               |					КОГДА втСтавки.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ втЗадачи.Задача.Проект = втСтавки.Проект
	               |				КОНЕЦ)
	               |				И (ВЫБОР
	               |					КОГДА втСтавки.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ втЗадачи.Задача.Исполнитель = втСтавки.Исполнитель
	               |				КОНЕЦ)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		втЗадачи.Задача,
	               |		втСтавки.Проект,
	               |		втСтавки.Исполнитель) КАК ВложенныйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втСтавки КАК втСтавки
	               |		ПО ВложенныйЗапрос.Период = втСтавки.Период
	               |			И ВложенныйЗапрос.Заказчик = втСтавки.Заказчик
	               |			И ВложенныйЗапрос.Проект = втСтавки.Проект
	               |			И ВложенныйЗапрос.Исполнитель = втСтавки.Исполнитель
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.Задача
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ПользователиГруппы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ИсклЗадачи
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ втСтавки";
	
	Если ЗапросИзДокумента Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДляДокумента1", 
			"ТрудозатратыРаботы.Ссылка <> &Трудозатраты	И ТрудозатратыРаботы.Ссылка.Заказчик = &Заказчик");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДляДокумента2", "Задачи.Заказчик = &Заказчик");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДляДокумента3", "ЧасовыеСтавкиЗадач.Заказчик = &Заказчик");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДляДокумента4", "Заказчик = &Заказчик");
	Иначе
		Запрос.УстановитьПараметр("УсловиеДляДокумента1", Истина);
		Запрос.УстановитьПараметр("УсловиеДляДокумента2", Истина);
		Запрос.УстановитьПараметр("УсловиеДляДокумента3", Истина);
		Запрос.УстановитьПараметр("УсловиеДляДокумента4", Истина);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
				   
КонецПроцедуры

Функция ЗаполнитьТабличнуюЧасть(Дата, Отдел, Заказчик, Трудозатраты) Экспорт
	Запрос = новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоПериода",НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода",КонецДня(Дата));
	Запрос.УстановитьПараметр("Заказчик",Заказчик);
	Запрос.УстановитьПараметр("Отдел", Отдел);
	Запрос.УстановитьПараметр("Трудозатраты",Трудозатраты);

	ЗапросыФормированияТрудозатрат(Запрос, Истина);
	Запрос.Текст = "ВЫБРАТЬ
	               |	втЗадачи.Задача КАК Задача,
	               |	втЗадачи.Проект КАК Проект,
	               |	втЗадачи.Исполнитель КАК Исполнитель,
	               |	втЗадачи.Количество КАК Количество,
	               |	ЕСТЬNULL(втСтавкиЗадач.Ставка, 0) КАК Цена,
	               |	втЗадачи.Количество * ЕСТЬNULL(втСтавкиЗадач.Ставка, 0) КАК Сумма,
	               |	втЗадачи.Задача.ДатаСтатуса КАК ЗадачаДатаСтатуса
	               |ИЗ
	               |	втЗадачи КАК втЗадачи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втСтавкиЗадач КАК втСтавкиЗадач
	               |		ПО втЗадачи.Задача = втСтавкиЗадач.Задача
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗадачаДатаСтатуса,
	               |	Проект,
	               |	Исполнитель";	
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

//Заполнение табличной части Оплата.
//ТаблицаРабот - ТаблицаЗначений с колонками Исполнитель, Проект, Задача,  Количество
//Дата - дата документа Трудозатраты
//Организация - организация документа Трудозатраты
Функция ЗаполнитьОплату(ТаблицаРабот, Дата, Организация) Экспорт
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Трудозатраты.Задача КАК Задача,
	               |	Трудозатраты.Проект КАК Проект,
	               |	Трудозатраты.Исполнитель КАК Исполнитель,
	               |	Трудозатраты.Количество КАК Количество
	               |ПОМЕСТИТЬ Трудозатраты
	               |ИЗ
	               |	&Трудозатраты КАК Трудозатраты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЧасовыеСтавкиЗадач.Период КАК Период,
	               |	ЧасовыеСтавкиЗадач.Заказчик КАК Заказчик,
	               |	ЧасовыеСтавкиЗадач.Проект КАК Проект,
	               |	ЧасовыеСтавкиЗадач.Исполнитель КАК Исполнитель,
	               |	ЧасовыеСтавкиЗадач.Ставка КАК Ставка
	               |ПОМЕСТИТЬ втСтавки
	               |ИЗ
	               |	РегистрСведений.ЧасовыеСтавкиЗадач КАК ЧасовыеСтавкиЗадач
	               |ГДЕ
	               |	ЧасовыеСтавкиЗадач.Период МЕЖДУ &НачалоПериода И &КонецПериода
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЧасовыеСтавкиЗадачСрезПоследних.Период,
	               |	ЧасовыеСтавкиЗадачСрезПоследних.Заказчик,
	               |	ЧасовыеСтавкиЗадачСрезПоследних.Проект,
	               |	ЧасовыеСтавкиЗадачСрезПоследних.Исполнитель,
	               |	ЧасовыеСтавкиЗадачСрезПоследних.Ставка
	               |ИЗ
	               |	РегистрСведений.ЧасовыеСтавкиЗадач.СрезПоследних(&НачалоПериода, ) КАК ЧасовыеСтавкиЗадачСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВложенныйЗапрос.Задача КАК Задача,
	               |	ВложенныйЗапрос.Исполнитель КАК Исполнитель,
	               |	ЕСТЬNULL(втСтавки.Ставка, 0) КАК Ставка
	               |ПОМЕСТИТЬ втСтавкиЗадач
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Трудозатраты.Задача КАК Задача,
	               |		МАКСИМУМ(втСтавки.Период) КАК Период,
	               |		МАКСИМУМ(втСтавки.Заказчик) КАК Заказчик,
	               |		МАКСИМУМ(втСтавки.Проект) КАК Проект,
	               |		Трудозатраты.Исполнитель КАК Исполнитель
	               |	ИЗ
	               |		Трудозатраты КАК Трудозатраты
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтавки КАК втСтавки
	               |			ПО Трудозатраты.Задача.ДатаСтатуса > втСтавки.Период
	               |				И Трудозатраты.Исполнитель = втСтавки.Исполнитель
	               |				И (ВЫБОР
	               |					КОГДА втСтавки.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ Трудозатраты.Проект = втСтавки.Проект
	               |				КОНЕЦ)
	               |				И (ВЫБОР
	               |					КОГДА втСтавки.Заказчик = ЗНАЧЕНИЕ(Справочник.Заказчики.ПустаяСсылка)
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ Трудозатраты.Задача.Заказчик = втСтавки.Заказчик
	               |				КОНЕЦ)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		Трудозатраты.Задача,
	               |		Трудозатраты.Исполнитель) КАК ВложенныйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втСтавки КАК втСтавки
	               |		ПО ВложенныйЗапрос.Период = втСтавки.Период
	               |			И ВложенныйЗапрос.Заказчик = втСтавки.Заказчик
	               |			И ВложенныйЗапрос.Проект = втСтавки.Проект
	               |			И ВложенныйЗапрос.Исполнитель = втСтавки.Исполнитель
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.Задача,
	               |	ВложенныйЗапрос.Исполнитель,
	               |	ЕСТЬNULL(втСтавки.Ставка, 0)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втЗадачи.Исполнитель КАК Исполнитель,
	               |	СУММА(втЗадачи.Количество * ЕСТЬNULL(втСтавкиЗадач.Ставка, 0)) КАК Сумма,
	               |	СУММА(втЗадачи.Количество) КАК Количество,
	               |	ЕСТЬNULL(втСтавкиЗадач.Ставка, 0) КАК Ставка
	               |ИЗ
	               |	Трудозатраты КАК втЗадачи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втСтавкиЗадач КАК втСтавкиЗадач
	               |		ПО втЗадачи.Задача = втСтавкиЗадач.Задача
	               |			И втЗадачи.Исполнитель = втСтавкиЗадач.Исполнитель
	               |ГДЕ
	               |	втЗадачи.Количество * ЕСТЬNULL(втСтавкиЗадач.Ставка, 0) <> 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втЗадачи.Исполнитель,
	               |	ЕСТЬNULL(втСтавкиЗадач.Ставка, 0)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Исполнитель";	
	
	Запрос.УстановитьПараметр("НачалоПериода",НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода",КонецДня(Дата));
	Запрос.УстановитьПараметр("Трудозатраты",ТаблицаРабот);

	ТаблицаОплат = Запрос.Выполнить().Выгрузить();
	ТаблицаОплат.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(250)));
	Для Каждого СтрокаТаблицы Из ТаблицаОплат Цикл
		СтрокаТаблицы.Комментарий = "Закрыто "+СтрокаТаблицы.Количество+" часов, по ставке "+СтрокаТаблицы.Ставка+" рублей";
	КонецЦикла;
	ИтоговаяСуммаРабот = ТаблицаРабот.Итог("Сумма");
	ИтоговаяСуммаОплат = ТаблицаОплат.Итог("Сумма");
	Если ИтоговаяСуммаРабот <> ИтоговаяСуммаОплат Тогда
		НоваяСтрока = ТаблицаОплат.Добавить();
		НоваяСтрока.Сумма = ИтоговаяСуммаРабот - ИтоговаяСуммаОплат;
		НоваяСтрока.Исполнитель = Организация.Исполнитель;
		НоваяСтрока.Комментарий = "Оплата основному исполнителю";
	КонецЕсли;
	
	Если ИтоговаяСуммаРабот <> 0 Тогда
		НоваяСтрока = ТаблицаОплат.Вставить(0);
		НоваяСтрока.Сумма = -ИтоговаяСуммаРабот;
		НоваяСтрока.Комментарий = "Оплата от заказчика";
	КонецЕсли;
	
	Возврат ТаблицаОплат;
	
КонецФункции
	
//Создание трудозатрат
//Организация - СправочникСсылка.Организации, ГруппаПользователей - СправочникСсылка.ГруппыПользователей
Процедура СформироватьТрудозатраты(Дата, Организация, ГруппаПользователей, Сообщение = "") Экспорт
	
	КонецМесяца = КонецМесяца(Дата);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца);
	Запрос.УстановитьПараметр("Отдел", ГруппаПользователей);
		
	ЗапросыФормированияТрудозатрат(Запрос, Ложь);
	Запрос.Текст = "ВЫБРАТЬ
	               |	втЗадачи.Задача КАК Задача,
	               |	втЗадачи.Проект КАК Проект,
	               |	втЗадачи.Исполнитель КАК Исполнитель,
	               |	втЗадачи.Количество КАК Количество,
	               |	ЕСТЬNULL(втСтавкиЗадач.Ставка, 0) КАК Цена,
	               |	втЗадачи.Количество * ЕСТЬNULL(втСтавкиЗадач.Ставка, 0) КАК Сумма,
	               |	втЗадачи.Задача.ДатаСтатуса КАК ЗадачаДатаСтатуса,
	               |	втЗадачи.Заказчик КАК Заказчик
	               |ИЗ
	               |	втЗадачи КАК втЗадачи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втСтавкиЗадач КАК втСтавкиЗадач
	               |		ПО втЗадачи.Задача = втСтавкиЗадач.Задача
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Заказчик,
	               |	ЗадачаДатаСтатуса,
	               |	Проект,
	               |	Исполнитель
	               |ИТОГИ
	               |	СУММА(Количество),
	               |	СУММА(Сумма)
	               |ПО
	               |	Заказчик";	
	
	ТекстДокументов = "";
	ТекстОшибок = "";
	
	Автор = ПараметрыСеанса.ТекущийПользователь;
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого СтрокаЗаказчик Из Дерево.Строки Цикл
		
		Если СтрокаЗаказчик.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйДокумент = Документы.Трудозатраты.СоздатьДокумент();
		НовыйДокумент.Дата = КонецМесяца;
		НовыйДокумент.Комментарий = "Сформирован автоматически.";
		НовыйДокумент.Отдел = ГруппаПользователей;
		НовыйДокумент.Заказчик = СтрокаЗаказчик.Заказчик;
		НовыйДокумент.Организация = Организация;
		НовыйДокумент.Состояние = Перечисления.СостоянияТрудозатрат.Новый;
		НовыйДокумент.Автор = Автор;
		
		//Заполнение табличной части
		Для Каждого СтрокаДерева Из СтрокаЗаказчик.Строки цикл
			НоваяСтрока = НовыйДокумент.Работы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДерева);
		КонецЦикла;
		//Заполнение оплат
		НовыйДокумент.Оплата.Загрузить(
				Документы.Трудозатраты.ЗаполнитьОплату(
						НовыйДокумент.Работы.Выгрузить(), 
						НовыйДокумент.Дата, 
						НовыйДокумент.Организация
				)
		);
		
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			ТекстДокументов = ТекстДокументов + НовыйДокумент.Ссылка+", ";
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			ТекстОшибок = ТекстОшибок + НовыйДокумент.Ссылка+"("+ТекстОшибки+"), ";
		КонецПопытки;
		Сообщить("Создан документ "+НовыйДокумент.Ссылка);
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстДокументов) Тогда
		Сообщение = Сообщение + "Созданы и проведены документы: "+ТекстДокументов+". ";
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстОшибок) Тогда
		Сообщение = Сообщение + "Не удалось провести документы: "+ТекстОшибок+". ";
	КонецЕсли;
	
КонецПроцедуры


#КонецЕсли

